{"exit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "exit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ends the current Scilab session"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["exit", "exit(n)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the exit status"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["quit", "abort", "break", "resume"]},"quit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "quit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Decresce o nível de pausa ou termina o Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "quit"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Se não houver pause ativo, "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Então o comando "},{"type": "literal","children": [],"string": "quit"},{"type": "text","children": [],"string": " faz o Scilab terminar, mesmo que o comando seja chamado dentro de uma função."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Se houver pause ativo, "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Então o comando "},{"type": "literal","children": [],"string": "quit"},{"type": "text","children": [],"string": " aborta instruções iniciadas neste nível de pausa e termina o nível de pausa corrente."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pause", "break", "abort", "exit"]},"startup": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "startup"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arquivo de inicialização"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"startup_options": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "runs Scilab in interactive or batch mode with command line options"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "scilab <Options>"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-args arg#1 arg#2 .."},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This option allows to send some data to the Scilab session: "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "Consecutive data are separated by one or several spaces."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "An expression between double-quotes is a single data."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "To include a double-quote in a data, write "},{"type": "literal","children": [],"string": "\\\""},{"type": "text","children": [],"string": " instead of "},{"type": "literal","children": [],"string": "\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "The single quote "},{"type": "literal","children": [],"string": "'"},{"type": "text","children": [],"string": " is a regular character. It has no special meaning."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Inside the opened session, these data can be retrieved as separated strings with "},{"type": "link","children": [],"string": "sciargs()"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Example: "},{"type": "text","children": [],"string": " "},{"type": "text","children": [],"string": " "}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note here that "},{"type": "literal","children": [],"string": "scilab -nw"},{"type": "text","children": [],"string": " has been translated into "},{"type": "literal","children": [],"string": "Wscilex-cli.exe"},{"type": "text","children": [],"string": " by the "},{"type": "literal","children": [],"string": "scilab"},{"type": "text","children": [],"string": " batch file, in such a way that the \"-nw\" option is not returned by "},{"type": "literal","children": [],"string": "sciargs()"},{"type": "text","children": [],"string": " (see further below)."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-display Display"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "For use under Xwindow systems only to set a specific X server display. Default display is unix:0.0."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "-display"},{"type": "text","children": [],"string": " can be abbreviated by "},{"type": "literal","children": [],"string": "-d"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-e Instructions"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "At the end of the whole session startup, this option "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "sets the current working directory to the shell directory from which Scilab has been launched. Please see the example given here-below for the "},{"type": "literal","children": [],"string": "-f"},{"type": "text","children": [],"string": " option. Then,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "executes Scilab "},{"type": "literal","children": [],"string": "Instructions"},{"type": "text","children": [],"string": " provided in a string. Example: "}],"string": []},"string": []}],"string": []}],"string": []},{"type": "warning","children": [{"type": "literal","children": [],"string": "-e"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "-f"},{"type": "text","children": [],"string": " options can't be used together."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-f file"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "If this option is used, then at the beginning of the Scilab session, after the execution of the scilab and user startup files, and after the setting of user Preferences -- including the working directory ones --, "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the current Scilab working directory is set to the shell directory from which Scilab has been launched. For instance, "},{"type": "text","children": [],"string": " will do a "},{"type": "literal","children": [],"string": "cd(\"D:\\users\\me\\scilab\\dev\")"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the Scilab script "},{"type": "literal","children": [],"string": "file"},{"type": "text","children": [],"string": " is executed. If a relative path is used (default "},{"type": "literal","children": [],"string": ".\\"},{"type": "text","children": [],"string": ", or like "},{"type": "literal","children": [],"string": "..\\"},{"type": "text","children": [],"string": " in the sample here-above), it refers to the new Scilab working directory."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A file with .xcos extension will be opened by Xcos."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-quit"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option forces scilab to always exit after the instruction(s) passed with the "},{"type": "literal","children": [],"string": "-e"},{"type": "text","children": [],"string": " option, or the script referred to by the "},{"type": "literal","children": [],"string": "-f"},{"type": "text","children": [],"string": " option, have been executed, even in case of a runtime error. This option should always be used in batch mode. It is ignored if neither "},{"type": "literal","children": [],"string": "-e"},{"type": "text","children": [],"string": " nor "},{"type": "literal","children": [],"string": "-f"},{"type": "text","children": [],"string": " options are present."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-l lang"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "If this option is present, it sets the user language. "},{"type": "emphasis","children": [],"string": "lang"},{"type": "text","children": [],"string": " can be: "},{"type": "emphasis","children": [],"string": "ca_ES de_DE en_US es_ES fr_FR ja_JP pt_BR ru_RU zh_CN zh_TW "},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "For compatibility reasons, other possible "},{"type": "literal","children": [],"string": "lang"},{"type": "text","children": [],"string": " values are "},{"type": "literal","children": [],"string": "'fr'"},{"type": "text","children": [],"string": " for french, "},{"type": "literal","children": [],"string": "'en'"},{"type": "text","children": [],"string": " for English, or "},{"type": "literal","children": [],"string": "'pt'"},{"type": "text","children": [],"string": " for Brasilian Portuguese. The default language is English."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "On some systems, locales must be compiled to render correctly UTF-8 fonts."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-nb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"no banner\": Cancels the display of the Scilab's loading message."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-ns"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "\"No Startup files\": Cancels the execution of the main startup file "},{"type": "literal","children": [],"string": "SCI/etc/scilab.start"},{"type": "text","children": [],"string": " and of the user startup files "},{"type": "literal","children": [],"string": "SCIHOME/.scilab"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "SCIHOME/scilab.ini"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This option will disable many features in Scilab. Please use it only if you know what you are doing."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-nouserstartup"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Cancels the execution of the user startup files "},{"type": "literal","children": [],"string": "SCIHOME/.scilab"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "SCIHOME/scilab.ini"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-noatomsautoload"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Cancels the autoloading of installed ATOMS modules at startup."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-nw"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "If this option is present, Scilab is started as command line with advanced features still available (graphics, export, xcos, scinotes, help browser, ...)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "pipes are enabled for all operating systems. See the examples for further details."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The actual Scilab binary file executed when using the \"-nw\" option is "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "on Windows: "},{"type": "literal","children": [],"string": "WScilex-cli.exe"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "on Linux and MacOS: "},{"type": "literal","children": [],"string": "scilab-adv-cli"},{"type": "text","children": [],"string": " (Scilab Advanced Command Line Interpreter)."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-nwni / -nogui"},{"type": "listitem","children": [{"type": "important","children": {"type": "text","children": [],"string": "This mode prevents loading the Java Virtual Machine. It starts faster and uses less memory. But then..."},"string": []},{"type": "warning","children": {"type": "text","children": [],"string": "Scilab is started as command line interpreter without any advanced features requiring the JVM: graphics, export, xcos, scinotes, help browser, other java interfaces, the Java module,... are not available."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Anyway, pipes are enabled for all operating systems. See the examples for further details."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Dedicated executable files performing the "},{"type": "literal","children": [],"string": "-nwni"},{"type": "text","children": [],"string": " mode are provided: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "Windows: "},{"type": "literal","children": [],"string": "Scilex.exe"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Others: "},{"type": "literal","children": [],"string": "scilab-cli"},{"type": "text","children": [],"string": " (Scilab Command Line Interpreter)."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-scihome dir"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Forces SCIHOME to the "},{"type": "literal","children": [],"string": "dir"},{"type": "text","children": [],"string": " directory. If the path includes some white space, it must be specified between double-quotes (no single quotes!). if "},{"type": "literal","children": [],"string": "dir"},{"type": "text","children": [],"string": " is a relative path, "},{"type": "literal","children": [],"string": "dir"},{"type": "text","children": [],"string": " is added to the parent standard SCIHOME folder. "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "--texmacs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option is used when Scilab is used as computational interface within the "},{"type": "ulink","children": [],"string": "TeXmacs"},{"type": "text","children": [],"string": " scientific editor, using the "},{"type": "ulink","children": [],"string": "TeXmacs"},{"type": "text","children": [],"string": " ATOMS module. This one can be priorly installed in Scilab with "},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-version"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Only displays the Scilab's version in the OS terminal, without launching any Scilab session."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["startup", "sciargs", "getpid", "getenv", "getversion", "getscilabmode", "consolebox", "exit", "preferences"]},"percent": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "percent"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "caractere especial (%)"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"backslash": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "backslash"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(\\) divisão matricial direita-esquerda: exact or least square solution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "X = A \\ B"},"varlist": [],"seealso": []},"brackets": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "brackets [,;]"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Concatenation. Recipients of an assignment. Results of a function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Mh = [m11 m12 m13.. m1N] or [m11, m12, m13,.., m1N]", "Mv = [m11 ; m21 ; m31..; mN1]", "M  = [m11, m12,...; m21, m22,...;...]", "[r1, r2,...] = func(...)", "[r1, _, r3,...] = func(...)", "[r1, r2,.., rN] = (e1, e2, .., eN)", "[r1, r2,.., rk] = (e1, e2, .., ek,.., eN)", "[r1, r2,.., rN] = mylist(:)", "[r1, r2,.., rN] = S.field([i1 i2.. iN])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m11, m12,...  "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Set of objects to be concatenated (and merged: the former individual containers are removed). The following subsets of types of objects can be mixed in-between, but are mutually exclusive: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "Matrices of booleans, reals, complex numbers,  polynomials, rationals: The data type of the concatenated result is set by the rules defined below (see the "},{"type": "link","children": [],"string": "type conversions"},{"type": "text","children": [],"string": " rules)."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matrices of encoded integers of any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": ". "},{"type": "warning","children": {"type": "text","children": [],"string": "Encoded integers of different inttypes can't be concatenated together."},"string": []}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Arrays of cells."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Arrays of structures with same fields.  Fields may be in different orders from an array to other ones."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Typed lists of type "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M, Mh, Mv"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrices with the type of all "},{"type": "varname","children": [],"string": "m##"},{"type": "text","children": [],"string": " (if they all have the same data type). cells arrays (if "},{"type": "literal","children": [],"string": "mi"},{"type": "text","children": [],"string": " are so). structures arrays (if "},{"type": "literal","children": [],"string": "mi"},{"type": "text","children": [],"string": " are so)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e1, e2,..  "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Input objects (literals like "},{"type": "literal","children": [],"string": "-1.23"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"abcd\""},{"type": "text","children": [],"string": ", variables, or expressions like "},{"type": "literal","children": [],"string": "a+%pi"},{"type": "text","children": [],"string": ", etc)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mylist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a simple list"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S.field"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of Structures with a field named "},{"type": "literal","children": [],"string": "field"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i1, i2,..  "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Indices of components selected from "},{"type": "varname","children": [],"string": "S"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r1, r2,...  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Output variables"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "_"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Ignored output variable"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cat", "lstcat", "comma", "semicolon", "parentheses", "empty", "overloading"]},"colon": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colon (:)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "operador dois pontos"},"string": []},"synopsis": [],"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "j:k"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é o vetor "},{"type": "literal","children": [],"string": "[j, j+1,...,k]"},{"type": "text","children": [],"string": " (vazio se "},{"type": "literal","children": [],"string": "j>k"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "j:d:k"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é o vetor "},{"type": "literal","children": [],"string": "[j, j+d, ..., j+m*d] "}],"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A(:)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é o vetor de todos os elementos de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " considerados como uma única coluna."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A(:,j)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é a j-ésima coluna de "},{"type": "literal","children": [],"string": "A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A(j:k)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é "},{"type": "literal","children": [],"string": "[A(j),A(j+1),...,A(k)]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A(:,j:k)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é "},{"type": "literal","children": [],"string": "[A(:,j),A(:,j+1),...,A(:,k)] "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A(:)=w"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "preenche a matriz "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " com entradas de "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " (tomados coluna a coluna se "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " é uma matriz)."}],"string": []},"string": []}],"string": []}],"string": []}],"seealso": ["dollar", "extraction", "matrix", "linspace", "logspace"]},"comma": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "comma"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(,) separador de colunas, instruções e argumentos"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"comments": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "comments"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(// or /*...*/) comments"},"string": []},"synopsis": [],"varlist": [],"seealso": ["head_comments", "slash", "backslash"]},"comparison": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "comparison"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "comparação, operadores relacionais"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["a==b", "a~=b ou a<>b", "a<b", "a<=b", "a>b", "a>=b"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "qualquer tipo de variável para comparações de igualdade "},{"type": "literal","children": [],"string": "a==b"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "a~=b"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "a<>b"},{"type": "text","children": [],"string": " e restrita a arrays de pontos flutuantes reais e inteiros para comparações relacionadas à ordem "},{"type": "literal","children": [],"string": "a<b"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "a<=b"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "a>b"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "a>=b"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "qualquer tipo de variável para comparações de igualdade "},{"type": "literal","children": [],"string": "a==b"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "a~=b"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "a< > b "},{"type": "text","children": [],"string": " erestrita a arrays de ponto flutuantes reais e inteiros para comparações relacionadas à ordem "},{"type": "literal","children": [],"string": "a<b"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "a<=b"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "a>b"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "a>=b"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"dollar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dollar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "($) last index "},"string": []},"synopsis": [],"varlist": [],"seealso": ["math_rendering_features_in_graphic", "size", "length"]},"dot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(.) símbolo de ponto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["123.33", "a.*b", "a .*. b", "%pi * (%e + ..", "%i)", "cd ..", "dir .."]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "É usado para marcar pontos (vírgulas) decimais em números: 3.25 e 0.001"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": ".<op>"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "usado em conjunto com outros símbolos de operadores ( *, /, \\, ^, ' ), forma outros operadores. Operações multiplicativas elemento a elemento são obtidas utilizando-se .* , .^ , ./ , .\\ ou .' . Por exemplo, C = A ./ B é a matriz com elementos c(i,j) = a(i,j)/b(i,j). O produto de Kronecker é notado por.*. . Note que quando o ponto segue um número, é sempre parte deste 2.*x é avaliado como 2.0*x e 2 .*x (há um espaço entre 2 e .) é avaliado como (2).*x"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": ".."},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Marca de continuação. Dois ou mais pontos ao fim de uma linha (ou seguidos por um comentário) indicam que a próxima linha será uma continuação."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Linhas de continuação são manipuladas por um processador que constrói uma linha lógica longa de uma dada seqüência de linhas de continuação. Então, marcas de continuação podem ser usadas para cortar uma linha em qualquer ponto."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The following function "},{"type": "literal","children": [],"string": "foo"},{"type": "text","children": [],"string": ":"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "is equivalent to:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The logical line formed by physical line 3 and physical line 4 is built as if it was entirely written in the physical line 4 while physical line 3 would be empty. This is done this way because continuation marks can be put anywhere even inside an expression. "},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"..\" parameter"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "When functions are used in a console-oriented way, "},{"type": "literal","children": [],"string": ".."},{"type": "text","children": [],"string": " is not considered as a continuation mark but as a simple argument. The most common usage is with "},{"type": "literal","children": [],"string": "cd .."},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "dir .."},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "ls .."},{"type": "text","children": [],"string": " actually standing for "},{"type": "literal","children": [],"string": "cd(\"..\")"},{"type": "text","children": [],"string": ", etc."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"equal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "equal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(=) atribuição ou comparação, sinal de igualdade"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Atribuição:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "o sinal de igualdade ( = ) é usado para denotar a atribuição de valor(es) a variável(eis). A sintaxe pode ser :"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "a=expr"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "a"},{"type": "text","children": [],"string": " é um nome de variável e "},{"type": "literal","children": [],"string": "expr"},{"type": "text","children": [],"string": " uma expressão do Scilab cuja avaliação conduz a um único resultado."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "[a,b,...]=expr"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "a"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "b"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "..."},{"type": "text","children": [],"string": " são nomes de variáveis e "},{"type": "literal","children": [],"string": "expr"},{"type": "text","children": [],"string": " uma expressão do Scilab cuja avaliação conduz a tantos resultados quanto o número de variáveis dadas."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Comparação:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "o sinal de igualdade ( = ) também é usado em operadores de comparação:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "a==b"},{"type": "text","children": [],"string": ", denota comparação de igualdade entre os valores das expressões "},{"type": "literal","children": [],"string": " a"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "b"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "a~=b"},{"type": "text","children": [],"string": ", denota comparação de desigualdade entre os valores das expressões "},{"type": "literal","children": [],"string": "a"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": " b "},{"type": "text","children": [],"string": " :"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "a<=b"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "a>=b"},{"type": "text","children": [],"string": " denotam comparações de ordem entre os valores de "},{"type": "literal","children": [],"string": " a "},{"type": "text","children": [],"string": " e"},{"type": "literal","children": [],"string": " b"},{"type": "text","children": [],"string": ":"}],"string": []},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "comparison"},{"type": "text","children": [],"string": " para detalhes semânticos."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["less", "greater", "boolean", "isequal", "comparison"]},"getscilabkeywords": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getscilabkeywords"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna uma lista com todas as palavras-chave do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "list_keywords=getscilabkeywords()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_keywords"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma lista"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"hat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(^) exponentiation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "A^b"},"varlist": [],"seealso": []},"less": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "less"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "greater"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "(<) comparação \"menor do que\""},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "(>) comparação \"maior do que\""},"string": []}],"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<>"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "significa \"diferente\" (é o mesmo que ~= ) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "significa \"menor do que\". "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": ">"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "significa \"maior do que\". "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<="},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "significa \"maior do que\". "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": ">="},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "significa \"maior do que ou igual a\"."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"minus": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "minus"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(-) operador de subtração, mudança de sinal"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X-Y", "-Y"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalar, vetor ou matriz de números, polinômios ou razões de polinômios. Também pode ser uma lista "},{"type": "literal","children": [],"string": "syslin"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalar, vetor ou matriz de números, polinômios ou razões de polinômios. Também pode ser uma lista "},{"type": "literal","children": [],"string": "syslin"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plus", "symbols", "overloading", "oldEmptyBehaviour", "mtlb_s"]},"not": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "not"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(~) não lógico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "~A"},"varlist": [],"seealso": ["and", "or", "find"]},"parentheses": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "parentheses"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "( ) parênteses esquerdo e direito"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["(expressão)", "[...]=func(e1,e2,...)", "[x1,x2,...]=(e1,e2,...)", "x(i,j)", "v(i)", "[...]=l(i)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de qualquer tipo possível "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha ou coluna de qualquer tipo possível "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variável tipo lista "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "func"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "qualquer nome de função "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e1,e2,..."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "qualquer tipo possível de expressão"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"plus": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plus (+)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Adição numérica. Concatenação de texto (colagem)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X + Y", "str1 + str2"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X, Y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalares, vetores, matrizes ou hipermatrizes de booleanos, números, polinômios ou racionais. Eles também podem ser "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " listas."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str1, str2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois textos, vetores, matrizes, ou hipermatrizes de textos."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["minus", "symbols", "overloading", "oldEmptyBehaviour", "mtlb_a"]},"quote": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "quote"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(') transpose operator, string delimiter"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"semicolon": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "semicolon (;)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(;) fim de expressão e separador de linhas"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"slash": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "slash"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(/) divisão esquerda-direita e feedback (\"resposta\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X = A / B        // while A = X * B", "X = A ./ B       // while A = X .* B", "X = A ./. B      // while A = X .*. B", "S = G /. K", "// on-row comment", "/* block of multilines comments */"]},"varlist": [],"seealso": []},"star": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "star"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(*) operador de multiplicação"},"string": []},"synopsis": [],"varlist": [],"seealso": ["slash", "backslash", "syslin", "comments"]},"symbols": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "symbols"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "nomes dos operadores Scilab"},"string": []},"synopsis": [],"varlist": [],"seealso": ["overloading", "names", "getscilabkeywords"]},"tilde": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tilde"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(~) não lógico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "~m"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de valores booleanos "},"string": []},"string": []}],"string": []},"string": []},"seealso": "not"},"underscore": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "underscore _"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "text","children": [],"string": "ignored output argument. "},{"type": "literal","children": [],"string": "gettext()"},{"type": "text","children": [],"string": " alias"}],"string": []},"synopsis": [],"varlist": [],"seealso": ["functions", "names", "symbols", "gettext"]},"abort": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "abort"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Interrupção de avaliação"},"string": []},"synopsis": [],"varlist": [],"seealso": ["quit", "pause", "break"]},"arguments": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arguments"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "keyword to check function arguments"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Arguments block must be the expression in the function."},"string": []}],"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "argName1, ... argNameN"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Name of the arguments from function protoptype."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "All input arguments must be declared in "},{"type": "literal","children": [],"string": "arguments"},{"type": "text","children": [],"string": " block and in the same order."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "(dimension)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Expected (i, j, ...) dimensions for an input argument like "},{"type": "literal","children": [],"string": "(2, 3, 4)"},{"type": "text","children": [],"string": ". Must be a list of integer values or "},{"type": "literal","children": [],"string": ":"},{"type": "text","children": [],"string": " or input variable name."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Matrix form (4, [3 6 10]) can be used to except size of "},{"type": "literal","children": [],"string": "4 x 3"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "4 x 6"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "4 x 10"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If input argument is a scalar and expected dimensions are bigger, input argument will be expand to match the expected dimensions."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If expected dimensions is a vector (1xn or nx1) and input argument is a vector, input will be transposed to match expected form."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datatype"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Expected datatype of input arguments. Inputs must be of datatype or convertable to this type."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "datatype"},{"type": "text","children": [],"string": " can be "},{"type": "literal","children": [],"string": "double"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "(u)int(8/16/32/64)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "boolean"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "string"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "{validators}"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "List of predefined functions used to check input validity."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Each validator must be validate to accept the input."},"string": []},{"type": "para","children": {"type": "link","children": [],"string": "List of validators"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "defaultValue"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "If an input is not given by caller, variable will take this value."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "All variables with default value must be at the end of the prototype."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": "arguments_validators"},"arguments_validators": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Arguments Validators"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "text","children": [],"string": "List of predefined validators that can be used in "},{"type": "link","children": [],"string": "arguments"},{"type": "text","children": [],"string": " block."}],"string": []},"synopsis": [],"varlist": [],"seealso": "arguments"},"break": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "break"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "palavra-chave para interromper um laço (\"loop\") (significa \"interromper (neste ponto)\")"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"case": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "case"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "palavra-chave usada na estrutura select (significa \"caso...\")"},"string": []},"synopsis": [],"varlist": [],"seealso": ["select", "while", "end", "for"]},"continue": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "continue"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Palavra-chave para passar o controle para a próxima iteração de um laço (\"loop\") (significa \"continuar\")"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"do": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "do"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "palavra-chave de linguagem para laços (\"loops\") (significa \"faça...\")"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"else": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "else"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "palavra-chave usada na estrutura \"if-then-else\" (significa \"senão...\")"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"elseif": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "elseif"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "palavra-chave usada na estrutura \"if-then-else\" (significa \"senão, se...\")"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"end": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "end"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Palavra-chave end (significa \"fim\")"},"string": []},"synopsis": [],"varlist": [],"seealso": ["endfunction", "break", "continue", "dollar", "comma", "semicolon", "for", "while", "if", "select"]},"for": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "for"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "palavra-chave de linguagem para laços (\"loops\") (significa \"para...\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["for variable = expression, instruction ; .. ; instruction; end", "for variable = expression", "instruction", "..", "instruction", "end", "for variable = expression do", "instruction,", "..", "instruction", "end"]},"varlist": [],"seealso": ["while", "end", "do"]},"halt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "halt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "para execução"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["halt()", "halt('a message')"]},"varlist": [],"seealso": ["pause", "return", "exec"]},"if": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "if then else"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Execução condicional (significa \"se então senão\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["if expressão1 then", "    sentenças", "elseif expressãoi then", "    sentenças", "    ....", "else", "    sentenças", "end"]},"varlist": [],"seealso": []},"pause": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pause"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "pausa temporariamente a execução atual e permite instruções no console."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pause"},"varlist": [],"seealso": []},"resume": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "resume"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna ou pára a execução de uma função e copia algumas de suas variáveis locais"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["resume", "[x1,..,xn] = resume(a1,..,an)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "..."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["abort", "break"]},"return": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "return"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna ou pára a execução de uma função e copia algumas de suas variáveis locais"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["return", "[x1,..,xn] = return(a1,..,an)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "..."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["abort", "break"]},"select": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "select"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "select keyword"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["select variable", "case value1 then", "instructions 1", "case value2 then", "instructions 2", "...", "case valuen then", "instructions n", "case {valueC1 valueC2 valueCN}", "intructions C", "[else", "instructions]", "end"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "variable"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variable which value to be analyzed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value1, ..., valuen"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "values of "},{"type": "literal","children": [],"string": "variable"},{"type": "text","children": [],"string": " for which there are appropriate instruction blocks "},{"type": "literal","children": [],"string": "instructions 1, ..., instructions n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "valueC1, ..., valueCN"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "like "},{"type": "literal","children": [],"string": "value1, ..., valuen"},{"type": "text","children": [],"string": " but an OR is applied on each "},{"type": "literal","children": [],"string": "variable == valueCx"},{"type": "text","children": [],"string": ". It is useful to group cases with same instruction."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "instructions"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "block of valid instructions."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["if", "while", "for"]},"then": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "then"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Palavra-chave usada na estrutura \"if-then-else\" (significa \"então...\")"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"try": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "try"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "catch"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "início de um bloco try numa instrução de controle try-catch (significa \"tentar...\")"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "início de um bloco catch numa instrução de controle try-catch (significa \"prender...\")"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["try", "    statements", "catch", "    statements", "end"]},"varlist": [],"seealso": []},"while": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "while"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "palavra-chave da estrutura while (significa \"enquanto...\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["while expr ,instructions,..., end", "while expr do instructions,..., end", "while expr then instructions,..., end"]},"varlist": [],"seealso": []},"banner": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "banner"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "exibe banner do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "banner()"},"varlist": [],"seealso": []},"getdebuginfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getdebuginfo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna informações sobre o Scilab para o debug"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[dynamic_info, static_info] = getdebuginfo()"},"varlist": [],"seealso": []},"getmemory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getmemory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna as memórias livre e total do sistema"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[free, total] = getmemory()"},"varlist": [],"seealso": ["who", "recursionlimit", "host"]},"getmodules": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getmodules"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna a lista de módulos instalados no Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = getmodules()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma coluna de strings : nomes de módulos instalados no Scilab."},"string": []},"string": []}],"string": []},"string": []},"seealso": "with_module"},"getos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o nome e a versão do Sistema Operacional"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[OS, Version] = getos()"},"varlist": [],"seealso": []},"getscilabmode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getscilabmode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o modo do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "m = getscilabmode()"},"varlist": [],"seealso": ["fromc", "fromjava", "istssession", "scilab"]},"getshell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getshell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o interpretador de comando corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "getshell()"},"varlist": [],"seealso": []},"getversion": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getversion"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o nome da versão do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[version, options] = getversion()", "[COMPILER, ARCH, RELEASE_MODE, RELEASE_DATE, RELEASE_TIME] = (options(1), opt(2), options($-2), options($-1), options($))", "version_numbers = getversion('scilab')", "version_numbers = getversion('<module>')", "version = getversion('<module>','string_info')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "version"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string sobre a versão. Exemplo: \"scilab-6.1.0\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "version_numbers"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um vetor de inteiros"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "version_numbers(1): versão maior"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "version_numbers(2): versão menor"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "version_numbers(3): versão de manutençãp"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "version_numbers(4): timestamp GIT"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor de strings: "},{"type": "literal","children": [],"string": "[compiler, architecture, [tk, modelicac, ] release_mode, release_date, release_time]"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"oldEmptyBehaviour": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "oldEmptyBehaviour"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Controls the operation+ and operation- behaviour for Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "oldEmptyBehaviour(behaviour)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "behaviour"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a single string amongst "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"query\""},{"type": "text","children": [],"string": ". The behaviour mode for operation+ and operation-"}],"string": []},"string": []}],"string": []},"string": []},"seealso": []},"recursionlimit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "recursionlimit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get or set the current or maximal allowed depth of nested calls"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["currentMaxDepth = recursionlimit()", "formerMaxDepth = recursionlimit(newMaxDepth)", "currentDepth = recursionlimit(\"current\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "currentMaxDepth"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Maximal number of nested calls (= depth) currently set."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newMaxDepth"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "New maximal number of nested calls to set."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "formerMaxDepth"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Former value set, before it was changed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"current\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input keyword retrieving the current calling depth (before reaching the max one)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "currentDepth"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Current calling depth."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["where", "getmemory", "preferences"]},"sciargs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sciargs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "scilab command line arguments"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "args = sciargs()"},"varlist": [],"seealso": []},"ver": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ver"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "informação de versão sobre Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = ver()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de strings"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"with_javasci": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "with_javasci"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checa se o Scilab foi construído com a interface Java"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = with_javasci()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"with_macros_source": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "with_macros_source"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Verifica se a fonte de macros está instalada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = with_macros_source()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"with_module": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "with_module"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checa se um módulo Scilab foi instalado"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = with_module(module_name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "module_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string. Exemplo : 'core'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "getmodules"},"debug": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "debug"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "enters the Scilab debugger mode"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "debug"},"varlist": [],"seealso": []},"where": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "where"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna a árvore de chamamento de instruções corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[linenum, mac] = where()"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "linenum"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"whereami": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "whereami"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "exibe a árvore de chamamento de instruções corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "whereami()"},"varlist": [],"seealso": []},"errclear": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "errclear"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "limpeza de erros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["errclear()", "errclear(n)"]},"varlist": [],"seealso": "lasterror"},"error": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "error"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "relata um erro de tempo de execução"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["error(message)", "error(message, n)", "error(n, message)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "message"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Vetor de strings: A mensagem de erro a ser exibida. Cada componente é exibido em uma linha separada. Fornecer uma mensagem de erro traduzida com "},{"type": "literal","children": [],"string": "gettext(…)"},{"type": "text","children": [],"string": " é uma boa prática."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer> 0: identificador numérico atribuído ao erro. Padrão = 10000. Embora a mensagem seja geralmente traduzida no idioma da sessão atual, "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " permite testar o erro de maneira independente do idioma."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lasterror", "error_table", "gettext", "warning", "try", "execstr", "where"]},"error_table": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "error_table"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "list of main standard errors messages"},"string": []},"synopsis": [],"varlist": [],"seealso": ["error", "gettext", "msprintf", "printf_conversion", "warning", "lasterror"]},"lasterror": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lasterror"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna a última mensagem de erro registrada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[str, n, line, func] = lasterror()", "[str, n, line, func] = lasterror(opt)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings ou matriz vazia: a última mensagem de erro registrada"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, 0 ou o último número de erro registrado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, 0 ou o último número de linha da função registrado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "func"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o último nome da função registrado "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "booleano, se %t for registrado, a mensagem é limpa. O padrão é %t"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"warning": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "warning"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mensagens de aviso"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["warning('string')", "warning(string_matrix)", "warning('off')", "warning('on')", "warning('stop')", "mode = warning('query')"]},"varlist": [],"seealso": ["error", "gettext", "msprintf", "messagebox"]},"boolean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "boolean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objetos Scilab: variáveis booleanas e operadores '&', '|' e '~'"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "~b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é a negação elemento a elemento de "},{"type": "literal","children": [],"string": "b"},{"type": "text","children": [],"string": " (matriz)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b1&b2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é o "},{"type": "literal","children": [],"string": "and"},{"type": "text","children": [],"string": " (\"e\") lógico elemento a elemento de "},{"type": "literal","children": [],"string": "b1"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "b2"},{"type": "text","children": [],"string": " (matrizes)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b1|b2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é o "},{"type": "literal","children": [],"string": "or"},{"type": "text","children": [],"string": " (\"ou\") lógico elemento a elemento de "},{"type": "literal","children": [],"string": "b1"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "b2"},{"type": "text","children": [],"string": " (matrizes)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Variáveis booleanas podem ser usadas para se indexar vetores ou matrizes. "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Por exemplo "},{"type": "literal","children": [],"string": "a([%T,%F,%T],:)"},{"type": "text","children": [],"string": " retorna a submatriz feita das linhas "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " de "},{"type": "literal","children": [],"string": "a"},{"type": "text","children": [],"string": ". Matrizes esparsas de valores booleanos são suportadas."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["matrices", "or", "and", "not"]},"functions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "functions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "procedimentos Scilab e objetos Scilab"},"string": []},"synopsis": [],"varlist": [],"seealso": ["function", "deff", "exec", "lib", "getd", "genlib", "exists", "varargin", "varargout"]},"hypermatrices": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hypermatrices"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objeto do Scilab: matrizes n-dimensionais"},"string": []},"synopsis": [],"varlist": [],"seealso": ["zeros", "ones", "grand", "matrix"]},"lambda": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Lambda functions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scilab procedures and Scilab objects"},"string": []},"synopsis": [],"varlist": [],"seealso": ["functions", "varargin", "varargout", "ans"]},"library": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "library"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "library datatype"},"string": []},"synopsis": [],"varlist": [],"seealso": ["load", "lib", "genlib", "libraryinfo", "string", "whereis", "librarieslist"]},"matrices": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matrices"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objeto do Scilab: matrizes"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"rational": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rational"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "razão de polinômios"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"strings": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strings"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objeto Scilab, strings (cadeias de caracteres)"},"string": []},"synopsis": [],"varlist": [],"seealso": ["part", "length", "strcat"]},"type": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "type"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tipo de variável"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "i = type(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "objeto Scilab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"typename": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "typename"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "associa um nome ao tipo de variável"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[indices, onames] = typename()"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indices"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de inteiros: os códigos dos tipos de cada tipo de dado definido."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "onames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de strings: os overloading nomes associados aos tipos."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"typeof": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "typeof"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tipo do objeto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = typeof(object)", "oc = typeof(object, \"overload\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "objeto Scilab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string (may have spaces): the name of the type of "},{"type": "varname","children": [],"string": "object"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "oc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string (without spaces): the name of the overloading code for the "},{"type": "varname","children": [],"string": "object"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["type", "inttype", "overloading", "isreal", "strings", "poly", "rlist", "null", "sparse", "issparse", "syslin", "dir", "XMLObjects", "h5objects"]},"checkNamedArguments": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "checkNamedArguments"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return list of unexpected named arguments"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "names = checkNamedArguments()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of string with names of variables"},"string": []},"string": []}],"string": []},"string": []},"seealso": "who"},"clear": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clear"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cancela variáveis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["clear a b c", "clear('a', 'b', 'c')", "clear(['a' 'b' 'c'])"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "a, b, c..."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variables of any type and size, but not protected"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"clearglobal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clearglobal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cancela variáveis globais"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["clearglobal()", "clearglobal nam1 .. namn", "clearglobal('nam1', ..,'namn')"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "nam1,..., namn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nomes de variáveis válidos "},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"exists": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "exists"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica existência de variáveis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ve = exists(name)", "ve = exists(name, where)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of character strings: names of queried variables."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "where"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um caractere opcional com possíveis valores: "},{"type": "literal","children": [],"string": "'l'"},{"type": "text","children": [],"string": " (local), "},{"type": "literal","children": [],"string": "'n'"},{"type": "text","children": [],"string": " (nolocal) and "},{"type": "literal","children": [],"string": "'a'"},{"type": "text","children": [],"string": " (all). O valor padrão é "},{"type": "literal","children": [],"string": "'all'."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ve"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix with the same size as "},{"type": "varname","children": [],"string": "name"},{"type": "text","children": [],"string": " with possible values: "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " if true, "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": " if false"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"global": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "global"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "define variável global"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["global('nam1',...,'namn')", "global nam1 ... namn"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "nam1,..., namn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nomes de variáveis válidos"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"isdef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isdef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica existência de variáveis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ve = isdef(name)", "ve = isdef(name, where)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of strings: names of queried variables."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "where"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string opcional com valor padrão 'all' (todos os locais)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ve"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix with the same size as "},{"type": "varname","children": [],"string": "name"},{"type": "text","children": [],"string": " with boolean values"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["exists", "isglobal", "whereis", "type", "typeof", "clear"]},"isglobal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isglobal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checks if a local variable has a global counterpart"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = isglobal(varname)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "text: name of any single local variable. This is not the variable itself (that provides its content), but its name."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["global", "clearglobal", "who", "isdef"]},"names": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "names"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "scilab names syntax"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"predef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "predef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "proteção de variáveis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["n = predef()", "oldnew = predef(n)", "oldnew = predef('all')", "oldnew = predef('clear')", "variables_name = predef('names')"]},"varlist": [],"seealso": ["clear", "save", "ans", "startup"]},"who": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "who"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "listagem de variáveis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["who", "who()", "[names, mem] = who(mode)", "[names, mem] = who(mode, sorted)", "[names, mem] = who(sorted)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "local"},{"type": "text","children": [],"string": "/"},{"type": "literal","children": [],"string": "get"},{"type": "text","children": [],"string": ": list visible variables (not only in current function)."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "scope"},{"type": "text","children": [],"string": "/"},{"type": "literal","children": [],"string": "current"},{"type": "text","children": [],"string": ": list variables in the current scope/function."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "global"},{"type": "text","children": [],"string": ": list global variables."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sorted"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Boolean value to specify if output must be sort in alphabetical order."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String matrix with variable names."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mem"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Double matrix with variable used memory in bytes."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"who_user": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "who_user"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "listagem das variáveis do usuário"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "who_user()"},"varlist": [],"seealso": []},"whos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "whos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "listing of variables in long form"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["whos()", "whos -type typ", "whos -name nam"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "nome do tipo da variável selecionada (ver "},{"type": "literal","children": [],"string": "typeof"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nam"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "os primeiros caracteres dos nomes selecionados"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"SCI": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SCI, WSCI"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variable containing the value of the root path of Scilab."},"string": []},"synopsis": [],"varlist": [],"seealso": ["TMPDIR", "SCIHOME", "home", "pwd", "getlongpathname"]},"SCIHOME": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SCIHOME"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "contains the path to preferences, history files of your Scilab session."},"string": []},"synopsis": [],"varlist": [],"seealso": ["SCI", "TMPDIR", "scilab"]},"TMPDIR": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TMPDIR"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "temporary directory path"},"string": []},"synopsis": [],"varlist": [],"seealso": ["tempname", "home", "SCIHOME", "SCI"]},"home": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "home"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gives the user directory."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "home"},"varlist": [],"seealso": ["SCIHOME", "SCI", "TMPDIR"]},"percentchars": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%chars"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Selected sets of Unicode characters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%chars"},"varlist": [],"seealso": ["xlfont", "math_rendering_features_in_graphic", "console", "ascii"]},"percente": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%e"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Euler number."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%e"},"varlist": [],"seealso": ["log", "exp"]},"percenteps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%eps"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "epsilon (floating-point relative accuracy)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%eps"},"varlist": [],"seealso": "format"},"percentf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%f or %F"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Boolean variable for false."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%f or %F"},"varlist": [],"seealso": ["percentt", "comparison"]},"percenti": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%i, 1i, 1j"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "imaginary unit"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["%i", "1i", "1j"]},"varlist": [],"seealso": ["complex", "imult"]},"percentinf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%inf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "infinity"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%inf"},"varlist": [],"seealso": ["isinf", "signed_zero"]},"percentnan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%nan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "not-a-number"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%nan"},"varlist": [],"seealso": "isnan"},"percentpi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%pi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ratio of circle's circumference to its diameter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%pi"},"varlist": [],"seealso": "sin"},"percents": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%s"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A variable used to define polynomials."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%s"},"varlist": [],"seealso": ["poly", "coeff", "roots"]},"percentt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%t or %T"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Boolean variable for true."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%t or %T"},"varlist": [],"seealso": ["percentf", "comparison"]},"percentz": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%z"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A variable used to define polynomials."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%z"},"varlist": [],"seealso": ["poly", "coeff", "roots"]},"bvode": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "bvode"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "bvodeS"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "boundary value problems for ODE using collocation method"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Simplified call to bvode"},"string": []}],"synopsis": [{"type": "synopsis","children": [],"string": "zu = bvode(xpoints,N,m,x_low,x_up,zeta,ipar,ltol,tol,fixpnt,fsub,dfsub,gsub,dgsub,guess)"},{"type": "synopsis","children": [],"string": "zu = bvodeS(xpoints,m,N,x_low,x_up,fsub,gsub,zeta, <optional_args>)"}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zu"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a column vector of size "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": ". The solution of the ode evaluated on the mesh given by points. It contains "},{"type": "literal","children": [],"string": "z(u(x))"},{"type": "text","children": [],"string": " for each requested points."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xpoints"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an array which gives the points for which we want to observe the solution."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar with integer value, number of differential equations ("},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " <= 20)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of size "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " with integer elements. It is the vector of order of each differential equation: "},{"type": "literal","children": [],"string": "m(i)"},{"type": "text","children": [],"string": " gives the order of the "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "-th differential equation. In the following, "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": " will represent the sum of the elements of "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_low"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar: left end of interval"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_up"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar: right end of interval"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zeta"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a vector of size "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "zeta(j)"},{"type": "text","children": [],"string": " gives "},{"type": "literal","children": [],"string": "j"},{"type": "text","children": [],"string": "-th side condition point (boundary point). One must have "},{"type": "literal","children": [],"string": "x_low<=zeta(j) <=zeta(j+1)<=x_up "}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "All side condition points must be mesh points in all meshes used, see description of "},{"type": "literal","children": [],"string": "ipar(11)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "fixpnt"},{"type": "text","children": [],"string": " below."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ipar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an array with 11 integer elements:"},"string": []},{"type": "para","children": {"type": "literal","children": [],"string": "[nonlin, collpnt, subint, ntol, ndimf, ndimi, iprint, iread, iguess, rstart,nfxpnt]"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nonlin: ipar(1)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0 if the problem is linear, 1 if the problem is nonlinear"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "collpnt: ipar(2)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Gives the number of collocation points per subinterval where "},{"type": "literal","children": [],"string": "max(m(j)) <= collpnt <= 7"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "ipar(2)=0"},{"type": "text","children": [],"string": " then "},{"type": "literal","children": [],"string": "collpnt"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "max( max(m(j))+1, 5-max(m(j)) )"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "subint: ipar(3)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Gives the number of subintervals in the initial mesh. If "},{"type": "literal","children": [],"string": "ipar(3) = 0"},{"type": "text","children": [],"string": " then "},{"type": "literal","children": [],"string": "bvode"},{"type": "text","children": [],"string": " arbitrarily sets "},{"type": "literal","children": [],"string": "subint = 5"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ntol: ipar(4)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Gives the number of solution and derivative tolerances. We require "},{"type": "literal","children": [],"string": "0 < ntol <= M"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "ipar(4)"},{"type": "text","children": [],"string": " must be set to the dimension of the "},{"type": "literal","children": [],"string": "tol"},{"type": "text","children": [],"string": " argument or to "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": ". In the latter case the actual value will automatically be set to "},{"type": "literal","children": [],"string": "size(tol,'*')"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ndimf: ipar(5)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Gives the dimension of "},{"type": "literal","children": [],"string": "fspace"},{"type": "text","children": [],"string": " (a real work array). Its value provides a constraint on "},{"type": "literal","children": [],"string": "nmax"},{"type": "text","children": [],"string": " the maximum number of subintervals."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "ipar(5)"},{"type": "text","children": [],"string": " value must respect the constraint "},{"type": "literal","children": [],"string": "ipar(5)>=nmax*nsizef"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "nsizef=4 + 3*M + (5+collpnt*N)*(collpnt*N+M) + (2*M-nrec)*2*M"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "nrec"},{"type": "text","children": [],"string": " is the number of right end boundary conditions)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ndimi: ipar(6)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Gives the dimension of "},{"type": "literal","children": [],"string": "ispace"},{"type": "text","children": [],"string": " (an integer work array). Its value provides a constraint on "},{"type": "literal","children": [],"string": "nmax"},{"type": "text","children": [],"string": ", the maximum number of subintervals."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "ipar(6)"},{"type": "text","children": [],"string": " value must respect the constraint "},{"type": "literal","children": [],"string": "ipar(6)>=nmax*nsizei"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "nsizei= 3 + collpnt*N + M"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iprint: ipar(7)"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "output control, may take the following values:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for full diagnostic printout"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for selected printout"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for no printout"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iread: ipar(8)"},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "causes "},{"type": "literal","children": [],"string": "bvode"},{"type": "text","children": [],"string": " to generate a uniform initial mesh."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= xx"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Other values are not implemented yet in Scilab"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if the initial mesh is provided by the user it is defined in "},{"type": "literal","children": [],"string": "fspace"},{"type": "text","children": [],"string": " as follows: the mesh will occupy "},{"type": "literal","children": [],"string": "fspace(1), ..., fspace(n+1)"},{"type": "text","children": [],"string": ". The user needs to supply only the interior mesh points "},{"type": "literal","children": [],"string": "fspace(j) = x(j),j = 2, ..., n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2 "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if the initial mesh is supplied by the user as with "},{"type": "literal","children": [],"string": "ipar(8)=1"},{"type": "text","children": [],"string": ", and in addition no adaptive mesh selection is to be done."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iguess: ipar(9)"},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if no initial guess for the solution is provided."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if an initial guess is provided by the user through the argument "},{"type": "literal","children": [],"string": "guess"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if an initial mesh and approximate solution coefficients are provided by the user in "},{"type": "literal","children": [],"string": "fspace"},{"type": "text","children": [],"string": " (the former and new mesh are the same)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 3"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if a former mesh and approximate solution coefficients are provided by the user in "},{"type": "literal","children": [],"string": "fspace"},{"type": "text","children": [],"string": ", and the new mesh is to be taken twice as coarse; i.e. every second point from the former mesh."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 4"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if in addition to a former initial mesh and approximate solution coefficients, a new mesh is provided in "},{"type": "literal","children": [],"string": "fspace"},{"type": "text","children": [],"string": " as well (see description of output for further details on iguess = 2, 3 and 4)."}],"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ireg: ipar(10)"},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if the problem is regular"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if the first relaxation factor is equal to "},{"type": "literal","children": [],"string": "ireg"},{"type": "text","children": [],"string": ", and the nonlinear iteration does not rely on past convergence (use for an extra-sensitive nonlinear problem only)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if we are to return immediately upon (a) two successive nonconvergences, or (b) after obtaining an error estimate for the first time."},"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nfxpnt: ipar(11)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Gives the number of fixed points in the mesh other than "},{"type": "literal","children": [],"string": "x_low"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "x_up"},{"type": "text","children": [],"string": " (the dimension of "},{"type": "literal","children": [],"string": "fixpnt"},{"type": "text","children": [],"string": "). "},{"type": "literal","children": [],"string": "ipar(11)"},{"type": "text","children": [],"string": " must be set to the dimension of the "},{"type": "literal","children": [],"string": "fixpnt"},{"type": "text","children": [],"string": " argument or to "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": ". In the latter case the actual value will automatically be set to "},{"type": "literal","children": [],"string": "size(fixpnt,'*')"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ltol"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an array of dimension "},{"type": "literal","children": [],"string": "ntol=ipar(4)"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "ltol(j) = l"},{"type": "text","children": [],"string": " specifies that the "},{"type": "literal","children": [],"string": "j"},{"type": "text","children": [],"string": "-th tolerance in the "},{"type": "literal","children": [],"string": "tol"},{"type": "text","children": [],"string": " array controls the error in the "},{"type": "literal","children": [],"string": "l"},{"type": "text","children": [],"string": "-th component of "},{"type": "text","children": [],"string": " . It is also required that:"}],"string": []},{"type": "para","children": {"type": "literal","children": [],"string": "1 <= ltol(1) < ltol(2) < ... < ltol(ntol) <= M"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an array of dimension "},{"type": "literal","children": [],"string": "ntol=ipar(4)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "tol(j)"},{"type": "text","children": [],"string": " is the error tolerance on the "},{"type": "literal","children": [],"string": "ltol(j)"},{"type": "text","children": [],"string": "-th component of "},{"type": "text","children": [],"string": " . Thus, the code attempts to satisfy "},{"type": "text","children": [],"string": " on each subinterval"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where "},{"type": "text","children": [],"string": " is the approximate solution vector and "},{"type": "text","children": [],"string": " is the exact solution (unknown)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fixpnt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an array of dimension "},{"type": "literal","children": [],"string": "nfxpnt=ipar(11)"},{"type": "text","children": [],"string": ". It contains the points, other than "},{"type": "literal","children": [],"string": "x_low"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "x_up"},{"type": "text","children": [],"string": ", which are to be included in every mesh. The code requires that all side condition points other than "},{"type": "literal","children": [],"string": "x_low"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "x_up"},{"type": "text","children": [],"string": " (see description of "},{"type": "literal","children": [],"string": "zeta"},{"type": "text","children": [],"string": ") be included as fixed points in "},{"type": "literal","children": [],"string": "fixpnt"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fsub"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " used to evaluate the column vector "},{"type": "literal","children": [],"string": "f="},{"type": "text","children": [],"string": " "},{"type": "text","children": [],"string": " for any "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " such as "},{"type": "literal","children": [],"string": "x_low"},{"type": "text","children": [],"string": " <= "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " <= "},{"type": "literal","children": [],"string": "x_up"},{"type": "text","children": [],"string": " and for any "},{"type": "literal","children": [],"string": "z=z(u(x))"},{"type": "text","children": [],"string": " (see description below)."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The external must have the headings:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In Fortran the calling sequence must be:"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In C the function prototype must be:"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "And in Scilab:"},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dfsub"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " used to evaluate the Jacobian of "},{"type": "literal","children": [],"string": "f(x,z(u))"},{"type": "text","children": [],"string": " at a point "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ". Where "},{"type": "literal","children": [],"string": "z(u(x))"},{"type": "text","children": [],"string": " is defined as for "},{"type": "literal","children": [],"string": "fsub"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": " array "},{"type": "literal","children": [],"string": "df"},{"type": "text","children": [],"string": " should be filled by the partial derivatives of "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": ":"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The external must have the headings:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In Fortran the calling sequence must be:"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In C the function prototype must be:"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "And in Scilab:"},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gsub"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " used to evaluate "},{"type": "text","children": [],"string": " given z= "},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "z = zeta(i)"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "1<=i<=M."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The external must have the headings:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In Fortran the calling sequence must be:"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In C the function prototype must be:"},"string": []},"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "And in Scilab:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note that in contrast to "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " in "},{"type": "literal","children": [],"string": "fsub"},{"type": "text","children": [],"string": ", here only one value per call is returned in "},{"type": "literal","children": [],"string": "g"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dgsub"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " used to evaluate the "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "-th row of the Jacobian of "},{"type": "literal","children": [],"string": "g(x,u(x))"},{"type": "text","children": [],"string": ". Where "},{"type": "literal","children": [],"string": "z(u)"},{"type": "text","children": [],"string": " is as for "},{"type": "literal","children": [],"string": "fsub"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " as for "},{"type": "literal","children": [],"string": "gsub"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": "-vector "},{"type": "literal","children": [],"string": "dg"},{"type": "text","children": [],"string": " should be filled with the partial derivatives of "},{"type": "literal","children": [],"string": "g"},{"type": "text","children": [],"string": ", viz, for a particular call one calculates"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The external must have the headings:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In Fortran the calling sequence must be:"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In C the function prototype must be"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "And in Scilab "},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "guess"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "An "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " used to evaluate the initial approximation for "},{"type": "literal","children": [],"string": "z(u(x))"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "dmval(u(x))"},{"type": "text","children": [],"string": " the vector of the "},{"type": "literal","children": [],"string": "mj"},{"type": "text","children": [],"string": "-th derivatives of "},{"type": "literal","children": [],"string": "u(x)"},{"type": "text","children": [],"string": ". Note that this subroutine is used only if "},{"type": "literal","children": [],"string": "ipar(9) = 1"},{"type": "text","children": [],"string": ", and then all "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": " components of "},{"type": "literal","children": [],"string": "zu"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " components of "},{"type": "literal","children": [],"string": "dmval"},{"type": "text","children": [],"string": " should be computed for any "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " such as "},{"type": "literal","children": [],"string": "x_low"},{"type": "text","children": [],"string": " <= "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " <= "},{"type": "literal","children": [],"string": "x_up"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The external must have the headings:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In Fortran the calling sequence must be:"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "In C the function prototype must be"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "And in Scilab "},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<optional_args>"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "It should be either:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "any left part of the ordered sequence of values: "},{"type": "literal","children": [],"string": "guess, dfsub, dgsub, fixpnt, ndimf, ndimi, ltol, tol, ntol,nonlin, collpnt, subint, iprint, ireg, ifail "}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "or any sequence of "},{"type": "literal","children": [],"string": "arg_name=argvalue"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "arg_name"},{"type": "text","children": [],"string": " in: "},{"type": "literal","children": [],"string": "guess"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "dfsub"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "dgsub"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "fixpnt"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ndimf"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ndimi"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ltol"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "tol"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ntol"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "nonlin"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "collpnt"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "subint"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "iprint"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ireg"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ifail"}],"string": []},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where all these arguments excepted "},{"type": "literal","children": [],"string": "ifail"},{"type": "text","children": [],"string": " are described above. "},{"type": "literal","children": [],"string": "ifail"},{"type": "text","children": [],"string": " can be used to display the bvode call corresponding to the selected optional arguments. If "},{"type": "literal","children": [],"string": "guess"},{"type": "text","children": [],"string": " is given "},{"type": "literal","children": [],"string": "iguess"},{"type": "text","children": [],"string": " is set to 1"}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["link", "external", "ode", "dae"]},"dae": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dae"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Differential algebraic equations solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = dae(y0, t0, t, res)", "[y [,hd]] = dae(y0, t0, t [[,rtol], atol], res [,jac] [,hd])", "[y, rd] = dae(\"root\", y0, t0, t, res, ng, surface)", "[y, rd [,hd]] = dae(\"root\", y0, t0, t [[,rtol], atol], res [,jac], ng, surface [,hd])", "[y, rd] = dae(\"root2\", y0, t0, t, res, ng, surface)", "[y, rd [,hd]] = dae(\"root2\", y0, t0, t [[,rtol], atol], res [,jac], ng, surface [, psol, pjac] [, hd])", "y = dae(\"stiff\"|\"adams\", y0, t0, t, res, adda)", "[y [,hd]] = dae(\"stiff\"|\"adams\", y0, t0, t [[,rtol], atol], res [,jac], adda [,hd])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a column vector or a matrix. It may be equal to "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "[x0, xdot0]"},{"type": "text","children": [],"string": ". Where "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": " is the state value at initial time "},{"type": "literal","children": [],"string": "t0"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "xdot0"},{"type": "text","children": [],"string": " is the initial state derivative value or an estimation of it (see below)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real number, the initial time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar or vector. Gives instants for which you want the solution. Note that you can get solution at each dae's step point by setting "},{"type": "literal","children": [],"string": "%DAEOPTIONS(2)=1 "},{"type": "text","children": [],"string": " ."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar or a column vector of same size as "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": ", the relative error tolerance of solution. If "},{"type": "literal","children": [],"string": "rtol"},{"type": "text","children": [],"string": " is a vector the tolerances are specified for each component of the state."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar or a column vector of same size as "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": ", the absolute error tolerance of solution. If "},{"type": "literal","children": [],"string": "atol"},{"type": "text","children": [],"string": " is a vector the tolerances are specified for each component of the state."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " function, computes the value of  "},{"type": "literal","children": [],"string": "g(t, y, ydot)"},{"type": "text","children": [],"string": ". It may be a Scilab function, list or string. The syntax differs  depending on the solver used. See "},{"type": "link","children": [],"string": "residual description"},{"type": "text","children": [],"string": " section for more details."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " function, computes the Jacobian of the function  "},{"type": "literal","children": [],"string": "g(t, y, ydot)"},{"type": "text","children": [],"string": ". It may be a Scilab function, list or string. The syntax differs  depending on the solver used. See "},{"type": "link","children": [],"string": "jacobian description"},{"type": "text","children": [],"string": " section for more details."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "surface"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string), computes the value of the column vector "},{"type": "literal","children": [],"string": "surface(t,x)"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "ng"},{"type": "text","children": [],"string": " components. Each component defines a surface. Used ONLY with "},{"type": "emphasis","children": [],"string": "dasrt (\"root\") "},{"type": "text","children": [],"string": " and  "},{"type": "emphasis","children": [],"string": "daskr (\"root2\")"},{"type": "text","children": [],"string": " solvers. For more details, see "},{"type": "link","children": [],"string": "surface description"},{"type": "text","children": [],"string": " section."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "adda"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string), computes "},{"type": "literal","children": [],"string": "p = p + a"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "a = a(t,y)"},{"type": "text","children": [],"string": ".  Used ONLY with "},{"type": "emphasis","children": [],"string": "\"stiff\" and \"adams\""},{"type": "text","children": [],"string": " solver.  See "},{"type": "link","children": [],"string": "adda description"},{"type": "text","children": [],"string": " section for more details."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "psol"},{"type": "listitem","children": {"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string).  Used ONLY with "},{"type": "emphasis","children": [],"string": "\"root2\" (daskr)"},{"type": "text","children": [],"string": " solver. Solves a linear system "},{"type": "literal","children": [],"string": "P*x = b"},{"type": "text","children": [],"string": ", with P being the factored preconditioner that routine "},{"type": "literal","children": [],"string": "pjac"},{"type": "text","children": [],"string": " computed beforehand and stored in "},{"type": "literal","children": [],"string": "wp"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "iwp"},{"type": "text","children": [],"string": ". See "},{"type": "link","children": [],"string": "psol description"},{"type": "text","children": [],"string": " section for more details."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pjac"},{"type": "listitem","children": {"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string).  Used ONLY with "},{"type": "emphasis","children": [],"string": "\"root2\" (daskr)"},{"type": "text","children": [],"string": " solver. Computes the value of "},{"type": "literal","children": [],"string": "dg/dy + cj*dg/dydot"},{"type": "text","children": [],"string": " for a given value of parameter "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": " and LU-factorizes it in two arrays, real and integer. See "},{"type": "link","children": [],"string": "pjac description"},{"type": "text","children": [],"string": " section for more details."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real matrix. If "},{"type": "literal","children": [],"string": "%DAEOPTIONS(2)=1 "},{"type": "text","children": [],"string": " , each column is the vector "},{"type": "literal","children": [],"string": "[t;x(t);xdot(t)]"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is time index for which the solution has been computed. Else "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " is the vector "},{"type": "literal","children": [],"string": "[x(t);xdot(t)]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector with two entries "},{"type": "literal","children": [],"string": "[times num]"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "times"},{"type": "text","children": [],"string": " is the value of the time at which the surface is crossed, "},{"type": "literal","children": [],"string": "num"},{"type": "text","children": [],"string": " is the number of the crossed surface"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real vector, as an output it stores the "},{"type": "literal","children": [],"string": "dae"},{"type": "text","children": [],"string": " context. It can be used as an input argument to resume integration (hot restart)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["dae_root", "ode", "daeoptions", "call", "link", "external"]},"dae_root": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dae_root"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "differential algebraic equation solver with roots finding"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[y, nn, [,hd]] = dae(\"root\", y0, t0, t, f, ng, g)", "[y, nn, [,hd]] = dae(\"root\", y0, t0, t [,rtol [,atol]], f [,jac], ng, g [,hd])", "[y, nn, [,hd]] = dae(\"root2\", y0, t0, t, f, ng, g)", "[y, nn, [,hd]] = dae(\"root2\", y0, t0, t [,rtol [,atol]], f [,jac], ng, g [,psol, pjac] [,hd])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector or matrix (initial conditions)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real scalar (initial time)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector (times at which the solution is computed)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an external i.e. function or character string or list, computes the value of  "},{"type": "literal","children": [],"string": "f(t, y, ydot)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol, atol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar or a column vector of the same size as "},{"type": "literal","children": [],"string": "y0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an external i.e. function or character string or list,  computes the value of dg/dx+cj*dg/dxdot for a given value of parameter cj."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Syntax of jac: "},{"type": "literal","children": [],"string": "r = jac(t, y, ydot, cj)"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ng"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an external i.e. function or character string or list,  computes the value of the column vector g(t, x) with ng components. Each component defines a surface."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "psol"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an external i.e. function or character string or list,  solves a linear system P*x = b, with P being the factored preconditioner that routine pjac computed beforehand and stored in wp and iwp."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Syntax of psol: "},{"type": "literal","children": [],"string": "[r, ier] = psol(wp, iwp, b)"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pjac"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an external i.e. function or character string or list,  computes the value of dg/dy + cj*dg/dydot for a given value of parameter cj and LU-factorizes it in two arrays, real and integer."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Syntax of pjac: "},{"type": "literal","children": [],"string": "[wp, iwp, ires] = pjac(neq, t, y, ydot, h, cj, rewt, savr)"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector which allows to store the "},{"type": "literal","children": [],"string": "dae"},{"type": "text","children": [],"string": " context and to resume integration."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector or matrix. The solution."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector with two entries [times num], times is the value of the time  at which the surface is crossed, num is the number of the crossed surface."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "dae"},"daeoptions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "daeoptions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ajusta opções para o solucionador de equações diferenciais algébricas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "daeoptions()"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tstop"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um escalar real ou uma matriz, fornece o tempo máximo para o qual se permite a avaliação de "},{"type": "literal","children": [],"string": "g"},{"type": "text","children": [],"string": ". Uma matriz vazia significa que \"não há limites\" impostos pelo tempo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "imode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Se for 0, dae retorna apenas os valores de pontos do tempo especificado pelo usuário. Se for 1, dae retorna seus valores intermediários computados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "band"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um vetor de dois componentes que fornece a definição "},{"type": "literal","children": [],"string": "[ml,mu]"},{"type": "text","children": [],"string": " da matriz de bandas computada por "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " ; "}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "r(i - j + ml + mu + 1,j)"},{"type": "text","children": [],"string": " = "},{"type": "literal","children": [],"string": "dg(i)/dy(j)+cj*dg(i)/dydot(j)"},{"type": "text","children": [],"string": " . Se "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " retorna uma matriz completa ajustado "},{"type": "literal","children": [],"string": "band=[]"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxstep"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um escalar ou matriz vazia, o tamanho máximo do passo. Uma matriz vazia indica ausência de limitiação."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stepin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um escalar ou matriz vazia, o tamanho mínimo do passo. Uma matriz vazia indica \"não especificado\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nonneg"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um escalar, deve ser ajustado para 0 se "},{"type": "literal","children": [],"string": "asolução se conhece ser não negativa. "},{"type": "text","children": [],"string": " Ecaso contrário, deve ser ajustado para 1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isest"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A scalar, deve ser ajustado para 0 se a dada condição inicial é compatível: "},{"type": "literal","children": [],"string": "g(t0,x0,xdot0)=0"},{"type": "text","children": [],"string": ". Deve ser ajustado para 1 se "},{"type": "literal","children": [],"string": "xdot0"},{"type": "text","children": [],"string": " é apenas uma estimativa."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"daskr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "daskr"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "DAE solver with zero crossing"},"string": []},{"type": "refpurpose","children": {"type": "emphasis","children": [],"string": "This function is obsolete. Please use dae instead."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "[r, nn [, hd]] = daskr(x0, t0, t [, atol [, rtol]], res [, jac], ng, surf [, info [, psol] [, pjac]] [, hd])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "is either "},{"type": "literal","children": [],"string": "y0"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": " is estimated by "},{"type": "literal","children": [],"string": "daskr"},{"type": "text","children": [],"string": " with zero as first estimate) or the matrix "},{"type": "literal","children": [],"string": "[y0 ydot0]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "g(t, y0, ydot0)"},{"type": "text","children": [],"string": " must be equal to zero. If you only know an estimate of "},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": ", set "},{"type": "literal","children": [],"string": "info(7)=1"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real column vector of initial conditions."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ydot0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real column vector of the time derivative of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " at "},{"type": "literal","children": [],"string": "t0"},{"type": "text","children": [],"string": " (may be an estimate)."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real number, it is the initial instant."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar or vector. Gives instants for which you want the solution. Note that you can get solution at each daskr's step point by setting "},{"type": "literal","children": [],"string": "info(2)=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol, rtol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalars or column vectors of same size as "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or both of size 1. "},{"type": "literal","children": [],"string": "atol"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "rtol"},{"type": "text","children": [],"string": " give respectively absolute and relative error tolerances of solution. If vectors, the tolerances are specified for each component of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string). Computes the value of "},{"type": "literal","children": [],"string": "g(t, y, ydot)"},{"type": "text","children": [],"string": ". It may be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "[r, ires] = res(t, y, ydot)"},{"type": "text","children": [],"string": " and must return the residual "},{"type": "literal","children": [],"string": "r = g(t, y, ydot)"},{"type": "text","children": [],"string": " and error flag "},{"type": "literal","children": [],"string": "ires"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "ires = 0"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " succeeds to compute "},{"type": "literal","children": [],"string": "r"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ires = -1"},{"type": "text","children": [],"string": " if residual is locally not defined for "},{"type": "literal","children": [],"string": "(t, y, ydot)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ires = -2"},{"type": "text","children": [],"string": " if parameters are out of admissible range."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This form allows to pass parameters other than t, y, ydot to the function. It must be as follows:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " is now"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " still returns "},{"type": "literal","children": [],"string": "r = g(t, y, ydot)"},{"type": "text","children": [],"string": " as a function of "},{"type": "literal","children": [],"string": "(t, y, ydot, x1, x2, ...)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Warning: this form must not be used if there is no extra argument to pass to the function."},"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C function or a Fortran subroutine linked with Scilab."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C, the syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran, it must be:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "rpar"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "ipar"},{"type": "text","children": [],"string": " arrays must be present but cannot be used."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string). Computes the value of "},{"type": "literal","children": [],"string": "dg/dy + cj*dg/dydot"},{"type": "text","children": [],"string": " for a given value of parameter "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "r = jac(t, y, ydot, cj)"},{"type": "text","children": [],"string": " and must return "},{"type": "literal","children": [],"string": "r = dg(t, y, ydot)/dy + cj*dg(t, y, ydot)/dydot"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": " is a real scalar."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must be as follows"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " is now"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " still returns "},{"type": "literal","children": [],"string": "dg/dy + cj*dg/dydot"},{"type": "text","children": [],"string": " as a function of "},{"type": "literal","children": [],"string": "(t, y, ydot, cj, x1, x2, ...)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A character string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C function or a Fortran subroutine linked with Scilab"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C, the syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran, it must be:"},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "surf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string). Computes the value of the column vector "},{"type": "literal","children": [],"string": "surf(t, y)"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "ng"},{"type": "text","children": [],"string": " components. Each component defines a surface. It may be defined by:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "surf(t, y)"}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must be as follows"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "surf"},{"type": "text","children": [],"string": " is now"}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A character string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C function or a Fortran subroutine linked with Scilab."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C, the syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran, it must be:"},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "list which contains "},{"type": "literal","children": [],"string": "14"},{"type": "text","children": [],"string": " elements. Default value is "},{"type": "literal","children": [],"string": "list([], 0, [], [], [], 0, [], 0, [], 0, 0, [], [], 1)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(1)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar which gives the maximum time for which "},{"type": "literal","children": [],"string": "g"},{"type": "text","children": [],"string": " is allowed to be evaluated or an empty matrix "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " if no limits imposed for time."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(2)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "flag which indicates if "},{"type": "literal","children": [],"string": "daskr"},{"type": "text","children": [],"string": " returns its intermediate computed values ("},{"type": "literal","children": [],"string": "= 1"},{"type": "text","children": [],"string": ") or only the user specified time point values ("},{"type": "literal","children": [],"string": "= 0"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(3)"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " components vector which give the definition "},{"type": "literal","children": [],"string": "[ml,mu]"},{"type": "text","children": [],"string": " of band matrix computed by "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": "; "},{"type": "literal","children": [],"string": "r(i - j + ml + mu + 1,j) = \"dg(i)/dy(j)+cj*dg(i)/dydot(j)\""},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " returns a full matrix set "},{"type": "literal","children": [],"string": "info(3)=[]"},{"type": "text","children": [],"string": ". Treat as dummy if "},{"type": "literal","children": [],"string": "info(8)=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(4)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar which gives the maximum step size. Set "},{"type": "literal","children": [],"string": "info(4)=[]"},{"type": "text","children": [],"string": " if no limitation."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(5)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar which gives the initial step size. Set "},{"type": "literal","children": [],"string": "info(5)=[]"},{"type": "text","children": [],"string": " if not specified."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(6)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "set "},{"type": "literal","children": [],"string": "info(6)=1"},{"type": "text","children": [],"string": " if the solution is known to be non negative, else set "},{"type": "literal","children": [],"string": "info(6)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(7)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if ydot0 is set so that "},{"type": "literal","children": [],"string": "g(t0, y0, ydot0) = 0"},{"type": "text","children": [],"string": " then set "},{"type": "literal","children": [],"string": "info(7)=[]"},{"type": "text","children": [],"string": ". Otherwise, set "},{"type": "literal","children": [],"string": "info(7)=[+-1, ..., +-1]"},{"type": "text","children": [],"string": ", with "},{"type": "literal","children": [],"string": "info(7)(i) = 1"},{"type": "text","children": [],"string": " if y(i) is a differential variable and "},{"type": "literal","children": [],"string": "info(7)(i) = -1"},{"type": "text","children": [],"string": " if y(i) is an algebraic variable (if its derivatives do not appear explicitly in the function g(t, y, ydot))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(8)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "direct / Krylov method. Set "},{"type": "literal","children": [],"string": "info(8)=1"},{"type": "text","children": [],"string": " and provide a routine in "},{"type": "literal","children": [],"string": "psol"},{"type": "text","children": [],"string": " if you want the solver to use Krylov iterations, else (daskr's direct method) set "},{"type": "literal","children": [],"string": "info(8)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(9)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Krylov parameters. Treat as dummy argument if you have set "},{"type": "literal","children": [],"string": "info(8)=0"},{"type": "text","children": [],"string": ". Otherwise, set "},{"type": "literal","children": [],"string": "info(9)=[]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "info(9)=[maxl kmp nrmax epli]"},{"type": "text","children": [],"string": ", where:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- maxl = maximum number of iterations in the GMRes algorithm (default "},{"type": "literal","children": [],"string": "min(5, neq)"},{"type": "text","children": [],"string": "),"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "- kmp = number of vectors on which orthogonalization is done in the GMRes algorithm (default maxl),"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- nrmax = maximum number of restarts of the GMRes algorithm per nonlinear iteration (default "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": "),"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- epli = convergence test constant in GMRes algorithm (default "},{"type": "literal","children": [],"string": "0.05"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(10)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "initial conditions. Treat as dummy argument if "},{"type": "literal","children": [],"string": "info(7)=[]"},{"type": "text","children": [],"string": ". Set "},{"type": "literal","children": [],"string": "info(10)=1"},{"type": "text","children": [],"string": " if the solver should stop right after computation of the initial conditions, else set "},{"type": "literal","children": [],"string": "info(10)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(11)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "preconditioner computation and LU-factorization routine for "},{"type": "literal","children": [],"string": "psol"},{"type": "text","children": [],"string": ". Treat as dummy argument if "},{"type": "literal","children": [],"string": "info(8)=0"},{"type": "text","children": [],"string": ". Set "},{"type": "literal","children": [],"string": "info(11)=1"},{"type": "text","children": [],"string": " and provide a "},{"type": "literal","children": [],"string": "pjac"},{"type": "text","children": [],"string": " routine if the "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "psol"},{"type": "text","children": [],"string": " should use a specific routine, else set "},{"type": "literal","children": [],"string": "info(11)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(12)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if you wish to control errors locally on all the variables then set "},{"type": "literal","children": [],"string": "info(12)=[]"},{"type": "text","children": [],"string": ". Otherwise, set "},{"type": "literal","children": [],"string": "info(12)=[+-1, ..., +-1]"},{"type": "text","children": [],"string": ", with "},{"type": "literal","children": [],"string": "info(12)(i) = 1"},{"type": "text","children": [],"string": " if y(i) is a differential variable and "},{"type": "literal","children": [],"string": "info(12)(i) = -1"},{"type": "text","children": [],"string": " if y(i) is an algebraic variable (if its derivatives do not appear explicitly in the function g(t, y, ydot))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(13)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "heuristic parameters. Treat as dummy argument if "},{"type": "literal","children": [],"string": "info(7)=[]"},{"type": "text","children": [],"string": ". Otherwise, set "},{"type": "literal","children": [],"string": "info(13)=[]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "info(13)=[mxnit mxnj mxnh lsoff stptol epinit]"},{"type": "text","children": [],"string": ", where:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- mxnit = maximum number of Newton iterations per Jacobian or preconditioner evaluation (default "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "info(8)=0"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "15"},{"type": "text","children": [],"string": " otherwise),"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- mxnj = maximum number of Jacobian or preconditioner evaluations (default "},{"type": "literal","children": [],"string": "6"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "info(8)=0"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " otherwise),"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- mxnh = maximum number of values of the artificial stepsize parameter "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to be tried if info(7) ≠ [] (default "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": "),"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- lsoff = flag to turn off the linesearch algorithm (lsoff = 0 means linesearch is on, lsoff = 1 means it is turned off) (default "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": "),"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- stptol = minimum scaled step in linesearch algorithm (default "},{"type": "literal","children": [],"string": "(unit roundoff)^(2/3)"},{"type": "text","children": [],"string": "),"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "- epinit = swing factor in the Newton iteration convergence test (default "},{"type": "literal","children": [],"string": "0.01"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(14)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "verbosity. Set "},{"type": "literal","children": [],"string": "info(14)=1"},{"type": "text","children": [],"string": " for minimal extra printing, "},{"type": "literal","children": [],"string": "info(14)=2"},{"type": "text","children": [],"string": " for full printing, else set "},{"type": "literal","children": [],"string": "info(14)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "psol"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string). Solves a linear system "},{"type": "literal","children": [],"string": "P*x = b"},{"type": "text","children": [],"string": ", with P being the factored preconditioner that routine "},{"type": "literal","children": [],"string": "pjac"},{"type": "text","children": [],"string": " computed beforehand and stored in "},{"type": "literal","children": [],"string": "wp"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "iwp"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "[r, ier] = psol(wp, iwp, b)"},{"type": "text","children": [],"string": " and must return the solution of the system in "},{"type": "literal","children": [],"string": "r"},{"type": "text","children": [],"string": " and an error flag "},{"type": "literal","children": [],"string": "ier"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must be as follows:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of "},{"type": "literal","children": [],"string": "psol"},{"type": "text","children": [],"string": " is now"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "psol"},{"type": "text","children": [],"string": " still returns the solution in "},{"type": "literal","children": [],"string": "r"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A character string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C function or a Fortran subroutine linked with Scilab"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C, the syntax must be:"},"string": []},{"type": "text","children": [],"string": " where the arrays "},{"type": "literal","children": [],"string": "wp"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "iwp"},{"type": "text","children": [],"string": " contain matrix elements of LU-factored preconditioner "},{"type": "literal","children": [],"string": "P"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "wp"},{"type": "text","children": [],"string": " being the values and "},{"type": "literal","children": [],"string": "iwp"},{"type": "text","children": [],"string": " the pivots used in the factorization. "},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran, it must be:"},"string": []},{"type": "text","children": [],"string": " "}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pjac"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function, list or string). Computes the value of "},{"type": "literal","children": [],"string": "dg/dy + cj*dg/dydot"},{"type": "text","children": [],"string": " for a given value of parameter "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": " and LU-factorizes it in two arrays, real and integer."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "[wp, iwp, ires] = pjac(neq, t, y, ydot, h, cj, rewt, savr)"},{"type": "text","children": [],"string": " and in return, the arrays "},{"type": "literal","children": [],"string": "wp"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "iwp"},{"type": "text","children": [],"string": " must contain all factored preconditioner information."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must be as follows"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of "},{"type": "literal","children": [],"string": "pjac"},{"type": "text","children": [],"string": " is"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "pjac"},{"type": "text","children": [],"string": " still returns factorized "},{"type": "literal","children": [],"string": "dg/dy + cj*dg/dydot"},{"type": "text","children": [],"string": " as a function of "},{"type": "literal","children": [],"string": "(neq, t, y, ydot, h, cj, rewt, savr, x1, x2, ...)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A character string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C function or a Fortran subroutine linked with Scilab"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C, the syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran, it must be:"},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector which allows to store the "},{"type": "literal","children": [],"string": "daskr"},{"type": "text","children": [],"string": " context and to resume integration."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix. Each column is the vector "},{"type": "literal","children": [],"string": "[t; x(t); xdot(t)]"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is the time index for which the solution has been computed, "},{"type": "literal","children": [],"string": "x(t)"},{"type": "text","children": [],"string": " is the value of the computed solution, "},{"type": "literal","children": [],"string": "xdot(t)"},{"type": "text","children": [],"string": " is the derivative of the computed solution."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector with two entries "},{"type": "literal","children": [],"string": "[times num]"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "times"},{"type": "text","children": [],"string": " is the value of the time at which the surface is crossed, "},{"type": "literal","children": [],"string": "num"},{"type": "text","children": [],"string": " is the number of the crossed surface."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ode", "dasrt", "dassl", "dae", "call", "link", "external"]},"dasrt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dasrt"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "DAE solver with zero crossing"},"string": []},{"type": "refpurpose","children": {"type": "emphasis","children": [],"string": "This function is obsolete. Please use dae instead."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "[r,nn,[,hd]] = dasrt(x0,t0,t [,atol,[rtol]],res [,jac],ng, surf [,info] [,hd])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "is either "},{"type": "literal","children": [],"string": "y0"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": " is estimated by "},{"type": "literal","children": [],"string": "dassl"},{"type": "text","children": [],"string": " with zero as first estimate) or the matrix "},{"type": "literal","children": [],"string": "[y0 ydot0]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "g(t,y0,ydot0)"},{"type": "text","children": [],"string": " must be equal to zero. If you only know an estimate of "},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": " set "},{"type": "literal","children": [],"string": "info(7)=1"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real column vector of initial conditions."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ydot0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real column vector of the time derivative of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " at "},{"type": "literal","children": [],"string": "t0"},{"type": "text","children": [],"string": " (may be an estimate)."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real number, it is the initial instant."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar or vector. Gives instants for which you want the solution. Note that you can get solution at each dassl's step point by setting "},{"type": "literal","children": [],"string": "info(2)=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector with two entries "},{"type": "literal","children": [],"string": "[times num]"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "times"},{"type": "text","children": [],"string": " is the value of the time at which the surface is crossed, "},{"type": "literal","children": [],"string": "num"},{"type": "text","children": [],"string": " is the number of the crossed surface."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol, rtol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalars or column vectors of same size as "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or both of size 1. "},{"type": "literal","children": [],"string": "atol, rtol"},{"type": "text","children": [],"string": " give respectively absolute and relative error tolerances of solution. If vectors, the tolerances are specified for each component of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function or list or string). Computes the value of "},{"type": "literal","children": [],"string": "g(t,y,ydot)"},{"type": "text","children": [],"string": ". It may be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "[r,ires]=res(t,y,ydot)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " must return the residue "},{"type": "literal","children": [],"string": "r=g(t,y,ydot)"},{"type": "text","children": [],"string": " and error flag "},{"type": "literal","children": [],"string": "ires"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "ires = 0"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " succeeds to compute "},{"type": "literal","children": [],"string": "r"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "=-1"},{"type": "text","children": [],"string": " if residue is locally not defined for "},{"type": "literal","children": [],"string": "(t,y,ydot)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "=-2"},{"type": "text","children": [],"string": " if parameters are out of admissible range."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This form allows to pass parameters other than t,y,ydot to the function. It must be as follows:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " is now"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " still returns "},{"type": "literal","children": [],"string": "r=g(t,y,ydot)"},{"type": "text","children": [],"string": " as a function of "},{"type": "literal","children": [],"string": "(t,y,ydot,x1,x2,...)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "warning","children": {"type": "text","children": [],"string": "Warning: this form must not be used if there is no extra argument to pass to the function."},"string": []},"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C or Fortran subroutine linked with Scilab."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C The syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran it must be:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "rpar"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "ipar"},{"type": "text","children": [],"string": " arrays must be present but cannot be used."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function or list or string). Computes the value of "},{"type": "literal","children": [],"string": "dg/dy + cj*dg/dydot"},{"type": "text","children": [],"string": " for a given value of parameter "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "r=jac(t,y,ydot,cj)"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " function must return "},{"type": "literal","children": [],"string": "r=dg(t,y,ydot)/dy+cj*dg(t,y,ydot)/dydot"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": " is a real scalar."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must be as follows"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " is now"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " still returns "},{"type": "literal","children": [],"string": "dg/dy + cj*dg/dydot"},{"type": "text","children": [],"string": " as a function of "},{"type": "literal","children": [],"string": "(t,y,ydot,cj,x1,x2,...)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A character string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a Fortran subroutine linked with scilab"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C The syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran it must be:"},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "surf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function or list or string). Computes the value of the column vector "},{"type": "literal","children": [],"string": "surf(t,y)"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "ng"},{"type": "text","children": [],"string": " components. Each component defines a surface. It may be defined by:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "surf(t,y)"}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must be as follows"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "surf"},{"type": "text","children": [],"string": " is now"}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A character string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a Fortran subroutine linked with scilab."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C the syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran it must be:"},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "list which contains "},{"type": "literal","children": [],"string": "7"},{"type": "text","children": [],"string": " elements. Default value is "},{"type": "literal","children": [],"string": "list([],0,[],[],[],0,0)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(1)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar which gives the maximum time for which "},{"type": "literal","children": [],"string": "g"},{"type": "text","children": [],"string": " is allowed to be evaluated or an empty matrix "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " if no limits imposed for time."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(2)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "flag which indicates if "},{"type": "literal","children": [],"string": "dassl"},{"type": "text","children": [],"string": " returns its intermediate computed values ("},{"type": "literal","children": [],"string": "flag=1"},{"type": "text","children": [],"string": ") or only the user specified time point values ("},{"type": "literal","children": [],"string": "flag=0"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(3)"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " components vector which give the definition "},{"type": "literal","children": [],"string": "[ml,mu]"},{"type": "text","children": [],"string": " of band matrix computed by "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": "; "},{"type": "literal","children": [],"string": "r(i - j + ml + mu + 1,j) = \"dg(i)/dy(j)+cj*dg(i)/dydot(j)\" "},{"type": "text","children": [],"string": " .If "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " returns a full matrix set "},{"type": "literal","children": [],"string": "info(3)=[]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(4)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar which gives the maximum step size. Set "},{"type": "literal","children": [],"string": "info(4)=[]"},{"type": "text","children": [],"string": " if no limitation."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(5)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar which gives the initial step size. Set "},{"type": "literal","children": [],"string": "info(5)=[]"},{"type": "text","children": [],"string": " if not specified."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(6)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "set "},{"type": "literal","children": [],"string": "info(6)=1"},{"type": "text","children": [],"string": " if the solution is known to be non negative, else set "},{"type": "literal","children": [],"string": "info(6)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(7)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "set "},{"type": "literal","children": [],"string": "info(7)=1"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": " is just an estimation, "},{"type": "literal","children": [],"string": "info(7)=0"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "g(t0,y0,ydot0)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector which allows to store the "},{"type": "literal","children": [],"string": "dassl"},{"type": "text","children": [],"string": " context and to resume integration."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix . Each column is the vector "},{"type": "literal","children": [],"string": "[t;x(t);xdot(t)]"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is time index for which the solution had been computed."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ode", "dassl", "daskr", "dae", "call", "link", "external"]},"dassl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dassl"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "differential algebraic equation"},"string": []},{"type": "refpurpose","children": {"type": "emphasis","children": [],"string": "This function is obsolete. Please use dae instead."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "[r [,hd]] = dassl(x0,t0,t [,atol,[rtol]],res [,jac] [,info] [,hd])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "is either "},{"type": "literal","children": [],"string": "y0"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": " is estimated by "},{"type": "literal","children": [],"string": "dassl"},{"type": "text","children": [],"string": " with zero as first estimate) or the matrix "},{"type": "literal","children": [],"string": "[y0 ydot0]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "g(t,y0,ydot0)"},{"type": "text","children": [],"string": " must be equal to zero. If you only know an estimate of "},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": " set "},{"type": "literal","children": [],"string": "info(7)=1"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real column vector of initial conditions."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ydot0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real column vector of the time derivative of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " at "},{"type": "literal","children": [],"string": "t0"},{"type": "text","children": [],"string": " (may be an estimate)."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real number is the initial instant."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar or vector. Gives instants for which you want the solution. Note that you can get solution at each dassl's step point by setting "},{"type": "literal","children": [],"string": "info(2)=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol, rtol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalars or column vectors of same size as "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or both of size 1. "},{"type": "literal","children": [],"string": "atol, rtol"},{"type": "text","children": [],"string": " give respectively absolute and relative error tolerances of solution. If vectors, the tolerances are specified for each component of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function or list or string). Computes the value of "},{"type": "literal","children": [],"string": "g(t,y,ydot)"},{"type": "text","children": [],"string": ". It may be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "[r,ires]=res(t,y,ydot)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " must return the residue "},{"type": "literal","children": [],"string": "r=g(t,y,ydot)"},{"type": "text","children": [],"string": " and error flag "},{"type": "literal","children": [],"string": "ires"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "ires = 0"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " succeeds to compute "},{"type": "literal","children": [],"string": "r"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "=-1"},{"type": "text","children": [],"string": " if residue is locally not defined for "},{"type": "literal","children": [],"string": "(t,y,ydot)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "=-2"},{"type": "text","children": [],"string": " if parameters are out of admissible range."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This form allows to pass parameters other than "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ydot"},{"type": "text","children": [],"string": " to the function. It must be as follows:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " is now"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "res"},{"type": "text","children": [],"string": " still returns "},{"type": "literal","children": [],"string": "r=g(t,y,ydot)"},{"type": "text","children": [],"string": " as a function of "},{"type": "literal","children": [],"string": "(t,y,ydot,x1,x2,...)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C or Fortran subroutine linked with Scilab."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C the syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran it must be:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "rpar"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "ipar"},{"type": "text","children": [],"string": " arrays must be present but cannot be used."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "an "},{"type": "link","children": [],"string": "external"},{"type": "text","children": [],"string": " (function or list or string). Computes the value of "},{"type": "literal","children": [],"string": "dg/dy+cj*dg/dydot"},{"type": "text","children": [],"string": " for a given value of parameter "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its syntax must be "},{"type": "literal","children": [],"string": "r=jac(t,y,ydot,cj)"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " function must return "},{"type": "literal","children": [],"string": "r=dg(t,y,ydot)/dy+cj*dg(t,y,ydot)/dydot"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "cj"},{"type": "text","children": [],"string": " is a real scalar."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A list."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must be as follows"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "where the syntax of the function "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " is now"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " still returns "},{"type": "literal","children": [],"string": "dg/dy+cj*dg/dydot"},{"type": "text","children": [],"string": " as a function of "},{"type": "literal","children": [],"string": "(t,y,ydot,cj,x1,x2,...)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A character string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "It must refer to the name of a C or Fortran subroutine linked with Scilab."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In C the syntax must be:"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In Fortran it must be:"},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "optional list which contains "},{"type": "literal","children": [],"string": "7"},{"type": "text","children": [],"string": " elements. Default value is "},{"type": "literal","children": [],"string": "list([],0,[],[],[],0,0)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(1)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar which gives the maximum time for which "},{"type": "literal","children": [],"string": "g"},{"type": "text","children": [],"string": " is allowed to be evaluated or an empty matrix "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " if no limits imposed for time."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(2)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a flag which indicates if "},{"type": "literal","children": [],"string": "dassl"},{"type": "text","children": [],"string": " returns its intermediate computed values ("},{"type": "literal","children": [],"string": "flag=1"},{"type": "text","children": [],"string": ") or only the user specified time point values ("},{"type": "literal","children": [],"string": "flag=0"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(3)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " components vector which give the definition "},{"type": "literal","children": [],"string": "[ml,mu]"},{"type": "text","children": [],"string": " of band matrix computed by "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": "; "},{"type": "literal","children": [],"string": "r(i - j + ml + mu + 1,j) = \"dg(i)/dy(j)+cj*dg(i)/dydot(j)\" "},{"type": "text","children": [],"string": " .If "},{"type": "literal","children": [],"string": "jac"},{"type": "text","children": [],"string": " returns a full matrix set "},{"type": "literal","children": [],"string": "info(3)=[]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(4)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar which gives the maximum step size. Set "},{"type": "literal","children": [],"string": "info(4)=[]"},{"type": "text","children": [],"string": " if no limitation."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(5)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar which gives the initial step size. Set "},{"type": "literal","children": [],"string": "info(5)=[]"},{"type": "text","children": [],"string": " if not specified."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(6)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "set "},{"type": "literal","children": [],"string": "info(6)=1"},{"type": "text","children": [],"string": " if the solution is known to be non negative, else set "},{"type": "literal","children": [],"string": "info(6)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info(7)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "set "},{"type": "literal","children": [],"string": "info(7)=1"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "ydot0"},{"type": "text","children": [],"string": " is just an estimation, "},{"type": "literal","children": [],"string": "info(7)=0"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "g(t0,y0,ydot0)=0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real vector which allows to store the "},{"type": "literal","children": [],"string": "dassl"},{"type": "text","children": [],"string": " context and to resume integration."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real matrix. Each column is the vector "},{"type": "literal","children": [],"string": "[t;x(t);xdot(t)]"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is time index for which the solution had been computed."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ode", "dasrt", "daskr", "dae", "call", "link", "external"]},"diff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "diff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "diferença e derivada discreta"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = diff(x)", "y = diff(x, n)", "y = diff(x, n, dim)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz (de reais, complexos, esparso(a) ou de polinômios)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, ordem da diferenciação"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro ou cadeia de caracteres com valores \"r\",\"c\" e \"*\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar ou vetor "},"string": []},"string": []}],"string": []}],"string": []},"seealso": "numderivative"},"impl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "impl"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "equações diferenciais algébricas"},"string": []},{"type": "refpurpose","children": {"type": "emphasis","children": [],"string": "This function is obsolete. Please use dae instead."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "y = impl([type],y0,ydot0,t0,t [,atol, [rtol]],res,adda [,jac])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0,ydot0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais ou matriz (condições iniciais)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (tempo inicial)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais (tempos nos quais a solução é computada)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res,adda"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "funções externas (função, strting ou lista)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'adams'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'stiff'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol,rtol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalar real ou vetor de reais com as mesmas dimensões que "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa (função, string ou lista)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["dae", "ode", "external"]},"int2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "int2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integral definida 2d por quadratura e cubatura"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[I, err] = int2d(X, Y, f)", "[I, err] = int2d(X, Y, f, params)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um array 3 por N contendo as abscissas dos vertices dos N triângulos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um array 3 por N contendo as ordenadas dos vertices dos N triângulos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "função externa (função, string ou lista) definindo o integrando "},{"type": "literal","children": [],"string": "f(u,v)"},{"type": "text","children": [],"string": ";"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "params"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vetor de reais "},{"type": "literal","children": [],"string": "[tol, iclose, maxtri, mevals, iflag] "},{"type": "text","children": [],"string": " .O valor padrão é "},{"type": "literal","children": [],"string": "[1.d-10, 1, 50, 4000, 1] "},{"type": "text","children": [],"string": " ."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o limite desejado do erro. Se "},{"type": "literal","children": [],"string": "iflag=0"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "tol"},{"type": "text","children": [],"string": " é interpretado como um limite de erro relativo; se "},{"type": "literal","children": [],"string": "iflag="},{"type": "text","children": [],"string": "1, o limite é de erro absoluto."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iclose"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um inteiro que determina a seleção dos métodos LQM0 ou LQM. Se "},{"type": "literal","children": [],"string": "iclose=1"},{"type": "text","children": [],"string": " , então LQM1 é utilizado. Qualquer outro valor de "},{"type": "literal","children": [],"string": "iclose"},{"type": "text","children": [],"string": " faz com que LQM0 seja usado. LQM0 utiliza valores da função apenas em pontos interiores ao triângulo. LQM1 geralmente é mais preciso que LQM0 mas envolve a avaliação do integrando em mais pontos, incluindo em alguns pontos da fronteira do triângulo. Geralmente é melhor utilizar LQM1 a não ser que o integrando possuia singularidades nas bordas do triângulo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxtri"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o número máximo de triângulos na triangularização final da região"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mevals"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o número máximo de avaliações da função permitido. Este número terá efeito na limitação da computação se for menor que 94*"},{"type": "literal","children": [],"string": "maxtri"},{"type": "text","children": [],"string": " quando LQM1 é especificado ou 56*"},{"type": "literal","children": [],"string": "maxtri"},{"type": "text","children": [],"string": " quando LQM0 é especificado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iflag"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "I"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o valor da integral"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o erro estimado"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mesh2d", "int3d", "intg", "intl", "intc"]},"int3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "int3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integral definida 3d pelo método da quadratura e cubatura"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[result, err] = int3d(X, Y, Z, f)", "[result, err] = int3d(X, Y, Z, f, nf)", "[result, err] = int3d(X, Y, Z, f, nf, params)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um array 4 por "},{"type": "literal","children": [],"string": "NUMTET"},{"type": "text","children": [],"string": " contendo as abscissas dos vértices dos "},{"type": "literal","children": [],"string": "NUMTET"},{"type": "text","children": [],"string": " tetraedros."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um array 4 por "},{"type": "literal","children": [],"string": "NUMTET"},{"type": "text","children": [],"string": " contendo as ordenadas dos vértices dos "},{"type": "literal","children": [],"string": "NUMTET"},{"type": "text","children": [],"string": " tetraedros."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um array 4 por "},{"type": "literal","children": [],"string": "NUMTET"},{"type": "text","children": [],"string": " contendo as terceiras coordenadas dos vértices dos "},{"type": "literal","children": [],"string": "NUMTET"},{"type": "text","children": [],"string": " tetraedros."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "função externa (function, string ou lista) definindo o integrando "},{"type": "literal","children": [],"string": "f(xyz,nf)"},{"type": "text","children": [],"string": ", onde "},{"type": "literal","children": [],"string": "xyz"},{"type": "text","children": [],"string": " é o vetor das coordenadas de um ponto e nf os números das funções"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o número da função a ser integrada (o padrão é 1)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "params"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vetor de reais "},{"type": "literal","children": [],"string": "[minpts, maxpts, epsabs, epsrel] "},{"type": "text","children": [],"string": ". O valor padrão é "},{"type": "literal","children": [],"string": "[0, 1000, 0.0, 1.d-5] "},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsabs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "limite do erro absoluto desejado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsrel"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "limite do erro relativo desejado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "minpts"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número mínimo de avaliações da função"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxpts"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número máximo de avaliações da função. O número de avaliações da função sobre cada subregião é 43"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o valor da integral, ou vetor de valores da integral."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "estimativas do erro absoluto"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["intc", "intl", "int2d"]},"intc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "intc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integral de Cauchy"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[y, err] = intc(a, b, f)", "[y, err] = intc(a, b, f, abserr)", "[y, err] = intc(a, b, f, abserr, relerr)", "\t\t"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a,b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois números complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "abserr, relerr"},{"type": "listitem","children": [{"type": "text","children": [],"string": "real scalars: absolute and relative errors. Default values: "},{"type": "literal","children": [],"string": "1.d-13"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "1d-8"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": [{"type": "text","children": [],"string": "real number: estimated absolute error on the result. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["intg", "intl"]},"integrate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "integrate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integração pela quadratura"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = integrate(expr, v, x0, x1)", "y = integrate(expr, v, x0, x1, atol)", "y = integrate(expr, v, x0, x1, atol, rtol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expr"},{"type": "listitem","children": [{"type": "text","children": [],"string": "string definindo uma expressão Scilab. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": [{"type": "text","children": [],"string": "string : variável da integração. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": [{"type": "text","children": [],"string": "número real : limite inferior de integração. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vetor de números reais : limites superiores de integração. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol"},{"type": "listitem","children": [{"type": "text","children": [],"string": "número real : erro absoluto. Valor padrão: 1e-13. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol"},{"type": "listitem","children": [{"type": "text","children": [],"string": "número real : erro relativo. Valor padrão: 1e-8. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vetor de números reais : o valor da integral para cada "},{"type": "literal","children": [],"string": "x1(i)"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"intg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "intg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integral definida"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[v, err] = intg(a, b, f)", "[v, err] = intg(a, b, f, atol)", "[v, err] = intg(a, b, f, atol, rtol)", "[v, err, ierr] = intg(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a, b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Números reais finitos: limites da integral. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": [{"type": "text","children": [],"string": "função externa (função, lista ou string) "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Número real: erro absoluto requerido no resultado. Valor padrão: 1.d-13. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Número real: erro relativo requerido no resultado. Valor padrão: 1.d-8. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": [{"type": "text","children": [],"string": "erro absoluto estimado no resultado "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ierr"},{"type": "listitem","children": [{"type": "text","children": [],"string": "error flag number (= 0 if no error occurred). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["intc", "intl", "inttrap", "intsplin", "ode"]},"intl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "intl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integral de Cauchy ao longo de um arco circular"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = intl(a, b, z0, r, f)", "y = intl(a, b, z0, r, f, abserr)", "y = intl(a, b, z0, r, f, abserr, relerr)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z0"},{"type": "listitem","children": [{"type": "text","children": [],"string": "número complexo"},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a, b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "dois números reais"},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": [{"type": "text","children": [],"string": "número real positivo"},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Identificador da função a integrar (tipos 13 ou 130)."},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "abserr, relerr"},{"type": "listitem","children": [{"type": "text","children": [],"string": "números reais: tolerâncias numéricas absolutas e relativas. Os valores padrão são "},{"type": "literal","children": [],"string": "1.d-13"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "1d-8"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["intc", "integrate"]},"intsplin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "intsplin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integração de dados experimentais por interpolação por spline"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["v = intsplin(y)", "v = intsplin(x, y)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de dados de coordenadas "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " crescentes. O valor padrão é "},{"type": "literal","children": [],"string": "1:size(y,'*')"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de dados de coordenadas "},{"type": "literal","children": [],"string": "y"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valor da integral"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["intg", "integrate", "inttrap", "splin"]},"inttrap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "inttrap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "integração de dados experimentais por interpolação trapezoidal"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["v = inttrap(s)", "v = inttrap(x, s)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de dados de coordenadas x crescentes. O valor padrão é "},{"type": "literal","children": [],"string": "1:size(s,'*')"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de dados de coordenadas y "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valor da integral "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["intg", "intc", "intl", "integrate", "intsplin", "splin"]},"numderivative": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "numderivative"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "approximate derivatives of a function (Jacobian or Hessian)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["J = numderivative(f, x)", "J = numderivative(f, x, h)", "J = numderivative(f, x, h, order)", "J = numderivative(f, x, h, order, H_form)", "J = numderivative(f, x, h, order, H_form, Q)", "[J, H] = numderivative(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a function or a list, the function to differentiate."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a n-by-1 or 1-by-n vector of doubles, real, the point where to compute the derivatives."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-1 or n-by-1 vector of doubles, the step used in the finite difference approximations. If "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " is not provided, then the default step is computed depending on "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "order"},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " is a 1-by-1 matrix, it is expanded to the same size as "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, integer, positive, the order of the finite difference formula (default "},{"type": "literal","children": [],"string": "order=2"},{"type": "text","children": [],"string": "). The available values of "},{"type": "literal","children": [],"string": "order"},{"type": "text","children": [],"string": " are 1, 2 or 4."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H_form"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a string, the form in which the Hessian will be returned (default "},{"type": "literal","children": [],"string": "H_form=\"default\""},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The available values are \"default\", \"blockmat\" or \"hypermat\". See the section \"The shape of the Hessian\" below for details on this option."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real matrix of doubles, modifies the directions of differentiation (default is "},{"type": "literal","children": [],"string": "Q=eye(n,n)"},{"type": "text","children": [],"string": "). The matrix "},{"type": "literal","children": [],"string": "Q"},{"type": "text","children": [],"string": " is expected to be orthogonal. Q provides the possibility to remove the arbitrariness of using the canonical basis to approximate the derivatives of a function."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "J"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a m-by-n matrix of doubles, the approximated Jacobian. The row "},{"type": "literal","children": [],"string": "J(k, :)"},{"type": "text","children": [],"string": " approximates the gradient of "},{"type": "literal","children": [],"string": "fk"},{"type": "text","children": [],"string": ", for "},{"type": "literal","children": [],"string": "k = 1, 2, ..., m"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix of doubles, the approximated Hessian. The elements of "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " approximate the second-order partial derivatives of "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"ode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solucionador de equações diferenciais ordinárias"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = ode(y0,t0,t,f)", "[y,w,iw] = ode([type],y0,t0,t [,rtol [,atol]],f [,jac] [,w,iw])", "[y,rd,w,iw] = ode(\"root\",y0,t0,t [,rtol [,atol]],f [,jac],ng,g [,w,iw])", "y = ode(\"discrete\",y0,k0,kvect,f)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais (condições iniciais)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (tempo inicial)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais (tempos nos quais a solução é computada)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa (função, lista ou string)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um dos strings seguintes: "},{"type": "literal","children": [],"string": "\"adams\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"stiff\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"rk\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"rkf\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"fix\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"discrete\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"root\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol, atol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "constantes reais ou vetores com o mesmo tamanho que "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa (função, lista ou string)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ng"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa (função, lista ou string)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (tempo inicial)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kvect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector or matrix. The solution."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w, iw"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores de reais. Ver "},{"type": "link","children": [],"string": "ode() optional output"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["odeoptions", "ode_optional_output", "ode_root", "ode_discrete", "dae", "odedc", "csim", "ltitr", "rtitr", "intg"]},"ode_discrete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ode_discrete"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solucionador de equações diferenciais ordinárias, simulação de tempo discreto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = ode(\"discrete\",y0,k0,kvect,f)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais ou matriz (condições iniciais)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (tempo inicial)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa i.e. função, string ou lista."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (tempo inicial)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kvect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "ode"},"ode_optional_output": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ode_optional_output"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "descrição de saídas opcionais de solucionadores de EDOs"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w(1:10)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Solver internal values. Output for technical reasons only. Not supported."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w(11)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "último tamanho do passo em t utilizado (sucessivamente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w(12)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o tamanho do passo a ser tentado no próximo passo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w(13)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o valor corrente da variável independente alcançado pelo solucionador, i.e. o ponto de malha interno t corrente. Ná saída, tcur sempre estará pelo menos tão longe quanto o argumento t, mas pode estar mais longe (se foi realizada interpolação)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w(14)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um fator de escala de tolerância, maior que 1.0, computado quando se detecta requerer muita precisão (istate = -3 se detectado no início do problema, istate = -2, em caso contrário). Se itol for inalterado, mas rtol e atol forem uniformemente escalados por um fator de "},{"type": "literal","children": [],"string": "tolsf=w(14)"},{"type": "text","children": [],"string": " para a próxima chamada, emtão supõe-se que o solucionador pode continuar. (o usuário também pode ignorar "},{"type": "literal","children": [],"string": "tolsf"},{"type": "text","children": [],"string": " e alterar os parâmetros de tolerância de qualquer outro modo apropriado.)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w(15)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "o valor de t no tempo da última alternação de método, se houver. Este valor não é significante com o solucionador "},{"type": "literal","children": [],"string": "lsode"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(1:9)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Solver internal values. Output for technical reasons only. Not supported."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(10)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o número de avaliações de "},{"type": "literal","children": [],"string": "g"},{"type": "text","children": [],"string": " para problema até então. Este valor é significante apenas para o solucionador "},{"type": "literal","children": [],"string": "lsodar"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(11)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o número de passos tomados para o problema até então"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(12)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o número de avaliações de f até então"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(13)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o número de avaliações do jacobiano (e de decomposições lu da matriz) para o problema até então."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(14)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a última ordem do método utilizada (sucessivamente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(15)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a ordem a ser tentada no próximo passo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(16)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o índice do componente de maior magnitude no vetor de erro local ponderado ( e(i)/ewt(i) ), sobre um erro, retorna istate = -4 or -5."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(17)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o comprimento de "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " realmente requerido, supondo que o comprimento de rwork deve ser fixado para o resto do problema, e que a alternância pode ocorrer. Isto é definido sobre retornos normais e sobre um retorno de entrada ilegal para armazenamento insuficiente."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(18)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o comprimento de "},{"type": "literal","children": [],"string": "iw"},{"type": "text","children": [],"string": " realmente requerido, supondo que o comprimento de "},{"type": "literal","children": [],"string": "iw"},{"type": "text","children": [],"string": " deve ser fixado pelo resto do problema, e que a alternância pode ocorrer. Isto é definido sobre retornos normais e sobre um retorno de entrada ilegal para armazenamento insuficiente."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(19)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o indicador do método para o último passo realizado com sucesso. 1 significa adams (nonstiff), 2 significa bdf (stiff). Este valor não é significante com o solucionador "},{"type": "literal","children": [],"string": "lsode"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iw(20)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o indicador do método corrente. 1 significa adams (nonstiff), 2 significa bdf (stiff). Este é o método a ser tentado no próximo passo. Logo, difere de "},{"type": "literal","children": [],"string": "iw(19)"},{"type": "text","children": [],"string": " apenas se uma alternância de métodos foi realizada. Este valor não é significante com o solucionador "},{"type": "literal","children": [],"string": "lsode"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"ode_root": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ode_root"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solucionador de EDOs com busca de raízes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y,rd,w,iw] = ode(\"root\",y0,t0,t [,rtol [,atol]],f [,jac],ng,g [,w,iw])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais ou matriz (condições iniciais)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (tempo inicial)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais (tempos nos quais a solução é computada)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa i.e. função, string ou lista."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol, atol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "constantes reais ou vetores reais com o mesmo tamanho que "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa i.e. função, string ou lista."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ng"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa i.e. função, string ou lista."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector or matrix. The solution."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w, iw"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores de reais. See "},{"type": "link","children": [],"string": "ode() optional output"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ode", "ode_optional_output", "ode_discrete", "dae"]},"odedc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "odedc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solucionador de EDOs contínuas/discretas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "yt = odedc(y0, nd, stdel, t0, t, f)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor coluna de reais (condições iniciais), "},{"type": "literal","children": [],"string": "y0=[y0c;y0d]"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "y0d"},{"type": "text","children": [],"string": " tem "},{"type": "literal","children": [],"string": "nd"},{"type": "text","children": [],"string": " componentes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro, dimensão de "},{"type": "literal","children": [],"string": "y0d"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stdel"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de reais com uma ou duas entradas, "},{"type": "literal","children": [],"string": "stdel=[h,delta]"},{"type": "text","children": [],"string": " (com "},{"type": "literal","children": [],"string": "delta=0"},{"type": "text","children": [],"string": " como valor padrão)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (tempo inicial)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor (linha de reais), instantes onde "},{"type": "literal","children": [],"string": "yt"},{"type": "text","children": [],"string": " é calculado ."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "função externa i.e. função, string ou lista com seqüência de chamamento: "},{"type": "literal","children": [],"string": "yp=f(t,yc,yd,flag)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ode", "link", "odeoptions", "csim", "external"]},"odeoptions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "odeoptions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ajusta opções para solucionadores de EDO"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "odeoptions()"},"varlist": [],"seealso": "ode"},"arkode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arkode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SUNDIALS ordinary differential equation additive Runge-Kutta solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[t,y] = arkode(f,tspan,y0,options)", "[t,y,info] = arkode(f,tspan,y0,options)", "sol = arkode(...)", "solext = arkode(sol,tfinal,options)", "arkode(...)"]},"varlist": [],"seealso": ["cvode", "ida", "sundials_user_functions", "sundials_options"]},"cvode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cvode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SUNDIALS ordinary differential equation solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[t,y] = cvode(f,tspan,y0,options)", "[t,y,info] = cvode(f,tspan,y0,options)", "sol = cvode(...)", "solext = cvode(sol,tfinal,options)", "cvode(...)"]},"varlist": [],"seealso": ["cvodes", "arkode", "ida", "sundials_user_functions", "sundials_options"]},"ida": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ida"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SUNDIALS differential-algebraic equation solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[t,y] = ida(F,tspan,y0,yp0,options)", "[t,y,info] = ida(F,tspan,y0,yp0,options)", "sol = ida(...)", "solext = ida(sol,tfinal,options)", "ida(...)"]},"varlist": [],"seealso": ["arkode", "cvode", "sundials_user_functions", "sundials_options"]},"kinsol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kinsol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SUNDIALS general-purpose nonlinear system solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y,val,info,extra] = kinsol(f,y0,options)"},"varlist": [],"seealso": ["sundials_user_functions", "sundials_kinsol_options"]},"SUN_Clink": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SUN_Clink"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compiling and linking a C user function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "lib = SUN_Clink(names, files, options)"},"varlist": [],"seealso": ["arkode", "cvode", "ida", "kinsol", "sundials_user_functions", "ilib_for_link"]},"sundials_callback": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Callback"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Specifying a user callback"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "... = solver( ... , callback = cbFn)"},"varlist": [],"seealso": ["arkode", "cvode", "ida", "kinsol", "sundials_user_functions", "sundials_options", "sundials_kinsol_options", "SUN_Clink"]},"sundials_complex": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Complex solutions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computing a complex solution and its applications"},"string": []},"synopsis": [],"varlist": [],"seealso": ["arkode", "cvode", "ida", "kinsol", "cvodes", "idas"]},"sundials_event": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Events"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Specifying a user events function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["... = solver( ... , events = evFn)", "... = solver( ... , events = evFn, nbEvents = nb)", "... = solver( ... , events = evFn, nbEvents = nb, evDir = dir)", "... = solver( ... , events = evFn, nbEvents = nb, evDir = dir, evTerm = term)"]},"varlist": [],"seealso": ["arkode", "cvode", "ida", "sundials_user_functions", "sundials_options", "SUN_Clink"]},"sundials_jacobian": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Jacobian"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Specifying a user-supplied Jacobian or its approximation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["... = solver( ... , jacobian = jacFn)", "... = solver( ... , jacobian = jacFn, jacBand = [ml,mu])", "... = solver( ... , jacBand = [ml,mu])", "... = solver( ... , jacPattern = jacSp)", "... = solver( ... , jacobian = jacFn, jacNonZeros = nnz, jacFormat = jFmt)"]},"varlist": [],"seealso": ["arkode", "cvode", "ida", "kinsol", "sundials_user_functions", "sundials_options", "sundials_kinsol_options", "SUN_Clink"]},"sundials_kinsol_options": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Options (kinsol)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Changing the default behavior of solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "... = kinsol( ... , options)"},"varlist": [],"seealso": ["kinsol", "sundials_user_functions"]},"sundials_linear_solvers": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SUNDIALS Linear Solvers"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SUNDIALS direct and iterative, preconditionned linear solvers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "... = solver( ... , linearSolver = linSol, precType = side, precBand = [mu,ml])"},"varlist": [],"seealso": ["arkode", "cvode", "ida", "ida"]},"sundials_options": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Options (ODE and DAE solvers)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Changing the default behavior of solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["... = arkode( ... , options)", "... = cvode( ... , options)", "... = ida( ... , options)"]},"varlist": [],"seealso": ["arkode", "cvode", "ida", "sundials_user_functions"]},"sundials_quadrature": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Pure quadrature"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Integration of quadrature equations"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["... = cvode( ... , quadRhs = fun, options)", "... = ida( ... , quadRhs = fun, options)"]},"varlist": [],"seealso": ["arkode", "cvode", "ida", "sundials_user_functions", "sundials_options", "SUN_Clink"]},"idas": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Sensitivity (DAE)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Forward Sensitivity computation with ida"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[t,y,info] = ida(res, tspan, y0, yp0, sensPar = pvalue, options)", "sol = ida( ... , sensPar = pvalue, options)"]},"varlist": [],"seealso": ["arkode", "cvode", "ida", "cvodes", "sundials_user_functions", "sundials_options", "SUN_Clink"]},"cvodes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Sensitivity (ODE)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Forward Sensitivity computation with cvode"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[t,y,info] = cvode(f,tspan,y0, sensPar = pvalue, options)", "sol = cvode( ... , sensPar = pvalue, options)"]},"varlist": [],"seealso": ["arkode", "cvode", "ida", "idas", "sundials_user_functions", "sundials_options", "SUN_Clink"]},"sundials_solution": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Solution output (ODE and DAE solvers)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Specialized output of solvers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sol = solver(..., options)", "solext = solver(sol, tfinal, options)", "y = sol(t)", "[y,yd] = sol(t)", "... = sol(t,i)"]},"varlist": [],"seealso": ["arkode", "cvode", "ida", "sundials_user_functions", "sundials_options"]},"sundials_user_functions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "User functions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Coding user functions used by SUNDIALS solvers"},"string": []},"synopsis": [],"varlist": [],"seealso": ["arkode", "cvode", "ida", "kinsol", "sundials_jacobian", "sundials_event", "sundials_callback", "SUN_Clink"]},"and_op": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "&, &&"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Binary AND between integers. Logical AND over/between booleans and numbers"},"string": []},"synopsis": [{"type": "synopsis","children": [],"string": ["intMat = intA & intB", "tfMat = A & B"]},{"type": "synopsis","children": [],"string": ["tf = U && V", "if (U && V) then ... end", "if (U & V)  then ... end", "while (U && V) then ... end", "while (U & V) then ... end"]}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "intA, intB"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Arrays of encoded integers of any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": " must have the same sizes to be processed element-wise. If "},{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": " is a scalar, it is priorly replicated to the size of the other operand before processing."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": " have not the same integer inttype, the operand with the smaller encoding is converted to the wider according to the following ranks: int8 < uint8 < int16 < uint16 < int32 < uint32 < int64 < uint64."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "intMat"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of encoded integers with the same sizes of "},{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": ", and of the wider inttype of both (see hereabove). For any index "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "intMat(i) = bitand(intA(i), intB(i))"},{"type": "text","children": [],"string": " "},{"type": "warning","children": [{"type": "literal","children": [],"string": "intA & []"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "[] & intA"},{"type": "text","children": [],"string": " return the "},{"type": "emphasis","children": [],"string": "boolean"},{"type": "text","children": [],"string": " array "},{"type": "literal","children": [],"string": "intA~=0"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Arrays of booleans or of numbers: encoded integers of any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": ", real or complex numbers. "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " may have distinct types, and may be one or both sparse-encoded. The special case where "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " are both encoded integers is excluded (see here-above)."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " must have the same sizes to be processed element-wise. If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " is a scalar, it is priorly replicated to the size of the other operand before processing."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tfMat"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Boolean array with the same sizes of  "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": ". If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " is sparse-encoded, so is "},{"type": "varname","children": [],"string": "tfMat"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "For any index "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "tfMat(i)"},{"type": "text","children": [],"string": " is "},{"type": "constant","children": [],"string": "%T"},{"type": "text","children": [],"string": " if neither "},{"type": "literal","children": [],"string": "A(i)"},{"type": "text","children": [],"string": " nor "},{"type": "literal","children": [],"string": "B(i)"},{"type": "text","children": [],"string": " are "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " or zero. Otherwise, "},{"type": "literal","children": [],"string": "tfMat(i)"},{"type": "text","children": [],"string": " is set to "},{"type": "constant","children": [],"string": "%F"},{"type": "text","children": [],"string": ". "},{"type": "warning","children": [{"type": "literal","children": [],"string": "A & []"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "[] & A"},{"type": "text","children": [],"string": " return "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U, V"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Arrays of full or sparse-encoded booleans or of numbers of any types and encoding: any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": " of encoded integers, full or sparse-encoded real or complex numbers."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "U"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "V"},{"type": "text","children": [],"string": " may have distinct data types, "},{"type": "emphasis","children": [],"string": "number of dimensions, and sizes"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "single boolean: Set to "},{"type": "literal","children": [],"string": "and(U) & and(V)"},{"type": "text","children": [],"string": ", without evaluating "},{"type": "literal","children": [],"string": "and(V)"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "and(U)"},{"type": "text","children": [],"string": " is false (this is why the "},{"type": "literal","children": [],"string": "&&"},{"type": "text","children": [],"string": " operator is so-called short-circuited)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "See "},{"type": "link","children": [],"string": "and"},{"type": "text","children": [],"string": "() for the definition of the evaluation to false depending on type and encoding."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["and", "bitand", "or_op", "not", "if", "while", "overloading"]},"bernstein": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bernstein"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compute the n-order Bernstein matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = bernstein(n, t)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive integer, the order. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a scalar or row vector. "},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is scalar, "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " contains the number of points of Bezier curves. In this case,  the "},{"type": "literal","children": [],"string": "bernstein"},{"type": "text","children": [],"string": " function create "},{"type": "literal","children": [],"string": "linspace(0, 1, t)"},{"type": "text","children": [],"string": "vector. If "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is vector, this values must be in [0; 1]"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a length(t)-by-(n+1) matrix of doubles."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "bezier"},"extraction": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "extraction"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "extração de entradas de matrizes e listas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x(i)", "x(i,j)", "x(i,j,k,..)", "[...] = l(i)", "[...] = l(k1)...(kn)(i) ou [...] = l(list(k1,...,kn,i))", "l(k1)...(kn)(i,j) or l(list(k1,...,kn,list(i,j))"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de qualquer tipo possível"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variável do tipo lista"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i,j, k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "índices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k1,...kn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "índices"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["insertion", "colon", "find", "horner", "parentheses"]},"ind2sub": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ind2sub"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de índice linear para matriz de valores subescritos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[i1,i2,..] =ind2sub(dims,I)", "Mi = ind2sub(dims,I)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor com as dimensões da matriz "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "I"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor com os dados índices lineares "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i1,i2,.."},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "valores subescritos (de mesma forma que "},{"type": "literal","children": [],"string": "I"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz cujas colunas contém os valores subescritos."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sub2ind", "extraction", "insertion"]},"insertion": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "insertion"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "assignation"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "atribuição ou modificação parcial de variáveis"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "atribuição parcial de variáveis"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["x(i,j)=a", "x(i)=a", "l(i)=a", "l(k1)...(kn)(i)=a or l(list(k1,...,kn,i))=a", "l(k1)...(kn)(i,j)=a or l(list(k1,...,kn,list(i,j))=a"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de qualquer tipo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i,j"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "índices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k1,...kn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "índices com valores inteiros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "novo valor de entrada"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["extraction", "colon", "find", "horner", "parentheses"]},"isempty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isempty"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica se uma variável é uma matriz vazia ou uma lista vazia"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=isempty(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor, matriz ou lista "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["empty", "emptystr", "size", "length"]},"isequal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isequal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tests the strict global equality between several objects, without equivalences"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = isequal(a, b, ...)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a, b, ..."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "objects: variable of any types ; expressions of any types of results."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["comparison", "strcmp", "percentnan", "assert_checkequal", "assert_checkfilesequal", "intersect"]},"modulo": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "modulo"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "pmodulo"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "Resto módulo m com o sinal do operando esquerdo, ou de uma divisão polinomial"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Resto positivo da divisão de n por m"},"string": []}],"synopsis": [{"type": "synopsis","children": [],"string": "i = modulo(n,m)"},{"type": "synopsis","children": [],"string": "i = pmodulo(n,m)"}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n,m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Escalar, vetor, matriz ou hipermatriz de inteiros codificados, reais ou                        polinômios com coeficientes reais.                        "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " e "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " devem ter o mesmo tipo.                        Se eles são do tipo inteiro, eles podem ser de comprimento de codificação distinto (por exemplo, int8 e int16).                        Se nenhum deles for escalar, eles devem ter os mesmos tamanhos."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Escalar, vetor, matriz ou hipermatriz do tipo (e inttype) "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": ".                     "},{"type": "varname","children": [],"string": "i"},{"type": "text","children": [],"string": " aceita os tamanhos do maior "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": "                     ou "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "warning","children": [{"type": "text","children": [],"string": "For polynomials, when all remainders in the array "},{"type": "varname","children": [],"string": "i"},{"type": "text","children": [],"string": " are constant (degree==0), "},{"type": "varname","children": [],"string": "i"},{"type": "text","children": [],"string": " is of type 1 (numbers) instead of 2 (constant polynomials)."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["unwrap", "ieee"]},"ndims": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ndims"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "número de dimensões de um array"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um array"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, o número de dimensões do array"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "size"},"or_op": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "|, ||"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Binary OR between integers. Logical OR over/between booleans and numbers"},"string": []},"synopsis": [{"type": "synopsis","children": [],"string": ["intMat = intA | intB", "tfMat = A | B"]},{"type": "synopsis","children": [],"string": ["tf = U || V", "if (U || V) then ... end", "if (U | V)  then ... end", "while (U || V) then ... end", "while (U | V) then ... end"]}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "intA, intB"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Arrays of encoded integers of any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": " must have the same sizes to be processed element-wise. If "},{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": " is a scalar, it is priorly replicated to the size of the other operand before processing."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": " have not the same integer inttype, the operand with the smaller encoding is converted to the wider according to the following ranks: int8 < uint8 < int16 < uint16 < int32 < uint32 < int64 < uint64."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "intMat"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of encoded integers with the same sizes of "},{"type": "varname","children": [],"string": "intA"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "intB"},{"type": "text","children": [],"string": ", and of the wider inttype of both (see hereabove). For any index "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "intMat(i) = bitor(intA(i), intB(i))"},{"type": "text","children": [],"string": " "},{"type": "warning","children": [{"type": "literal","children": [],"string": "intA | []"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "[] | intA"},{"type": "text","children": [],"string": " return the "},{"type": "emphasis","children": [],"string": "boolean"},{"type": "text","children": [],"string": " array "},{"type": "literal","children": [],"string": "intA~=%nan"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Arrays of booleans or of numbers: encoded integers of any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": ", real or complex numbers. "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " may have distinct types, and may be one or both sparse-encoded. The special case where "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " are both encoded integers is excluded (see here-above)."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " must have the same sizes to be processed element-wise. If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " is a scalar, it is priorly replicated to the size of the other operand before processing."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tfMat"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Boolean array with the same sizes of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": ". If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " is sparse-encoded, so is "},{"type": "varname","children": [],"string": "tfMat"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "For any index "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "tfMat(i)"},{"type": "text","children": [],"string": " is "},{"type": "constant","children": [],"string": "%T"},{"type": "text","children": [],"string": " if either "},{"type": "literal","children": [],"string": "A(i)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "B(i)"},{"type": "text","children": [],"string": " is "},{"type": "constant","children": [],"string": "%T"},{"type": "text","children": [],"string": " or not zero. Otherwise, "},{"type": "literal","children": [],"string": "tfMat(i)"},{"type": "text","children": [],"string": " is set to "},{"type": "constant","children": [],"string": "%F"},{"type": "text","children": [],"string": ". "},{"type": "warning","children": [{"type": "literal","children": [],"string": "A | []"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "[] | A"},{"type": "text","children": [],"string": " return "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U, V"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Arrays of full or sparse-encoded booleans or of numbers of any types and encoding: any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": " of encoded integers, full or sparse-encoded real or complex numbers."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "U"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "V"},{"type": "text","children": [],"string": " may have distinct data types, "},{"type": "emphasis","children": [],"string": "number of dimensions, and sizes"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "single boolean: "},{"type": "literal","children": [],"string": "U || V"},{"type": "text","children": [],"string": " is equal to "},{"type": "literal","children": [],"string": "or(U) | or(V)"},{"type": "text","children": [],"string": ", without evaluating "},{"type": "literal","children": [],"string": "or(V)"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "or(U)"},{"type": "text","children": [],"string": " is true (this is why the "},{"type": "literal","children": [],"string": "||"},{"type": "text","children": [],"string": " operator is so-called short-circuited)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "See "},{"type": "link","children": [],"string": "or"},{"type": "text","children": [],"string": "() for the definition of the evaluation to true depending on type and encoding."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["or", "bitor", "and_op", "not", "if", "while", "overloading"]},"size": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "size"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tamanho de objetos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=size(x [,sel])", "[nr,nc]=size(x)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix (incluindo matriz de transferência), lista, ou sistema linear ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "1x2"},{"type": "text","children": [],"string": " vetor de inteiros ou número inteiro"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sel"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um escalar ou um string "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nr,nc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois inteiros "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["length", "syslin"]},"sub2ind": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sub2ind"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte matriz de valores subescrtos para índice linear"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["I = sub2ind(dims,i1,i2,...)", "J = sub2ind(dims,Mi)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor, as dimensões da matriz "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i1,i2,..."},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "os arrays de valores subescritos (de mesma forma que a matriz "},{"type": "literal","children": [],"string": "I"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz cujas colunas contém os valores subescritos. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "I"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o array de índice linear"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ind2sub", "extraction", "insertion"]},"bitand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bitand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "bitwise logical AND between element-wise integers of 2 arrays"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "w = bitand(u, v)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "u, v, w"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "scalars, vectors, matrices or hypermatrices of null or positive integers encoded as decimal or integer numbers of any signed or unsigned "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": ". "},{"type": "warning","children": {"type": "text","children": [],"string": "Sparse-encoded matrices are not accepted."},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " have the same type and inttype, this one is the working one. Otherwise, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is decimal-encoded, the working inttype is 0 (real decimal), even if the other operand is int64- or uint64-encoded."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are both encoded integers, the working inttype is the widest of both: int8 < uint8 < int16 < uint16 < int32 < uint32 < int64 < uint64."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The result "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " gets the type of the working encoding."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are processed element-wise. "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " is a single value (scalar) and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is a vector, matrix or hypermatrix, "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " is priorly expanded as "},{"type": "literal","children": [],"string": "u*ones(v)"},{"type": "text","children": [],"string": " in order to operate "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " with every "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " component."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Conversely, "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is priorly expanded as "},{"type": "literal","children": [],"string": "v*ones(u)"},{"type": "text","children": [],"string": " if it is a single value."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "If neither "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " nor "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are scalars, they must have the same sizes."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The result "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " gets the sizes of "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " or/and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " arrays."}],"string": []}],"string": []}],"string": []},"string": []},"seealso": ["and_op", "and", "bitor", "dec2bin"]},"bitcmp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bitcmp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "bitwise complement of integers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = bitcmp(x)", "y = bitcmp(x, bitnum)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "arrays of signed or unsigned integers (int8, .., uint64), or of positive decimal integers. Hypermatrix supported. "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " have the same integer type and the same size. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bitnum"},{"type": "listitem","children": [{"type": "text","children": [],"string": "positive encoded or decimal integer, or array of positive encoded or decimal integers of size equal to size(x): bits #1 to #bitnum of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " are considered and inversed. According to the integer type of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "bitnum"},{"type": "text","children": [],"string": " must be in the interval "},{"type": "literal","children": [],"string": "[1, bitmax]"},{"type": "text","children": [],"string": " with bitmax as follows: "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " The default "},{"type": "varname","children": [],"string": "bitnum"},{"type": "text","children": [],"string": " value depends on the input integer type: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "bitnum = bitmax"},{"type": "text","children": [],"string": " for encoded integers"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "bitnum = 53"},{"type": "text","children": [],"string": " for decimal integers "},{"type": "literal","children": [],"string": "x ≤ 1/%eps"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "bitnum = int(log2(x))+1"},{"type": "text","children": [],"string": " for decimal integers "},{"type": "literal","children": [],"string": "x > 1/%eps"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["bitxor", "bitget", "minus"]},"bitget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bitget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Extracts from integers bits of given indices"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = bitget(x, pos)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar, vector, matrix or hypermatrix of positive decimal or encoded integers. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pos"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar, vector, matrix or hypermatrix of decimal or encoded integers in "},{"type": "literal","children": [],"string": "[1, bitmax]"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "bitmax"},{"type": "text","children": [],"string": " is the maximal index of bits for the type of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ": Indices of bits to be extracted. The bit #1 is the lightest one (2"},{"type": "superscript","children": [],"string": "0"},{"type": "text","children": [],"string": "). "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Scalar, vector, matrix or hypermatrix of 0 and 1 of the type of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ". The sizes and contents of "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " are as follows:"}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "If x is a scalar"},{"type": "text","children": [],"string": ": "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " has the sizes of "},{"type": "varname","children": [],"string": "pos"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "y(i,j,..)"},{"type": "text","children": [],"string": " is the value of bit #"},{"type": "literal","children": [],"string": "pos(i,j,..)"},{"type": "text","children": [],"string": " of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "If pos is a scalar"},{"type": "text","children": [],"string": ": "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " has the sizes of "},{"type": "varname","children": [],"string": "x"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "y(i,j,..)"},{"type": "text","children": [],"string": " is the value of the bit #"},{"type": "literal","children": [],"string": "pos"},{"type": "text","children": [],"string": " of "},{"type": "literal","children": [],"string": "x(i,j,..)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "If x and pos are arrays with identical sizes"},{"type": "text","children": [],"string": ", the processing is element-wise: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " has the sizes of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "pos"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "y(i,j,..)"},{"type": "text","children": [],"string": " is the value of the bit #"},{"type": "literal","children": [],"string": "pos(i,j,..)"},{"type": "text","children": [],"string": " of "},{"type": "literal","children": [],"string": "x(i,j,..)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "Otherwise"},{"type": "text","children": [],"string": ": "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a matrix with "},{"type": "literal","children": [],"string": "length(x)"},{"type": "text","children": [],"string": " rows and "},{"type": "literal","children": [],"string": "length(pos)"},{"type": "text","children": [],"string": " columns."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "y(i,j)"},{"type": "text","children": [],"string": " is the value of the bit #"},{"type": "literal","children": [],"string": "pos(j)"},{"type": "text","children": [],"string": " of "},{"type": "literal","children": [],"string": "x(i)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["bitstring", "dec2bin", "bitset", "bitand", "and_op"]},"bitor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bitor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "bitwise logical OR between element-wise integers of 2 arrays"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "w = bitor(u, v)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "u, v, w"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "scalars, vectors, matrices or hypermatrices of null or positive integers encoded as decimal or integer numbers of any signed or unsigned "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": ". "},{"type": "warning","children": {"type": "text","children": [],"string": "Sparse-encoded matrices are not accepted."},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " have the same type and inttype, this one is the working one. Otherwise, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is decimal-encoded, the working inttype is 0 (real decimal), even if the other operand is int64- or uint64-encoded."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are both encoded integers, the working inttype is the widest of both: int8 < uint8 < int16 < uint16 < int32 < uint32 < int64 < uint64."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The result "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " gets the type of the working encoding."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are processed element-wise: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " is a single value (scalar) and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is a vector, matrix or hypermatrix, "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " is priorly expanded as "},{"type": "literal","children": [],"string": "u*ones(v)"},{"type": "text","children": [],"string": " in order to operate "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " with every "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " component."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Conversely, "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is priorly expanded as "},{"type": "literal","children": [],"string": "v*ones(u)"},{"type": "text","children": [],"string": " if it is a single value."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "If neither "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " nor "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are scalars, they must have the same sizes."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " gets the sizes of "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " or/and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " arrays."}],"string": []}],"string": []}],"string": []},"string": []},"seealso": ["or_op", "or", "bitxor", "bitand", "dec2bin"]},"bitset": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bitset"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets bits of given indices in some integers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = bitset(x, bitInd)", "y = bitset(x, bitInd, bitVal)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive decimal or encoded integers (all inttypes supported), whose bits must be set. Supported sizes: scalar, vector, matrix, hypermatrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bitInd"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Indices of bits to be set: Array of positive decimal or encoded integers (all inttypes supported), whose values are in the interval "},{"type": "literal","children": [],"string": "[1 bitmax]"},{"type": "text","children": [],"string": " where "},{"type": "varname","children": [],"string": "bitmax"},{"type": "text","children": [],"string": " is the maximal index of bits for the type of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ". The bit #1 is the lightest one (2"},{"type": "superscript","children": [],"string": "0"},{"type": "text","children": [],"string": "). "}],"string": []},{"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If the size of "},{"type": "varname","children": [],"string": "bitInd"},{"type": "text","children": [],"string": " matches "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "'s one, the processing is performed element-wise: For every index i in x, the bit #bitInd(i) is set in x(i)."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " has N dimensions and the N first sizes of "},{"type": "varname","children": [],"string": "bitInd"},{"type": "text","children": [],"string": " match "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " ones, and "},{"type": "varname","children": [],"string": "bitInd"},{"type": "text","children": [],"string": " has N+1 dimensions, then for each "},{"type": "literal","children": [],"string": "x(i1,i2,..iN)"},{"type": "text","children": [],"string": ", all its bits "},{"type": "literal","children": [],"string": "#bitInd(i1,i2,..iN, :)"},{"type": "text","children": [],"string": " are set."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Otherwise: "},{"type": "varname","children": [],"string": "bitInd"},{"type": "text","children": [],"string": " must be a vector of length<= "},{"type": "varname","children": [],"string": "bitmax"},{"type": "text","children": [],"string": ". Then, all the bits listed in "},{"type": "varname","children": [],"string": "bitInd"},{"type": "text","children": [],"string": " are set in all "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " components."}],"string": []},"string": []}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bitVal"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of values 0 or 1 as decimal or encoded integers (all inttypes supported) : values to which respective bits must be set. "},{"type": "varname","children": [],"string": "bitVal"},{"type": "text","children": [],"string": " has either the size of "},{"type": "varname","children": [],"string": "bitInd"},{"type": "text","children": [],"string": ", or it is scalar (then the same value is used for all bits)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Processed "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ", with the same size and data type (and integer type) as "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bitget", "or_op", "and_op", "or", "and", "bin2dec", "dec2bin"]},"bitstring": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bitstring"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A string giving the literal bit representation of a number"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "str = bitstring(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of integers, real doubles or booleans"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bitget", "bitset"]},"bitxor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bitxor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "bitwise logical XOR between element-wise integers of 2 arrays"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "w = bitxor(u, v)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "u, v, w"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "scalars, vectors, matrices or hypermatrices of null or positive integers encoded as decimal or integer numbers of any signed or unsigned "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": ". "},{"type": "warning","children": {"type": "text","children": [],"string": "Sparse-encoded matrices are not accepted."},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " have the same type and inttype, this one is the working one. Otherwise, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is decimal-encoded, the working inttype is 0 (real decimal), even if the other operand is int64- or uint64-encoded."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are both encoded integers, the working inttype is the widest of both: int8 < uint8 < int16 < uint16 < int32 < uint32 < int64 < uint64."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The result "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " gets the type of the working encoding."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are processed element-wise: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " is a single value (scalar) and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is a vector, matrix or hypermatrix, "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " is priorly expanded as "},{"type": "literal","children": [],"string": "u*ones(v)"},{"type": "text","children": [],"string": " in order to operate "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " with every "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " component."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Conversely, "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " is priorly expanded as "},{"type": "literal","children": [],"string": "v*ones(u)"},{"type": "text","children": [],"string": " if it is a single value."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "If neither "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " nor "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " are scalars, they must have the same sizes."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The result "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": " gets the sizes of "},{"type": "literal","children": [],"string": "u"},{"type": "text","children": [],"string": " or/and "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": " arrays."}],"string": []}],"string": []}],"string": []},"string": []},"seealso": ["or_op", "or", "bitor", "bitand", "dec2bin"]},"angle": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "angle"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "argument of complex numbers, in radians"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "A = angle(Z)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of real or complex numbers. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of real numbers in (-π,π], of size(Z): the arguments (phases) of respective Z elements, in radians. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": "abs"},"complex": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "complex"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Build an array of complex numbers from their parts"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["c = complex(u)", "c = complex(a, b)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u, a, b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "scalars, vectors, matrices or hypermatrices of real numbers. If both "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " are not scalars, they must have the same sizes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": [{"type": "text","children": [],"string": "array of complex numbers, of the size of "},{"type": "varname","children": [],"string": "u"},{"type": "text","children": [],"string": " or of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ". If "},{"type": "varname","children": [],"string": "u"},{"type": "text","children": [],"string": " is sparse, or if "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " have the same sizes and both are sparse, then "},{"type": "varname","children": [],"string": "c"},{"type": "text","children": [],"string": " is also sparse. Otherwise "},{"type": "varname","children": [],"string": "c"},{"type": "text","children": [],"string": " is dense-encoded. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["percenti", "imult"]},"conj": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "conj"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz complexa conjugada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = conj(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de reais ou complexos (full or sparse storage). Matrizes de polinômios ou razões de polinmios, com coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},"string": []},"seealso": "quote"},"csgn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csgn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns the sign of a vector of real of complex values "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = csgn(z)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of values on which we want to compute the sign"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "if the real part is not equal to zero:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "+1"},{"type": "text","children": [],"string": " if the real part of an element is positive"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " if the real part of an element is negative"}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If the real part is equal to zero:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "+1"},{"type": "text","children": [],"string": " if the imaginary part of an element is positive"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " if the imaginary part of an element is negative"}],"string": []},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "if the element is equal to zero, then returns "},{"type": "constant","children": [],"string": "%nan"}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["sign", "signm"]},"imag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "imag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "parte imaginária dos números complexos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = imag(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de números reais ou complexos, ou de polinômios ou de razões de polinômios com coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais ou de polinômios ou de razões de polinômios com coeficientes reais. "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " tem o seu tamanho de "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "real"},"imult": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "imult"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "multiplicação pela parte imaginária i"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = imult(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou complexo, vetor ou matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar complexo, vetor ou matriz de complexos "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"isreal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isreal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica se uma variável é armazenada como real ou complexa."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = isreal(x)", "t = isreal(x, eps)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de números reais ou complexos, ou de polinômios ou de razões de polinômios com coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "eps"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um número real positivo ou nulo (default = 0)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"real": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "real"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "parte real dos números complexos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = real(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de números reais ou complexos, ou de polinômios ou de razões de polinômios com coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais ou de polinômios ou de razões de polinômios com coeficientes reais. "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " tem o seu tamanho de "},{"type": "varname","children": [],"string": "x"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "imag"},"factor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "factor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=factor(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de números primos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "primes"},"factorial": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "factorial"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "factorial function : product of the n first positive integers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["f = factorial(n)", "[f, p] = factorial(n)", "[f, p, m] = factorial(n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar, vector, matrix or hypermatrix of positive integers <= 10"},{"type": "superscript","children": [],"string": "14"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "array of doubles, of the sizes of n: "},{"type": "literal","children": [],"string": "f(i) = n(i)!"},{"type": "text","children": [],"string": ". "},{"type": "varname","children": [],"string": "f"},{"type": "text","children": [],"string": " values are exact up to "},{"type": "literal","children": [],"string": "n=21"},{"type": "text","children": [],"string": " included."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "array of doubles, of the sizes of n: power of 10 of "},{"type": "varname","children": [],"string": "f"},{"type": "text","children": [],"string": ": "},{"type": "literal","children": [],"string": "p(i) = int(log10(f(i)!))"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "array of doubles in [1,10[, of the sizes of n: Mantissae of "},{"type": "varname","children": [],"string": "f"},{"type": "text","children": [],"string": ", such that "},{"type": "literal","children": [],"string": "n(i)! = m(i) * 10^p(i)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cumprod", "gamma", "gammaln"]},"gcd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gcd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Greatest (positive) Common Divisor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["gpcd = gcd(P)", "[gpcd, U] = gcd(P)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array of decimal integers, encoded integers, or of polynomials."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gpcd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "single element of "},{"type": "literal","children": [],"string": "P"},{"type": "text","children": [],"string": " type: the greatest common divisor of all "},{"type": "literal","children": [],"string": "P"},{"type": "text","children": [],"string": " components."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Square matrix of the "},{"type": "literal","children": [],"string": "P"},{"type": "text","children": [],"string": " type, with integer components or of minimal degrees. Its last column "},{"type": "literal","children": [],"string": "B = U(:,$)"},{"type": "text","children": [],"string": " holds Bezout coefficients, such that "},{"type": "literal","children": [],"string": "B(1)*P(1) + B(2)*P(2) + .... + B($)*P($) == gpcd"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bezout", "lcm", "factor", "prod", "hermit"]},"lcm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lcm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mínimo múltiplo comum (positivo) de inteiros ou de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["pp = lcm(p)", "[pp, fact] = lcm(p)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios (tipo 2), ou de inteiros decimais ou codificados (tipos 1 ou 8)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um polinomial ou um inteiro decimal : Mínimo positivo múltiplo comum de                         Componentes "},{"type": "varname","children": [],"string": "p"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fact"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de polinômios ou de inteiros decimais (tipo 1), com os tamanhos de                         "},{"type": "varname","children": [],"string": "p"},{"type": "text","children": [],"string": ", tal que "},{"type": "literal","children": [],"string": "fact(i)=pp./p(i)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["gcd", "bezout", "factor"]},"nchoosek": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nchoosek"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes binomial numbers (n,k) = numbers of combinations"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["b = nchoosek(n, k)", "logb = nchoosek(n, k, logFormat)", "[logb, b] = nchoosek(n, k, logFormat)", "[logb, b] = nchoosek(n, k)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n, k"},{"type": "listitem","children": [{"type": "text","children": [],"string": "arrays of positive decimal integers. If both "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "k"},{"type": "text","children": [],"string": " are not scalars, they must have the same size."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "array of positive decimal integers, with the size of the biggest array "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "k"},{"type": "text","children": [],"string": " : C"},{"type": "subscript","children": [],"string": "n"},{"type": "superscript","children": [],"string": "k"}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "logb"},{"type": "listitem","children": [{"type": "text","children": [],"string": "array of positive decimal numbers, with the size of "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ": "},{"type": "literal","children": [],"string": "log10(Cnk)"}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "logFormat"},{"type": "listitem","children": [{"type": "text","children": [],"string": "single word \"log10\" | \"10.mant\". \"log10\" by default. "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If \"log10\" is used, "},{"type": "varname","children": [],"string": "logb"},{"type": "text","children": [],"string": " returns "},{"type": "literal","children": [],"string": "log10(b)"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "If \"10.mant\" is used, then "},{"type": "varname","children": [],"string": "logb"},{"type": "text","children": [],"string": " returns "},{"type": "literal","children": [],"string": "int(log10(b)) + 10^(log10(b)-int(log10(b)))/10"},{"type": "text","children": [],"string": ": The 10-exponent of b is the logb integer part, while its fractional part directly shows the mantissa/10 of b, in [1.0, 10)/10."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["factorial", "gamma", "perms"]},"primes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "primes"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função dos primos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = primes(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "factor"},"rat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "aproximação racional de ponto-flutuante"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[N,D]=rat(x [,tol])", "y=rat(x [,tol])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["int", "round"]},"blockdiag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "blockdiag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a block diagonal matrix from provided arrays. Block diagonal system connection."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = blockdiag(a1,a2,...,an)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ai"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Matrices of booleans, numbers, polynomials, rationals, or strings, of any size. Sparse matrices are accepted."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "subsystems (i.e. gains, or linear systems in state-space or transfer form)."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix with a1, a2, a3, ... on the diagonal. "},{"type": "varname","children": [],"string": "r"},{"type": "text","children": [],"string": " is sparse when at least one of the "},{"type": "varname","children": [],"string": "ai"},{"type": "text","children": [],"string": " inputs is sparse."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["diag", "bdiag", "repmat", "brackets", "feedback"]},"diag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "diag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inclusão ou extração diagonal"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = diag(vm)", "y = diag(vm, k)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz (armazenamento cheio ou esparso)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (o valor padrão é 0)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["toeplitz", "eye", "blockdiag", "spec", "bdiag"]},"empty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "empty []"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "empty matrix. Array ranges destructor."},"string": []},"synopsis": [],"varlist": [],"seealso": ["null", "isempty", "emptystr", "brackets", "symbols", "matrices", "oldEmptyBehaviour", "insertion"]},"eye": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eye"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz identidade"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X=eye(m,n)", "X=eye(A)", "X=eye()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes ou listas "},{"type": "literal","children": [],"string": "syslin"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m,n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ones", "zeros"]},"frank": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "frank"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Frank matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "f = frank(n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n x n matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["hilbm", "invhilb", "magic"]},"hilbm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hilbm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Hilbert matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h = hilbm(n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n x n matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["invhilb", "magic"]},"invhilb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "invhilb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse of the Hilbert matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h = invhilb(n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n x n matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["toeplitz", "magic"]},"linspace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "linspace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "generates linearly spaced numbers between 2 reached bounds"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["row = linspace(x1, x2)", "row = linspace(x1, x2, n)", "Matrix = linspace(Col1, Col2)", "Matrix = linspace(Col1, Col2, n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1, x2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real or complex scalars, or encoded integer scalars: Bounds between which values must be generated."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Col1, Col2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Column vectors of real or complex numbers, or of encoded integers, of same heights."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer number of requested values or columns. Default value: 100"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "row"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "row vector of "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " numbers."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Matrix"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix with "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " columns of numbers."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colon", "logspace", "grand"]},"logspace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "logspace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "vetor espaçado logaritmicamente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "logspace(d1,d2, [n])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d1,d2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalar real ou complexo (significado especial para "},{"type": "literal","children": [],"string": "%pi"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de valores). O valor padrão é 50"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "linspace"},"magic": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "magic"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Magic square"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "m = magic(n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n x n matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "toeplitz"},"meshgrid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "meshgrid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cria matrizes ou arrays 3-D a partir de vetores replicados em 2 ou 3 dimensões"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["U = meshgrid(u)", "[U, V] = meshgrid(u)", "[X, Y] = meshgrid(x, y)", "[X, Y, Z] = meshgrid(x, y, z)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u, x, y, z"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vetores de qualquer tipo, de comprimento nx, ny, nz. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U, V"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matrizes quadradas de tamanho nu x nu "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X, Y, Z"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matrizes ou hipermatrizes do mesmo tamanho ["},{"type": "emphasis","children": [],"string": "ny"},{"type": "text","children": [],"string": ", nx] ou ["},{"type": "emphasis","children": [],"string": "ny"},{"type": "text","children": [],"string": ", nx, nz]. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["ndgrid", "repmat", "feval"]},"ndgrid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ndgrid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "constrói matrizes ou matrizes N-D, replicando alguns vetores dadas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[X, Y] = ndgrid(x)", "[X, Y] = ndgrid(x,y)", "[X, Y, Z] = ndgrid(x,y,z)", "[X, Y, Z, T] = ndgrid(x,y,z,t)", "[X1, X2, ..., Xm] = ndgrid(x1,x2,...,xm)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y, z, ..."},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores de quaisquer tipos de dados. Eles podem ter tipos de dados distintos. Por padrão, "},{"type": "literal","children": [],"string": "y=x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X, Y, Z, ..."},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrices in case of 2 input arguments, or hypermatrices otherwise. They all have the same sizes: size(x,\"*\") rows, size(x,\"*\") columns, size(z,\"*\") layers, etc. They have the datatypes of respective input vectors: "},{"type": "literal","children": [],"string": "typeof(X)==typeof(x)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "typeof(Y)==typeof(y)"},{"type": "text","children": [],"string": ", etc."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["meshgrid", "kron", "feval", "nf3d"]},"ones": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ones"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz de entradas todas iguais a 1"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=ones(m1,m2,...)", "y=ones(x)", "y=ones()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m1, m2,.."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["eye", "zeros"]},"perms": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "perms"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate the table of permutations of given elements"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = perms(x)", "y = perms(x, \"unique\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Row or column vector of any data type for which the size(), ==, and [] operators are defined, including cells."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"unique\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Optional text flag, to compute and return the whole set of unique permutations, "},{"type": "emphasis","children": [],"string": "without any duplicate"},{"type": "text","children": [],"string": " row. This option can be used only if "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " is sortable. That applies to boolean, integer, real number, and text data types."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of the type of x, with n=size(x,\"*\") columns. Each row provides a permutation. Without using the \"unique\" option, "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " returns n! rows. Otherwise, the number size(y,1)≤ n! of rows depends on the multiplicities of unique values of x."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["grand", "factorial", "unique", "gsort", "try"]},"repmat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "repmat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Replicate and tile an array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["B = repmat(A, siz)", "B = repmat(A, m)", "B = repmat(A, m, n,...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of any native type (boolean, numeric, text,..., cells, structures), of any number of dimensions of any sizes. Boolean or numerical sparse matrices are supported. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m, n, ..."},{"type": "listitem","children": [{"type": "text","children": [],"string": "Positive integers: number of times that "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " must be replicated along the respective dimensions #1, #2, etc.. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "siz"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vector of replication numbers: "},{"type": "literal","children": [],"string": "siz=[m,n,..]"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Tiled array or ND-array, of sizes [m*size(A,1), n*size(A,2), ..] or [siz(1)*size(A,1), siz(2)*size(A,2), ..]. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["kron", "ndgrid", "insertion"]},"squarewave": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "squarewave"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gera uma onda quadrada de período 2*%pi"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x=squarewave(t [,percent])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais, discretização do tempo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais, o valor da onda em cada ponto do tempo no conjunto (-1,+1)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "percent"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real positivo, a porcentagem do período no qual o sinal é positivo. O valor padrão é 50"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sin", "cos"]},"testmatrix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "testmatrix"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "generate special matrices, such as Hilbert, Frank"},"string": []},{"type": "refpurpose","children": {"type": "emphasis","children": [],"string": "This function is obsolete. Please use magic, invhilb or frank instead."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "[y] = testmatrix(name, n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integers, matrix size"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " x "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " matrix"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"toeplitz": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "toeplitz"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Toeplitz matrix (chosen constant diagonal bands)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["A = toeplitz(c)", "A = toeplitz(c, r)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c, r"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "vectors or matrices of booleans, numbers, polynomials, rationals, or texts, dense or sparse encoded (booleans or numbers)."},"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "c"},{"type": "text","children": [],"string": " are values expected on the first column and subsequent lower diagonals. "},{"type": "varname","children": [],"string": "r"},{"type": "text","children": [],"string": " are values expected on the first row and subsequent upper diagonals."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If both "},{"type": "literal","children": [],"string": "c"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "r"},{"type": "text","children": [],"string": " are provided, "},{"type": "literal","children": [],"string": "c(1)==r(1)"},{"type": "text","children": [],"string": " is required."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The types of "},{"type": "literal","children": [],"string": "c"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "r"},{"type": "text","children": [],"string": " must be compatible w.r.t. the concatenation."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Matrix of the type of "},{"type": "varname","children": [],"string": "c"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "r"},{"type": "text","children": [],"string": " (with usual types priorities)"}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is of size "},{"type": "literal","children": [],"string": "[size(c,\"*\"), size(c,\"*\")]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "[size(c,\"*\"), size(r,\"*\")]"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse encoded as soon as either "},{"type": "varname","children": [],"string": "c"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "r"},{"type": "text","children": [],"string": " or both are sparse encoded."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["diag", "eye", "levin"]},"vander": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "vander"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Vandermonde matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["v = vander(x)", "v = vander(x, n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer value, the number of columns of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": ".  By default, n is equal to "},{"type": "literal","children": [],"string": "size(x, \"*\")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": [{"type": "varname","children": [],"string": "number of rows of x"},{"type": "text","children": [],"string": " x "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " matrix"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "toeplitz"},"zeros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zeros"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz feita de zeros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=zeros()", "y=zeros(x)", "y=zeros(m1,m2,..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m1, m2,.."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["eye", "ones", "spzeros", "signed_zero"]},"grand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "grand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate random numbers"},"string": []},"synopsis": [{"type": "synopsis","children": [],"string": ["Y = grand(m, n, \"bet\", A, B)", "Y = grand(m, n, \"bin\", N, p)", "Y = grand(m, n, \"nbn\", N, p)", "Y = grand(m, n, \"chi\", Df)", "Y = grand(m, n, \"nch\", Df, Xnon)", "Y = grand(m, n, \"exp\", Av)", "Y = grand(m, n, \"f\", Dfn, Dfd)", "Y = grand(m, n, \"nf\", Dfn, Dfd, Xnon)", "Y = grand(m, n, \"gam\", shape, rate)", "Y = grand(m, n, \"nor\", Av, Sd)", "Y = grand(m, n, \"geom\", p)", "Y = grand(m, n, \"poi\", mu)", "Y = grand(m, n, \"def\")", "Y = grand(m, n, \"unf\", Low, High)", "Y = grand(m, n, \"uin\", Low, High)", "Y = grand(m, n, \"lgi\")", "Y = grand(m, n, o, …, PDFname, …)", "Y = grand(X, PDFname, …)"]},{"type": "synopsis","children": [],"string": ["Y = grand(n, \"mn\", Mean, Cov)", "Y = grand(n, \"markov\", P, x0)", "Y = grand(n, \"mul\", nb, P)", "Y = grand(n, \"prm\", array)"]},{"type": "synopsis","children": [],"string": ["S = grand(\"getgen\")", "grand(\"setgen\", gen)", "S = grand(\"getsd\")", "grand(\"setsd\", S)", "grand(\"setcgn\", G)", "S = grand(\"getcgn\")", "S = grand(\"phr2sd\", phrase)", "grand(\"initgn\", I)", "grand(\"setall\", s1, s2, s3, s4)", "grand(\"advnst\", K)"]}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m, n, o"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integers, size of the wanted matrix / hypermatrix "},{"type": "varname","children": [],"string": "Y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix or hypermatrix whom only the dimensions (say "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": "-by-"},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": ") are used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PDFname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Name of the chosen probability Density Function: "},{"type": "literal","children": [],"string": "\"def\", \"unf\", \"uin\", \"bet\", \"gam\",\"exp\", \"nor\", \"geo\", \"poi\", \"bin\", \"chi\", \"nbn\", \"nch\", \"f\", \"nf\", \"lgi\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "depending on the input, a matrix or hypermatrix, with random entries."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output of the action (a string or a real column vector)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["rand", "sprand", "ssrand", "randpencil", "genmarkov"]},"prbs_a": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "prbs_a"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generates a pseudo random binary sequence"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["u = prbs_a(n, nc)", "u = prbs_a(n, nc, ids)", "u = prbs_a(n, nc, positions)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "text","children": [],"string": "positive integer: length of the sequence."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nc"},{"type": "listitem","children": {"type": "text","children": [],"string": "integer in [0, n-1]: number of commutations required."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "positions"},{"type": "listitem","children": {"type": "text","children": [],"string": "vector of integers in [0, n-1]: indices of required commutations in u."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "text","children": [],"string": "Row vector of n values in {-1, 1}."},"string": []}],"string": []}],"string": []},"seealso": ["grand", "grand", "sprand", "randpencil"]},"rand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gerador de números randômico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["rand(m1,m2,.. [,key])", "rand(x [, key])", "rand()", "rand(key)", "rand(\"seed\" [,n])", "rand(\"info\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string com valor "},{"type": "literal","children": [],"string": "\"uniform\""},{"type": "text","children": [],"string": ", ou "},{"type": "literal","children": [],"string": "\"normal\""}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz. Apenas suas dimensões são levadas em conta "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["grand", "ssrand"]},"sample": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sample"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sampling: random draw with replacement"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = sample(n, X, orient)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer (size of sample)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array of any data type, or cells array. Samples will be extracted from this array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The shape of samples: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "'*'"},{"type": "text","children": [],"string": " (default): elements of "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " are sampled."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'r'"},{"type": "text","children": [],"string": ": rows of "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " are sampled."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": ": rolumns of "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " are sampled."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector, matrix, or cells array containing the samples, of same type as "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["samplef", "samwr", "grand"]},"samplef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "samplef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sample values with replacement from a population with given frequencies."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = samplef(n,X,f,orient)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer (size of sample)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix. Population, samples are extracted from this matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of positive real values. Indicates the corresponding frequencies of the values in "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Optional parameter. Admissible values are "},{"type": "literal","children": [],"string": "{'*'}, 1, 2, 'r' "},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": ". The orientation to sample rows or columns. See Description below."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector or matrix containing the sampled values of "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": " at frequencies "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sample", "samwr", "grand"]},"samwr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "samwr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sampling without replacement "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = samwr(sizam, numsamp, X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sizam"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer. Size of a sample. It must be lower than or equal to the size of "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "numsamp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer. Number of samples to be extracted."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector. It contains the population."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of size "},{"type": "literal","children": [],"string": "sizsam * numsamp"},{"type": "text","children": [],"string": ". It contains "},{"type": "literal","children": [],"string": "numsamp"},{"type": "text","children": [],"string": " random samples (the columns) each of "},{"type": "literal","children": [],"string": "sizam"},{"type": "text","children": [],"string": " extractions without replacement from "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sample", "samplef", "grand"]},"exp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "exp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "exponencial em relação aos elementos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "exp(X)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar, vetor ou matriz de entradas reais ou complexas."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"expm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "expm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "exponencial de matriz quadrada (matriz exponencial)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "expm(X)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "square matrix with real or complex entries."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["logm", "bdiag", "coff", "log", "exp"]},"log": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "log"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "logaritmo natural"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = log(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "arrays of real or complex numbers, of any number of dimensions and of any identical sizes."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["exp", "logm", "log10", "ieee"]},"log10": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "log10"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "logaritmo na base 10"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = log10(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "arrays of real or complex numbers, of any number of dimensions and of any identical sizes."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["log", "logm", "hat", "ieee"]},"log1p": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "log1p"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa, com precisão, o logaritmo natural de seu argumento acrescido de uma unidade"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=log1p(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou vetor ou matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou vetor ou matriz de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "log"},"log2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "log2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Base-2 logarithm. Base-2 exponent and mantissa of some real numbers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = log2(x)", "[m, e] = log2(u)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "arrays of real or complex numbers, such that "},{"type": "literal","children": [],"string": "2.^y = x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u, m, e"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "arrays of real numbers such that "},{"type": "literal","children": [],"string": "u = m .* 2.^e"},{"type": "text","children": [],"string": ", with "},{"type": "literal","children": [],"string": "sign(m)=sign(u)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "0.5 ≤ abs(m) < 1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["log", "log10", "nextpow2", "bitstring", "hat"]},"logm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "logm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "logaritmo de matriz quadrada (matriz logaritmo)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=logm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["expm", "log"]},"nthroot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nthroot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Real nth root of real numbers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=nthroot(x,n)"},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar or vector/matrix"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar or vector/matrix"},"string": []},"string": []}],"string": []},"string": []}],"seealso": ["hat", "sqrt", "sqrtm"]},"power": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "power"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(^,.^) power operation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = A ^ b", "t = A ** b", "t = A .^ b"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, t"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a scalar, vector, or matrix of encoded integers, decimal or complex numbers, polynomials, or rationals. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a scalar, vector, or matrix of encoded integers, decimal or complex numbers. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["exp", "expm", "hat", "inv"]},"sqrt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sqrt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "raiz quadrada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=sqrt(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou complexo ou vetor de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["hat", "sqrtm"]},"sqrtm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sqrtm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "raiz quadrada da matriz (matriz raiz quadrada)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=sqrtm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["expm", "sqroot"]},"ceil": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ceil"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arredonda o número para o inteiro maior ou igual ao número"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=ceil(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de inteiros "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["round", "floor", "int"]},"clean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "limpa matrizes (arredonda para zero entradas pequenas)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["B = clean(A)", "B = clean(A, epsa)", "B = clean(A, epsa, epsr)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número escalar, vetor, matriz ou hipermatriz de números decimais ou de números complexos, em codificação densa ou esparsa, ou de polinômios ou racionais com coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsa, epsr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "números reais positivos: tolerâncias de limpeza. Ambos os valores padrão são 10"},{"type": "superscript","children": [],"string": "-10"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["percenteps", "cond", "nearfloat", "number_properties"]},"double": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "double"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converts inttype integers or booleans into decimal encoding"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = double(X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of encoded integers or booleans"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of numbers in decimal notation"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["iconvert", "bool2s", "int8", "inttype", "type", "bin2dec", "oct2dec", "hex2dec", "base2dec"]},"fix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fix"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arredonda em direção a zero"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=fix(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["round", "floor", "ceil"]},"floor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "floor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arredondamento para o inteiro menor ou igual ao número"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=floor(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["round", "fix", "ceil"]},"format": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "format"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set the default output format of decimal numbers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["format(mode)", "format(width)", "format(mode, width)", "format(wm)", "mw = format()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "formatting mode: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "1 or \"v\": "},{"type": "emphasis","children": [],"string": "v"},{"type": "text","children": [],"string": "ariable adaptative formatting. Scilab chooses either the direct representation (e.g. -143.8757) or the exponential/engineering/scientific notation (e.g. -1.438E+02), in order to cope with each processed value as well as with the required width, with a maximal number of output digits."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "0 or \"e\": The "},{"type": "emphasis","children": [],"string": "e"},{"type": "text","children": [],"string": "xponential /"},{"type": "emphasis","children": [],"string": "e"},{"type": "text","children": [],"string": "ngineering notation is forced and used for all numbers."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "width"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "width of numbers = number of output characters used, all included: sign of the mantissa, its digits, decimal separator, exponent symbol, sign and digits of the exponent. Default width = 10. Minimal width in \"e\" mode = 8."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wm"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector to set new format "},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "wm(1)"},{"type": "text","children": [],"string": " is the width"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "wm(2)"},{"type": "text","children": [],"string": " is the formatting mode: 0 for "},{"type": "literal","children": [],"string": "'e'"},{"type": "text","children": [],"string": " and 1 for "},{"type": "literal","children": [],"string": "'v'"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mw"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector returning the current formatting parameters: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "mw(1)"},{"type": "text","children": [],"string": " is the formatting mode: 0 for "},{"type": "literal","children": [],"string": "'e'"},{"type": "text","children": [],"string": " and 1 for "},{"type": "literal","children": [],"string": "'v'"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "mw(2)"},{"type": "text","children": [],"string": " is the width: Number of characters used to output each number."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["number_properties", "string", "sci2exp", "disp", "print", "clean", "printf_conversion", "mprintf", "msprintf", "mfprintf"]},"ieee": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ieee"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ajusta o modo de exceção de ponto flutuante"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mod=ieee()", "ieee(mod)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar inteiro com possíveis valores 0,1,ou 2"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["percentnan", "percentinf", "isinf", "isnan", "number_properties"]},"int": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "int"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "parte inteira"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=int(X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["round", "floor", "ceil"]},"isinf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isinf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tests for infinite elements"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = isinf(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of real or complex numbers, or of polynomials with real or complex coefficients."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of booleans of the same size as "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["percentinf", "isnan", "isreal", "isnum", "type"]},"isnan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isnan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica entradas NaN (\"não é um número\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r=isnan(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix r : boolean vector or matrix"},"string": []},"string": []}],"string": []},"string": []},"seealso": "isinf"},"nearfloat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nearfloat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get previous or next floating-point number"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xnear = nearfloat(dir, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (\"succ\" ou \"pred\") "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real, vetor ou matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xnear"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real, vetor ou matriz de reais "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["number_properties", "log2"]},"nextpow2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nextpow2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "próxima potência de 2 mais alta "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = nextpow2(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["log2", "nearfloat", "bitstring"]},"number_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "number_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "determina parâmetros de ponto flutuante"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pr = number_properties(prop)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prop"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou booleano "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["nearfloat", "log2", "signed_zero"]},"round": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "round"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arredondamento para inteiro mais próximo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=round(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros ou complexos (com partes reais e imaginárias inteiras )"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["int", "floor", "ceil"]},"signed_zero": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "signed zero -0"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Processing of -0 versus 0"},"string": []},"synopsis": [],"varlist": [],"seealso": ["percentinf", "zeros", "sparse", "number_properties"]},"base2dec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "base2dec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão da base b para inteiros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "d=base2dec(s,b)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings correspondentes às representações em base b"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, a base"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bin2dec", "oct2dec", "hex2dec", "dec2bin", "dec2oct", "dec2hex"]},"bin2dec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bin2dec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de representação binária para inteira"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=bin2dec(str)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string ou vetor/matriz de strings contendo apenas caracteres '1' e '0'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um escalar ou um vetor/matriz de inteiros positivos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["base2dec", "oct2dec", "hex2dec", "dec2bin", "bitstring"]},"dec2base": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dec2base"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert decimal to base N number in string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["str = dec2base(d, base)", "str = dec2base(d, base, n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of strings corresponding to \"base\" representation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "base"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1-by-1 matrix of doubles, positive integer value, the base"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of doubles, positive integer values"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["base2dec", "bin2dec", "oct2dec", "hex2dec", "dec2bin", "dec2oct", "dec2hex"]},"dec2bin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dec2bin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "representação binária"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["str = dec2bin(x)", "str = dec2bin(x, n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar/vetor/matriz/hypermatriz de inteiros positivos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro positivo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string ou vetor de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bitstring", "dec2base", "dec2oct", "dec2hex", "bin2dec"]},"dec2hex": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dec2hex"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "representação hexadecimal de inteiros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h=dec2hex(d)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros não-negativos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["base2dec", "bin2dec", "oct2dec", "hex2dec", "dec2bin", "dec2oct"]},"dec2oct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dec2oct"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "representação octal de inteiros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "o=dec2oct(d)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros não-negativos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "o"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["base2dec", "bin2dec", "oct2dec", "hex2dec", "dec2bin", "dec2hex"]},"hex2dec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hex2dec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de representação hexadecimal para inteiros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "d=hex2dec(h)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings correspondentes às representações hexadecimais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["base2dec", "bin2dec", "oct2dec", "dec2bin", "dec2oct", "dec2hex"]},"oct2dec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "oct2dec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de octais para inteiros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "d=oct2dec(o)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "o"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings correspondentes às representações octais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["base2dec", "bin2dec", "hex2dec", "dec2bin", "dec2oct", "dec2hex"]},"iconvert": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iconvert"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação inteira de 1 a 8 bytes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = iconvert(X, itype)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de números decimais ou inteiros codificados. Os números complexos não são aceitos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros codificados em 1, 2, 4 ou 8 bytes "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["int8", "inttype", "double", "dec2bin", "dec2base"]},"int8": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "int8"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "int16"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "int32"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "int64"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "uint8"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "uint16"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "uint32"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "uint32"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 1 byte"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 2 bytes"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 4 bytes"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 8 bytes"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 1 byte sem sinal"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 2 bytes sem sinal"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 4 bytes sem sinal"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para representação de inteiro de 8 bytes sem sinal"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["y = int8(X)", "y = int16(X)", "y = int32(X)", "y = int64(X)", "y = uint8(X)", "y = uint16(X)", "y = uint32(X)", "y = uint64(X)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de booleanos, de inteiros codificados, ou de números reais ou complexos decimais. Matrix of strings representing literal big integers for "},{"type": "literal","children": [],"string": "int64"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "uint64"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros codificados em 1, 2, 4 ou 8 bytes. Seus tamanhos são os de X."},"string": []}],"string": []}],"string": []},"seealso": ["iconvert", "inttype", "double", "dec2bin", "dec2base"]},"inttype": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "inttype"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tipos de dados inteiros"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[i]=inttype(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de inteiros (ver int8,..)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "int8"},"cat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "empilha matrizes ou arrays vectoriais numa hipermatriz ou hiperarray"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = cat(dim, A1, A2,..., An)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número inteiro > 0 : índice da dimensão ao longo da qual as matrizes de entrada devem ser empilhadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A1,A2,..An"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares, vetores, matrizes, multi-arrays ou cell arrays, de tipos de dados compatíveis. A1, A2, ..., An, devem ter o mesmo tamanho (excluindo o número de dimensão dim). size(A1,i)=size(A2,i)=...=size(An,i) para i diferente de dim e size(A1,dim), size(A2,dim),...,size(An,dim) podem ser diferentes"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um escalar, vetor, matriz ou multi-array."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["brackets", "lstcat", "permute", "matrix"]},"circshift": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "circshift"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "circularly shifts elements or subarrays of an array (regular, of structures, cells, custom)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["B = circshift(A, shift)", "B = circshift(A, shift, 0)", "B = circshift(A, shifts)", "B = circshift(A, shifts, dims)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "row, column, matrix or 2D array, hypermatrix or ND-array of any number of dimensions and of any sizes. "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " has the shape, sizes and type of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": ". Custom types are accepted provided that "},{"type": "literal","children": [],"string": "size()"},{"type": "text","children": [],"string": ", insertion, and extraction operators are defined for "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": "'s type."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shift"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "unique positive or negative integer: the shift to apply to indices along the first non-singleton dimension, or to linear indices of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " components if "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": " is used as third input argument."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shifts"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of positive or negative integers: shifts to apply on ranges along directions specified in "},{"type": "varname","children": [],"string": "dims"},{"type": "text","children": [],"string": " (or "},{"type": "literal","children": [],"string": "1:length(shifts)"},{"type": "text","children": [],"string": " by default)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Vector of integers in "},{"type": "literal","children": [],"string": "[1, ndims(A)]"},{"type": "text","children": [],"string": ": indices of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " dimensions along which the respective "},{"type": "literal","children": [],"string": "shifts"},{"type": "text","children": [],"string": " must be performed."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["flipdim", "fftshift"]},"flipdim": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "flipdim"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "reverses the order of (blocks of) rows, columns, pages.. of an array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = flipdim(x, dim)", "y = flipdim(x, dim, blockSize)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vectors, matrices, or hypermatrices of any regular data type, or cells array. "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " gets the sizes of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "positive integer : index of the dimension / direction of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " along which the order of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " components must be inverted."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "blockSize"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a positive integer, sub-multiple of "},{"type": "literal","children": [],"string": "size(x,dim)"},{"type": "text","children": [],"string": ": number of rows, of columns, of pages etc in each block. Default value = 1"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["circshift", "fftshift", "ifftshift", "colon"]},"matrix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matrix"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Muda a forma de vetores ou matrizes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = matrix(v, m, n)", "y = matrix(v, m1, m2, m3, ..)", "y = matrix(v, [sizes])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor, matriz ou hipermatriz "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n, m, m1, m2, .."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sizes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor, matriz ou hipermatriz "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"permute": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "permute"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "permutes the dimensions of an array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = permute(x, dims)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an array with any number of dimensions (0, 1, 2, or any number n>2), of any data type: booleans, integers, decimal real or complex numbers, polynomials, rationals, array of structures, array of cells."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a valid permutation of 1:n>=nmin where n is the number of dimensions of the desired array, at least as many as "},{"type": "literal","children": [],"string": "nmin = ndims(x)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The dimension "},{"type": "literal","children": [],"string": "#i"},{"type": "text","children": [],"string": " in "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " was the dimension "},{"type": "literal","children": [],"string": "#dims(i)"},{"type": "text","children": [],"string": " in "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an array with the contents of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ", with identical but permuted sizes."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pertrans", "quote", "ndims", "squeeze"]},"pertrans": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pertrans"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz pertransposta"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Y]=pertrans(X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"resize_matrix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "resize_matrix"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "trim or/and extend (and cast) a matrix or hypermatrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["resize_matrix   // demo", "resMat = resize_matrix(mat, nbRows, nbCols)", "resMat = resize_matrix(mat, nbRows, nbCols, resType)", "resMat = resize_matrix(mat, nbRows, nbCols, resType, padding)", "resMat = resize_matrix(mat, nbRows, nbCols,    \"\"  , padding)", "resMat = resize_matrix(mat, newSizes)", "resMat = resize_matrix(mat, newSizes, resType)", "resMat = resize_matrix(mat, newSizes, resType, padding)", "resMat = resize_matrix(mat, newSizes,    \"\"  , padding)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mat"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input matrix or hypermatrix. booleans, encoded integers, decimal-encoded numbers (real or complex), polynomials, or text are supported."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbRows"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "new number of rows of the resized matrix. Exceeding rows are trimmed. Missing rows are added by padding. Setting "},{"type": "literal","children": [],"string": "nbRows < 0"},{"type": "text","children": [],"string": " keeps the current number of rows."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbCols"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "new number of columns of the resized matrix. Exceeding columns are trimmed. Missing columns are added by padding. Setting "},{"type": "literal","children": [],"string": "nbCols < 0"},{"type": "text","children": [],"string": " keeps the current number of columns."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newSizes"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vector specifying the new sizes along each dimension of "},{"type": "varname","children": [],"string": "mat"},{"type": "text","children": [],"string": ". To keep a new size equal to the current one, just set it to -1."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the vector "},{"type": "literal","children": [],"string": "newSizes"},{"type": "text","children": [],"string": " is shorter than "},{"type": "literal","children": [],"string": "size(mat)"},{"type": "text","children": [],"string": ", it is padded with ones. Example: if "},{"type": "varname","children": [],"string": "mat"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "size(mat)==[ 4 3 3 2]"},{"type": "text","children": [],"string": " is provided and "},{"type": "literal","children": [],"string": "newSizes=[6 2]"},{"type": "text","children": [],"string": " is specified, "},{"type": "literal","children": [],"string": "newSizes = [6 2 1 1]"},{"type": "text","children": [],"string": " is considered."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Conversely, if "},{"type": "varname","children": [],"string": "newSizes"},{"type": "text","children": [],"string": " is longer than "},{"type": "literal","children": [],"string": "size(mat)"},{"type": "text","children": [],"string": ", new dimensions are added to "},{"type": "varname","children": [],"string": "mat"},{"type": "text","children": [],"string": " and padded. Example: if "},{"type": "varname","children": [],"string": "mat"},{"type": "text","children": [],"string": " such that "},{"type": "literal","children": [],"string": "size(mat)==[ 4 3 ]"},{"type": "text","children": [],"string": " is provided and "},{"type": "literal","children": [],"string": "newSizes=[6 2 2]"},{"type": "text","children": [],"string": " is specified, the result will be an hypermatrix with 2 pages, the second one being fully padded."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "newSizes = [nbRows, nbCols]"},{"type": "text","children": [],"string": " may be used for a matrix."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "padding"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "optional scalar of same type as "},{"type": "varname","children": [],"string": "mat"},{"type": "text","children": [],"string": ", specifying the content to set in elements created when the size along a dimension is increased. The default padding is done with "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": " (real or complex decimals, encoded integers, polynomials), or "},{"type": "literal","children": [],"string": "\"\""},{"type": "text","children": [],"string": " (text), or "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " (booleans)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "varname","children": [],"string": "mat"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "padding"},{"type": "text","children": [],"string": " types do not match, scilab tries to convert the "},{"type": "varname","children": [],"string": "padding"},{"type": "text","children": [],"string": "'s one"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "For polynomials, the varname of the padding is forced to the "},{"type": "varname","children": [],"string": "mat"},{"type": "text","children": [],"string": "'s one."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "resType"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "optional text word specifying the data type into which the resized matrix must be converted. \"boolean\", \"constant\", \"string\", \"int8\", \"uint8\", \"int16\", \"uint16\", \"int32\", \"uint32\", \"int64\", and \"uint64\" are supported."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Type conversion is supported neither for Polynomials nor for hypermatrix of text."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "resMat"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resized (and converted) matrix or hypermatrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["matrix", "size", "typeof", "double", "strtod", "string"]},"squeeze": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "squeeze"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "removes singleton dimensions of a ND-array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = squeeze(hypIn)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hypIn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a ND-array of any native type (boolean, .., cells, structures)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an array or ND-array of the same type."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["matrix", "hypermatrices"]},"tril": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tril"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "parte triangular inferior de uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tril(x [,k])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz (de reais, complexos, polinômios ou razões de polinômios)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (valor padrão 0)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["triu", "ones", "eye", "diag"]},"triu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "triu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "triângulo superior da matriz"},"string": []},"synopsis": [],"varlist": [],"seealso": ["tril", "ones", "eye", "diag"]},"iscolumn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iscolumn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if a variable is a column"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=iscolumn(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar,vector, matrix, hypermatrix, list, array of structures or cells"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isscalar", "isrow", "ismatrix", "issquare", "isempty"]},"ismatrix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ismatrix"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checks if an object is a non-empty 1D or 2D matrix or array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tf = ismatrix(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar,vector, matrix, hypermatrix, list, array of structures or of cells"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isscalar", "isrow", "iscolumn", "issquare", "isempty", "ndims"]},"isrow": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isrow"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if a variable is a row"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=isrow(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar,vector, matrix, hypermatrix, list, array of structures or cells"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isscalar", "iscolumn", "ismatrix", "issquare", "isempty"]},"isscalar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isscalar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if a variable is a scalar."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=isscalar(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar,vector, matrix, hypermatrix, list, array of structures or cells"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ismatrix", "isrow", "iscolumn", "issquare", "isempty"]},"issquare": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "issquare"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if a variable is a square matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=issquare(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar, vector, matrix, hypermatrix, list, array of structures or cells"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isscalar", "isrow", "iscolumn", "ismatrix", "isempty"]},"isvector": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isvector"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if a variable is a vector"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=isvector(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"abs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "abs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "valor absoluto, magnitude"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=abs(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"and": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "and"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "logical AND between the elements of a boolean or numerical array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["b = and(A)", "b = and(A, 'r')", "b = and(A, 'c')", "b = and(A, n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vector, matrix, or hypermatrix of booleans, encoded integers (of any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": "), real, or complex numbers. "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " may be "},{"type": "link","children": [],"string": "sparse"},{"type": "text","children": [],"string": "-encoded."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A number is considered as %F (false) if it is 0 or 0+0i. Otherwise (including %nan), it is equivalent to %T (true)."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "boolean scalar, if "},{"type": "literal","children": [],"string": "and(A)"},{"type": "text","children": [],"string": " is used without any option "},{"type": "varname","children": [],"string": "\"r\", \"c\", n"},{"type": "text","children": [],"string": ". Then "},{"type": "literal","children": [],"string": "and(A)"},{"type": "text","children": [],"string": " sets "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " to "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "%F, if at least one of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": "'s components is %F or zero."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "%T, otherwise: All "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " components are %T or non zero or %nan."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Otherwise: boolean vector, matrix or hypermatrix. See "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " below."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse-encoded, "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is so as well."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Index <= ndims(A) of the dimension along which "},{"type": "function","children": [],"string": "and()"},{"type": "text","children": [],"string": " is applied / projected. By default, "},{"type": "function","children": [],"string": "and()"},{"type": "text","children": [],"string": " is applied between all "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": "'s elements. Otherwise: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "n = 1 | \"r\" : "},{"type": "function","children": [],"string": "and()"},{"type": "text","children": [],"string": " is applied row-wise. If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a matrix, the result "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is a "},{"type": "emphasis","children": [],"string": "r"},{"type": "text","children": [],"string": "ow, with "},{"type": "literal","children": [],"string": "b(j) = and(A(:,j))"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "n = 2 | \"c\" : "},{"type": "function","children": [],"string": "and()"},{"type": "text","children": [],"string": " is applied column-wise. If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a matrix, the result "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is a "},{"type": "emphasis","children": [],"string": "c"},{"type": "text","children": [],"string": "olumn, with "},{"type": "literal","children": [],"string": "b(i) = and(A(i,:))"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "n > 2 : If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is an hypermatrix with at least "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " dimensions, "},{"type": "function","children": [],"string": "and()"},{"type": "text","children": [],"string": " is applied accross the n"},{"type": "superscript","children": [],"string": "th"},{"type": "text","children": [],"string": " dimension. "},{"type": "para","children": [{"type": "text","children": [],"string": "Example: If "},{"type": "literal","children": [],"string": "ndims(A)==3"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "n=3"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is a boolean matrix of size size(A)([1 2]), with "},{"type": "literal","children": [],"string": "b(i,j) = and(A(i,j,:)) "}],"string": []}],"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["and_op", "or", "not"]},"cross": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cross"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "vector cross product"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "C = cross(A,B)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real, complex, polynomial or boolean matrix of size 3-by-N or 1-by-3."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real, complex, polynomial or boolean matrix of same size as A."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real, complex, polynomial or boolean matrix of same size as A and B."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"cumprod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cumprod"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "produto cumulativo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = cumprod(x)", "y = cumprod(x, orientation)", "y = cumprod(x, outtype)", "y = cumprod(x, orientation, outtype)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cumsum", "sum", "prod"]},"cumsum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cumsum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "somas cumulativas parciais dos elementos de uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = cumsum(x)", "y = cumsum(x, 'r') or y = cumsum(x, 1)", "y = cumsum(x, 'c') or y = cumsum(x, 2)", "y = cumsum(x, orientation)", "y = cumsum(.., outtype)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de booleanos, inteiros, números reais ou complexos, polinômios ou frações racionais. Hipermatrizes ou matrizes booleanas ou numéricas esparsas também são suportadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"r\", \"c\", 1, 2,.. orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument can be"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "either a string with possible values "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"m\""}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer 1 ≤ orientation ≤ ndims(x): the index of the dimension along which the partial cumulative sums must be computed. 1 and \"r\", and 2 and \"c\", are equivalent."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outtype"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Word "},{"type": "literal","children": [],"string": "\"native\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"double\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array de tamanho igual ao de "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sum", "cumprod"]},"kron": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kron .*."},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Produto de Kronecker. Weighted array replication"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["P = kron(A, B)", "P = A .*. B"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Arrays of size (a1, a2, ..) and (b1, b2, ..), with any number of dimensions. If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " is sparse, the other one can't be an hypermatrix."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Supported encodings and types: boolean, integer, real, complex, polynomial, rational, sparse boolean, sparse real, sparse complex."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " data type, and of size (a1*b1, a2*b2, ..). If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "B"},{"type": "text","children": [],"string": " is sparse, "},{"type": "varname","children": [],"string": "P"},{"type": "text","children": [],"string": " is sparse."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["krondivide", "star", "prod", "cumprod", "repmat"]},"krondivide": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kron .\\. ./."},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Kronecker left and right divisions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X = A .\\. B       // while B = A .*. X", "X = B ./. A       // while B = X .*. A"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "text","children": [],"string": "Array of decimal or complex numbers, of size (x1,x2,..)."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "text","children": [],"string": "Array of decimal or complex numbers, of size (a1,a2,..), with any number of dimensions."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "text","children": [],"string": "Array of decimal or complex numbers, of size (a1*x1, a2*x2,..), with any number of dimensions."},"string": []}],"string": []}],"string": []},"seealso": ["kron", "slash", "backslash", "star"]},"max": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "max"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "maximum"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["m = max(A)", "Col = max(A, 'c')", "Row = max(A, 'r'|'m')", "M = max(A1, A2,..., An)", "M = max(list(A1, A2,..., An))", "[.., K] = max(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, A1, ..., An"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalars, vectors, matrices or hypermatrices of encoded integers or of real numbers, in dense or sparse format. They must have the same sizes, or be mixed with scalars (scalars are then implicitly expanded to the arrays sizes). Sparse arrays can't be mixed with dense ones, except with dense scalars."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "single number = maximum of all values of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " elements. Always in dense format, even when "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse encoded."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Col"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "column vector if "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a 2D matrix, or hypermatrix of size(A) with size(A,2) set to 1: Maxima over columns (for each row). If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse, then "},{"type": "varname","children": [],"string": "Col"},{"type": "text","children": [],"string": " is sparse as well."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Row"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "row vector if "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a 2D matrix, or hypermatrix of size(A) with size(A,1) set to 1: Maxima over rows (for each column). If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse, then "},{"type": "varname","children": [],"string": "Row"},{"type": "text","children": [],"string": " is sparse as well."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of size = "},{"type": "literal","children": [],"string": "size(A1)"},{"type": "text","children": [],"string": ", such that for any q "},{"type": "literal","children": [],"string": "M(q) = max(A1(q),A2(q),..An(q))"},{"type": "text","children": [],"string": " If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": ",..,"},{"type": "varname","children": [],"string": "An"},{"type": "text","children": [],"string": " are sparse, then "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is sparse as well."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Indices in "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": ".. of the (first) maximum found. When "},{"type": "literal","children": [],"string": "[m,K]=max(A)"},{"type": "text","children": [],"string": " is used, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " is a vector, K is a scalar."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Otherwise, "},{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " is a row vector [i,j,..] of subscripts."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "For other syntaxes, "},{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " has the shape and sizes of "},{"type": "varname","children": [],"string": "Col"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "Row"},{"type": "text","children": [],"string": ", and "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "With the "},{"type": "literal","children": [],"string": "[M,K] = max(A1,A2,..,An)"},{"type": "text","children": [],"string": " syntax, we have, for any linear index q: "},{"type": "literal","children": [],"string": "[M(q),K(q)] = max([A1(q) A2(q) .. An(q)])"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "warning","children": [{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " is always in dense format, even when "},{"type": "varname","children": [],"string": "A, A1,..,An"},{"type": "text","children": [],"string": " are sparse-encoded. Hence, when the "},{"type": "literal","children": [],"string": "[M,K]=max(A1,A2,..)"},{"type": "text","children": [],"string": " syntax is used with huge but sparse matrices, this may lead to a huge "},{"type": "emphasis","children": [],"string": "dense"},{"type": "text","children": [],"string": " "},{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " matrix. The user must check that enough memory is available for it."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["min", "strange", "mean", "gsort", "find", "full"]},"min": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "min"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "minimum"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["m = min(A)", "Col = min(A, 'c')", "Row = min(A, 'r'|'m')", "M = min(A1, A2,..., An)", "M = min(list(A1, A2,..., An))", "[.., K] = min(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, A1, ..., An"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalars, vectors, matrices or hypermatrices of encoded integers or of real numbers, in dense or sparse format. They must have the same sizes, or be mixed with scalars (scalars are then implicitly expanded to the arrays sizes). Sparse arrays can't be mixed with dense ones, except with dense scalars."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "single number = minimum of all values of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " elements. Always in dense format, even when "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse encoded."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Col"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "column vector if "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a 2D matrix, or hypermatrix of size(A) with size(A,2) set to 1: Minima over columns (for each row). If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse, then "},{"type": "varname","children": [],"string": "Col"},{"type": "text","children": [],"string": " is sparse as well."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Row"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "row vector if "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a 2D matrix, or hypermatrix of size(A) with size(A,1) set to 1: Minima over rows (for each column). If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse, then "},{"type": "varname","children": [],"string": "Row"},{"type": "text","children": [],"string": " is sparse as well."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of size = "},{"type": "literal","children": [],"string": "size(A1)"},{"type": "text","children": [],"string": ", such that for any q "},{"type": "literal","children": [],"string": "M(q) = min(A1(q),A2(q),..An(q))"},{"type": "text","children": [],"string": " If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": ",..,"},{"type": "varname","children": [],"string": "An"},{"type": "text","children": [],"string": " are sparse, then "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is sparse as well."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Indices in "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": ".. of the (first) minimum found. When "},{"type": "literal","children": [],"string": "[m,K]=min(A)"},{"type": "text","children": [],"string": " is used, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " is a vector, K is a scalar."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Otherwise, "},{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " is a row vector [i,j,..] of subscripts."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "For other syntaxes, "},{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " has the shape and sizes of "},{"type": "varname","children": [],"string": "Col"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "Row"},{"type": "text","children": [],"string": ", and "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "With the "},{"type": "literal","children": [],"string": "[M,K] = min(A1,A2,..,An)"},{"type": "text","children": [],"string": " syntax, we have, for any linear index q: "},{"type": "literal","children": [],"string": "[M(q),K(q)] = min([A1(q) A2(q) .. An(q)])"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "warning","children": [{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " is always in dense format, even when "},{"type": "varname","children": [],"string": "A, A1,..,An"},{"type": "text","children": [],"string": " are sparse-encoded. Hence, when the "},{"type": "literal","children": [],"string": "[M,K]=min(A1,A2,..)"},{"type": "text","children": [],"string": " syntax is used with huge but sparse matrices, this may lead to a huge "},{"type": "emphasis","children": [],"string": "dense"},{"type": "text","children": [],"string": " "},{"type": "varname","children": [],"string": "K"},{"type": "text","children": [],"string": " matrix. The user must check that enough memory is available for it."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["max", "strange", "mean", "gsort", "find", "full"]},"norm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "norm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "normas de um vetor ou uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = norm(x)", "y = norm(x, normType)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos (armazenamento cheio ou esparso)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "normType"},{"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "For a matrix "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ": a number among "},{"type": "literal","children": [],"string": "1, 2, %inf, -%inf"},{"type": "text","children": [],"string": ", or a word among "},{"type": "literal","children": [],"string": "\"inf\""},{"type": "text","children": [],"string": " (or "},{"type": "literal","children": [],"string": "\"i\""},{"type": "text","children": [],"string": ") or "},{"type": "literal","children": [],"string": "\"fro\""},{"type": "text","children": [],"string": " (or "},{"type": "literal","children": [],"string": "\"f\""},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "For a vector "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ": any number or "},{"type": "literal","children": [],"string": "%inf"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "-%inf"},{"type": "text","children": [],"string": "; or a word "},{"type": "literal","children": [],"string": "\"inf\""},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "\"i\""},{"type": "text","children": [],"string": "), "},{"type": "literal","children": [],"string": "\"fro\""},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "\"f\""},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []},"string": []},{"type": "text","children": [],"string": " Default value = 2."}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "norm: single positive real number."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h_norm", "dhnorm", "h2norm", "abs"]},"or": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "or"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "logical OR over the elements of a boolean or numerical array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["b = or(A)", "b = or(A, 'r')", "b = or(A, 'c')", "b = or(A, n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vector, matrix, or hypermatrix of booleans, encoded integers (of any "},{"type": "link","children": [],"string": "inttype"},{"type": "text","children": [],"string": "), real, or complex numbers. "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " may be "},{"type": "link","children": [],"string": "sparse"},{"type": "text","children": [],"string": "-encoded."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A number is considered as %F (false) if it is 0 or 0+0i. Otherwise (including %nan), it is equivalent to %T (true)."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "boolean scalar, if "},{"type": "literal","children": [],"string": "or(A)"},{"type": "text","children": [],"string": " is used without any option "},{"type": "varname","children": [],"string": "\"r\", \"c\", n"},{"type": "text","children": [],"string": ". It is set to "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "%F, if all "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": "'s components are %F or zero."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "%T, otherwise (at least one "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": "'s component is %T or non-zero)."}],"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Otherwise: boolean vector, matrix or hypermatrix."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is sparse-encoded, "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is so as well."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Index <= ndims(A) of the dimension along which "},{"type": "function","children": [],"string": "or()"},{"type": "text","children": [],"string": " is applied / projected. By default, "},{"type": "function","children": [],"string": "or()"},{"type": "text","children": [],"string": " is applied between all "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": "'s elements. Otherwise: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "n = 1 | \"r\" : "},{"type": "function","children": [],"string": "or()"},{"type": "text","children": [],"string": " is applied row-wise. If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a matrix, the result "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is a "},{"type": "emphasis","children": [],"string": "r"},{"type": "text","children": [],"string": "ow, with "},{"type": "literal","children": [],"string": "b(j) = or(A(:,j))"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "n = 2 | \"c\" : "},{"type": "function","children": [],"string": "or()"},{"type": "text","children": [],"string": " is applied column-wise. If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is a matrix, the result "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is a "},{"type": "emphasis","children": [],"string": "c"},{"type": "text","children": [],"string": "olumn, with "},{"type": "literal","children": [],"string": "b(i) = or(A(i,:))"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "n > 2 : If "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " is an hypermatrix with at least "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " dimensions, "},{"type": "function","children": [],"string": "or()"},{"type": "text","children": [],"string": " is applied accross the n"},{"type": "superscript","children": [],"string": "th"},{"type": "text","children": [],"string": " dimension. "},{"type": "para","children": [{"type": "text","children": [],"string": "Example: If "},{"type": "literal","children": [],"string": "ndims(A)==3"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "n=3"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is a boolean matrix of size size(A)([1 2]), with "},{"type": "literal","children": [],"string": "b(i,j) = or(A(i,j,:)) "}],"string": []}],"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["or_op", "and", "not"]},"prod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "prod"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "produto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=prod(x)", "y=prod(x,'r') ou y=prod(x,1)", "y=prod(x,'c') ou y=prod(x,2)", "y=prod(x,'m')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais ou complexos "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sum", "cumprod"]},"sign": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sign"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "signum function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "X = sign(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "А"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of encoded integers, decimal numbers, or complex numbers. "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " may be sparse."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of the same size and data type as "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["abs", "csgn", "signm"]},"sum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "soma (soma linha, soma coluna) de entradas de um vetor ou matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = sum(x)", "y = sum(x, outtype)", "y = sum(x, orientation)", "y = sum(x, orientation, outtype)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matriz ou hypermatriz de booleanos (densa ou esparsa), números inteiros codificados, números reais ou complexos (densa ou esparsa), polinômios ou racionais. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "text","children": [],"string": "it can be either "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"m\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: Index of the dimension along which the sums must be computed."},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outtype"},{"type": "listitem","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "\"native\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"double\""},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "escalar ou vetor "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["plus", "cumsum", "prod"]},"dsearch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dsearch"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Busca binária (também conhecida como busca dicótoma em francês)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[ind, occ, info] = dsearch(X, val [, ch ])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor ou matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "val"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor (linha ou coluna) de reais com n componentes em ordem estritamente crescente val(1) < val(2) < ... < val(n)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ch"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) um caractere \"c\" ou \"d\" (valor padrão \"c\") "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor ou matriz de reais com as mesmas dimensões que X"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "occ"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de reais com o mesmo formato que val (mas com n-1 componentes no caso em que ch=\"c\")"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["find", "tabul"]},"find": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "find"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fornece os índices de elementos %T ou diferentes de zero"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ii = find(x)", "[i1,i2,..] = find(x)", ".. = find(x, nmax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor, matriz ou hipermatriz de booleanos ou de números. Todos os números diferentes de zero são considerados como %T. Matrizes esparsas são aceitas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro fornecendo o número máximo de índices a serem retornados. o valor padrão é -1, que significa \"todos\". Esta opção pode ser usada por eficiência, para evitar uma busca por todos os índices."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ii"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de linha de índices linearizados de elementos %T ou diferentes de zero, ou matriz vazia []."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i1, i2, .."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de linha de índices direcionais, ou matriz vazia []."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["vectorfind", "grep", "findobj", "boolean"]},"gsort": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gsort"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sorts boolean, numerical and string arrays"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["B = gsort(A)", "B = gsort(A, method)", "B = gsort(A, method, direction)", "B = gsort(A, method, directions, rankFuncs)", "[B, k] = gsort(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar, vector, matrix or hypermatrix of booleans, integers, real or complex numbers, or strings. Sparse matrices of real numbers, of complex numbers, or of booleans can also be sorted. "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": [{"type": "text","children": [],"string": "A keyword or index > 0: The sorting method: "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "direction"},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"d\" for "},{"type": "emphasis","children": [],"string": "d"},{"type": "text","children": [],"string": "ecreasing order (default), or \"i\" for "},{"type": "emphasis","children": [],"string": "i"},{"type": "text","children": [],"string": "ncreasing one. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "directions"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of \"i\" and \"d\" characters, with as many elements than "},{"type": "varname","children": [],"string": "rankFuncs"},{"type": "text","children": [],"string": " has. "},{"type": "literal","children": [],"string": "directions(k)"},{"type": "text","children": [],"string": " is used for "},{"type": "varname","children": [],"string": "rankFuncs(k)"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rankFuncs"},{"type": "listitem","children": [{"type": "text","children": [],"string": "list() whose elements are among the following type: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "identifier "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " of a function in Scilab language or of a builtin function."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": ": colon. It stands for a "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " such that "},{"type": "literal","children": [],"string": "fun(A)"},{"type": "text","children": [],"string": " returns "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "a "},{"type": "literal","children": [],"string": "list(fun, param1, param2,..)"},{"type": "text","children": [],"string": " where "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " is the identifier of a Scilab or builtin function."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "param1, param2,.."},{"type": "text","children": [],"string": " are parameters."}],"string": []}],"string": []},{"type": "text","children": [],"string": " such that "},{"type": "literal","children": [],"string": "fun(A, param1, param2, ..)"},{"type": "text","children": [],"string": " will be called."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "The functions "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " must fullfill the following conditions: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "R=fun(A)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "R=fun(A, param1, param2,..)"},{"type": "text","children": [],"string": " must be supported."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " must work in an element-wise way, meaning: "},{"type": "literal","children": [],"string": "size(R)==size(A)"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "R(k)"},{"type": "text","children": [],"string": " is about only "},{"type": "literal","children": [],"string": "A(k)"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "R"},{"type": "text","children": [],"string": " must be of simple sortable type: boolean, integer, real, string."}],"string": []}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": [{"type": "text","children": [],"string": "The sorted array, with  "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "'s data type, encoding, and sizes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of decimal integers, of size "},{"type": "literal","children": [],"string": "size(A)"},{"type": "text","children": [],"string": ": Initial indices of "},{"type": "literal","children": [],"string": "B"},{"type": "text","children": [],"string": " elements, in "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " is a matrix, according to the chosen method, "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["comparison", "strcmp", "find", "overloading"]},"members": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "members"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "count (and locate) in an array each element or row or column of another array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[nb [,loc]] = members(N, H)", "[nb [,loc]] = members(N, H, \"last\")", "[nb [,loc]] = members(N, H, \"rows\"|\"cols\")", "[nb [,loc]] = members(N, H, \"rows\"|\"cols\", \"last\")", "[nb [,loc]] = members(N, H, \"rows\"|\"cols\", \"shuffle\")", "[nb [,loc]] = members(N, H, \"rows\"|\"cols\", \"shuffle\", \"last\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Needles: matrix or hypermatrix of booleans, integer-encoded numbers, real or complex decimal numbers, polynomials or texts. In \"rows\" or \"cols\" mode, no hypermatrix is accepted. A given value (or row or column) may appear several times in "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Haystack: matrix or hypermatrix of same data type as "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": ". In \"rows\" or \"cols\" mode, no hypermatrix is accepted, and "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " must have respectively the same number of columns or rows."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Options:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "From one to three options may be specified in any order: "},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"last\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "when the location in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " of needles from "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " is querried through "},{"type": "literal","children": [],"string": "loc"},{"type": "text","children": [],"string": ", by default the position of the first respective occurrences in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " are returned. If "},{"type": "literal","children": [],"string": "\"last\""},{"type": "text","children": [],"string": " is specified, the position of the last occurrences in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " are returned instead."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rows\", \"cols\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, each element "},{"type": "literal","children": [],"string": "N(i, j, ...)"},{"type": "text","children": [],"string": " of "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " is considered as a needle to search in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "\"rows\""},{"type": "text","children": [],"string": " is specified, each row of "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " is considered as a needle -- as a whole --, and is searched among rows of "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": ". The same applies between columns of "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " if "},{"type": "literal","children": [],"string": "\"cols\""},{"type": "text","children": [],"string": " is used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"shuffle\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "In "},{"type": "literal","children": [],"string": "\"rows\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"cols\""},{"type": "text","children": [],"string": " mode, by default the order of components of a row/column is considered: for instance, "},{"type": "literal","children": [],"string": "[ 7 3 5 ]"},{"type": "text","children": [],"string": " in "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " does not match "},{"type": "literal","children": [],"string": "[3 5 7]"},{"type": "text","children": [],"string": " in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": ". When "},{"type": "literal","children": [],"string": "\"shuffle\""},{"type": "text","children": [],"string": " is specified, any permutation of --say--"},{"type": "literal","children": [],"string": "[3 5 7]"},{"type": "text","children": [],"string": " will be considered as matching a "},{"type": "literal","children": [],"string": "[3 5 7]"},{"type": "text","children": [],"string": " row of "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": ". This option is ignored for polynomials."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "In normal mode: "},{"type": "literal","children": [],"string": "nb(i, j, ...)"},{"type": "text","children": [],"string": " returns (as reals) the number of occurrences in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " of "},{"type": "literal","children": [],"string": "N(i, j, ...)"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "nb"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " have the same format. If "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " is empty, a matrix of zeros is returned. If "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " is empty, the empty matrix "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " is returned."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "In "},{"type": "literal","children": [],"string": "\"rows\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"cols\""},{"type": "text","children": [],"string": " mode: "},{"type": "literal","children": [],"string": "nb"},{"type": "text","children": [],"string": " is a row of reals with as many components as "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " has rows/columns. "},{"type": "literal","children": [],"string": "nb(i)"},{"type": "text","children": [],"string": " returns the number of occurrences in "},{"type": "literal","children": [],"string": "H(., :)"},{"type": "text","children": [],"string": " of "},{"type": "literal","children": [],"string": "N(i, :)"},{"type": "text","children": [],"string": " (or of "},{"type": "literal","children": [],"string": "N(:, i)"},{"type": "text","children": [],"string": " in "},{"type": "literal","children": [],"string": "H(:, .)"},{"type": "text","children": [],"string": " )."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "loc"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "In normal mode: "},{"type": "literal","children": [],"string": "loc"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " have the same format. "},{"type": "literal","children": [],"string": "loc(i, j, ...)"},{"type": "text","children": [],"string": " returns the smallest linearized index in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "N(i, j, ...)"},{"type": "text","children": [],"string": " occurs. If the "},{"type": "literal","children": [],"string": "\"last\""},{"type": "text","children": [],"string": " flag is used, the greatest linearized index is returned instead. If "},{"type": "literal","children": [],"string": "N(i, j, ...)"},{"type": "text","children": [],"string": " in not found in "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "loc(i, j, ...)"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "In "},{"type": "literal","children": [],"string": "\"rows\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"cols\""},{"type": "text","children": [],"string": " mode: "},{"type": "literal","children": [],"string": "loc"},{"type": "text","children": [],"string": " is a row of reals with as many components as "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " has respectively rows or columns. "},{"type": "literal","children": [],"string": "loc(i)"},{"type": "text","children": [],"string": " returns the index of the first line "},{"type": "literal","children": [],"string": "H(loc(i), :)"},{"type": "text","children": [],"string": " matching "},{"type": "literal","children": [],"string": "N(i, :)"},{"type": "text","children": [],"string": " (or the index of the first column "},{"type": "literal","children": [],"string": "H(:, loc(i))"},{"type": "text","children": [],"string": " matching "},{"type": "literal","children": [],"string": "N(:, i)"},{"type": "text","children": [],"string": "). If the "},{"type": "literal","children": [],"string": "\"shuffle\""},{"type": "text","children": [],"string": " flag is additionally specified, the order of components along the rows/columns is not considered."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["dsearch", "intersect", "grep", "find", "vectorfind"]},"vectorfind": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "vectorfind"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "locates occurences of a (wildcarded) vector in a matrix or hypermatrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ind             = vectorfind(haystack, needle)", "ind             = vectorfind(haystack, needle, dimAlong)", "ind             = vectorfind(haystack, needle, dimAlong, ,indType)", "[ind, matching] = vectorfind(haystack, needle, dimAlong, joker)", "[ind, matching] = vectorfind(haystack, needle, dimAlong, joker, indType)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "haystack"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A matrix or hypermatrix of any type, possibly sparse encoded: The array in which the vector will be searched."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "needle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The vector to be searched in the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": ", of the same type. If the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " is sparse-encoded, the "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": " may be dense. In addition, if the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " is boolean and a "},{"type": "varname","children": [],"string": "joker"},{"type": "text","children": [],"string": " is used, the "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": " must be numerical instead of boolean. In this case, any of its non-zero components is "},{"type": "literal","children": [],"string": "%T"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dimAlong"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Direction inside the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " array along which the "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": " vector is searched. Possible values are "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " (along rows), "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " (along columns), or for an hypermatrix, any integer such that "},{"type": "literal","children": [],"string": "2 < dimAlong <= ndims(haystack)"},{"type": "text","children": [],"string": " representing the index of the scanned dimension. By default, "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " is used."}],"string": []},{"type": "important","children": [{"type": "varname","children": [],"string": "dimAlong"},{"type": "text","children": [],"string": " is mandatory when a "},{"type": "varname","children": [],"string": "joker"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "indType"},{"type": "text","children": [],"string": " is specified."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "joker"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Single element of "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": "'s data type. The "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": " components equal to the "},{"type": "varname","children": [],"string": "joker"},{"type": "text","children": [],"string": " are ignored (they match/accept any values from the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When the haystack is boolean, the "},{"type": "varname","children": [],"string": "joker"},{"type": "text","children": [],"string": " must be a non-zero number."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "To skip the "},{"type": "varname","children": [],"string": "joker"},{"type": "text","children": [],"string": ", specify "},{"type": "literal","children": [],"string": "..dimAlong, ,indType"},{"type": "text","children": [],"string": " with no joker value."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indType"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single case-insensitive word among "},{"type": "literal","children": [],"string": "\"\""},{"type": "text","children": [],"string": " (empty text = default), "},{"type": "literal","children": [],"string": "\"headIJK\""},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "\"headN\""},{"type": "text","children": [],"string": ": Specifies the format or returned indices. See here-below the description of "},{"type": "varname","children": [],"string": "ind"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "When the "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": " is longer than the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " size along the chosen dimension "},{"type": "varname","children": [],"string": "dimAlong"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "ind=[]"},{"type": "text","children": [],"string": " is returned."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "When the "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": "'s length matches the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " size along the chosen dimension, "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "By default"},{"type": "text","children": [],"string": " ("},{"type": "varname","children": [],"string": "indType==\"\""},{"type": "text","children": [],"string": "): "},{"type": "varname","children": [],"string": "ind"},{"type": "text","children": [],"string": " is a row vector containing the indices of matching rows or columns of the haystack. In case of hypermatrix, returned indices of matching ranges are linearized accross all dimensions but the "},{"type": "varname","children": [],"string": "dimAlong"},{"type": "text","children": [],"string": " one (see examples)."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "indType=\"headN\""},{"type": "text","children": [],"string": ": "},{"type": "varname","children": [],"string": "ind"},{"type": "text","children": [],"string": " is the row vector of "},{"type": "emphasis","children": [],"string": "linear"},{"type": "text","children": [],"string": " indices in the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " of the heading component of its matching rows, columns, or higher ranges."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "indType=\"headIJK\""},{"type": "text","children": [],"string": ": "},{"type": "varname","children": [],"string": "ind"},{"type": "text","children": [],"string": " is a matrix: Each row returns the "},{"type": "literal","children": [],"string": "[i j ..]"},{"type": "text","children": [],"string": " indices in the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " of the heading component of its matching ranges (rows, columns, or higher ranges). "},{"type": "varname","children": [],"string": "ind"},{"type": "text","children": [],"string": " has as many rows as there are matching ranges in the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Otherwise (short needle): By default, "},{"type": "varname","children": [],"string": "ind"},{"type": "text","children": [],"string": " is the row vector of linear indices of the components of the "},{"type": "varname","children": [],"string": "haystack"},{"type": "text","children": [],"string": " where matching ranges start. Using the "},{"type": "literal","children": [],"string": "indType=\"headN\""},{"type": "text","children": [],"string": " option does nothing more. Using "},{"type": "literal","children": [],"string": "indType=\"headIJK\""},{"type": "text","children": [],"string": " returns "},{"type": "varname","children": [],"string": "ind"},{"type": "text","children": [],"string": " as a matrix of "},{"type": "literal","children": [],"string": "[i j k ..]"},{"type": "text","children": [],"string": " indices, as described here-above."}],"string": []},"string": []}],"string": []},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "matching"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "When a joker is used, this "},{"type": "varname","children": [],"string": "matching"},{"type": "text","children": [],"string": " optional output is a matrix of haystack's data type returning the actual matching ranges: The matching range number #i is returned in the row "},{"type": "literal","children": [],"string": "matching(i,:)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["find", "members", "grep"]},"intersect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "intersect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "elements or rows or columns met in both input arrays, without duplicates"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["M = intersect(a, b)", "M = intersect(a, b, orient)", "[M, ka] = intersect(..)", "[M, ka, kb] = intersect(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a, b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vectors, matrices or hypermatrices of booleans, encoded integers, real or complex numbers, or text. "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " must have the same datatype. For text inputs, UTF characters are accepted. Sparse numeric or boolean matrices are accepted : Either "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " or both "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " may be sparse. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": [{"type": "text","children": [],"string": "flag with possible values : 1 or \"r\", 2 or \"c\". Can't be used if "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " or/and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is an hypermatrix. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "matrix of the same datatype as "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ". "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "Without "},{"type": "varname","children": [],"string": "orient"},{"type": "text","children": [],"string": ": "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is a row vector."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "With "},{"type": "literal","children": [],"string": "orient=\"r\"|1"},{"type": "text","children": [],"string": ": "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is a matrix stacking the common rows of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "With "},{"type": "literal","children": [],"string": "orient=\"c\"|2"},{"type": "text","children": [],"string": ": "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is a matrix stacking the common columns of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is sparse as soon as either "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " is sparse and none is empty."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ka"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Dense row vector of indices in "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kb"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Dense row vector of indices in "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["members", "unique", "gsort", "union"]},"setdiff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setdiff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns elements that are in a set but not in another one."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["v = setdiff(a, b)", "v = setdiff(a, b, orien)", "[v, ka] = setdiff(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a set of elements "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "elements to remove from "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orien"},{"type": "listitem","children": [{"type": "text","children": [],"string": "oriented processing: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ": rows of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " are searched among "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " ones."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": ": columns of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " are searched among "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " ones."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "no orien: elements of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " are searched among "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " ones."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the option "},{"type": "literal","children": [],"string": "orien=\"r\""},{"type": "text","children": [],"string": " is used, "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " must have the same number of columns. If the "},{"type": "literal","children": [],"string": "orien=\"c\""},{"type": "text","children": [],"string": " is used, they must have the same number of rows."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array with "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": "'s data type and encoding: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "sorted vector of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": "'s components that are not in "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "orien=\"r\""},{"type": "text","children": [],"string": ": matrix of rows of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " that are not in "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ", sorted in lexicographic order."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "orien=\"c\""},{"type": "text","children": [],"string": ": matrix of columns of "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " that are not in "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ", sorted in lexicographic order."}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ka"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of linear indices of selected  "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": "'s components, rows, or columns, such that "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "v = a(ka)"},{"type": "text","children": [],"string": ", or"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "v = a(ka,:)"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "orien=\"r\""},{"type": "text","children": [],"string": "), or"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "v = a(:,ka)"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "orien=\"c\""},{"type": "text","children": [],"string": ")"}],"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["unique", "union", "members", "vectorfind"]},"union": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "union"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "extrai componentes da união de um vetor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[v, ka, kb] = union(a, b)", "[v, ka, kb] = union(a, b, orient)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a, b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "matrizes de booleanos, números ou texto. Matrizes booleanas ou numéricas esparsas são aceitos. Os tipos de "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " et de "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " podem ser distintos, mas compatíveis para concatenação. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": [{"type": "text","children": [],"string": "orientação do processamento : "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "1 ou \"r\": a união é realizada nas linhas."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "2 or \"c\": a união é realizada nas colunas."},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vetor linha, ou matriz. O tipo de dados de "},{"type": "varname","children": [],"string": "v"},{"type": "text","children": [],"string": " é o tipo de resultado "},{"type": "literal","children": [],"string": "[a(:) ; b(:)]"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ka"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vetor linha de inteiros: Índices em "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " de elementos / linhas / colunas de "},{"type": "varname","children": [],"string": "v"},{"type": "text","children": [],"string": " vindos de "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kb"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vetor linha de inteiros: Índices em "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": " dos elementos / linhas / colunas restantes de "},{"type": "varname","children": [],"string": "v"},{"type": "text","children": [],"string": " vindos de "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["brackets", "unique"]},"unique": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unique"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "remover todos os componentes duplicados de um vetor ou uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[U, km, ku, nb] = unique(M)", "[U, km, ku, nb] = unique(M, orient)", "[U, km, ku, nb] = unique(.., \"keepOrder\")", "[U, km, ku, nb] = unique(.., \"uniqueNan\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vetor, matriz ou hipermatriz de booleanos, números, ou texto. Numeric or boolean sparses are accepted."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "flag com valores possíveis : 1 ou \"r\", 2 ou \"c\". It can't be used if "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is an hypermatrix."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": [{"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "orient"},{"type": "text","children": [],"string": " is not used: Vector of extracted "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " components sorted in ascending order. If "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is a row vector, "},{"type": "varname","children": [],"string": "U"},{"type": "text","children": [],"string": " is also a row vector. In all other "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " cases, "},{"type": "varname","children": [],"string": "U"},{"type": "text","children": [],"string": " is a column vector."}],"string": []},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "orient"},{"type": "text","children": [],"string": " is used: Matrix of extracted "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " rows or columns, sorted in lexicographic ascending order."}],"string": []}],"string": []},"string": []},{"type": "text","children": [],"string": " If "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is sparse, then "},{"type": "varname","children": [],"string": "U"},{"type": "text","children": [],"string": " is always sparse. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "km"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vector of indices of first encountered occurrences, such that "},{"type": "literal","children": [],"string": "U = M(km)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "U = M(km,:)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "U = M(:,km)"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "varname","children": [],"string": "km"},{"type": "text","children": [],"string": " is a row if "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is a row or if "},{"type": "literal","children": [],"string": "orient=\"c\""},{"type": "text","children": [],"string": " is used. Otherwise it's a column. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ku"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of indices in U, such that, according to the "},{"type": "varname","children": [],"string": "orient"},{"type": "text","children": [],"string": " option "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "\"*\": "},{"type": "varname","children": [],"string": "ku"},{"type": "text","children": [],"string": " is of size size(M), and "},{"type": "literal","children": [],"string": "U(ku) = M"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"r\": "},{"type": "varname","children": [],"string": "ku"},{"type": "text","children": [],"string": " is of size [size(M,1), 1], and "},{"type": "literal","children": [],"string": "U(ku,:) = M"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"c\": "},{"type": "varname","children": [],"string": "ku"},{"type": "text","children": [],"string": " is of size [1, size(M,2)], and "},{"type": "literal","children": [],"string": "U(:,ku) = M"}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "warning","children": [{"type": "varname","children": [],"string": "ku"},{"type": "text","children": [],"string": " is dense, even when "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " is sparse and the overall \"*\" mode is used."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Vector of integers > 0, with the same "},{"type": "varname","children": [],"string": "k"},{"type": "text","children": [],"string": " shape: Numbers of occurences in "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": " of respective unduplicated entities (components, rows, columns) returned in "},{"type": "varname","children": [],"string": "U"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["members", "gsort", "vectorfind", "grep", "union", "intersect"]},"acos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-cosseno em relação aos elementos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=acos(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais ou complexos "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["acosd", "cos", "cosd"]},"acosd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acosd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-cosseno elemento a elemento com resultado em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=acosd(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"acosh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acosh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "hyperbolic cosine inverse"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = acosh(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "each is a real or complex vector or matrix. "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " has the sizes of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["cosh", "sinh", "tanh"]},"acot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-cotangente elemento a elemento do argumento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = acot(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"acotd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acotd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-cotangente elemento a elemento do argumento com, resultado em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = acotd(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"acoth": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acoth"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-cotangente hiperbólico elemento a elemento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = acoth(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atanh", "coth"]},"acsc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acsc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-cossecante elemento a elemento do argumento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = acsc(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"acscd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acscd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-cossecante elemento a elemento do argumento com resutado em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = acscd(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"acsch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acsch"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-cossecante hiperbólico elemento a elemento do argumento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = acsch(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"asec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-secante elemento a elemento do argumento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = asec(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"asecd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asecd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-secante elemento a elemento do argumento com resultados em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = asecd(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"asech": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asech"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa o arco-secante hiperbólico elemento a elemento do argumento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = asech(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"asin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-seno"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = asin(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vectores, matrizes ou hipermatrices de números reais ou complexos, do mesmo tamanho."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["asind", "sin", "sind", "sinm", "asinm"]},"asind": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asind"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-seno, resultado em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=asind(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor/matriz de reais. Os elementos devem estar em "},{"type": "literal","children": [],"string": "[-1 1]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor/matriz de reais com as mesmas dimensões que "},{"type": "literal","children": [],"string": "x"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"asinh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asinh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-seno hiperbólico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=asinh(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos "},"string": []},"string": []}],"string": []}],"string": []},"seealso": "sinh"},"atan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-tangente 2-quadrantes e 4-quadrantes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["phi = atan(x)", "phi = atan(y,x)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou complexo, ou vetor ou matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou complexo, ou vetor ou matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares real, ou vetores ou matrizes de reais de mesmo tamanho"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real, ou vetor ou matriz de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atand", "tan", "tand", "unwrap", "ieee"]},"atand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arcos-tangentes 2-quadrantes e 4-quadrantes elemento a elemento do argumento com resultados em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["phi=atand(x)", "phi=atand(y,x)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar, vetor ou matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar, vetor ou matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalare, vetore ou matrizes de reais com tamanhos iguais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar, vetor ou matriz de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"atanh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atanh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-tangente hiperbólico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=atanh(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de números reais ou complexos, do mesmo tamanho."},"string": []},"string": []}],"string": []},"string": []},"seealso": "tanh"},"cos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função seno"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=cos(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais ou complexos "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["cosd", "acos", "acosd", "cosm"]},"cosd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cosd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função co-seno elemento a elemento, argumento dado em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=cosd(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor/matriz de reais"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"cosh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cosh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "co-seno hiperbólico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=cosh(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["cos", "acosh"]},"cotd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cotd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cotangent elemento a elemento do argumento dado em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = cotd(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "array de reais com as mesmas dimensões que "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cotg", "coth", "tan", "tand"]},"cotg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cotg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cotangente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=cotg(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores ou matrizes de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["cotd", "acot", "acotd", "tan"]},"coth": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "coth"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cotangente hiperbólica"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = coth(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix of real or complex numbers (full or sparse-encoded)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a full-encoded vector or matrix of real or complex numbers."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "cotg"},"csc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a cossecante do argumento elemento a elemento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = csc(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "array de reais ou complexos com as mesmas dimensões que "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cscd", "acscd", "acsc", "sec", "secd"]},"cscd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cscd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a cossecante elemento a elemento do argumento em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x = cscd(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["secd", "csc", "sind"]},"csch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csch"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a cossecante hipertbólica do argumento elemento a elemento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = csch(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "array de reais ou complexos com as mesmas dimensões que "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["csc", "acsch"]},"sec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a secante elemento a elemento do argumento."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = sec(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["secd", "asec", "asecd", "cos"]},"secd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "secd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a secante elemento a elemento do argumento em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = secd(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cosd", "sec"]},"sech": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sech"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a secante hipertbólica do argumento elemento a elemento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = sech(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cosh", "asech"]},"sin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função seno"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=sin(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["sind", "asin", "asind", "sinm"]},"sind": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sind"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função seno, argumento em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=sind(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "array de reais ou complexos com as mesmas dimensões que "},{"type": "literal","children": [],"string": "x"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"sinh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sinh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "seno hiperbólico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=sinh(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores ou matrizes de reais ou complexos "},"string": []},"string": []}],"string": []},"string": []},"seealso": "asinh"},"tan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tangente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=tan(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tand", "atan", "atand", "tanm"]},"tand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tangente com o argumento em graus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=tand(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tanh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tanh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tangente hiperbólica"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=tanh(x)"},"varlist": [],"seealso": ["atanh", "tan", "tanhm"]},"acoshm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acoshm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-cosseno hiperbólico da matriz (matriz arco-cosseno hiperbólico)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=acoshm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"acosm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acosm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-coseno da matriz (matriz arco-cosseno)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=acosm(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"asinhm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asinhm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-seno hiperbólico da matriz (matriz arco-seno hiperbólico)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=asinhm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["asinh", "logm", "sqrtm", "sinhm", "eye"]},"asinm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asinm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-seno da matriz (matriz arco-seno)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=asinm(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["asin", "sinm"]},"atanhm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atanhm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Arco-tangente hiperbólico da matriz (matriz arco-tangente hiperbólico)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=atanhm(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atanh", "tanhm"]},"atanm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atanm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "arco-tangente da matriz quadrada (matriz arco-tangente)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=atanm(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos quadrada "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos quadrada"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atan", "tanm"]},"coshm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "coshm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "co-seno hiperbólico da matriz (matriz co-seno hiperbólico)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=coshm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["cosh", "expm"]},"cosm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cosm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "co-seno da matriz (matriz co-seno)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=cosm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["cos", "expm"]},"cothm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cothm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cotangente hiperbólica da matriz (matriz cotangente hiperbólica)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=cothm(x)"},"varlist": [],"seealso": "coth"},"sinhm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sinhm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "seno hiperbólico da matriz (matriz seno hiperbólico)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=sinhm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": "sinh"},"sinm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sinm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz seno"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=sinm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["sin", "asinm"]},"tanhm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tanhm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tangente hiperbólica da matriz (matriz tangente hiperbólica)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=tanhm(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes quadradas de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["tan", "tanm", "expm", "sinm", "cosm", "atanhm"]},"tanm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tanm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tangente da matriz (matriz tangente)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[t]=tanm(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tan", "expm", "sinm", "atanm"]},"givens": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "givens"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transformação de Givens"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["U=givens(xy)", "U=givens(x,y)", "[U,c]=givens(xy)", "[U,c]=givens(x,y)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois números reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de reais ou complexos de tamanho 2"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz 2x2 unitária"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de reais ou complexos de tamanho 2"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "qr"},"householder": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "householder"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Householder orthogonal reflexion matrix. Symetrical wrt a plane"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["householder() // demo", "u = householder(v [,w])", "[u, H] = householder(v [,w])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex column vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real or complex column vector with same size as "},{"type": "literal","children": [],"string": "v"},{"type": "text","children": [],"string": ". Default value is "},{"type": "literal","children": [],"string": "eye(v)"},{"type": "text","children": [],"string": " ((Ox) axis)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "unit vector lying in the "},{"type": "literal","children": [],"string": "(v,w)"},{"type": "text","children": [],"string": " plane and orthogonal to the bisectrix of "},{"type": "literal","children": [],"string": "(v,w)"},{"type": "text","children": [],"string": ". Column of size(v) of real or complex numbers."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Orthogonal Householder reflexion matrix: "},{"type": "literal","children": [],"string": "H= eye() - 2*u*u'"},{"type": "text","children": [],"string": ". "},{"type": "varname","children": [],"string": "H"},{"type": "text","children": [],"string": " is such that "},{"type": "literal","children": [],"string": "inv(H)==H"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "H'==H"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "det(H)==-1"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "v"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "w"},{"type": "text","children": [],"string": " are real, "},{"type": "literal","children": [],"string": "H*v"},{"type": "text","children": [],"string": " is proportional to "},{"type": "varname","children": [],"string": "w"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["proj", "orthProj", "scaling", "qr", "givens"]},"proj": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "proj"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "projeção"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "P = proj(X1,X2)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X1,X2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes reais com igual número de colunas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de projeção de real ("},{"type": "literal","children": [],"string": "P^2=P"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"balanc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "balanc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "balanceamento de uma matriz ou de um feixe de matrizes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Ab,X]=balanc(A)", "[Eb,Ab,X,Y]=balanc(E,A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais invertível"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz quadrada de reais (com mesma dimensão que "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz quadrada de reais invertível"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"bdiag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bdiag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "diagonalização em blocos, autovetores generalizados"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Ab, X, bs] = bdiag(A)", "[Ab, X, bs] = bdiag(A, rmax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ab"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos não-singular"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"eigs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eigs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "calculates largest eigenvalues and eigenvectors of matrices"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["d = eigs(A)", "d = eigs(Af, n)", "d = eigs(.., B)", "d = eigs(.., B, k)", "d = eigs(.., B, k, sigma)", "d = eigs(.., B, k, sigma, opts)", "[d, v] = eigs(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a full or sparse, real or complex, symmetric or non-symmetric square matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a sparse, real or complex, square matrix with same dimensions as "},{"type": "literal","children": [],"string": " A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "positive integer: number of eigenvalues to be computed. By default, "},{"type": "literal","children": [],"string": "k=min(n-1, 6)"},{"type": "text","children": [],"string": " ("},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " real symetric) or "},{"type": "literal","children": [],"string": "k=min(n-2, 6)"},{"type": "text","children": [],"string": " (otherwise) eigen values are computed, with n=size(A,1)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sigma"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real scalar or a string of length 2"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opts"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a structure"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Af "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a function"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar, defined only if "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " is a function"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex eigenvalues vector or diagonal matrix (eigenvalues along the diagonal)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex eigenvector matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "spec"},"pbig": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pbig"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "autoprojeção"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Q,M]=pbig(A,thres,flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thres"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ("},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q,M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"projspec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "projspec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "operadores espectrais"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[S,P,D,i]=projspec(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S, P, D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes quadradas "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro (índice do autovalor zero de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"psmall": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "psmall"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "projeção espectral"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Q,M]=psmall(A,thres,flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thres"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ("},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q,M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pbig", "proj", "projspec"]},"spec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "autovalores, e autovetores de uma matriz ou feixes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["evals          = spec(A)", "[R, diagevals] = spec(A)", "evals               = spec(A, B)", "[alpha, beta]       = spec(A, B)", "[alpha, beta, Z]    = spec(A, B)", "[alpha, beta, Q, Z] = spec(A, B)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matrizes quadradas de números reais ou complexos, de mesmos tamanhos. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "evals"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vetor de reais ou complexos : os autovalores. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "diagevals"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matriz diagonal de reais ou complexos : autovalores ao longo da diagonal. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matriz quadrada de reais ou complexos invertível : autovetores direitos da matriz. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alpha, beta"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vetores dos mesmos tamanhos : autovalores generalizados do feixe de matriz "},{"type": "literal","children": [],"string": " A - s.B"},{"type": "text","children": [],"string": " (s é a variável). alpha./beta fornece os autovalores usuais. "},{"type": "varname","children": [],"string": "alpha"},{"type": "text","children": [],"string": " são valores reais ou complexos. "},{"type": "varname","children": [],"string": "beta"},{"type": "text","children": [],"string": " são valores reais. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matriz quadrada de reais ou complexos invertível : autovetores esquerdos do feixe de matriz. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matriz quadrada de reais ou complexos invertível : autovetores direitos do feixe de matriz. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"sva": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sva"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "aproximação em valores singulares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[U,s,V]=sva(A,k)", "[U,s,V]=sva(A,tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real não-negativo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"svd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "svd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "decomposição em valores singulares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s=svd(X)", "[U,S,V]=svd(X)", "[U,S,V]=svd(X,\"e\")", "[U,S,V,rk]=svd(X [,tol])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais (valores singulares)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz diagonal de reais (valores singulares)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U,V"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes quadradas ortogonais ou unitárias (vetores singulares)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"chol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "chol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cholesky factorization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "R = chol(X)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz quadrada positiva definida simétrica de reais ou hermitiana complexa."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["spchol", "qr", "svd", "bdiag", "fullrf"]},"fullrf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fullrf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração de posto completo (ou cheio)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Q,M,rk]=fullrf(A,[tol])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real (limiar para determinação do posto) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q,M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro(posto de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"fullrfk": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fullrfk"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração de posto completo de A^k"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Bk,Ck]=fullrfk(A,k)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou de complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Bk,Ck"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de reais ou de complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["fullrf", "range"]},"hess": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hess"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "forma de Hessenberg"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["H = hess(A)", "[U,H] = hess(A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"lu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatores LU de eliminação Gaussiana"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[L,U]= lu(A)", "[L,U,E]= lu(A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos (m x n) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos (m x min(m,n))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos (min(m,n) x n ) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de permutação (n x n)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"polar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Decomposição polar de uma matriz quadrada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Rho, Theta] = polar(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Rho,"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Theta,"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["expm", "svd"]},"qr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "qr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "QR decomposição"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Q,R]=qr(X [,\"e\"])", "[Q,R,E]=qr(X [,\"e\"])", "[Q,R,rk,E]=qr(X [,tol])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real não-negativo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz com as mesmas dimensões de "},{"type": "literal","children": [],"string": "X"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de permutação "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro (posto QR de "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"rankqr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rankqr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração QR com revelação do posto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Q,R,JPVT,RANK,SVAL]=rankqr(A, [RCOND,JPVT])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "número real usado para determinar o posto efetivo de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ", que é definido como sendo a ordem da maior submatriz regente triangular "},{"type": "literal","children": [],"string": "R11"},{"type": "text","children": [],"string": " na fatoração QR com pivoteamento de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ", cujo número de condicionamento estimado é < "},{"type": "literal","children": [],"string": "1/RCOND"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "JPVT"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de inteiros nas entradas, se "},{"type": "literal","children": [],"string": "JPVT(i)"},{"type": "text","children": [],"string": " não é 0, a "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "-ésimo coluna de "},{"type": "literal","children": [],"string": " A "},{"type": "text","children": [],"string": " épermtutada para a frente de "},{"type": "literal","children": [],"string": "AP"},{"type": "text","children": [],"string": ", senão, a coluna "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " é uma coluna livre. Na saída, se "},{"type": "literal","children": [],"string": "JPVT(i) = k"},{"type": "text","children": [],"string": ", então a "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "-ésima coluna de "},{"type": "literal","children": [],"string": "A*P"},{"type": "text","children": [],"string": " era a "},{"type": "literal","children": [],"string": "k"},{"type": "text","children": [],"string": "-ésima coluna de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RANK"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "posto efetivo de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ", i.e., a ordem da submatriz "},{"type": "literal","children": [],"string": "R11"},{"type": "text","children": [],"string": ". É o mesmo que a ordem da submatriz "},{"type": "literal","children": [],"string": "T1"},{"type": "text","children": [],"string": " na fatoração ortogonal completa de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "SVAL"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vetor de reais com 3 componentes; as estimativas de alguns dos valores singulares do fator triangular "},{"type": "literal","children": [],"string": "R"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "SVAL(1)"},{"type": "text","children": [],"string": " é o maior valor singular de "},{"type": "literal","children": [],"string": "R(1:RANK,1:RANK)"},{"type": "text","children": [],"string": ";"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "SVAL(2)"},{"type": "text","children": [],"string": " é o menor valor singular de "},{"type": "literal","children": [],"string": "R(1:RANK,1:RANK)"},{"type": "text","children": [],"string": ";"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "SVAL(3) "},{"type": "text","children": [],"string": "é o menor valor singular de "},{"type": "literal","children": [],"string": "R(1:RANK+1,1:RANK+1)"},{"type": "text","children": [],"string": ", se "},{"type": "literal","children": [],"string": "RANK"},{"type": "text","children": [],"string": " < "},{"type": "literal","children": [],"string": "MIN(M,N)"},{"type": "text","children": [],"string": ", ou de "},{"type": "literal","children": [],"string": "R(1:RANK,1:RANK)"},{"type": "text","children": [],"string": ", caso contrário."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"schur": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "schur"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "decomposição (ordenada) de Schur de matrizes e feixes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[U,T] = schur(A)", "[U,dim [,T] ]=schur(A,flag)", "[U,dim [,T] ]=schur(A,extern1)", "[As,Es [,Q,Z]]=schur(A,E)", "[As,Es [,Q],Z,dim] = schur(A,E,flag)", "[Z,dim] = schur(A,E,flag)", "[As,Es [,Q],Z,dim]= schur(A,E,extern2)", "[Z,dim]= schur(A,E,extern2)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz quadrada de reais ou complexos com as mesmas dimensões de"},{"type": "literal","children": [],"string": " A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ("},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " ou"},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "extern1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma ``external'' (função externa), veja abaixo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "extern2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma ``external'', veja abaixo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada triangular superior ou quasi-triangular"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "As"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada triangular superior ou quasi-triangular"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Es"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada triangular superior "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"sqroot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sqroot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração hermitiana W*W'"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sqroot(X)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz simétrica, não-negativa definida de reais ou complexos"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["chol", "svd"]},"colcomp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colcomp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compressão de colunas, núcleo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[W,rk]=colcomp(A [,flag] [,tol])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "W"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada não-singular (mudança de base) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro (posto de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"im_inv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "im_inv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "imagem inversa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[X,dim]=im_inv(A,B [,tol])", "[X,dim,Y]=im_inv(A,B, [,tol])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matirzes de reais ou complexos com igual número de colunas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária de ordem igual ao número de colunas de "},{"type": "literal","children": [],"string": "A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (dimensão do subespaço) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz ortogonal de ordem igual ao número de linhas de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "B"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"kernel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kernel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "núcleo de uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "W=kernel(A [,tol,[,flag])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos completa ou matriz de reais esparsa"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'svd'"},{"type": "text","children": [],"string": " (padrão) ou "},{"type": "literal","children": [],"string": "'qr'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "W"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de posto-coluna completo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"range": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "range"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Imagem (gerado) de A^k"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X,dim]=range(A,k)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos que se assume quadrada se k>1"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ortonormal "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (dimensão de subespaço)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"rowcomp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rowcomp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compressão de linhas, imagem"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[W,rk]=rowcomp(A [,flag [,tol]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou de complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string opcional, com valores possíveis "},{"type": "literal","children": [],"string": "'svd'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'qr'"},{"type": "text","children": [],"string": ". O valor padrão é "},{"type": "literal","children": [],"string": "'svd'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "número real não-negativo opcional. O valor padrão é "},{"type": "literal","children": [],"string": "sqrt(%eps)*norm(A,1)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "W"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada não-singular (matriz mudança de base)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro (posto de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"aff2ab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "aff2ab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Conversão de uma função linear (afim) para forma A,b"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[A,b]=aff2ab(afunction,dimX,D [,flag])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "afunction"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma função do Scilab "},{"type": "literal","children": [],"string": " Y =fct(X,D) "},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "X, D, Y"},{"type": "text","children": [],"string": " são "},{"type": "literal","children": [],"string": "lists"},{"type": "text","children": [],"string": " de matrizes"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dimX"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz de inteiros p x 2 ("},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " é o número de matrizes em X)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma "},{"type": "literal","children": [],"string": "list"},{"type": "text","children": [],"string": " de matrizes de reais (ou qualquer outro objeto Scilab válido)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "parâmetro opcional ("},{"type": "literal","children": [],"string": "flag='f'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "flag='sp'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor de reais tendo a mesma dimensão de linha que "},{"type": "literal","children": [],"string": "A"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "linsolve"},"inv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "inv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inversa de uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "inv(X)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos, matriz de polinômios, matriz de razões de polinômios em representação de transferência ou espaço de estados"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["slash", "backslash", "pinv", "qr", "lufact", "lusolve", "invr", "coff", "coffg"]},"linsolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "linsolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solucionador de equações lineares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x0,kerA]=linsolve(A,b [,x0])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz "},{"type": "literal","children": [],"string": "na x ma"},{"type": "text","children": [],"string": " de reais (possivelmente esparsa)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor "},{"type": "literal","children": [],"string": "na x 1"},{"type": "text","children": [],"string": " (mesma dimensão de linha de "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kerA"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz "},{"type": "literal","children": [],"string": "ma x k"},{"type": "text","children": [],"string": " de reais"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"lsq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lsq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solução de A*X=B de mínimos quadrados lineares, com norm(X) mínima"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X = lsq(A, B)", "X = lsq(A, B, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou de complexos (m x n) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou de complexos (m x p)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalar positivo, usado para determinar o posto efetivo de A (definido como sendo a ordem da maior submatriz triangular R11 regente na fatoração QR com pivoteamento de A, cujo número de condicionamento estimado <= 1/tol. O valor padrão de tol é "},{"type": "literal","children": [],"string": "sqrt(%eps)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos (n x p)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"pinv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pinv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "pseudo-inversa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pinv(A,[tol])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["rank", "svd", "qr"]},"classmarkov": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "classmarkov"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "classes transientes e recorrentes da matriz de Markov"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[perm,rec,tr,indsRec,indsT]=classmarkov(M)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de Markov N x N de reais. A soma das entradas em cada linha deve ser acrescida em uma unidade"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "perm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de permutação de inteiros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rec, tr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros, número (número de estados em cada classe recorrente, número de estados transientes)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indsRec,indsT"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros (índices dos estados recorrentes e transientes)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"eigenmarkov": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eigenmarkov"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Autovetores esquerdo e direito normalizados de Markov"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[M,Q]=eigenmarkov(P)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de Markov N x N de reais. A soma das entradas de cada linha deve ser acrescida de uma unidade"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais de N colunas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais de N linhas "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"genmarkov": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "genmarkov"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gera uma matriz de Markov aleatória com classes recorrentes e transientes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["M=genmarkov(rec,tr)", "M=genmarkov(rec,tr,flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rec"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de inteiros (sua dimensão é o número de classes recorrentes)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de estados transientes)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de Markov de reais. A soma das entradas de cada linha deve ser acrecsida de uma unidade"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'perm'"},{"type": "text","children": [],"string": ". Se fornecido, uma permutação dos estados é feita."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"cond": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cond"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "número de condicionamento de uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "cond(X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais ou complexos. Para a sintaxe "},{"type": "literal","children": [],"string": "c=cond(X,p)"},{"type": "text","children": [],"string": ",                        "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " deve ser quadrado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 | 2 | %inf | \"inf\" | \"fro\": Norma usada. Valor padrão = 2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número decimal positivo: o número da condição."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["rcond", "svd", "norm"]},"det": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "det"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "determinant of a square matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["d = det(X)", "[e,m] = det(X)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": [{"type": "text","children": [],"string": "square matrix of real or complex numbers, polynomials, or rationals. Sparse-encoded matrices accepted. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar of the "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": "'s type: the determinant of "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": ". If "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " is sparse-encoded, "},{"type": "varname","children": [],"string": "d"},{"type": "text","children": [],"string": " is dense. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "text","children": [],"string": "real or complex number: the determinant base 10 mantissa, with "},{"type": "literal","children": [],"string": "abs(m) ∈ [1,10)"},{"type": "text","children": [],"string": ". Not supported for "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " polynomial or rational. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e"},{"type": "listitem","children": [{"type": "text","children": [],"string": "integer: the determinant base 10 exponent, such that "},{"type": "literal","children": [],"string": "d = m * 10e"},{"type": "text","children": [],"string": ". Not supported for "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " polynomial or rational. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["detr", "determ", "simp_mode"]},"orth": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "orth"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "base ortogonal"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Q=orth(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["qr", "rowcomp", "colcomp", "range"]},"rank": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rank"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "posto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[i]=rank(X)", "[i]=rank(X,tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real não-negativo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"rcond": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rcond"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "número de condicionamento inverso"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = rcond(X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real positivo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["svd", "cond", "inv"]},"rref": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rref"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a matriz-linha reduzida a forma escada por transformações de LU"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "R=rref(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz m x n com entradas escalares "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz m x n, forma escada de A"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lu", "qr"]},"trace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "trace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "traço de uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "trace(X)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos, matriz de polinômios ou de razões de polinômios."},"string": []},"string": []}],"string": []},"string": []},"seealso": "det"},"companion": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "companion"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz companheira"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "A=companion(p)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polinômio ou vetor de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"ereduc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ereduc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa de forma escada de colunas da matriz por transformações qz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[E,Q,Z [,stair [,rk]]]=ereduc(X,tol)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz m x n de entradas reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real positivo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz em forma escada de colunas "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz unitária m x m "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz unitária n x n "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stair"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "vetor de índices,"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "*"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "ISTAIR(i) = + j"},{"type": "text","children": [],"string": " se o elemento da borda "},{"type": "literal","children": [],"string": "E(i,j)"},{"type": "text","children": [],"string": " é uma quina."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "*"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "ISTAIR(i) = - j"},{"type": "text","children": [],"string": " se o elemento da borda "},{"type": "literal","children": [],"string": "E(i,j)"},{"type": "text","children": [],"string": " não é uma quina."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "literal","children": [],"string": "(i=1,...,M)"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, posto estimado da matriz"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"fstair": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fstair"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa a forma escada de feixe de colunas por transformações qz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[AE,EE,QE,ZE,blcks,muk,nuk,muk0,nuk0,mnei]=fstair(A,E,Q,Z,stair,rk,tol)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz m x n com entradas reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real positivo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de forma escada de colunas "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz unitária m x m "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz unitária n x n "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stair"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de índices (ver ereduc)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, posto estimado da matriz "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "AE"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz m x n com entradas reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "EE"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de forma escada de colunas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "QE"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz unitária m x m "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ZE"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz unitária n x n "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nblcks"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é o número de submatrizes com posto linha completo >= 0 detectado na matriz "},{"type": "literal","children": [],"string": "A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "muk:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array (vetor ou matriz) de inteiros de dimensão (n). Contém as dimensões de coluna mu(k) (k=1,...,nblcks) das submatrizes com posto coluna cheio no feixe sE(eps)-A(eps)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nuk:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de inteiros de dimensão (m+1). Contém as dimensões de linha nu(k) (k=1,...,nblcks) das submatrizes com posto linha cheio no feixe sE(eps)-A(eps)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "muk0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de inteiros de dimensão (n). Contém as dimensões de coluna mu(k) (k=1,...,nblcks) das submatrizes com o posto-coluna cheio no feixe sE(eps,inf)-A(eps,inf)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nuk:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de inteiros de dimensão (m+1). Contém as dimensões de linha nu(k) (k=1,...,nblcks) das submatrizes com posto-linha cheio no feixe sE(eps,inf)-A(eps,inf)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mnei:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array de inteiros dimensão (4). mnei(1) = dimensão de linha de sE(eps)-A(eps)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"glever": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "glever"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inverso do feixe de matrizes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Bfs,Bis,chis]=glever(E,A [,s])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E, A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de reais quadradas de igual dimensão"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string (o valor padrão é '"},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": "')"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Bfs,Bis"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "chis"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polinômio"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"kroneck": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kroneck"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "forma de Kronecker de feixe de matrizes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Q, Z, Qd, Zd, numbeps, numbeta] = kroneck(F)", "[Q, Z, Qd, Zd, numbeps, numbeta] = kroneck(E,A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "feixe de matrizes de reais "},{"type": "literal","children": [],"string": "F=s*E-A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E,A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de reais de mesma dimensão"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q,Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes quadradas ortogonais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qd,Zd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "numbeps,numeta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["schur", "spec", "systmat", "pencan", "randpencil", "trzeros"]},"lyap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lyap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "equação de Lyapunov"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[X]=lyap(A,C,'c')", "[X]=lyap(A,C,'d')"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, C"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes quadradas de reais, "},{"type": "literal","children": [],"string": "C"},{"type": "text","children": [],"string": " deve ser simétrica"}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["sylv", "ctr_gram", "obs_gram"]},"pen2ea": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pen2ea"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de feixe em matrizes E e A"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[E,A]=pen2ea(Fs)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "feixe de matrizes "},{"type": "literal","children": [],"string": "s*E-A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E,A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "duas matrizes tais que "},{"type": "literal","children": [],"string": "Fs=s*E-A"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"pencan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pencan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "forma canônica de feixe de matrizes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Q,M,i1]=pencan(Fs)", "[Q,M,i1]=pencan(E,A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um feixe regular "},{"type": "literal","children": [],"string": "s*E-A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E,A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes quadradas de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q,M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes não-singulares de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"penlaur": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "penlaur"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Laurent coefficients of matrix pencil"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Si,Pi,Di,order]=penlaur(Fs)", "[Si,Pi,Di,order]=penlaur(E,A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um feixe regular "},{"type": "literal","children": [],"string": "s*E-A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E, A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes quadradas de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Si,Pi,Di"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "três matrizes quadradas de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"quaskro": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "quaskro"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "forma quasi-Kronecker"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Q, Z, Qd, Zd, numbeps, numbeta] = quaskro(F)", "[Q, Z, Qd, Zd, numbeps, numbeta] = quaskro(E,A)", "[Q, Z, Qd, Zd, numbeps, numbeta] = quaskro(F,tol)", "[Q, Z, Qd, Zd, numbeps, numbeta] = quaskro(E,A,tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "feixe de matrizes de reais "},{"type": "literal","children": [],"string": "F=s*E-A"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "s=poly(0,'s')"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "E,A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes reais de iguais dimensões "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real (tolerância, valor padrão=1.d-10) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q,Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes quadradas ortogonais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qd,Zd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "numbeps"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["kroneck", "schur", "spec"]},"randpencil": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "randpencil"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "feixe aleatório"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "F=randpencil(eps,infi,fin,eta)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "eps"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "infi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais, ou polinômio mônico, ou vetor de polinômios mônicos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "eta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "feixe de matrizes de reais "},{"type": "literal","children": [],"string": "F=s*E-A"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "s=poly(0,'s')"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"rowshuff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rowshuff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "algoritmo de embaralhamento"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Ws,Fs1]=rowshuff(Fs, [alfa])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "feixe quadrado de reais "},{"type": "literal","children": [],"string": "Fs = s*E-A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ws"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "feixe quadrado de reais "},{"type": "literal","children": [],"string": "F1s = s*E1 -A1"},{"type": "text","children": [],"string": " com "},{"type": "literal","children": [],"string": "E1"},{"type": "text","children": [],"string": " não-singular"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alfa"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "número real ("},{"type": "literal","children": [],"string": "alfa = 0"},{"type": "text","children": [],"string": " é o valor padrão)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"coff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "coff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "resolvente (método do cofator) "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[N,d]=coff(M [,var])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de polinômios (com o mesmo tamanho que "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "polinômio ( polinômio característico "},{"type": "literal","children": [],"string": "poly(A,'s')"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["coffg", "ss2tf", "nlev", "poly"]},"nlev": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nlev"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "algoritmo de Leverrier"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[num,den]=nlev(A,z [,rmax])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rmax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "parâmetro opcional (ver "},{"type": "link","children": [],"string": "bdiag"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"spaninter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spaninter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interseção de subespaços"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X,dim]=spaninter(A,B [,tol])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de reais ou de complexos com igual número de linhas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro, dimensão do subesbaço Im("},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ") inter Im("},{"type": "literal","children": [],"string": "B"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["spanplus", "spantwo"]},"spanplus": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spanplus"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "soma de subespaços"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X,dim,dima]=spanplus(A,B[,tol])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de reais ou complexos com igual número de linhas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada ortogonal ou unitária "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim, dima"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros, dimensões de subespaços "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real não-negativo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"spantwo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spantwo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "soma e interseção de subespaços"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Xp,dima,dimb,dim]=spantwo(A,B, [tol])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de reais ou complexos com igual número de linhas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Xp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada não-singular "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dima, dimb, dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros, dimensões dos subespaços "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real não-negativo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"bezier": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bezier"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compute the points for the bezier curve"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "z = bezier(p, t [,w])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 2 or 3 columns matrix containing the control points (P0, P1, ..., Pn). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a scalar or row vector. "},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is scalar, "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " contains the number of points of Bezier curves. In this case,  the "},{"type": "literal","children": [],"string": "bezier"},{"type": "text","children": [],"string": " function create "},{"type": "literal","children": [],"string": "linspace(0, 1, t)"},{"type": "text","children": [],"string": "vector. If "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " is vector, this values must be in [0; 1]"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector. It contains the weight to apply on each point. This vector must have the same number of rows as p "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 2 or 3 columns matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "bernstein"},"bsplin3val": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bsplin3val"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função de avaliação de derivada arbitrária de spline 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "dfp = bsplin3val(xp, yp, zp, tl, der)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp, yp, zp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores ou matrizes de reais de tamanhos iguais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "tlist de tipo \"splin3d\", definindo um tensor spline 3d (chamado de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " a seguir)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "der"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor com três componentes "},{"type": "literal","children": [],"string": "[ox,oy,oz]"},{"type": "text","children": [],"string": " definindo qual derivada de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " computar."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dfp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor ou matriz de mesmo formato que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zp"},{"type": "text","children": [],"string": ", avaliação elemento a elemento da derivada especificada de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " nesses pontos."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["splin3d", "interp3d"]},"cshep2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cshep2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "bidimensional cubic shepard (scattered) interpolation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tl_coef = cshep2d(xyz)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xyz"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz n x 3 dos pontos de interpolação interpolação (sem grid), a i-ésima linha dadas as coordenadas (x,y) e então a altitude z do i-ésimo ponto de interpolação"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tl_coef"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma estrutura tlist do Scilab (do tipo cshep2d)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["splin2d", "eval_cshep2d"]},"eval_cshep2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eval_cshep2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "avaliação por interpolação cúbica bidimensional de Shepard"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["zp                                            = eval_cshep2d(xp, yp, tl_coef)", "[zp, dzpdx, dzpdy]                            = eval_cshep2d(xp, yp, tl_coef)", "[zp, dzpdx, dzpdy, d2zpdxx, d2zpdyy, d2zpdxy] = eval_cshep2d(xp, yp, tl_coef)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp, yp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores (ou matrizes) de mesmo tamanho "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tl_coef"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma estrutura Scilab tlist (de tipo cshep2d) definindo uma função de interpolação cúbica de Shepard (chamada "},{"type": "literal","children": [],"string": "S"},{"type": "text","children": [],"string": " a partir daqui)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor (ou matrizes) de mesmo tamanho que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": ", avaliação do interpolante "},{"type": "literal","children": [],"string": "S"},{"type": "text","children": [],"string": " nesses pontos"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dzpdx,dzpdy"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores (ou matrizes) de mesmo tamanho que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": ", avaliação das derivadas primeiras de "},{"type": "literal","children": [],"string": "S"},{"type": "text","children": [],"string": " nestes pontos"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d2zpdxx,d2zpdxy,d2zpdyy"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores (ou matrizes) de mesmo tamanho que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": ", avaliação das derivadas segundas de "},{"type": "literal","children": [],"string": "S"},{"type": "text","children": [],"string": " nestes pontos"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "cshep2d"},"interp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "interp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função de avaliação de spline cúbico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[yp, yp1, yp2, yp3] = interp(xp, x, y, d)", "[yp, yp1, yp2, yp3] = interp(xp, x, y, d, out_mode)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores de reais de mesmo tamanho definindo uma função de spline cúbico ou sub-spline (chamado "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " a partir daqui)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out_mode"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "(opcional) string definido a avaliação de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " fora do intervalo [x"},{"type": "subscript","children": [],"string": "1"},{"type": "text","children": [],"string": ", x"},{"type": "subscript","children": [],"string": "n"},{"type": "text","children": [],"string": "]."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "yp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor ou matriz de mesmo tamanho que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": ", avaliação elemento a elemento de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": " (yp(i)=s(xp(i) ou yp(i,j)=s(xp(i,j))"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "yp1, yp2, yp3"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores (ou matrizes) de mesmo tamanho que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": ", avaliação elemento a elemento das derivadas sucessivas de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "xp"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["splin", "lsq_splin"]},"interp1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "interp1"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "1D interpolation in nearest, linear or spline mode"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["yp = interp1(y, xp)", "yp = interp1(x, y, xp)", "yp = interp1(.., xp, method)", "yp = interp1(.., xp, method, extrapolation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of at least 2 real numbers: Abscissas of known interpolation nodes, without duplicates. By default, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a vector: "},{"type": "literal","children": [],"string": "x=1:length(y)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a matrix or an hypermatrix: "},{"type": "literal","children": [],"string": "x=1:size(y,1)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector, matrix or hypermatrix of real or complex numbers: values at known interpolation nodes, at the corresponding "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " abscissas. "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a vector, "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " must have the same length."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a matrix or an hypermatrix, we must have "},{"type": "literal","children": [],"string": "length(x)==size(y,1)"},{"type": "text","children": [],"string": ". Each column of "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is then interpolated versus the same "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " abscissas, for the given "},{"type": "varname","children": [],"string": "xp"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp"},{"type": "listitem","children": [{"type": "text","children": [],"string": "scalar, vector, matrix or hypermatrix or decimal numbers: abscissas of points whose values "},{"type": "varname","children": [],"string": "yp"},{"type": "text","children": [],"string": " must be computed according to data of interpolation nodes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "yp"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector, matrix, or hypermatrix of numbers: interpolated "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " values at the given "},{"type": "varname","children": [],"string": "xp"},{"type": "text","children": [],"string": ". "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a vector: "},{"type": "varname","children": [],"string": "yp"},{"type": "text","children": [],"string": " has the size of "},{"type": "varname","children": [],"string": "xp"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a matrix or an hypermatrix: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "xp"},{"type": "text","children": [],"string": " is a scalar or a vector: "},{"type": "literal","children": [],"string": "size(yp)"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "[length(xp) size(y)(2:$)]"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "varname","children": [],"string": "xp"},{"type": "text","children": [],"string": " is a matrix or an hypermatrix: "},{"type": "literal","children": [],"string": "size(yp)"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "[size(xp) size(y)(2:$)]"}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": [{"type": "text","children": [],"string": "string defining the interpolation method. Possible values and processing are: "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "extrapolation"},{"type": "listitem","children": [{"type": "text","children": [],"string": "string or number defining the yp(j) components for xp(j) values outside the [x(1)=min(x),x($)=max(x)] interval. We suppose here-below that "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " have already been sorted accordingly. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "}],"string": []}],"string": []}],"string": []},"seealso": ["interp", "splin", "linear_interpn"]},"interp2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "interp2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função de avaliação spline bicúbica (2d)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[zp[,dzpdx,dzpdy[,d2zpdxx,d2zpdxy,d2zpdyy]]]=interp2d(xp,yp,x,y,C [,out_mode])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp, yp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores ou matrizes de reais de mesmo tamanho "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,C"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores de reais definindo uma função de spline bicúbico ou sub-spline (chamada "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " daqui em diante)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out_mode"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "(opcional) string definindo a avaliação de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " fora de [x(1),x(nx)]x[y(1),y(ny)]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor ou matriz com o mesmo formato que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": ", avaliação elemento a elemento de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " nestes pontos."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dzpdx, dzpdy"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores (ou matrizes) de mesmo formato que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": ", avaliação elemento a elemento das derivadas primeiras de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " nesses pontos."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d2zpdxx, d2zpdxy, d2zpdyy"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores (ou matrizes) de mesmo formato que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": ", eavaliação elemento a elemento das derivadas segundas de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " nesses pontos."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "splin2d"},"interp3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "interp3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função de avaliação spline 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[fp[,dfpdx,dfpdy,dfpdz]]=interp3d(xp,yp,zp,tl,out_mode)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp, yp, zp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores ou matrizes de reais de mesmo tamanho "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "tlist do tipo \"splin3d\", definindo um tensor spline 3d (chamado "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " a partir daqui)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out_mode"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "(opcional) string definindo a avaliação de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " fora do grid ([xmin,xmax]x[ymin,ymax]x[zmin,zmax])"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor ou matriz de mesmo formato que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zp"},{"type": "text","children": [],"string": ", avaliação elemento a elemento de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " onesses pontos."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dfpdx, dfpdy, dfpdz"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores (ou matrizes) de mesmo formato que "},{"type": "literal","children": [],"string": "xp"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zp"},{"type": "text","children": [],"string": ", avaliação elemento a elemento das primeiras derivadas de "},{"type": "literal","children": [],"string": "s"},{"type": "text","children": [],"string": " nesses pontos."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["splin3d", "bsplin3val"]},"interpln": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "interpln"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interpolação linear"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=interpln(xyd,x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xyd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de duas linhas (coordenadas xy dos pontos) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor (de abscissas) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor (de ordenadas)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["splin", "interp", "smooth"]},"linear_interpn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "linear_interpn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interpolação linear n-dimensional"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["vp = linear_interpn(xp1,xp2,..,xpn, x1,...,xn, v)", "vp = linear_interpn(xp1,xp2,..,xpn, x1,...,xn, v, out_mode)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp1, xp2, .., xpn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de reais (ou matrizes) de mesmo tamanho "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1 ,x2, ..., xn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas estritamente crescentes (com pelo menos 2 elementos) definindo o grid de interpolação n-dimensional"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor (caso n=1), matriz (caso n=2) ou hipermatriz (caso n > 2) com valores da função subjacente interpolada nos pontos do grid."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out_mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) string definindo a avaliação fora do grid (extrapolação)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor ou matriz de mesmo tamanho que "},{"type": "literal","children": [],"string": "xp1, ..., xpn "}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["interpln", "splin", "splin2d", "splin3d"]},"lsq_splin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lsq_splin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ajuste ponderado por spline cúbico de mínimos quadrados"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[y, d] = lsq_splin(xd, yd, x)", "[y, d] = lsq_splin(xd, yd, wd, x)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xd, yd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de mesmo tamanho, dados a serem ajustados por um spline cúbico"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "(opcional) um vetor de mesmo formato que "},{"type": "literal","children": [],"string": "xd"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "yd"},{"type": "text","children": [],"string": ", pesos dos ajustes de mínimos quadrados."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor (linha ou coluna) estritamente crescente, pontos de interrupção do spline cúbico"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y, d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores de mesmo formato que "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ", a tripla(x,y,d) define o spline cúbico aproximado."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["backslash", "datafit", "interp", "splin"]},"mesh2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mesh2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Triangulation of n points in the plane"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["triEdges = mesh2d(x, y)", "[triEdges, bdy] = mesh2d(x, y)", "triEdges = mesh2d(x, y, bdy)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bdy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "triEdges"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"smooth": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "smooth"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "suavização por funções splines"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[pt]=smooth(ptd [,step])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ptd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais (2xn)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (passo de discretização das abscissas) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais (2xn)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["splin", "interp", "interpln"]},"splin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "splin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interpolação por spline cúbico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["d = splin(x, y)", "d = splin(x, y, spline_type)", "d = splin(x, y, spline_type, der)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor (linha ou coluna) estritamente crescente (x deve ter pelo menos dois componentes)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor com o mesmo formato que "},{"type": "literal","children": [],"string": "x"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "spline_type"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) um string selecionando o tipo de spline a ser computado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "der"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) um vetor com dois componentes, com as derivadas nas extremidades (a ser fornecido quando spline_type=\"clamped\")"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor com o mesmo formato que "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "di"},{"type": "text","children": [],"string": " é a derivada do spline em "},{"type": "literal","children": [],"string": "xi"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["interp", "lsq_splin"]},"splin2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "splin2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interpolação por spline bicúbico em grides 2d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["C = splin2d(x, y, z)", "C = splin2d(x, y, z, spline_type)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas estritamente crescentes (com pelo menos dois componentes) definindo o grid de interpolação"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "nmatriz nx x ny (nx sendo o comprimento de "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e ny o comprimento de "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "spline_type"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) um string selecionando o tipo de spline bicúbico a ser computado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor grande com coeficientes dos elementos de área bicúbicos (veja detalhes em \"Observações\")"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cshep2d", "linear_interpn", "interp2d"]},"splin3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "splin3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interpolação spline em grides 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tl = splin3d(x, y, z, v)", "tl = splin3d(x, y, z, v, order)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas estritamente crescentes (cada um com pelo menos três componentes) definindo o grid de interpolação 3d"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma hipermatriz nx x ny x nz (nx, ny, nz sendo de comprimentos de "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": ", respectivamente)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) um vetor 1x3 [kx,ky,kz] dada a ordem do tensor spline em cada direção (o padrão é [4,4,4], i.e. spline tricúbico)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um tlist do tipo splin3d definindo o spline"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["linear_interpn", "interp3d", "bsplin3val"]},"ddp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ddp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "disturbance decoupling"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Closed, F, G] = ddp(Sys, zeroed, B1, D1)", "[Closed, F, G] = ddp(Sys, zeroed, B1, D1, flag, alfa, beta)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list containing the matrices "},{"type": "literal","children": [],"string": "(A,B2,C,D2)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zeroed"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer vector, indices of outputs of "},{"type": "literal","children": [],"string": "Sys"},{"type": "text","children": [],"string": " which are zeroed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix. "},{"type": "literal","children": [],"string": "B1"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "D1"},{"type": "text","children": [],"string": " have the same number of columns."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'ge'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'st'"},{"type": "text","children": [],"string": " (default) or "},{"type": "literal","children": [],"string": "'pp'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector (loc. of closed loop poles)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "beta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector (loc. of closed loop poles)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["abinv", "ui_observer"]},"gfrancis": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gfrancis"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Francis equations for tracking"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[L, M, T] = gfrancis(Plant, Model)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Plant"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time dynamical system in state-space representation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Model"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time dynamical system in state-space representation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L,M,T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lqg", "ppol"]},"augment": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "augment"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "augmented plant"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P, r] = augment(G)", "[P, r] = augment(G, flag1)", "[P, r] = augment(G, flag1, flag2)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list), the nominal plant"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "one of the following (upper case) character string: "},{"type": "literal","children": [],"string": " 'S' "},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": " 'R' "},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": " 'T' "},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": " 'SR' "},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": " 'ST' "},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": " 'RT' "},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": " 'SRT' "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "one of the following character string: "},{"type": "literal","children": [],"string": " 'o' "},{"type": "text","children": [],"string": " (stands for 'output', this is the default value) or "},{"type": "literal","children": [],"string": "'i'"},{"type": "text","children": [],"string": " (stands for 'input')."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list), the ``augmented'' plant"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 row vector, dimension of "},{"type": "literal","children": [],"string": "P22 = G"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lft", "sensi"]},"feedback": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "feedback"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "feedback operation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Sl = Sl1 /. Sl2"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl1,Sl2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear systems ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) in state-space or transfer form, or ordinary gain matrices."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) in state-space or transfer form"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lft", "blockdiag", "augment", "obscont"]},"lft": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lft"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear fractional transformation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["S = lft(P, R)", "[S, s] = lft(P, p, R)", "[S, s] = lft(P, p, R, r)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "linear system (in state space or transfer function representation) or a simple gain, the ``augmented'' plant, implicitly partitioned into four blocks (two input ports and two output ports)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 row vector,  the  dimensions of the "},{"type": "literal","children": [],"string": "P_22"},{"type": "text","children": [],"string": " block (see below)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "linear system (in state space or transfer function representation) or a simple gain, implicitly partitioned into four blocks (two input ports and two output ports)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 row vector, dimension of the "},{"type": "literal","children": [],"string": "R_22"},{"type": "text","children": [],"string": " block . This argument should not be used. It is retained for compatibility with previous versions."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "linear system, the linear fractional transform."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 row vector, dimension of the "},{"type": "literal","children": [],"string": "S_22"},{"type": "text","children": [],"string": " block (see below)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sensi", "augment", "feedback", "blockdiag"]},"ccontrg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ccontrg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Central H-infinity continuous time controller"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "K = ccontrg(P, r, gamma)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system in state-space representation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a two elements vector with integer values: the dimension of the 2,2 part of "},{"type": "literal","children": [],"string": "P"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gamma"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["gamitg", "h_inf"]},"dhinf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dhinf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "H_infinity design of discrete-time systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[AK, BK, CK, DK]        = dhinf(A,B,C,D, ncon, nmeas, gamma)", "[AK, BK, CK, DK, RCOND] = dhinf(A,B,C,D, ncon, nmeas, gamma)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-n system state matrix A."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-m system input matrix B."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the p-by-n system output matrix C."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the p-by-m system matrix D."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ncon"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of control inputs. m >= ncon >= 0, p-nmeas >= ncon."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nmeas"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of measurements. p >= nmeas >= 0, m-ncon >= nmeas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gamma"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the parameter gamma used in "},{"type": "literal","children": [],"string": "H_infinity"},{"type": "text","children": [],"string": " design. It is assumed that gamma is sufficiently large so that the controller is admissible. gamma >= 0."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "AK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-n controller state matrix AK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "BK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-nmeas controller input matrix BK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "CK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the ncon-by-n controller output matrix CK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "DK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the ncon-by-nmeas controller matrix DK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector containing estimates of the reciprocal condition numbers of the matrices which are to be inverted and estimates of the reciprocal condition numbers of the Riccati equations which have to be solved during the computation of the controller. (See the description of the algorithm in [1].)"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(1) contains the reciprocal condition number of the  matrix R3,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(2) contains the reciprocal condition number of the  matrix R1 - R2'*inv(R3)*R2"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(3) contains the reciprocal condition number of the matrix V21,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(4) contains the reciprocal condition number of the   matrix St3,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(5) contains the reciprocal condition number of the  matrix V12,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(6) contains the reciprocal condition number of the matrix Im2 + DKHAT*D22,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(7) contains the reciprocal condition number of the  X-Riccati equation,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(8) contains the reciprocal condition number of the  Z-Riccati equation."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["hinf", "h_inf"]},"dhnorm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dhnorm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete H-infinity norm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["hinfnorm = dhnorm(sl)", "hinfnorm = dhnorm(sl, tol)", "hinfnorm = dhnorm(sl, normax)", "hinfnorm = dhnorm(sl, tol, normax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the state space system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) (discrete-time)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "tolerance in bisection step, default value "},{"type": "literal","children": [],"string": "0.01"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "normax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "upper bound for the norm , default value is "},{"type": "literal","children": [],"string": "1000"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hinfnorm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the discrete infinity norm of "},{"type": "literal","children": [],"string": "Sl"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h_norm", "linfn"]},"gamitg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gamitg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "H-infinity gamma iterations for continuous time systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["gopt = gamitg(G, r, prec)", "gopt = gamitg(G, r, prec, options)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time dynamical system (plant realization)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 row vector (dimension of "},{"type": "literal","children": [],"string": "G22"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prec"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "desired relative accuracy on the norm"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "option"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'t'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gopt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar, optimal H-infinity gain"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ccontrg", "h_inf"]},"h2norm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h2norm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "H2 norm of a continuous time proper dynamical system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["n = h2norm(Sl)", "n = h2norm(Sl, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Proper linear dynamical system in non-discrete (continuous or undefined) time domain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"h_cl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h_cl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "closed loop matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Acl = h_cl(P, r, K)", "Acl = h_cl(P22, K)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P, P22"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "continuous time linear dynamical systems: augmented plant or nominal plant respectively"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a two elements vector, dimensions of 2,2 part of "},{"type": "literal","children": [],"string": "P"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "r=[rows,cols]=size(P22)"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system: the controller"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Acl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real square matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "lft"},"h_inf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h_inf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous time H-infinity (central) controller"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Sk, ro] = h_inf(P, r, romin, romax, nmax)", "[Sk, rk, ro] = h_inf(P, r, romin, romax, nmax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous-time linear dynamical system (\"augmented\" plant given in state-space form  or in transfer form)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "size of the "},{"type": "literal","children": [],"string": "P22"},{"type": "text","children": [],"string": " plant i.e. 2-vector "},{"type": "literal","children": [],"string": "[#outputs,#inputs]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "romin,romax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a priori bounds on "},{"type": "literal","children": [],"string": "ro"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "ro=1/gama^2"},{"type": "text","children": [],"string": "; ("},{"type": "literal","children": [],"string": "romin=0"},{"type": "text","children": [],"string": " usually)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, maximum number of iterations in the gama-iteration."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["gamitg", "ccontrg", "leqr"]},"h_inf_st": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h_inf_st"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "static H_infinity problem"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Kopt, gamaopt] = h_inf_stat(D, r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1x2 vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Kopt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"h_norm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h_norm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "H-infinity norm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[hinfnorm, frequency] = h_norm(sl)", "[hinfnorm, frequency] = h_norm(sl, rerr)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the state space system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rerr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "max. relative error, default value "},{"type": "literal","children": [],"string": "1e-8"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hinfnorm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the infinity norm of "},{"type": "literal","children": [],"string": "Sl"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frequency"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "frequency at which maximum is achieved"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["linfn", "linf", "svplot"]},"hinf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hinf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "H_infinity design of continuous-time systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[AK,BK,CK,DK,(RCOND)] = hinf(A,B,C,D,ncon,nmeas,gamma)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-n system state matrix A."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-m system input matrix B."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the p-by-n system output matrix C."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the p-by-m system matrix D."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ncon"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of control inputs. m >= ncon >= 0, p-nmeas >= ncon."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nmeas"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of measurements. p >= nmeas >= 0, m-ncon >= nmeas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gamma"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the parameter gamma used in "},{"type": "literal","children": [],"string": "H_infinity"},{"type": "text","children": [],"string": " design. It is assumed that gamma is sufficiently large so that the controller is admissible. gamma >= 0."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "AK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-n controller state matrix AK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "BK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-nmeas controller input matrix BK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "CK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the ncon-by-n controller output matrix CK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "DK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the ncon-by-nmeas controller matrix DK."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector containing estimates of the reciprocal condition numbers of the matrices which are to be inverted and estimates of the reciprocal condition numbers of the Riccati equations which have to be solved during the computation of the controller. (See the description of the algorithm in [1].)"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(1) contains the reciprocal condition number of the  control transformation matrix TU,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(2) contains the reciprocal condition number of the  measurement transformation matrix TY,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(3) contains an estimate of the reciprocal condition number of the X-Riccati equation,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCOND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(4) contains an estimate of the reciprocal condition number of the Y-Riccati equation."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": "dhinf"},"linf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "linf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "infinity norm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["linf(g)", "linf(g, eps)", "linf(g, eps, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " linear system."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "eps"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is error tolerance on n."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "threshold for imaginary axis poles."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h_norm", "linfn"]},"linfn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "linfn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "infinity norm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x, freq] = linfn(G, PREC, RELTOL, options)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PREC"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "desired relative accuracy on the norm"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RELTOL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "relative threshold to decide when an eigenvalue can be  considered on the imaginary axis."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "available options are "},{"type": "literal","children": [],"string": "'trace'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'cond'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is the computed norm."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "freq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "h_norm"},"macglov": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "macglov"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous time dynamical systems Mac Farlane Glover problem"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[P, r] = macglov(Sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system, the \"augmented\" plant"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 vector, dimension of "},{"type": "literal","children": [],"string": "P22"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nehari": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nehari"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Nehari approximant of continuous time dynamical systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = nehari(R)", "x = nehari(R, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system in state-space representation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system in state-space representation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional threshold, default value is 1e-6."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"parrot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "parrot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Parrot's problem"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "K = parrot(D,r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D,K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1X2 vector (dimension of the 2,2 part of "},{"type": "literal","children": [],"string": "D"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "h_inf_st"},"fourplan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fourplan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "augmented plant to four plants"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[P11, P12, P21, P22] = fourplan(P, r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (linear system)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 row vector, dimension of "},{"type": "literal","children": [],"string": "P22"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P11,P12,P21,P22"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lqg", "lqg2stan", "lqr", "lqe", "lft"]},"gcare": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gcare"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous time control Riccati equation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X, F] = gcare(Sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system in state-space representation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "symmetric matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "gfare"},"gfare": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gfare"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous time filter Riccati equation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Z, H] = gfare(Sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system in state-space representation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "symmetric matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "gcare"},"leqr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "leqr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "H-infinity LQ gain (full state)  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[K, X, err] = leqr(P12, Vx)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P12"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Vx"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "symmetric nonnegative matrix (should be small enough)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K,X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "two real matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real number (l1 norm of LHS of Riccati equation)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "lqr"},"lqe": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lqe"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear quadratic estimator (Kalman Filter)  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[K, X] = lqe(Pw)", "[K, X] = lqe(P, Qww, Rvv)", "[K, X] = lqe(P, Qww, Rvv, Swv)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pw"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A state space representation of a linear dynamical system (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A state space representation of a linear dynamical system ("},{"type": "literal","children": [],"string": "nu"},{"type": "text","children": [],"string": " inputs, "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " outputs, "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " states) (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qww"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Real "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " symmetric matrix, the process noise variance"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Rvv"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "full rank real "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " symmetric matrix, the measurement noise variance."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Swv"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " matrix, the process noise vs measurement noise covariance. The default value is zeros(nx,ny)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real matrix, the optimal gain."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real symmetric matrix, the stabilizing solution of the Riccati equation."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lqr", "observer", "obscont", "lqg", "fullrf"]},"lqg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lqg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "LQG compensator"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["K = lqg(P_aug, r)", "K = lqg(P, Qxu, Qwv)", "K = lqg(P, Qxu, Qwv, Qi, #dof)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P_aug"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "State space representation of the augmented plant (see: "},{"type": "link","children": [],"string": "lqg2stan"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1 by 2 row vector = (number of measurements, number of inputs) (dimension of the 2,2 part of "},{"type": "literal","children": [],"string": "P_aug"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "State-space representation of the nominal plant ("},{"type": "literal","children": [],"string": "nu"},{"type": "text","children": [],"string": " inputs, "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " outputs, "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " states)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qxu"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Symmetric "},{"type": "literal","children": [],"string": "nx+nu"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "nx+nu"},{"type": "text","children": [],"string": " weighting matrix."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qwv"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Symmetric "},{"type": "literal","children": [],"string": "nx+ny"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "nx+ny"},{"type": "text","children": [],"string": " covariance matrix."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Symmetric "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " weight for integral term."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "#dof"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scalar with value in {1,2}, the degrees of freedom of the controller. The default value is 2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Linear LQG (H2) controller in state-space representation."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lqg2stan", "lqr", "lqe", "h_inf", "obscont"]},"lqg2stan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lqg2stan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "LQG to standard problem"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[P_aug, r] = lqg2stan(P, Qxu, Qwv)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "State space representation of the nominal plant ("},{"type": "literal","children": [],"string": "nu"},{"type": "text","children": [],"string": " inputs, "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " outputs, "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " states)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qxu"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "[Q, S ; S', N]"},{"type": "text","children": [],"string": " symmetric "},{"type": "literal","children": [],"string": "nx+nu"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "nx+nu"},{"type": "text","children": [],"string": " weighting matrix."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Qwv"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "[R,T;T',V]"},{"type": "text","children": [],"string": " symmetric "},{"type": "literal","children": [],"string": "nx+ny"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "nx+ny"},{"type": "text","children": [],"string": " covariance matrix."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Row vector "},{"type": "literal","children": [],"string": "[ny nu]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P_aug"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Augmented plant state space representation (see: "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lqg", "lqr", "lqe", "obscont", "h_inf", "augment", "fstabst", "feedback"]},"lqg_ltr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lqg_ltr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "LQG with loop transform recovery"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[kf, kc] = lqg_ltr(sl, mu, ro)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system in state-space form ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mu,ro"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real positive numbers chosen ``small enough''"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kf,kc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "controller and observer Kalman gains."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "syslin"},"lqi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lqi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Linear quadratic integral compensator (full state)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[K, X] = lqi(P, Q, R)", "[K, X] = lqi(P, Q, R, S)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The plant  state space representation (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ") with nx states, nu inputs and ny outputs."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real nx+ny by nx+ny symmetric matrix,"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "full rank nu by nu real symmetric matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real nx+ny by nu  matrix, the default value is zeros(nx+ny,nu)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real matrix, the optimal gain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real symmetric matrix, the stabilizing solution of the Riccati equation"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["observer", "lqr", "lqg", "lft"]},"lqr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lqr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "LQ compensator (full state)  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[K, X] = lqr(P12)", "[K, X] = lqr(P, Q, R)", "[K, X] = lqr(P, Q, R, S)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P12"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A state space representation of a linear dynamical system (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A state space representation of a linear dynamical system (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real symmetric matrix, with same dimensions as P.A"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "full rank real symmetric matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix, the default value is "},{"type": "literal","children": [],"string": "zeros(size(R,1),size(Q,2))"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real matrix, the optimal gain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real symmetric matrix, the stabilizing solution of the Riccati equation"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lqg", "lqe", "gcare", "leqr", "riccati", "schur"]},"kpure": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kpure"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "continuous SISO system limit feedback gain"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[K,R] = kpure(sys)", "[K,R] = kpure(sys, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A SISO linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a positive scalar.  tolerance used to determine if a root is imaginary or not. The default value is "},{"type": "literal","children": [],"string": "1e-6"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real vector, the vector of gains for which at least one closed loop pole is imaginary."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Complex vector, the imaginary closed loop poles associated with the values of "},{"type": "literal","children": [],"string": "K"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["evans", "krac2"]},"krac2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "krac2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "continuous SISO system limit feedback gain"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "g = krac2(sys)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "text","children": [],"string": "A SISO linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "constant"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["evans", "kpure"]},"ppol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ppol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "pole placement"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "K = ppol(A, B, poles)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrices of dimensions "},{"type": "literal","children": [],"string": "nxn"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "nxm"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "poles"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real or complex vector of dimension "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix (negative feedback gain)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["canon", "stabil"]},"stabil": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "stabil"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "stabilization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["F = stabil(A, B, alfa)", "K = stabil(Sys, alfa, beta)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "square real matrix ("},{"type": "literal","children": [],"string": "nx x nx"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix ("},{"type": "literal","children": [],"string": "nx x nu"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alfa, beta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector (in conjugate pairs) or real number."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix ("},{"type": "literal","children": [],"string": "nx x nu"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) ("},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " inputs, "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " outputs)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " inputs, "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " outputs)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["st_ility", "contr", "ppol"]},"arl2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arl2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SISO model realization by L2 transfer approximation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h = arl2(y, den0, n)", "h = arl2(y, den0, n, imp)", "h = arl2(y, den0, n, imp, 'all')", "h = arl2(y, den0, n, 'all')", "[den, num, err] = arl2(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector or polynomial in "},{"type": "literal","children": [],"string": "z^-1"},{"type": "text","children": [],"string": ", it contains the coefficients of the Fourier's series of the rational system to approximate (the impulse response)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "den0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a polynomial which gives an initial guess of the solution, it may be "},{"type": "literal","children": [],"string": "poly(1,'z','c')"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the degree of approximating transfer function (degree of den)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "imp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer in "},{"type": "literal","children": [],"string": "(0,1,2)"},{"type": "text","children": [],"string": " (verbose mode)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "transfer function "},{"type": "literal","children": [],"string": "num/den"},{"type": "text","children": [],"string": " or transfer matrix (column vector) when flag "},{"type": "literal","children": [],"string": "'all'"},{"type": "text","children": [],"string": " is given."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "den"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polynomial or vector of polynomials, contains the denominator(s) of the solution(s)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polynomial or vector of polynomials, contains the numerator(s) of the solution(s)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real constant or vector , the l2-error achieved for each solutions"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ldiv", "imrep2ss", "time_id", "armax", "frep2tf"]},"armax": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "armax"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "armax identification"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[arc, la, lb, sig, resid] = armax(r, s, y, u)", "[arc, la, lb, sig, resid] = armax(r, s, y, u, b0f, prf)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output process  y(ny,n); ( ny: dimension of y , n : sample size)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input process   u(nu,n); ( nu: dimension of u , n : sample size)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r and s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "auto-regression orders r >=0 et s >=-1"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b0f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional parameter. Its default value is 0 and it means that the coefficient b0 must be identified. if bof=1 the b0 is supposed to be zero and is not identified"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional parameter for display control. If prf =1, the default value,  a display of the identified Arma is given."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab arma object (see armac)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "la"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is the list(a,a+eta,a-eta) ( la = a in dimension 1) ; where eta is the estimated standard deviation.  , a=[Id,a1,a2,...,ar] where each ai is a matrix of size (ny,ny)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is the list(b,b+etb,b-etb) (lb =b in dimension 1) ; where etb is the estimated standard deviation. b=[b0,.....,b_s] where each bi is a matrix of size (nu,nu)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is the estimated standard deviation of the noise and resid=[ sig*e(t0),....] ("},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["imrep2ss", "time_id", "arl2", "armax", "frep2tf"]},"armax1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "armax1"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "armax identification"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[arc, resid] = armax1(r, s, q, y, u)", "[arc, resid] = armax1(r, s, q, y, u, b0f)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output signal"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input signal"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r,s,q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "auto regression orders with r >=0, s >=-1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b0f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional parameter. Its default value is 0 and it means that the coefficient b0 must be identified. if bof=1 the b0 is supposed to be zero and is not identified"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arc"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "is tlist with type \"ar\" and fields a,  b,  d,  ny,  nu,  sig"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is the vector "},{"type": "literal","children": [],"string": "[1,a1,...,a_r]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is the vector "},{"type": "literal","children": [],"string": "[b0,......,b_s]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is the vector "},{"type": "literal","children": [],"string": "[1,d1,....,d_q]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resid=[ sig*echap(1),....,];"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"findABCD": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findABCD"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete-time system subspace identification"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["SYS        = findABCD(S, N, L, R, METH)", "[SYS, RCND] = findABCD(S, N, L, R, METH)", "[SYS, K] = findABCD(S,N,L,R,METH,NSMPL,TOL,PRINTW)", "[SYS, K, Q, Ry, S, RCND] = findABCD(S, N, L, R, METH, NSMPL, TOL, PRINTW)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the number of block rows in the block-Hankel matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the system order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the number of output"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix, relevant part of the  R factor of the concatenated block-Hankel matrices computed by a call to findr."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "METH"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer, an option for the method to use"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "MOESP method with past inputs and outputs;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "N4SID method;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "combined method: A and C via MOESP, B and D via N4SID."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    METH = 3."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "NSMPL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the total number of samples used for calculating the covariance matrices and the Kalman predictor gain. This parameter is not needed if the covariance matrices and/or the Kalman predictor gain matrix are not desired. If NSMPL = 0, then K, Q, Ry, and S are not computed. Default:    NSMPL = 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the tolerance used for estimating the rank of matrices.  If  TOL > 0,  then the given value of  TOL  is used as a lower bound for the reciprocal condition number. Default: prod(size(matrix))*epsilon_machine where epsilon_machine is the relative machine precision."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer, switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 1: print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 0: do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    PRINTW = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "SYS"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "computes a state-space realization SYS = (A,B,C,D) (an syslin object)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the Kalman predictor gain K (if NSMPL > 0)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state covariance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ry"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output covariance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state-output cross-covariance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector, reciprocal condition numbers of the matrices involved in rank decisions, least squares or Riccati equation solutions"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findAC", "findBD", "findBDK", "findR", "sorder", "sident"]},"findAC": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findAC"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete-time system subspace identification"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[A, C] = findAC(S, N, L, R, METH, TOL, PRINTW)", "[A, C, RCND] = findAC(S, N, L, R, METH, TOL, PRINTW)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the number of block rows in the block-Hankel matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix, relevant part of the  R factor of the concatenated block-Hankel matrices computed by a call to findr."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "METH"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer, an option for the method to use"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "MOESP method with past inputs and outputs;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "N4SID method;"},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    METH = 3."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the tolerance used for estimating the rank of matrices.  If  TOL > 0,  then the given value of  TOL  is used as a lower bound for the reciprocal condition number. Default: prod(size(matrix))*epsilon_machine where epsilon_machine is the relative machine precision."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer, switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 1: print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    PRINTW = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix, state system matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix, output system matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of length 4,  condition numbers of the matrices involved in rank decision"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findABCD", "findBD", "findBDK", "findR", "sorder", "sident"]},"findBD": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findBD"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "initial state and system matrices B and D of a discrete-time system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[[x0] [,B [,D]] [,V] [,rcnd]] = findBD(jobx0,comuse [,job],A [,B],C [,D],Y [,U,tol,printw,ldwork])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jobx0"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to specify whether or not the initial state  should be computed:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : compute the initial state x0;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : do not compute the initial state (possibly, because x0 is known to be zero)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comuse"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to specify whether the system matrices B and D should be computed or used:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : compute the matrices B and D, as specified by job;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : use the matrices B and D, as specified by job;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 : do not compute/use the matrices B and D."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "job"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to determine which of the system matrices B and D should be computed or used:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : compute/use the matrix B only (D is known to be zero);"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : compute/use the matrices B and D."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "job must not be specified if jobx0 = 2 and comuse = 2, or if comuse = 3."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state matrix of the given system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional, input matrix of the given system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output matrix of the given system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional, direct feedthrough of the given system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the t-by-l output-data sequence matrix.  Column  j  of  Y  contains the  t  values of the j-th output component for consecutive time increments."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the t-by-m input-data sequence matrix (input when jobx0 = 1  and comuse = 2, or comuse = 1).  Column  j  of  U  contains the  t  values of the j-th input component for consecutive time increments."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional, tolerance used for estimating the rank of matrices. If tol > 0, then the given value of tol is used as a lower bound for the reciprocal condition number; an m-by-n matrix whose estimated condition number is less than 1/tol is considered to be of full rank. Default: m*n*epsilon_machine where epsilon_machine is the relative machine precision."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "printw"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "optional, switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1:  print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0:  do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    printw = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldwork"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the workspace size. Default :   computed by the formula LDWORK = MAX( minimum workspace size needed, 2*CSIZE/3, CSIZE - ( m + l )*t - 2*n*( n + m + l ) - l*m ) where CSIZE is the cache size in double precision words."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial state vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Br"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "system input matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Dr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "system direct feedthrough matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "V"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the n-by-n orthogonal matrix which reduces A to a real Schur form (output when jobx0 = 1 or comuse = 1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rcnd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the reciprocal condition numbers of the matrices involved in rank decisions."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["inistate", "findx0BD", "findABCD", "findAC", "findBD"]},"findBDK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findBDK"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Kalman gain and  B D system matrices of a discrete-time system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[B,D,K] = findBDK(S,N,L,R,A,C,METH,JOB,NSMPL,TOL,PRINTW)", "[B,D,RCND] = findBDK(S,N,L,R,A,C,METH,JOB)", "[B,D,K,Q,Ry,S,RCND] = findBDK(S,N,L,R,A,C,METH,JOB,NSMPL,TOL,PRINTW)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the number of block rows in the block-Hankel matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix, relevant part of the  R factor of the concatenated block-Hankel matrices computed by a call to findR."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "square matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "METH"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer, an option for the method to use"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "MOESP method with past inputs and outputs;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "N4SID method;"},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    METH = 2."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "JOB"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an option specifying which system matrices should be computed:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "compute the matrix B;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "compute the matrices B and D."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    JOB = 2."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "NSMPL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the total number of samples used for calculating the covariance matrices and the Kalman predictor gain. This parameter is not needed if the covariance matrices and/or the Kalman predictor gain matrix are not desired. If NSMPL = 0, then K, Q, Ry, and S are not computed. Default:    NSMPL = 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the tolerance used for estimating the rank of matrices.  If  TOL > 0,  then the given value of  TOL  is used as a lower bound for the reciprocal condition number. Default: prod(size(matrix))*epsilon_machine where epsilon_machine is the relative machine precision."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer, switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 1: print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 0: do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    PRINTW = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "SYS"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "computes a state-space realization SYS = (A,B,C,D) (an syslin object)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the Kalman predictor gain K (if NSMPL > 0)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state covariance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ry"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output covariance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state-output cross-covariance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "he vector  of length 12 containing the reciprocal condition numbers of the matrices involved in rank decisions, least squares or Riccati equation solutions."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findABCD", "findAC", "findBD", "findR", "sorder", "sident"]},"findR": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findR"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Preprocessor for estimating the matrices of a linear time-invariant dynamical system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[R, N] = findR(S, Y)", "[R, N] = findR(S, Y, U, METH, ALG, JOBD, TOL, PRINTW)", "[R, N, SVAL, RCND] = findR(S, Y, U, METH, ALG, JOBD, TOL, PRINTW)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of block rows in the block-Hankel matrices."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "METH"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an option for the method to use:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "MOESP method with past inputs and outputs;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "N4SI15     0     1     1  1000D method."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    METH = 1."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ALG"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an option for the algorithm to compute the triangular factor of the concatenated block-Hankel matrices built from the input-output data:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Cholesky algorithm on the correlation matrix;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "fast QR algorithm;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "standard QR algorithm."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    ALG = 1."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "JOBD"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an option to specify if the matrices B and D should later be computed using the MOESP approach:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 :  the matrices B and D should later be computed using the MOESP approach;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 :  the matrices B and D should not be computed using the MOESP approach."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default: JOBD = 2. This parameter is not relevant for METH = 2."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector of length 2 containing tolerances:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(1) is the tolerance for estimating the rank of matrices. If  TOL(1) > 0,  the given value of  TOL(1)  is used as a lower bound for the reciprocal condition number."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    TOL(1) = prod(size(matrix))*epsilon_machine where epsilon_machine is the relative machine precision."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(2) is the tolerance for estimating the system order. If  TOL(2) >= 0,  the estimate is indicated by the index of the last singular value greater than or equal to  TOL(2).  (Singular values less than  TOL(2) are considered as zero.)"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "When  TOL(2) = 0,  then  S*epsilon_machine*sval(1)  is used instead TOL(2),  where  sval(1)  is the maximal singular value. When  TOL(2) < 0,  the estimate is indicated by the index of the singular value that has the largest logarithmic gap to its successor. Default:    TOL(2) = -1."},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1: print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0: do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    PRINTW = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the order of the discrete-time realization"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "SVAL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "singular values SVAL, used for estimating the order."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RCND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of length 2 containing the reciprocal condition numbers of the matrices involved in rank decisions or least squares solutions."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findABCD", "findAC", "findBD", "findBDK", "sorder", "sident"]},"findx0BD": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findx0BD"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Estimates state and B and D matrices of a discrete-time linear system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[X0, B, D] = findx0BD(A, C, Y, U, WITHX0, WITHD, TOL, PRINTW)", "[x0, B, D, V, rcnd] = findx0BD(A, C, Y, U)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state matrix of the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "C matrix of the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "system output"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "system input"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "WITHX0"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a switch for estimating the initial state x0."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1: estimate x0;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0: do not estimate x0."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    WITHX0 = 1."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "WITHD"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a switch for estimating the matrix D."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1: estimate the matrix D;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0: do not estimate the matrix D."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    WITHD = 1."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the tolerance used for estimating the rank of matrices.  If  TOL > 0,  then the given value of  TOL  is used as a lower bound for the reciprocal condition number. Default:    prod(size(matrix))*epsilon_machine where epsilon_machine             is the relative machine precision."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1: print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0: do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    PRINTW = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial state of the estimated linear system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "B matrix of the estimated linear system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "D matrix of the estimated linear system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "V"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "orthogonal matrix which reduces the system state matrix A to a real Schur form"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rcnd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "estimates of the reciprocal condition numbers of the matrices involved in rank decisions."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findBD", "inistate"]},"imrep2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "imrep2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "state-space realization of an impulse response"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sl = imrep2ss(v)", "sl = imrep2ss(v, deg)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector coefficients of impulse response, "},{"type": "literal","children": [],"string": "v(:,k)"},{"type": "text","children": [],"string": " is the kth sample"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (order required)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["frep2tf", "arl2", "time_id", "armax", "markp2ss", "ldiv"]},"inistate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "inistate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Estimates the initial state of a discrete-time system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X0 = inistate(A, C, Y)", "X0 = inistate(A, B, C, Y, U)", "X0 = inistate(SYS, Y, U, TOL, PRINTW)", "[x0, V, rcnd] = inistate(SYS, Y, U, TOL, PRINTW)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "SYS"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "given system, syslin(dt,A,B,C,D)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the output of the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the input of the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TOL"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "TOL is the tolerance used for estimating the rank of matrices.  If  TOL > 0,  then the given value of  TOL  is used as a lower bound for the reciprocal condition number."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    prod(size(matrix))*epsilon_machine where epsilon_machine is the relative machine precision."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "PRINTW"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "PRINTW is a switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1: print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0: do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    PRINTW = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the estimated initial state vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "V"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "orthogonal matrix which reduces the system state matrix A to  a real Schur form"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rcnd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "estimate of the reciprocal condition number of the coefficient matrix of the least squares problem solved."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findBD", "findx0BD"]},"lin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linearization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sl = lin(sim,x0,u0)", "[A,B,C,D] = lin(sim, x0, u0)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "function"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0, u0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vectors of compatible dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B,C,D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["external", "derivat"]},"sident": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sident"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete-time state-space realization and Kalman gain"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[[A,C][,B[,D]][,K,Q,Ry,S][,rcnd]] = sident(meth,job,s,n,l,R[,tol,t,Ai,Ci,printw])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "meth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to determine the method to use:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : MOESP method with past inputs and outputs;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : N4SID method;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 : combined method: A and C via MOESP, B and D via N4SID."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "job"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to determine the calculation to be performed:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : compute all system matrices, A, B, C, D;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : compute the matrices A and C only;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 : compute the matrix B only;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "4 : compute the matrices B and D only."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of block rows in the processed input and output block Hankel matrices.  s > 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the order of the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the number of the system outputs"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the 2*(m+l)*s-by-2*(m+l)*s part of  R  contains the processed upper triangular factor  R  from the QR factorization of the concatenated block-Hankel matrices, and further details needed for computing system matrices."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) tolerance used for estimating the rank of matrices. If  tol > 0,  then the given value of  tol  is used as a lower bound for the reciprocal condition number; an m-by-n matrix whose estimated condition number is less than  1/tol  is considered to be of full rank. Default:    m*n*epsilon_machine where epsilon_machine is the relative machine precision."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the total number of samples used for calculating the covariance matrices.  Either t = 0, or t >= 2*(m+l)*s. This parameter is not needed if the covariance matrices and/or the Kalman predictor gain matrix are not desired. If t = 0, then K, Q, Ry, and S are not computed. Default:    t = 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ai"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ci"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "printw"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1:  print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0:  do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    printw = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix, kalman gain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the n-by-n positive semidefinite state covariance matrix used as state weighting matrix when computing the Kalman gain."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RY"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the l-by-l positive (semi)definite output covariance matrix used as output weighting matrix when computing the Kalman gain."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the n-by-l state-output cross-covariance matrix used as cross-weighting matrix when computing the Kalman gain."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rcnd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) vector of length lr, containing estimates of the reciprocal condition numbers of the matrices involved in rank decisions, least squares, or Riccati equation solutions, where   lr = 4,  if Kalman gain matrix K is not required, and  lr = 12, if Kalman gain matrix K is required."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findBD", "sorder"]},"sorder": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sorder"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computing the order of a discrete-time system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Ro = sorder(meth, alg, jobd, batch, conct, s, Y)", "Ro = sorder(meth, alg, jobd, batch, conct, s, Y, U, tol, printw, ldwork, Ri)", "[Ro, n, sval, rcnd] = sorder(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "meth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to determine the method to use:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : MOESP method with past inputs and outputs;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : N4SID method."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alg"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to determine the algorithm for computing the triangular factor of the concatenated block-Hankel matrices built from the input-output data:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : Cholesky algorithm on the correlation matrix;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : fast QR algorithm;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 : standard QR algorithm."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jobd"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to specify if the matrices B and D should later be computed using the MOESP approach:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : the matrices B and D should later be computed using the MOESP approach;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "2 : the matrices B and D should not be computed using the MOESP approach."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is not relevant for meth = 2."},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "batch"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to specify whether or not sequential data processing is to be used, and, for sequential processing, whether or not the current data block is the first block, an intermediate block, or the last block, as follows:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : the first block in sequential data processing;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : an intermediate block in sequential data processing;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 : the last block in sequential data processing;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "4 : one block only (non-sequential data processing)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "conct"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to specify whether or not the successive data blocks in sequential data processing belong to a single experiment, as follows:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : the current data block is a continuation of the previous data block and/or it will be continued by the next data block;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "2 : there is no connection between the current data block and the previous and/or the next ones."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is not used if batch = 4."},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of block rows in the input and output block Hankel matrices to be processed.  s > 0"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the t-by-l output-data sequence matrix.  Column j of  Y contains the  t  values of the j-th output component for consecutive time increments."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the t-by-m input-data sequence matrix.  Column j of  U  contains the  t  values of the j-th input component for consecutive time increments. Default:    U = []."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) vector of length 2 containing tolerances: tol(1) - tolerance used for estimating the rank of matrices. If  tol(1) > 0,  then the given value of  tol(1)  is used as a lower bound for the reciprocal condition number; an m-by-n matrix whose estimated condition number is less than  1/tol(1)  is considered to be of full rank. If  tol(1) <= 0,  then a default value m*n*epsilon_machine is used, where epsilon_machine is the relative machine precision."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "tol(2) - tolerance used for determining an estimate of the system order. If  tol(2) >= 0,  the estimate is indicated by the index of the last singular value greater than or equal to  tol(2).  (Singular values less than  tol(2)  are considered as zero.) When  tol(2) = 0,  an internally computed default value,  tol(2) = s*epsilon_machine*sval(1), is used, where  sval(1)  is the maximal singular value, and epsilon_machine the relative machine precision. When  tol(2) < 0,  the estimate is indicated by the index of the singular value that has the largest logarithmic gap to its successor."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    tol(1:2) = [0,-1]."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "printw"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) switch for printing the warning messages."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1:  print warning messages;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0:  do not print warning messages."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    printw = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldwork"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) the workspace size. Default : computed by the formulas"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "LDWORK = MAX( minimum workspace size needed, LDWORK ) where CSIZE is the cache size in double precision words."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If LDWORK is specified less than the minimum workspace size  needed, that minimum value is used instead."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ri"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) if batch = 2 or 3, the 2*(m+l)*s-by-2*(m+l)*s (upper triangular, if alg <> 2) part of  R  must contain the (upper triangular) matrix  R  computed at the previous call of this mexfile in sequential data processing. If conct = 1, R  has an additional column, also set at the previous call."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If alg = 2,  R  has m+l+1 additional columns, set at the previous call."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is not used for batch = 1 or batch = 4."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ro"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if batch = 3 or 4, the 2*(m+l)*s-by-2*(m+l)*s part of  R  contains the processed upper triangular factor  R  from the QR factorization of the concatenated block-Hankel matrices, and further details needed for computing system matrices. If batch = 1 or 2, then  R  contains intermediate results needed at the next call of this mexfile. If batch = 1 or 2 and conct = 1,  R  has an additional column, also set before return. If batch = 1 or 2 and alg = 2,  R  has m+l+1  additional columns, set before return."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the order of the system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sval"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the singular values used for estimating the order of the system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rcnd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) if meth = 2, vector of length 2 containing the reciprocal condition numbers of the matrices involved in rank decisions or least squares solutions."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findBD", "sident"]},"time_id": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "time_id"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SISO least square identification"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["H = time_id(n, u, y)", "[H, err] = time_id(n, u, y)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "order of transfer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "one of the following"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of inputs to the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"impuls\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if y is an impulse response"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"step\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if y is a step response."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of response."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "rational function with degree n denominator and  degree n-1 numerator if y(1)==0 or rational function with degree n denominator and  numerator if y(1)<>0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "||y - impuls(H,npt)||^2"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "impuls(H,npt)"},{"type": "text","children": [],"string": " are the "},{"type": "literal","children": [],"string": "npt"},{"type": "text","children": [],"string": " first coefficients of impulse response of "},{"type": "literal","children": [],"string": "H"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["imrep2ss", "arl2", "armax", "frep2tf"]},"sensi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sensi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sensitivity functions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Se, Re, Te] = sensi(G, K)", "[Si, Ri, Ti] = sensi(G, K, flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "standard plant ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "compensator ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string "},{"type": "literal","children": [],"string": "'o'"},{"type": "text","children": [],"string": " (default value) or "},{"type": "literal","children": [],"string": "'i'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Se"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "output sensitivity function "},{"type": "literal","children": [],"string": "(I+G*K)^-1"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Re"},{"type": "listitem","children": {"type": "para","children": {"type": "literal","children": [],"string": "K*Se"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Te"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "G*K*Se"},{"type": "text","children": [],"string": " (output complementary sensitivity function)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["augment", "lft", "h_cl"]},"abinv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "abinv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "AB invariant subspace"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X,dims,F,U,k,Z] = abinv(Sys,alpha,beta,flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list containing the matrices "},{"type": "literal","children": [],"string": "[A,B,C,D]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) real number or vector (possibly complex, location of closed loop poles)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "beta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) real number or vector (possibly complex, location of closed loop poles)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "(optional) character string "},{"type": "literal","children": [],"string": "'ge'"},{"type": "text","children": [],"string": " (default) or "},{"type": "literal","children": [],"string": "'st'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'pp'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "orthogonal matrix of size nx (dim of state space)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer row vector "},{"type": "literal","children": [],"string": "dims=[dimR,dimVg,dimV,noc,nos]"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "dimR<=dimVg<=dimV<=noc<=nos"},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "flag='st'"},{"type": "text","children": [],"string": ", (resp. "},{"type": "literal","children": [],"string": "'pp'"},{"type": "text","children": [],"string": "), "},{"type": "literal","children": [],"string": "dims"},{"type": "text","children": [],"string": " has 4 (resp. 3) components."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix (state feedback)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer (normal rank of "},{"type": "literal","children": [],"string": "Sys"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "non-singular linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cainv", "st_ility", "ssrand", "ss2ss", "ddp"]},"cainv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cainv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Dual of abinv"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X, dims, J, Y, k, Z] = cainv(Sl, alfa, beta, flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list containing the matrices "},{"type": "literal","children": [],"string": "[A,B,C,D]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alfa"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number or vector (possibly complex, location of closed loop poles)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "beta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number or vector (possibly complex, location of closed loop poles)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "(optional) character string "},{"type": "literal","children": [],"string": "'ge'"},{"type": "text","children": [],"string": " (default) or "},{"type": "literal","children": [],"string": "'st'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'pp'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "orthogonal matrix of size nx (dim of state space)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer row vector "},{"type": "literal","children": [],"string": "dims=[nd1,nu1,dimS,dimSg,dimN]"},{"type": "text","children": [],"string": " (5 entries, nondecreasing order).If "},{"type": "literal","children": [],"string": "flag='st'"},{"type": "text","children": [],"string": ", (resp. "},{"type": "literal","children": [],"string": "'pp'"},{"type": "text","children": [],"string": "), "},{"type": "literal","children": [],"string": "dims"},{"type": "text","children": [],"string": " has 4 (resp. 3) components."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "J"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix (output injection)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "orthogonal matrix of size ny (dim of output space)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer (normal rank of "},{"type": "literal","children": [],"string": "Sl"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "non-singular linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["abinv", "dt_ility", "ui_observer"]},"cont_mat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cont_mat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "controllability matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Cc = cont_mat(A, B)", "Cc = cont_mat(sl)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a,b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "two real matrices of appropriate dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ctr_gram", "contr", "canon", "st_ility"]},"contr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "contr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "controllability, controllable subspace, staircase"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["n = contr(A, B)", "[n, U] = contr(A, B)", "[n, U, ind, V, Ac, Bc] = contr(A, B)", ".. = contr(.., tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "tolerance parameter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dimension of controllable subspace."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "orthogonal change of basis which puts "},{"type": "literal","children": [],"string": "(A,B)"},{"type": "text","children": [],"string": " in canonical form."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "V"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "orthogonal matrix, change of basis in the control space."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ac"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "block Hessenberg matrix "},{"type": "literal","children": [],"string": "Ac=U'*A*U"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Bc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is "},{"type": "literal","children": [],"string": "U'*B*V"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "p integer vector associated with controllability indices  (dimensions of subspaces "},{"type": "literal","children": [],"string": "B, B+A*B,...=ind(1),ind(1)+ind(2),..."},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["canon", "cont_mat", "unobs", "stabil", "st_ility"]},"contrss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "contrss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "controllable part"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["slc = contrss(sl)", "slc = contrss(sl, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a threshold for controllability (see "},{"type": "link","children": [],"string": "contr"},{"type": "text","children": [],"string": "). default value is "},{"type": "literal","children": [],"string": "sqrt(%eps)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cont_mat", "ctr_gram", "cont_frm", "contr"]},"ctr_gram": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ctr_gram"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "controllability gramian"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Gc = ctr_gram(sl)", "Gc = ctr_gram(A, B)", "Gc = ctr_gram(A, B, dom)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "two real matrices of appropriate dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dom"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string ("},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " (default value) or "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system, "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["equil1", "obs_gram", "contr", "cont_mat", "cont_frm", "contrss"]},"dt_ility": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dt_ility"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "detectability test"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[k, n, U, Sld] = dt_ility(Sl)", "[k, n, U, Sld] = dt_ility(Sl, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dimension of unobservable subspace"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "dimension of unstable, unobservable subspace ("},{"type": "literal","children": [],"string": " k<=n"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "orthogonal matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sld"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "threshold for controllability test."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contr", "st_ility", "unobs", "stabil"]},"obs_gram": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "obs_gram"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "observability gramian"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Go = obs_gram(sl)", "Go = obs_gram(A, C)", "Go = obs_gram(A, C, dom)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices (of appropriate dimensions)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dom"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ("},{"type": "literal","children": [],"string": "\"d'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " (default value))"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ctr_gram", "obsvss", "obsv_mat", "lyap"]},"obscont": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "obscont"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "observer based controller"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["K = obscont(P, Kc, Kf)", "[J, r] = obscont(P, Kc, Kf)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (nominal plant) in state-space form, continuous or discrete time"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Kc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix, (full state) controller gain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Kf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix, filter gain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (controller)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "J"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (extended controller)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1x2 row vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ppol", "lqg", "lqr", "lqe", "h_inf", "lft", "syslin", "feedback", "observer"]},"observer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "observer"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "observer design"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Obs = observer(Sys, J)", "[Obs, U, m] = observer(Sys)", "[Obs, U, m] = observer(Sys, flag, alfa)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (linear system)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "J"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nx x ny constant matrix (output injection matrix)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character strings ("},{"type": "literal","children": [],"string": "'pp'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'st'"},{"type": "text","children": [],"string": " (default))"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alfa"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "location of closed-loop poles (optional parameter, default=-1)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Obs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list), the observer"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "orthogonal matrix (see "},{"type": "literal","children": [],"string": "dt_ility"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer (dimension of unstable unobservable ("},{"type": "literal","children": [],"string": "st"},{"type": "text","children": [],"string": ") or unobservable ("},{"type": "literal","children": [],"string": "pp"},{"type": "text","children": [],"string": ") subspace)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["dt_ility", "unobs", "stabil"]},"obsv_mat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "obsv_mat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "observability matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["O = obsv_mat(sl)", "O = obsv_mat(A, C)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,C,O"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contrss", "obsvss", "obs_gram"]},"obsvss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "obsvss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "observable part"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["slo = obsvss(sl)", "[Ao, Bo, Co] = obsvss(A, B, C)", ".. = obsvss(.., tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B,C,Ao,Bo,Co"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl,slo"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real (threshold) (default value "},{"type": "literal","children": [],"string": "100*%eps"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contr", "contrss", "obsv_mat", "obs_gram"]},"ui_observer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ui_observer"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "unknown input observer"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[UIobs, J, N] = ui_observer(Sys, reject, C1, D1)", "[UIobs, J, N] = ui_observer(Sys, reject, C1, D1, flag, alfa, beta)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list containing the matrices "},{"type": "literal","children": [],"string": "(A,B,C2,D2)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "reject"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer vector, indices of inputs of "},{"type": "literal","children": [],"string": "Sys"},{"type": "text","children": [],"string": " which are unknown."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix. "},{"type": "literal","children": [],"string": "C1"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "D1"},{"type": "text","children": [],"string": " have the same number of rows."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'ge'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'st'"},{"type": "text","children": [],"string": " (default) or "},{"type": "literal","children": [],"string": "'pp'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alfa"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector (loc. of closed loop poles)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "beta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector (loc. of closed loop poles)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cainv", "ddp", "abinv"]},"unobs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unobs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "unobservable subspace"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[n, U] = unobs(A, C)", "[n, U] = unobs(A, C, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "tolerance used when evaluating ranks (QR factorizations)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dimension of unobservable subspace."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "orthogonal change of basis which puts "},{"type": "literal","children": [],"string": "(A,B)"},{"type": "text","children": [],"string": " in canonical form."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contr", "contrss", "canon", "cont_mat", "spantwo", "dt_ility"]},"black": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "black"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "diagrama de Black (carta de Nichols)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["black( sl,[fmin,fmax] [,step] [,comments] )", "black( sl,frq [,comments] )", "black(frq,db,phi [,comments])", "black(frq,repf [,comments])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "lista ( sistema linear "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin,fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "reais (limites de freqüência) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha ou matriz (freqüências) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "db,phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas ou matrizes (módulo, fase) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas ou matrizes (resposta de freqüência complexa)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comments"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"bode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Bode plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["bode(sl)", "bode(sl, fmin, fmax)", "bode(sl, fmin, fmax, step)", "bode(sl, frq)", "bode(frq, db, phi)", "bode(frq, repf)", "bode(.., Captions)", "bode(.., \"rad\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A siso or simo linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin,fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (frequency bounds (in Hz))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (logarithmic step.)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row vector or matrix (frequencies (in Hz) ) (one row for each SISO subsystem)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "db"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row vector or matrix ( magnitudes (in Db)). (one row for each SISO subsystem)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row vector or matrix ( phases (in degree)) (one row for each SISO subsystem)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row vector or matrix of complex numbers (complex frequency response)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Captions"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of character strings (captions)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rad\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as last optional argument: displays the Bode plot versus Angular frequencies in rad/s, instead of versus frequencies in Hz."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bode_asymp", "black", "nyquist", "gainplot", "repfreq", "g_margin", "p_margin", "calfrq", "phasemag", "datatips"]},"bode_asymp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bode_asymp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Bode plot asymptote"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["bode_asymp(sl)", "bode_asymp(sl, wmin, wmax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (SISO or SIMO linear system) in continuous time (type state-space or rational)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wmin, wmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real scalars: lower and upper frequency bounds (in rad/s)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bode", "black", "nyquist", "gainplot", "repfreq", "g_margin", "p_margin", "calfrq", "phasemag", "datatips", "show_margins"]},"calfrq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "calfrq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency response discretization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[frq, bnds, split] = calfrq(h, fmin, fmax)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A siso or simo linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin,fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalars (min and max frequencies in Hz)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row vector (discretization of the frequency interval)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bnds"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector "},{"type": "literal","children": [],"string": "[Rmin Rmax Imin Imax]"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "Rmin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "Rmax"},{"type": "text","children": [],"string": " are the lower and upper bounds of the frequency response real part, "},{"type": "literal","children": [],"string": "Imin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "Imax"},{"type": "text","children": [],"string": " are the lower and upper bounds of the frequency response imaginary part,"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "split"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of frq splitting points indexes"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bode", "black", "nyquist", "freq", "repfreq", "logspace"]},"dbphi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dbphi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency response to phase and magnitude representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[db, phi] = dbphi(repf [, mod])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "db,phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of gains (db) and phases (degrees)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of complex frequency response"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "character string"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod='c'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"continuous\" representation between -infinity and +360 degrees (default)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod='m'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "representation between -360 and 0 degrees"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["repfreq", "bode", "phasemag"]},"freq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "freq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency response"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = freq(A, B, C, f)", "x = freq(A, B, C, D, f)", "x = freq(NUM, DEN, f)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B, C, D"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrices of respective dimensions "},{"type": "literal","children": [],"string": "nxn, nxp, mxn, mxp"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "NUM,DEN"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "polynomial matrices of dimension "},{"type": "literal","children": [],"string": "mxp"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["repfreq", "horner"]},"freson": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "freson"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "peak frequencies"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fr = freson(h)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A siso linear dynamical system, in state space, transfer function or zpk representations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of peak frequencies in Hz"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["frep2tf", "zgrid", "h_norm"]},"gainplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gainplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço de magnitude"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["gainplot(sl,fmin,fmax [,step] [,comments] )", "gainplot(frq,db,phi [,comments])", "gainplot(frq, repf [,comments])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "lista (sistema linear "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " SIMO)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin,fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais (intervalo de freqüência). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (passo de discretização (escala logarítmica)) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comments"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz (freqüências linha por linha) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "db,phi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes (magnitudes e fases correspondentes a "},{"type": "literal","children": [],"string": "frq"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de complexos. Uma linha para cada resposta de freqüência."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bode", "black", "nyquist", "freq", "repfreq", "g_margin", "p_margin"]},"hallchart": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hallchart"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Draws a Hall chart"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sh = hallchart(modules)", "sh = hallchart(modules, args)", "sh = hallchart(modules, args, colors)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of real numbers: modules (in dB). Default values are computed according to the data bounds, whose default are [-4,3] for the Real axis and [-3 3] for the Imaginary one. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "args"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of real numbers: phases (in degree). Default values: "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "[-90 -60 -40 -30 -25 -20 -15 -12 12 15 20 25 30 40 60 90]°"},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colors"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of 1 or 2 components specifying the colors of the isogain and isophase sets of curves. To choose the color for only one grid, set the other one to \"\" or 0. If a single color is provided, it is used for both gains and phases. "},{"type": "varname","children": [],"string": "colors"},{"type": "text","children": [],"string": " may be specified either "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "by indices in the color map."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "named colors among the "},{"type": "link","children": [],"string": "predefined ones"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "\"#RRGGBB\" hexadecimal case-insensitive strings starting with \"#\", like \"#FA7B35\"."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "A 1x3 or 2x3 matrix of [r g b] intensities such that 0 <= r,g,b <= 1."},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sh"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Structure with 4 fields: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": ".phaseLines"},{"type": "text","children": [],"string": ": vector of handles of isophase lines. "},{"type": "literal","children": [],"string": ".phaseLines(i)"},{"type": "text","children": [],"string": " is the line for "},{"type": "literal","children": [],"string": "args(i)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": ".phaseLabels"},{"type": "text","children": [],"string": ": vector of handles of isophase labels. "},{"type": "literal","children": [],"string": ".phaseLabels(i)"},{"type": "text","children": [],"string": " is the label for "},{"type": "literal","children": [],"string": "args(i)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": ".gainLines"},{"type": "text","children": [],"string": ": vector of handles of isogain lines. "},{"type": "literal","children": [],"string": ".gainLines(i)"},{"type": "text","children": [],"string": " is the line for "},{"type": "literal","children": [],"string": "modules(i)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": ".gainLabels"},{"type": "text","children": [],"string": ": vector of handles of isogain labels. "},{"type": "literal","children": [],"string": ".gainLabels(i)"},{"type": "text","children": [],"string": " is the label for "},{"type": "literal","children": [],"string": "modules(i)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["nicholschart", "nyquist", "black", "color_list"]},"nicholschart": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nicholschart"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Nichols chart"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sh = nicholschart(modules)", "sh = nicholschart(modules, args)", "sh = nicholschart(modules, args, colors)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of real numbers: modules (in dB). Default values: "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "[-30:-10:Modmin -20 -15 -12 -9 -6 -3 -2 -1 -.5 -0.2 -0.1 0 0.1 0.2 0.5 1 2 3 6 12]"},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "args"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of real numbers: phases (in degree). Default values: "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "-[1 2 5 10 20 30 50 70 90 120 140 160 180]°"},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colors"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of 1 or 2 components specifying the colors of the isogain and isophase sets of curves. If a single color is provided, it is used for both gains and phases. colors may be specified either "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "by indices in the color map."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "named colors among the "},{"type": "link","children": [],"string": "predefined ones"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "\"#RRGGBB\" hexadecimal case-insensitive strings starting with \"#\", like \"#FA7B35\"."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "A 1x3 or 2x3 matrix of [r g b] intensities such that 0 <= r,g,b <= 1."},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sh"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Structure with 3 fields: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": ".phaseLines"},{"type": "text","children": [],"string": ": vector of handles of isophase lines. "},{"type": "literal","children": [],"string": ".phaseLines(i)"},{"type": "text","children": [],"string": " is the line for "},{"type": "literal","children": [],"string": "args(i)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": ".gainLines"},{"type": "text","children": [],"string": ": vector of handles of isogain lines. "},{"type": "literal","children": [],"string": ".gainLines(i)"},{"type": "text","children": [],"string": " is the line for "},{"type": "literal","children": [],"string": "modules(i)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": ".gainLabels"},{"type": "text","children": [],"string": ": vector of handles of isogain labels. "},{"type": "literal","children": [],"string": ".gainLabels(i)"},{"type": "text","children": [],"string": " is the label for "},{"type": "literal","children": [],"string": "modules(i)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["hallchart", "sgrid", "zgrid", "bode", "black", "nyquist", "svplot", "color_list"]},"nyquist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nyquist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "diagrama de Nyquist"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["nyquist( sl,[fmin,fmax] [,step] [,comments] )", "nyquist( sl, frq [,comments] )", "nyquist(frq,db,phi [,comments])", "nyquist(frq, repf [,comments])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " (sistema linear SIMO em tempo contínuo ou discreto)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin,fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "reais (limites de freqüência (em Hz)) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (passo de discretização logarítmica) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comments"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings (legendas). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor linha ou matriz (freqüências (em Hz) ) (um linha para cada saída de "},{"type": "literal","children": [],"string": "sl"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "db,phi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores linhas ou matrizes de módulo (em Db) e fases. (uma linha para cada saída de "},{"type": "literal","children": [],"string": "sl"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor linha ou matriz de números complexos (freqüência de resposta complexa, uma para cada saída de "},{"type": "literal","children": [],"string": "sl"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nyquistfrequencybounds": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nyquistfrequencybounds"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the frequencies for which the nyquist locus enters and leaves a given rectangle. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[fmin, fmax] = nyquistfrequencybounds(H, bounds)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A SISO or SIMO linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bounds"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A 2 by 2 array: [Rmin Imin;Rmax Imax] that defines a complex-plane rectangle."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real: the lowest frequency (Hz) such that the nyquist locus enters the given rectangle or 0 if the 0 Hz point lies in the rectangle or [] if the locus is completely outside the rectangle."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real: the highest frequency (Hz) such that the nyquist locus leaves the given rectangle or %inf if the %inf (hz) point is in the rectangle or [] if the locus is completely outside the rectangle."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "nyquist"},"phasemag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "phasemag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "phase and magnitude computation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[phi, db] = phasemag(z)", "[phi, db] = phasemag(z, mod)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix or row vector of complex numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "character string"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod='c'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"continuous\" representation between -infinity and +360 degrees (default)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod='m'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "representation between -360 and 0 degrees"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "phases (in degree) of "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "db"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "magnitude (in Db)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["repfreq", "gainplot", "atan", "bode"]},"phaseplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "phaseplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency phase plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["phaseplot(sl)", "phaseplot(sl, fmin, fmax)", "phaseplot(sl, fmin, fmax, step)", "phaseplot(frq, db, phi)", "phaseplot(frq, repf)", "phaseplot(.., comments)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A siso or simo linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar: the minimum frequency (in Hz) to be represented."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar: the maximum frequency (in Hz) to be represented."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar: the frequency discretization step (logarithmic scale)). If it is not specified the algorithm uses adaptative frequency steps."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comments"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string vector: the legend label to be associated with each curve. Optional value is the empty array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row vector or an n x m array: The frequency discretization in Hz."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "db"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an n x m array: the magnitudes corresponding to "},{"type": "literal","children": [],"string": "frq"},{"type": "text","children": [],"string": ". This argument is not used, it only appears to make "},{"type": "literal","children": [],"string": "phaseplot"},{"type": "text","children": [],"string": " have the same syntax as "},{"type": "literal","children": [],"string": "gainplot"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "bode"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an n x m array: the phases in degree corresponding to "},{"type": "literal","children": [],"string": "frq"},{"type": "text","children": [],"string": ". The "},{"type": "literal","children": [],"string": "phaseplot"},{"type": "text","children": [],"string": " function plots the curves "},{"type": "literal","children": [],"string": "phi(i,:)"},{"type": "text","children": [],"string": " versus "},{"type": "literal","children": [],"string": "frq(i,:)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an n x m complex array. The "},{"type": "literal","children": [],"string": "phaseplot"},{"type": "text","children": [],"string": " function plots the curves "},{"type": "literal","children": [],"string": "phase(repf(i,:))"},{"type": "text","children": [],"string": " versus "},{"type": "literal","children": [],"string": "frq(i,:)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bode", "gainplot", "repfreq", "calfrq", "datatips"]},"repfreq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "repfreq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency response"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["repf = repfreq(sys)", "repf = repfreq(sys, frq)", "repf = repfreq(sys, fmin, fmax)", "repf = repfreq(sys, fmin, fmax, step)", "[frq, repf] = repfreq(..)", "[frq, repf, splitf] = repfreq(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A siso or simo linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin,fmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "two real numbers (lower and upper frequency bounds)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector of frequencies (Hz)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "logarithmic discretization step"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "splitf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of indexes of critical frequencies."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of the complex frequency response"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bode", "freq", "calfrq", "horner", "nyquist", "dbphi"]},"svplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "svplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "singular-value sigma-plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["SVM = svplot(sl)", "SVM = svplot(sl, w)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (continuous, discrete or sampled system)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector (optional parameter)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"trzeros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "trzeros"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transmission zeros and normal rank"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tr  = trzeros(Sl)", "[nt,dt,rk] = trzeros(Sl)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "complex vectors"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (normal rank of Sl)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["spec", "kroneck"]},"bstap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bstap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "hankel approximant"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Q = bstap(Sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) assumed continuous-time and anti-stable."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "best stable approximation of "},{"type": "literal","children": [],"string": "Sl"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "syslin"},"dtsi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dtsi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous time dynamical systems stable anti-stable decomposition"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Ga, Gs, Gi] = dtsi(G)", "[Ga, Gs, Gi] = dtsi(G, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ga"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear system antistable and strictly proper."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Gs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear system stable and strictly proper."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Gi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix (or polynomial matrix for improper systems)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional parameter for detecting stables poles. Default value: "},{"type": "literal","children": [],"string": "100*%eps"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "pbig", "psmall", "pfss"]},"evans": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "evans"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lugar geométrico das raízes Evans"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["evans(H)", "evans(H, kmax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "lista (sistema linear "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (ganho máximo desejado para o esboço)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"g_margin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "g_margin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gain margin and associated crossover frequency"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[gm, fr] = g_margin(h)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a SISO linear system (see :"},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a number, the gain margin (in dB) if any of "},{"type": "literal","children": [],"string": "Inf"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a number, the associated frequency in hertz, or an empty matrix if the gain margin does not exist."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["p_margin", "show_margins", "repfreq", "black", "bode", "nicholschart", "nyquist"]},"p_margin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "p_margin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "phase margin and associated crossover frequency"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[phm,fr] = p_margin(h)", "phm = p_margin(h)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a SISO linear system (see :"},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a number, the phase margin in degree if it exists or an empty matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a number, the corresponding frequency (in Hz) or an empty matrix."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["g_margin", "show_margins", "repfreq", "black", "bode", "nicholschart", "nyquist"]},"plzr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plzr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço de pólo-zero"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "plzr(sl)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "lista ( "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["trzeros", "roots", "syslin"]},"routh_t": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "routh_t"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tabela de Routh"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r=routh_t(h [,k])."},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de razões de polinômios"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"sgrid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sgrid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboça linhas de grid de um s-plano "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sgrid()", "sgrid(zeta, wn)", "sgrid(.., colors)", "sgrid(.., \"new\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zeta"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of damping factors. Only values in "},{"type": "literal","children": [],"string": "[0 1]"},{"type": "text","children": [],"string": " are taken into account. The default values are ~ cosd(90:-10:0) = "},{"type": "literal","children": [],"string": "[0 0.17 0.34 0.5 0.64 0.77 0.87 0.94 0.985 1]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "array of natural frequencies in Hz. only positive values are taken into account. If not given it is computed by the program to fit with the boundaries of the plot."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colors"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar or a vector with 2 elements [circles_col, rays_col], specifying the color(s) of circles and rays of the frame, and their labels: predefined colors names (like \"red\"), or colors hexadecimal codes (like \"#34DDFA\"), or colors indices in the current colormap are accepted."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"new\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This option clears all contents of the current axes before plotting the grid. It may be specified at any position among input arguments."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["evans", "zgrid", "hallchart", "nicholschart"]},"show_margins": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "show_margins"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "display gain and phase margin  and associated crossover frequencies"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["show_margins(h)", "show_margins(h,'bode')", "show_margins(h,'nyquist')"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a SISO linear system (see :"},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["p_margin", "g_margin", "bode", "nyquist"]},"st_ility": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "st_ility"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "stabilizability test"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[ns, nc, U, Slo] = st_ility(Sl)", "[ns, nc, U, Slo] = st_ility(Sl, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (linear system)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ns"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (dimension of stabilizable subspace)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer (dimension of controllable subspace "},{"type": "literal","children": [],"string": "nc <= ns"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "basis such that its "},{"type": "literal","children": [],"string": "ns"},{"type": "text","children": [],"string": " (resp. "},{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": ") first components span the stabilizable (resp. controllable) subspace"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Slo"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "threshold for controllability detection (see "},{"type": "link","children": [],"string": "contr"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["dt_ility", "contr", "stabil", "ssrand"]},"zgrid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zgrid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboçode um z-grid"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "zgrid()"},"varlist": [],"seealso": ["frep2tf", "freson"]},"arsimul": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arsimul"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "armax simulation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["z = arsimul(ar, u)", "z = arsimul(ar, u, up, yp, ep)", "z = arsimul(a, b, d, sig, u)", "z = arsimul(a, b, d, sig, u, up, yp, ep)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an armax process. See armac."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is the matrix  "},{"type": "literal","children": [],"string": "[Id,a1,...,a_r]"},{"type": "text","children": [],"string": " of dimension (n,(r+1)*n)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is the matrix "},{"type": "literal","children": [],"string": "[b0,......,b_s]"},{"type": "text","children": [],"string": " of dimension (n,(s+1)*m)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is the matrix "},{"type": "literal","children": [],"string": "[Id,d_1,......,d_t]"},{"type": "text","children": [],"string": " of dimension (n,(t+1)*n)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is a matrix  (m,N), which gives the entry u(:,j)=u_j"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is a  (n,n) matrix  e_{k} is an n-dimensional Gaussian process with variance I"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "up, yp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional parameter which describe the past.  "},{"type": "literal","children": [],"string": "up=[ u_0,u_{-1},...,u_{s-1}]"},{"type": "text","children": [],"string": "; "},{"type": "literal","children": [],"string": "yp=[ y_0,y_{-1},...,y_{r-1}];"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "ep=[ e_0,e_{-1},...,e_{r-1}]"},{"type": "text","children": [],"string": "; if they are omitted, the past value are supposed to be zero"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "literal","children": [],"string": "z=[y(1),....,y(N)]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"csim": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csim"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "simulation (time response) of linear system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[y, x] = csim(u, t, sl)", "[y, x] = csim(u, t, sl, x0)", "[y, x] = csim(u, t, sl, x0, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "function, list or string (control)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector specifying times with, "},{"type": "literal","children": [],"string": "t(1)"},{"type": "text","children": [],"string": " is the initial time ("},{"type": "literal","children": [],"string": "x0=x(t(1))"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A SISO or SIMO linear dynamical system, in state space, transfer function or zpk representations, in continuous time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a  matrix such that   "},{"type": "literal","children": [],"string": "y=[y(t(i)]"},{"type": "text","children": [],"string": ", i=1,..,n"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an optional  matrix such that   "},{"type": "literal","children": [],"string": "x=[x(t(i)]"},{"type": "text","children": [],"string": ", i=1,..,n"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 2 vector [atol rtol] defining absolute and relative tolerances for ode solver (see ode)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "dsimul", "flts", "ltitr", "rtitr", "ode", "dae"]},"damp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "damp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Natural frequencies and damping factors. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[wn,z] = damp(sys)", "[wn,z] = damp(P)", "[wn,z] = damp(P, dt)", "[wn,z] = damp(R)", "[wn,z] = damp(R, dt)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A linear dynamical system, in state space, transfer function or zpk representations, in continuous or discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An array of polynomials."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An array of real or complex floating point numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A non negative scalar, with default value 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of floating point numbers in increasing order: the natural pulsation in rad/s."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of floating point numbers: the damping factors."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["spec", "roots"]},"dsimul": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dsimul"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "state space discrete time simulation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = dsimul(sl, u)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list describing a discrete time linear system"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix of appropriate dimension"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "output of "},{"type": "literal","children": [],"string": "sl"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "flts", "ltitr"]},"flts": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "flts"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "time response (discrete time, sampled system)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = flts(u, sl)", "y = flts(u, sl, past)", "y = flts(u, sl, x0)", "[y,x] = flts(u, sl, x0)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix (input vector)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A linear dynamical system, in state space, transfer function or zpk representations, in discrete time."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector (initial state ; default value="},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "past"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix (of the past ; default value="},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrices (state and output)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ltitr", "dsimul", "rtitr"]},"ltitr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ltitr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete time response (state space)  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[xf, X] = ltitr(A, B, U)", "[xf, X] = ltitr(A, B, U, x0)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real  matrices of appropriate dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U,X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real  matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0,xf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vectors (default value=0 for "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": "))"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["rtitr", "flts"]},"narsimul": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "narsimul"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "armax simulation (using rtitr)   "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["z = narsimul(a, b, d, sig, u)", "z = narsimul(a, b, d, sig, u, up, yp, ep)", "z = narsimul(ar, u)", "z = narsimul(ar, u, up, yp, ep)"]},"varlist": [],"seealso": []},"rtitr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rtitr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete time response (transfer matrix)  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = rtitr(Num, Den, u)", "y = rtitr(Num, Den, u, up, yp)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Num,Den"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "polynomial  matrices (resp. dimensions : "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "x"},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "x"},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix (dimension "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": "x"},{"type": "literal","children": [],"string": "(t+1)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "up,yp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrices ("},{"type": "literal","children": [],"string": "up"},{"type": "text","children": [],"string": " dimension "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": "x"},{"type": "literal","children": [],"string": "(max(degree(Den)))"},{"type": "text","children": [],"string": " (default values="},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": ") , "},{"type": "literal","children": [],"string": "yp"},{"type": "text","children": [],"string": " dimension "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "x "},{"type": "literal","children": [],"string": "(max(degree(Den)))"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ltitr", "exp", "flts"]},"colinout": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colinout"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inner-outer factorization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Inn, X, Gbar] = colinout(G)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) "},{"type": "literal","children": [],"string": "[A,B,C,D]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Inn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inner factor ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Gbar"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "outer factor ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "row-compressor of "},{"type": "literal","children": [],"string": "G"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "rowinout"]},"copfac": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "copfac"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "right coprime factorization of continuous time dynamical systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[N, M, XT, YT] = copfac(G)", "[N, M, XT, YT] = copfac(G, polf, polc, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous-time  linear dynamical system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polf, polc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "respectively the poles of "},{"type": "literal","children": [],"string": "XT"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "YT"},{"type": "text","children": [],"string": " and the poles of "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": " (default values =-1)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real threshold for detecting stable poles (default value "},{"type": "literal","children": [],"string": "100*%eps"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N,M,XT,YT"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "continuous-time linear dynamical systems."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "lcf"]},"dcf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dcf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "double coprime factorization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[N,M, X,Y, NT,MT, XT,YT] = dcf(G)", "[N,M, X,Y, NT,MT, XT,YT] = dcf(G, polf, polc)", "[N,M, X,Y, NT,MT, XT,YT] = dcf(G, polf, polc, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list (continuous-time linear system)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polf, polc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "respectively the poles of "},{"type": "literal","children": [],"string": "XT"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "YT"},{"type": "text","children": [],"string": " and the poles of "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": " (default values ="},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real threshold for detecting stable poles (default value "},{"type": "literal","children": [],"string": "100*%eps"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N,M,XT,YT,NT,MT,X,Y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear systems represented by "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "copfac"},"fspec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fspec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "spectral factorization of continuous time dynamical systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "gm = fspec(g)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"fspecg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fspecg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "stable factorization of continuous time dynamical systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "gm = fspecg(g)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"fstabst": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fstabst"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Youla's parametrization of continuous time linear dynamical systems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "J = fstabst(P, r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1x2 row vector, dimension of "},{"type": "literal","children": [],"string": "P22"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "J"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a continuous time linear dynamical system (with same representation as "},{"type": "literal","children": [],"string": "P"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["obscont", "lft", "lqg", "lqg2stan"]},"gtild": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gtild"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tilde operation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Gt = gtild(G)", "Gt = gtild(G, flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "either a polynomial or a linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) or a rational matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Gt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "same as G"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string: either "},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": " (optional parameter)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "horner", "factors"]},"lcf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lcf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous time dynamical systems normalized coprime factorization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[N, M] = lcf(sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous time linear dynamical system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous linear dynamical system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a continuous linear dynamical system."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"rowinout": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rowinout"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inner-outer factorization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Inn, X, Gbar] = rowinout(G)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) "},{"type": "literal","children": [],"string": "[A,B,C,D]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Inn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inner factor ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Gbar"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "outer factor ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "row-compressor of "},{"type": "literal","children": [],"string": "G"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "colinout"]},"specfact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "specfact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "spectral factor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[W0, L] = specfact(A, B, C, D)"},"varlist": [],"seealso": ["gtild", "sfact", "fspecg"]},"sysfact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sysfact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "system factorization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[S, Series] = sysfact(Sys, Gain, flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list containing the matrices "},{"type": "literal","children": [],"string": "[A,B,C,D]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Gain"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'post'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'pre'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Series"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lqr", "lqe"]},"abcd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "abcd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "state-space matrices"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[A,B,C,D] = abcd(sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) in state-space or transfer form"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B,C,D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices of appropriate dimensions"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "ssrand"]},"arma": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arma"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scilab arma library"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "armac"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "this function creates a Scilab tlist which code an  Armax process "},{"type": "literal","children": [],"string": " A(z^-1)y= B(z^-1)u + D(z^-1)sig*e(t)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "armap(ar [,out])"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Display the armax equation associated with "},{"type": "literal","children": [],"string": "ar"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "armap_p(ar [,out])"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Display the armax equation associated with "},{"type": "literal","children": [],"string": "ar"},{"type": "text","children": [],"string": " using polynomial matrix display."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "[A,B,D]=armap2p(ar)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "extract polynomial matrices from ar representation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "armax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is used to identify the coefficients of a n-dimensional  ARX process   "},{"type": "literal","children": [],"string": "A(z^-1)y= B(z^-1)u + sig*e(t)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "armax1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "armax1 is used to identify the coefficients of a 1-dimensional  ARX process "},{"type": "literal","children": [],"string": "A(z^-1)y= B(z^-1)u + D(z^-1)sig*e(t)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arsimul"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "armax trajectory simulation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "narsimul"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "armax simulation ( using rtitr)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "odedi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Simple tests of ode and arsimul. Tests the option 'discret' of ode"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prbs_a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "pseudo random binary sequences generation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "reglin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Linear regression"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"arma2p": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arma2p"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "extract polynomial matrices from ar representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[A, B, D] = arma2p(ar)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B,D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "three polynomial matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ar"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Scilab 'ar' tlist for arma storage (see "},{"type": "literal","children": [],"string": "armac"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["arma", "armax", "armax1", "arsimul", "armac"]},"arma2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arma2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transform an armax data structure into state space representation."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[S, Sn] = arma2ss(Ar)", "S = arma2ss(Ar)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ar"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an armax data structure (see "},{"type": "link","children": [],"string": "armac"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a discrete time state space data structure (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ". The regular input to output transfer."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a discrete time state space data structure (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ". The noise input to output transfer."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["armac", "arma", "syslin"]},"armac": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "armac"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scilab description of an armax process"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ar = armac(a, b, d, ny, nu, sig)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a=[Id,a1,..,a_r]  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is a matrix of size (ny,r*ny)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b=[b0,.....,b_s]  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is a matrix of size (ny,(s+1)*nu)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d=[Id,d1,..,d_p]  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is a matrix of size (ny,p*ny);"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ny"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dimension of the output  y"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nu"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dimension of the output  u"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of size (ny,ny)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["arma", "armax", "armax1", "arsimul", "arma2p", "tlist"]},"bloc2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bloc2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de diagrama de blocos para espaço de estados"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sl = bloc2ss(blocd)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "blocd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "poly"},"cont_frm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cont_frm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transfer to controllable state-space"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sl = cont_frm(NUM, den)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "NUM"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polynomial matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "den"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polynomial"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list, "},{"type": "literal","children": [],"string": "sl=[A,B,C,D]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tf2ss", "canon", "contr"]},"des2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "des2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "descriptor to state-space"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Sl = des2ss(Des)", "Sl = des2ss(A, B, C, D, E)", "Sl = des2ss(A, B, C, D, E, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B,C,D,E"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices of appropriate dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Des"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real parameter (threshold) (default value "},{"type": "literal","children": [],"string": "100*%eps"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["des2tf", "glever", "rowshuff"]},"des2tf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "des2tf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "descriptor to transfer function conversion"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["S = des2tf(sl)", "[Bfs, Bis, chis] = des2tf(sl)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list (linear system in descriptor form)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Bfs, Bis"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "two polynomial matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "chis"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polynomial"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "rational matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["glever", "pol2des", "tf2des", "ss2tf", "des2ss", "rowshuff"]},"frep2tf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "frep2tf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transfer function realization from frequency response"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[h, err] = frep2tf(frq, repf, dg)", "[h, err] = frep2tf(frq, repf, dg, dom, tols, weight)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of frequencies in Hz."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of frequency response"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "degree of linear system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dom"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "time domain ("},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "dt"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tols"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of size 3 giving the relative and absolute tolerance  and the maximum number of iterations (default values are "},{"type": "literal","children": [],"string": "rtol=1.e-2; atol=1.e-4, N=10"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "weight"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of weights on frequencies"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "SISO transfer function"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "error (for example if "},{"type": "literal","children": [],"string": "dom='c'"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "sum(abs(h(2i*pi*frq) - rep)^2)/size(frq,*)"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["imrep2ss", "arl2", "time_id", "armax", "frfit"]},"lsslist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lsslist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "definição de função linear de espaço de estados do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["lsslist()", "lsslist(A, B, C, X0, dt)"]},"varlist": [],"seealso": ["abcd", "syslin", "tlist"]},"markp2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "markp2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Markov parameters to state-space"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sl = markp2ss(markpar, n, nout, nin)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "markpar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n,nout,nin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integers"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["frep2tf", "tf2ss", "imrep2ss"]},"pfss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pfss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "partial fraction decomposition"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["elts = pfss(Sl)", "elts = pfss(Sl,rmax)", "elts = pfss(Sl,cord)", "elts = pfss(Sl,rmax,cord)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A linear dynamical system in state-space, or a transfer function representation (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": "), or any rational fraction."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rmax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A real number controlling the conditioning of block diagonalization (see "},{"type": "link","children": [],"string": "bdiag"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cord"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A character string with possible values "},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "elts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "List of linear systems, or list of rationals: the components of the decomposition."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "Sl"},{"type": "text","children": [],"string": " is a transfer function or any other rational and has an integer part (degree(Sl.num)>=degree(Sl.den)), "},{"type": "literal","children": [],"string": "elts(1:$-1)"},{"type": "text","children": [],"string": " are rational components and "},{"type": "literal","children": [],"string": "elts($)"},{"type": "text","children": [],"string": " is the integer part (polynomial)."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["pbig", "bdiag", "coffg", "dtsi"]},"pol2des": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pol2des"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de matrizes de polinômios para formas descritoras"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[N,B,C]=pol2des(Ds)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ds"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N, B, C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "três matrizes de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"sm2des": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sm2des"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "system matrix to descriptor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Des = sm2des(Sm);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polynomial matrix (pencil system matrix)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Des"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "descriptor system ("},{"type": "literal","children": [],"string": "list('des',A,B,C,D,E)"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["systmat", "sm2ss", "ss2des"]},"sm2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sm2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "system matrix to state-space"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Sl = sm2ss(Sm)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polynomial matrix (pencil system matrix)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["systmat", "ss2des"]},"ss2des": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ss2des"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "(polynomial) state-space to descriptor form"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["S = ss2des(Sl)", "S = ss2des(Sl, flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list: proper or improper linear system."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string "},{"type": "literal","children": [],"string": "\"withD\""}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pol2des", "tf2des", "des2ss"]},"ss2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ss2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "state-space to state-space conversion, feedback, injection"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[Sl1, right, left] = ss2ss(Sl, T)", "[Sl1, right, left] = ss2ss(Sl, T, F)", "[Sl1, right, left] = ss2ss(Sl, T, F, G)", "[Sl1, right, left] = ss2ss(Sl, T, F, G, flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) in state-space form"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "square (non-singular) matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl1, right, left"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "linear systems (syslin lists) in state-space form"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix (state feedback gain)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix (output injection gain)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["projsl", "feedback"]},"ss2tf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ss2tf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversion from state-space to transfer function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h = ss2tf(sl)", "h = ss2tf(sl,\"b\")", "h = ss2tf(sl,rmax)", "[Ds, NUM, chi] = ss2tf(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "transfer matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tf2ss", "syslin", "nlev", "glever"]},"ss2zp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ss2zp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SIMO state space system to zero pole gain representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[z, p, k] = ss2zp(S)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single input linear system in state space representation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix, the ith column contains the transmission zeros relative to the ith output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector, the poles of the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector, the ith element contains the gain  relative to the ith output."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["trzeros", "systmat", "kroneck", "zp2ss"]},"ssprint": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ssprint"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "embelezador de sistemas lineares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ssprint(sl)", "ssprint(sl, out]"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "lista (lista "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "saída (valor padrão "},{"type": "literal","children": [],"string": "out=%io(2)"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["math_rendering_features_in_graphic", "prettyprint"]},"ssrand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ssrand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gerador de sistema randômico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sl=ssrand(nout,nin,nstate)", "[sl,U]=ssrand(nout,nin,nstate,flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de saídas)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de entradas)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nstate"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (dimensão de espaço de estados)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista feita de um string ou vários inteiros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "lista (lista "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz quadrada não-singular "},{"type": "literal","children": [],"string": "(nstate x nstate) "}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "syslin"},"sysconv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sysconv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de sistema"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[s1,s2]=sysconv(s1,s2)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "s1,s2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "lista (sistemas "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lineares)"}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["syslin", "ss2tf", "tf2ss"]},"syslin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "syslin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "definição de sistemas lineares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sl = syslin(dom, A, B, C)", "sl = syslin(dom, A, B, C, D)", "sl = syslin(dom, A, B, C, D, x0)", "sl = syslin(dom, N, D)", "sl = syslin(dom, H)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dom"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ("},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": "), ou "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " ou um escalar."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B,C,D"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes em representação de espaço de estados ("},{"type": "literal","children": [],"string": "D"},{"type": "text","children": [],"string": " opcional com valor padrão matriz nula). para sistemas impróprios, "},{"type": "literal","children": [],"string": "D"},{"type": "text","children": [],"string": " é uma matriz de polinômios."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor (estado inicial; valor padrão é "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N, D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de polinômios"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de razões de polinômios ou representação de espaço de estados linear"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "tlist (lista \""},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": "\") representando o sistema linear"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tlist", "lsslist", "rlist", "ssrand", "ss2tf", "tf2ss", "dscr", "abcd"]},"syssize": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "syssize"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "size of state-space system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[r, nx] = syssize(Sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) in state-space"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 x 2 real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nx"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "size"},"systmat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "systmat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz sistema"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Sm]=systmat(Sl);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "sistema linear (lista "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " ) ou sistema descritor"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "feixe de matrizes"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ss2des", "sm2des", "sm2ss"]},"tf2des": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tf2des"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transfer function to descriptor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["S = tf2des(G)", "S = tf2des(G, flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list) with possibly polynomial "},{"type": "literal","children": [],"string": "D"},{"type": "text","children": [],"string": " matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string "},{"type": "literal","children": [],"string": "\"withD\""}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pol2des", "tf2ss", "ss2des", "des2tf"]},"tf2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tf2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transfer to state-space"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sl = tf2ss(h)", "sl = tf2ss(h, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "rational matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "may be the constant rtol or the 2 vector "},{"type": "literal","children": [],"string": "[rtol atol]"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "tolerance used when evaluating observability."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "atol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "absolute tolerance used when evaluating observability."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list "},{"type": "literal","children": [],"string": "sl=[A,B,C,D(s)]"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ss2tf", "tf2des", "des2tf"]},"tf2zp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tf2zp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SIMO transfer function to zero pole gain representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[z, p, k] = tf2zp(S)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single input transfer function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix, the ith column contains the transmission zeros relative to the ith output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector, the poles of the system"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row vector, the ith element contains the gain  relative to the ith output."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ss2zp", "zp2tf"]},"trfmod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "trfmod"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "exibição de zeros e pólos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[hm]=trfmod(h [,job])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "job='p'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "visualização de polinômios (padrão) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "job='f'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "visualização de freqüências naturais e amortecimento "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["poly", "simp"]},"zp2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zp2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Zero pole gain to  state space"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["S = zp2ss(z, p, k)", "S = zp2ss(z, p, k, dt)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a real or complex matrix, the ith column contains the transmission zeros relative to the ith output. If some zeros are complex, they must appear in complex conjugate pairs."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If the number of poles relative to the ith output is less than the max number of poles for each output, the ith column must be padded with %inf values."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector, the poles of the system. If some poles are complex, they must appear in complex conjugate pairs."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If the number of poles relative to the ith output is less than the max number of poles for each output, the ith column must be padded with %inf values."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real scalar or a real vector, the ith element contains the gain relative to the ith output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dom"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string with possible values \"c\" or \"d\", [] or a real positive scalar, the system time domain (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single input linear system in state space representation."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ss2zp", "trzeros"]},"zp2tf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zp2tf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Zero pole gain to transfer function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["S = zp2tf(z, p, k)", "S = zp2tf(z, p, k, dt)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a real or complex matrix, the ith column contains the transmission zeros relative to the ith output. If some zeros are complex, they must appear in complex conjugate pairs."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If the number of zeros relative to the ith output is less than the max number of zeros for each output, the ith column must be padded with %inf values."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector, the poles of the system. If some poles are complex, they must appear in complex conjugate pairs."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If the number of poles relative to the ith output is less than the max number of poles for each output, the ith column must be padded with %inf values."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real scalar or a real vector, the ith element contains the gain relative to the ith output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dom"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string with possible values \"c\" or \"d\", [] or a real positive scalar, the system time domain (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single input transfer function."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "zp2ss"},"zpk": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zpk"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Zero pole gain system representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["S = zpk(Z, P, K, dt)", "S = zpk(z, p, k, dt)", "S = zpk(sys)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m by n cell of real or complex vectors, Z{i,j} is the transmission zeros of the transfer from the the jth intput to the ith output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m by n cell of real or complex vectors, P{i,j} is the poles of the transfer from the the jth intput to the ith output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m by n matrix of real numbers, K(i,j) is the gain of the transfer from the the jth intput to the ith output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector, the transmission zeros of the siso transfer function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector, the poles of the siso transfer function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real scalar, the gain of the siso transfer function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string with possible values \"c\" or \"d\", [] or a real positive scalar, the system time domain (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A linear dynamical system in transfer function or state spece representation (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a mlist with the fields Z , P, K and  dt."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m by n cell array of real or complex vectors, S.Z{i,j} contains the zeros of the transfer from the the jth intput to the ith output"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m by n cell array of real or complex vectors, S.P{i,j} contains the poles of the transfer from the the jth intput to the ith output"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m by n matrix of real numbers, S.K(i,j) is the gain of the transfer from the the jth intput to the ith output. output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar or \"c\" or \"d\" the time domain"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["tf2zp", "zpk2tf", "zpk2ss"]},"zpk2ss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zpk2ss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Zero pole gain to state space"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "S = zpk2ss(sys)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A linear dynamical system in zero-pole-gain representation (see "},{"type": "link","children": [],"string": "zpk"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The state space representation of sys."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["zp2ss", "zpk2tf"]},"zpk2tf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zpk2tf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Zero pole gain to transfer function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "S = zpk2tf(sys)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A linear dynamical system in zero-pole-gain  representation (see "},{"type": "link","children": [],"string": "zpk"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The rational transfer function representation of sys."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["zp2tf", "zpk2ss"]},"linmeq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "linmeq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sylvester and Lyapunov equations solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X       = linmeq(task, A, C, flag, trans)", "[X, sep] = linmeq(task, A, C, flag, trans)", "X = linmeq(task, A, B, C, flag, trans)", "X = linmeq(task, A, B, C, flag, trans, schur)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "task"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer option to determine the equation type:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "solve the Sylvester equation (1a) or (1b);"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "solve the Lyapunov equation (2a) or (2b);"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "solve for the Cholesky factor op(X) the Lyapunov equation (3a) or (3b)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) integer vector of length 3 or 2 containing options."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "task"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "= 1 : flag has length 3"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(1)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 0 : solve the continuous-time equation (1a); otherwise, solve the discrete-time equation (1b)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(2)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 1 : A is (quasi) upper triangular;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(2)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 2 : A is upper Hessenberg;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "otherwise"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A is in general form."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(3)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 1 : B is (quasi) upper triangular;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(3)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 2 : B is upper Hessenberg;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "otherwise,  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "B is in general form."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "task"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "= 2 : flag has length 2"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(1)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if 0 solve continuous-time equation (2a), otherwise, solve discrete-time equation (2b)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(2) "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 1 : A is (quasi) upper triangular     otherwise, A is in general form."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "task"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "= 3 : flag has length 2"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(1)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 0 : solve continuous-time equation (3a); otherwise, solve discrete-time equation (3b)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag(2)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "= 1 : A is (quasi) upper triangular; otherwise, A is in general form."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    flag(1) = 0, flag(2) = 0 (, flag(3) = 0)."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "trans"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) integer specifying a transposition option."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "0 : solve the equations (1) - (3) with op(M) = M."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 : solve the equations (1) - (3) with op(M) = M'."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 : solve the equations (1) with op(A) = A';  op(B) = B;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "=  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 : solve the equations (1) with op(A) = A;   op(B) = B'."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default:    trans = 0."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "schur"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) integer specifying whether the Hessenberg-Schur or Schur method should be used. Available for task = 1."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 1 : Hessenberg-Schur method (one matrix is reduced"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "to Schur form)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "= 2 : Schur method (two matrices are reduced to Schur"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "form)."},"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default: schur = 1."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sep"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) estimator of Sep(op(A),-op(A)') for (2.a) or Sepd(A,A') for (2.b)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sylv", "lyap"]},"mucomp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mucomp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mu (structured singular value) calculation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[BOUND, D, G] = mucomp(Z, K, T)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the complex n-by-n matrix for which the structured singular value is to be computed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the vector of length m containing the block dimensions of the structured uncertainty Δ. The uncertainty Δ is supposed to be a block diagonal matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the vector of length m indicating the type of each uncertainty block. T(I) = 1 if the corresponding block is real T(I) = 2 if the corresponding block is complex."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "BOUND"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the upper bound on the structured singular value."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D, G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vectors of length n containing the diagonal entries of the diagonal matrices D and G, respectively, such that the matrix "},{"type": "literal","children": [],"string": " Z'*diag(D)^2*Z + sqrt(-1)*(diag(G)*Z-Z'*diag(G)) - bound^2*diag(D)^2 "},{"type": "text","children": [],"string": " is negative semidefinite."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"ricc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ricc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Riccati equation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[X, RCOND, FERR] = ricc(A, B, C, \"cont\", method)", "[X, RCOND, FERR] = ricc(F, G, H, \"disc\", method)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A,B,C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices of appropriate dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F,G,H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrices of appropriate dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"cont\",\"disc\"'  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "imposed string (flag for continuous or discrete)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'schr' or 'sign' for continuous-time systems and 'schr' or 'invf' for discrete-tyme systems"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["riccati", "schur"]},"riccati": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "riccati"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solves the matricial Riccati equation (continuous | discrete time domain)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["X = riccati(H)", "X = riccati(H, E)", "X = riccati(A, B, C, dom)", "X = riccati(A, B, C, dom, method)", "[X1, X2, residual] = riccati(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B, C"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Square matrices of real numbers, of size n x n: Matricial coefficients of the equation. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H, E"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Square matrices of real numbers, of size 2n x 2n: Hamiltonian matrices | pencil of the equation. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dom"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Type / time domain of the Riccati equation: "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"continuous\""},{"type": "text","children": [],"string": ", or "},{"type": "literal","children": [],"string": "\"d\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"discrete\""},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": [{"type": "text","children": [],"string": "string : "},{"type": "literal","children": [],"string": "\"eigen\""},{"type": "text","children": [],"string": " for block diagonalization (default), or "},{"type": "literal","children": [],"string": "\"schur\""},{"type": "text","children": [],"string": " for Schur method. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X1, X2, X"},{"type": "listitem","children": [{"type": "text","children": [],"string": "square matrices of real numbers (X2 invertible). X is symetric when B and C are so. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "residual"},{"type": "listitem","children": [{"type": "text","children": [],"string": "real number: norm"},{"type": "subscript","children": [],"string": "1"},{"type": "text","children": [],"string": " of the actual Equation(X) residue. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["ricc", "srfaur", "lindquist"]},"signm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "signm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função do sinal da matriz"},"string": []},"synopsis": [],"varlist": [],"seealso": "sign"},"sylv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sylv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Resolver as equações de Sylvester A*X + X*B = C ou A*X*B + X = C"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sylv(A, B, C, 'c')", "sylv(A, B, C, 'd')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, B, C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "três matrizes de reais de dimensões apropriadas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag 'c' ou 'd'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Escolha o tipo de equação de Sylvester a resolver."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "lyap"},"arhnk": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arhnk"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Hankel norm approximant"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["slm = arhnk(sl, ord)", "slm = arhnk(sl, ord, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ord"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, order of the approximant"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "threshold for rank determination in "},{"type": "literal","children": [],"string": "equil1"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["equil", "equil1", "hankelsv"]},"balreal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "balreal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "balanced realization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["slb = balreal(sl)", "[slb, U] = balreal(sl)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl, slb"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear systems ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists)"}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["ctr_gram", "obs_gram", "hankelsv", "equil", "equil1"]},"bilin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bilin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "general bilinear transform"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sl1 = bilin(sl, v)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl,sl1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear systems ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector with 4 entries ("},{"type": "literal","children": [],"string": "v=[a,b,c,d]"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["horner", "cls2dls"]},"canon": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "canon"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "canonical controllable form"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Ac, Bc, U, ind] = canon(A, B)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ac,Bc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "canonical form"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "current basis (square nonsingular matrix)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of integers, controllability indices"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["obsv_mat", "cont_mat", "ctr_gram", "contrss", "ppol", "contr", "stabil"]},"cls2dls": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cls2dls"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "bilinear transform"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sl1 = cls2dls(sl, T)", "sl1 = cls2dls(sl, T, fp)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl,sl1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "linear systems ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number, the sampling period"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "pre-warning frequency in hertz"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["horner", "syslin"]},"colregul": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colregul"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "removing poles and zeros at infinity"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Stmp, Ws] = colregul(Sl, alfa, beta)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl,Stmp"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alfa,beta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "reals (new pole and zero positions)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["invsyslin", "inv", "rowregul", "rowshuff"]},"dscr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dscr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discretization of linear system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[sld, r] = dscr(sl, dt)", "[sld, r] = dscr(sl, dt, m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list containing "},{"type": "literal","children": [],"string": "[A,B,C,D]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number, sampling period"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "covariance of the input noise (continuous time)(default value=0)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "covariance of the output noise (discrete time) given if "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " is given as input"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sld"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "sampled (discrete-time) linear system, "},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["syslin", "flts", "dsimul"]},"equil": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "equil"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "balancing of pair of symmetric matrices"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "T = equil(P, Q)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P, Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "two positive definite symmetric matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nonsingular matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["equil1", "balanc", "ctr_gram"]},"equil1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "equil1"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "balancing (nonnegative) pair of matrices"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[T, siz] = equil1(P, Q)", "[T, siz] = equil1(P, Q, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P, Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "two non-negative symmetric matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nonsingular matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "siz"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of three integers"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "threshold"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["balreal", "minreal", "equil", "hankelsv"]},"hankelsv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hankelsv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Hankel singular values"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[nk2, W] = hankelsv(sl)", "[nk2, W] = hankelsv(sl, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list representing the linear system (state-space)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "tolerance parameter for detecting imaginary axis modes (default value is "},{"type": "literal","children": [],"string": "1000*%eps"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["balreal", "equil", "equil1"]},"invsyslin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "invsyslin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "system inversion"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sl2 = invsyslin(sl1)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl1,sl2"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists (linear systems in state space representation)"}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["rowregul", "inv"]},"minreal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "minreal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "minimal balanced realization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["slb = minreal(sl)", "slb = minreal(sl, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl,slb"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (threshold)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["minss", "balreal", "arhnk", "equil", "equil1"]},"minss": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "minss"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "minimal realization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["slc = minss(sl)", "slc = minss(sl, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl,slc"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists (linear systems in state-space form)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real (threshold for rank determination (see "},{"type": "link","children": [],"string": "contr"},{"type": "text","children": [],"string": "))"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contr", "minreal", "arhnk", "contrss", "obsvss", "balreal"]},"projsl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "projsl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear system projection"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "slp = projsl(sl, Q, M)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sl,slp"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q,M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrices (projection factorization)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "pbig"},"rowregul": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rowregul"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "removing poles and zeros at infinity"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Stmp, Ws] = rowregul(Sl, alfa, beta)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl, Stmp"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " lists"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alfa,beta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real numbers (new pole and zero positions)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["invsyslin", "colregul"]},"zeropen": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zeropen"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "zero pencil"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Z, U] = zeropen(Sl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a linear system ("},{"type": "literal","children": [],"string": "syslin"},{"type": "text","children": [],"string": " list in state-space form "},{"type": "literal","children": [],"string": "[A,B,C,D]"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix pencil "},{"type": "literal","children": [],"string": "Z=s*E-A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "square orthogonal matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["systmat", "kroneck"]},"bezout": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bezout"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Maior Comum Divisor de dois polinômios ou dois inteiros, pelo método Bezout"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["thegcd = bezout(p1,p2)", "[thegcd,U] = bezout(p1,p2)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p1, p2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois polinômios reais ou dois escalares inteiros (tipo igual a 1 ou 8)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thegcd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar with the type of "},{"type": "literal","children": [],"string": "p1"},{"type": "text","children": [],"string": ": The Greatest Common Divisor of "},{"type": "literal","children": [],"string": "p1"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "p2"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "2x2"},{"type": "text","children": [],"string": " unimodular matrix of the type of "},{"type": "literal","children": [],"string": "p1"},{"type": "text","children": [],"string": ", such that "},{"type": "literal","children": [],"string": "[p1 p2]*U = [thegcd 0]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"chepol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "chepol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Chebychev polynomials"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Tn = chepol(n, var)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer : polynomial order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : polynomial variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Tn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "polynomial in the variable "},{"type": "literal","children": [],"string": "var"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"cmndred": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cmndred"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "forma de denominador comum"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[n, d] = cmndred(num, den)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "num, den"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de polinômios de dimensões iguais"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"coeff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "coeff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "coeficientes de matrizes de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["C = coeff(Mp)", "C = coeff(Mp, degrees)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "degrees"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor (linha ou coluna) de inteiros dos graus selecionados"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz grande dos coeficientes"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"coffg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "coffg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz inversa de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Ns, d] = coffg(Fs)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de polinômios"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"colcompr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colcompr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compressão de colunas de matrizes de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Y, rk, ac] = colcompr(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios quadrada (base unimodular direita)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "posto normal de "},{"type": "literal","children": [],"string": "A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ac"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "Ac=A*Y"},{"type": "text","children": [],"string": ", matriz de polinômios"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"degree": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "degree"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "grau da matriz de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "D = degree(M)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"derivat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "derivat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "derivada de matriz de razões de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pd = derivat(p)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "p, pd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios ou de razões de polinômios"},"string": []},"string": []}],"string": []},"string": []},"seealso": "polyint"},"determ": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "determ"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "determinante de matrizes de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["res = determ(W)", "res = determ(W, k)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "W"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de polinômios reais ou complexos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (limite superior para o grau do determinante de W)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"detr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "detr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "determinante de uma matriz de razões de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "d = detr(h)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de polinômios ou de razões de polinômios."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalar do tipo de "},{"type": "varname","children": [],"string": "h"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"diophant": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "diophant"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solves the diophantine (Bezout) equation p1*x1 + p2*x2 = b"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x1x2, err] = diophant(p1p2, b)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p1p2, x1x2"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vectors of two numbers or polynomials "},{"type": "literal","children": [],"string": "p1p2 = [p1 p2]"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "x1x2 = [x1 x2]"},{"type": "text","children": [],"string": ", with the same size and type (integers, numbers, polynomials)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When there is no solution, "},{"type": "varname","children": [],"string": "x1x2 = []"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single number or polynomial"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Single real number: error flag: "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bezout", "sylm"]},"factors": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "factors"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração em ℝ de um polinômio ou uma fração racional"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[lnum, gain] = factors(pol)", "[lnum, gain] = factors(pol, flag)", "[lnum, lden, gain] = factors(rat)", "[lnum, lden, gain] = factors(rat, flag)", "rat = factors(rat, flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pol"},{"type": "listitem","children": [{"type": "text","children": [],"string": "polinômio real "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rat"},{"type": "listitem","children": [{"type": "text","children": [],"string": "razão de polinômios reais ("},{"type": "literal","children": [],"string": "rat=pol1/pol2"},{"type": "text","children": [],"string": "). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lnum, lden"},{"type": "listitem","children": [{"type": "text","children": [],"string": "listas de polinômios (de graus 1 ou 2). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gain"},{"type": "listitem","children": [{"type": "text","children": [],"string": "número real "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'d'"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"hermit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hermit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "forma hermitiana"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Ar, U] = hermit(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios triangular "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios unimodular"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"horner": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "horner"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "avaliação polinomios ou razões de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "horner(P, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios ou de razões de polinômios"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de números, polinômios, ou razães de polinômios"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"hrmt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hrmt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "máximo divisor comum de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[pg, U] = hrmt(v)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor linha de polinômios, i.e. matriz de polinômios "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": "x"},{"type": "literal","children": [],"string": "k"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polinômio"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios unimodular."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"htrianr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "htrianr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "triangularização de matrizes de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Ar, U, rk] = htrianr(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz unimodular de polinômios."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro, posto normal def "},{"type": "literal","children": [],"string": "A"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"inv_coeff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "inv_coeff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "constrói uma matriz de polinômios a partir de seus coeficientes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["P = inv_coeff(C)", "P = inv_coeff(C, d)", "P = inv_coeff(C, d, varname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz grande de coeficientes"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "grau da matriz de polinômios. Parâmetro opcional com valor padrão "},{"type": "literal","children": [],"string": "d=-1+size(C,'c')/size(C,'r')"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string fornecendo o nome da variável polinomial (valor padrão "},{"type": "literal","children": [],"string": "'x'"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"invr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "invr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inversão de matrizes (de razões de polinômios)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "F = invr(H)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios ou de razões de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios ou de razões de polinômios"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"lcmdiag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lcmdiag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração diagonal por MMC"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[N,D]=lcmdiag(H)", "[N,D]=lcmdiag(H,flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de razões de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios diagonal "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string: "},{"type": "literal","children": [],"string": "'row'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'col'"},{"type": "text","children": [],"string": " (padrão)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"ldiv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ldiv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "divisão longa entre matrizes de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x]=ldiv(n,d,k)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n,d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de polinômios reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"pdiv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pdiv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "divisão polinomial"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[R,Q] = pdiv(P1, P2)", "Q = pdiv(P1, P2)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P1, R, Q"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "arrays de polinômios com coeficientes reais ou complexos, do mesmo tamanho. "},{"type": "varname","children": [],"string": "Q"},{"type": "text","children": [],"string": " são Quocientes e "},{"type": "varname","children": [],"string": "R"},{"type": "text","children": [],"string": " são Restos."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When all remainders "},{"type": "varname","children": [],"string": "R"},{"type": "text","children": [],"string": " are constant (degree==0), "},{"type": "varname","children": [],"string": "R"},{"type": "text","children": [],"string": " is of type 1 (numbers) instead of 2 (polynomials)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single polinomial, ou array de polinômios de size(P1)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"pol2str": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pol2str"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de polinômio para string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "strP = pol2str(P)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matriz ou hipermatriz de polinômios com coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strP"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matriz ou hipermatriz de strings, de tamanho igual a size(P)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"polfact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polfact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatores reais mínimos de um polinômio"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "f = polfact(p)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polinômio com coeficientes reais."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor "},{"type": "literal","children": [],"string": "[f0 f1 ... fn]"},{"type": "text","children": [],"string": " de polinômios com coeficientes reais tal que "},{"type": "literal","children": [],"string": "p=prod(f)"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "f0=f(1)"},{"type": "text","children": [],"string": " é um polinômio constante. "},{"type": "literal","children": [],"string": "f(2:$) "},{"type": "text","children": [],"string": " são polinômios de grau 1 ou 2."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"poly": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "poly"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Polynomial definition from given roots or coefficients, or characteristic to a square matrix."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["p = poly(vec, vname)", "p = poly(vec, vname, \"roots\"|\"coeff\")", "Pc = poly(matNN, vname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string: the symbolic variable name of the polynomial. Allowed characters are the same as for variables names (see "},{"type": "link","children": [],"string": "naming rules"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vec"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar, vector, or non-square matrix of real or complex numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag \"roots\" (default) | \"coeff\" (or \"r\" | \"c\")"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Indicates what numbers in "},{"type": "literal","children": [],"string": "vec"},{"type": "text","children": [],"string": " represent. "},{"type": "literal","children": [],"string": "\"roots\""},{"type": "text","children": [],"string": " is the default value."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Shortcuts can be used: "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "\"roots\""},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "\"coeff\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Polynomial with given roots or coefficients and symbolic variable name."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "matNN"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Square matrix of real or complex numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Characteristic polynomial of the given square matrix, = "},{"type": "literal","children": [],"string": "det(x*eye() - matNN)"},{"type": "text","children": [],"string": ", with the symbolic variable "},{"type": "literal","children": [],"string": "x = poly(0,vname)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["inv_coeff", "coeff", "roots", "varn", "horner", "percents", "percentz", "rational", "rlist"]},"polyDisplay": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polyDisplay"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set or get the display mode of polynomials"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mod = polyDisplay()", "polyDisplay(mod)", "previousMod = polyDisplay(mod)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, \"ascii\" or \"unicode\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "previousMod"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the previous mode before being changed"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"polyint": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polyint"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Polynomial integration"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["polyint  // example", "Q = polyint(P)", "Q = polyint(P, Const)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P, Q"},{"type": "listitem","children": [{"type": "text","children": [],"string": "arrays (from scalars to hypermatrices) of polynomials with real or complex coefficients, of same size. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Const"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Set of real or complex constants of integration. "},{"type": "literal","children": [],"string": "length(Const)"},{"type": "text","children": [],"string": " sets the number of consecutive integrations to perform. By default, 0 is used. "},{"type": "varname","children": [],"string": "Const"},{"type": "text","children": [],"string": " can be one of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a scalar: then only the first antiderivatives are computed, and all use the same "},{"type": "varname","children": [],"string": "Const"},{"type": "text","children": [],"string": " value."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "an array of size size(P): then only the first antiderivatives are computed, with the respective "},{"type": "literal","children": [],"string": "Const(i)"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "Q(i)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "a list that can mix scalars, arrays of size size(P), or undefined elements. Then "},{"type": "literal","children": [],"string": "Const(i)"},{"type": "text","children": [],"string": " is used for the i"},{"type": "superscript","children": [],"string": "th"},{"type": "text","children": [],"string": " antiderivatives. Undefined elements are equivalent to 0."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": "derivat"},"residu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "residu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "resíduo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "V = residu(P, Q1, Q2)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "P, Q1, Q2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polinômios ou matrizes de polinômios de coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"roots": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "roots"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "raízes de um polinômio"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = roots(p)", "x = roots(p, 'e')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polinômio com coeficientes reais ou complexos ou vetor dos coeficientes do polinômio em ordem de graus decrescentes (para compatibilidade com o Matlab)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "'e', algo"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character: the algorithm to be used (default \"f\", for \"fast\"): "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"rowcompr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rowcompr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compressão de linhas de uma matriz de polinômios"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X, rk, Ac] = rowcompr(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios quadrada (base unimodular esquerda)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "posto normal de "},{"type": "literal","children": [],"string": "A"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ac"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "Ac=X*A"},{"type": "text","children": [],"string": ", matriz de polinômios"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"sfact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sfact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração espectral em tempo discreto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "F = sfact(P)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadradade polinômios reais."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"simp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "simp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "simplificação racional"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[N1,D1] = simp(N,D)", "H1 = simp(H)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N,D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "polinômios reais ou matrizes de polinômios reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de razões de polinômios (i.e matriz com entradas "},{"type": "literal","children": [],"string": "n/d"},{"type": "text","children": [],"string": " ,"},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "d"},{"type": "text","children": [],"string": " polinômios reais)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"simp_mode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "simp_mode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "modifica o modo de simplificação racional"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mod = simp_mode()", "simp_mode(mod)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"sylm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sylm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz de Sylvester"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "S = sylm(a, b)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a, b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Dois polinómios simples com coeficientes reais ou complexos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz quadrada de números reais ou complexos, de tamanho "},{"type": "literal","children": [],"string": "degree(a*b)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bezout", "diophant"]},"varn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "varn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variável simbólica de polinômios ou de frações racionais"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["symb = varn(p)", "pm = varn(p, varname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de polinômios ou de frações racionais. In Scilab, only univariate polynomials and rationals are supported. In a matrix, all polynomials or rationals have the same symbolic variable name."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "symb, varname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Caracteres string: nome atual ou novo da variável simbólica. Caracteres permitidos são os mesmos que para nomes de variáveis (veja "},{"type": "link","children": [],"string": "regras de nomeação"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de polinômios ou de frações racionais, igual a "},{"type": "varname","children": [],"string": "p"},{"type": "text","children": [],"string": ", com seu nome de variável definido como "},{"type": "varname","children": [],"string": "varname"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"bilt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bilt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "bilinear or biquadratic transform SISO system given by a zero/poles representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[npl,nzr,ngn] = bilt(pl,zr,gn,num,den)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector, the poles of the given system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector, the zeros of the given system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a polynomial with degree equal to the degree of "},{"type": "literal","children": [],"string": "den"},{"type": "text","children": [],"string": ", the numerator of the transform."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "den"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a polynomial with degree 1 or 2, the denominator of the transform."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "npl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector, the poles of the transformed system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nzr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector, the zeros of the transformed system."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ngn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar, the gain of the transformed system."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["iir", "trans", "horner"]},"detrend": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "detrend"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "remove constant, linear or piecewise linear trend from a vector"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = detrend(x)", "y = detrend(x,flag)", "y = detrend(x,flag,bp)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix of real or complex numbers (the signal to treat)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string equal to \"linear\" (or \"l\") for linear or piecewise linear treatment or \"constant\" (or \"c\") for constant treatment."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the breakpoints to provide if you want a piecewise linear treatment."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output, the signal x with the trend removed from it."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"intdec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "intdec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Changes  sampling rate of a signal"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y]=intdec(x,lom)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input sampled signal"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lom"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "For a 1D signal this is a scalar which gives the rate change. For a 2D signal this is a 2-Vector of sampling rate changes "},{"type": "literal","children": [],"string": "lom"},{"type": "text","children": [],"string": "=(col rate change,row rate change)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Output sampled signal"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"unwrap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unwrap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "unwrap a Y(x) profile or a Z(x,y) surface. Unfold a Y(x) profile"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["unwrap() // runs some examples", "[U, breakPoints] = unwrap(Y)", "[U, breakPoints] = unwrap(Y, z_jump)", "[U, cuspPoints]  = unwrap(Y, \"unfold\")", "U = unwrap(Z)", "U = unwrap(Z, z_jump)", "U = unwrap(Z, z_jump, dir)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vector of real numbers: the profile to unwrap or unfold. Implicit abscissae X are assumed to be equispaced."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of real numbers: the surface to unwrap. Implicit abscissae (X,Y) are assumed to be cartesian and equispaced (constant steps may be different along X versus along Y)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z_jump"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Scalar real positive number used in unwrapping mode: the jump's height applied at breakpoints, performing the unwrapping. Only its absolute value is considered. The jump actually applied has the sign of the slope on both sides of each breakpoint. The default value is "},{"type": "literal","children": [],"string": "z_jump = 2*%pi"},{"type": "text","children": [],"string": ". The special value "},{"type": "literal","children": [],"string": "z_jump = 0"},{"type": "text","children": [],"string": " applies jumps equal to the average slope around each breakpoint, restoring a continuous slope over the whole profile or surface."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"c\" | \"r\" | \"\" (default): direction along which unwrapping is performed. \"c\" unwraps along columns, \"r\" unwraps along rows, \"\" unwraps in both directions."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"unfold\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Provide this switch to unfold the given curve if it is folded, instead of unwrapping it."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Unwrapped profile or surface, or unfolded profile. "},{"type": "varname","children": [],"string": "U"},{"type": "text","children": [],"string": " has the same sizes as "},{"type": "varname","children": [],"string": "Y"},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "Z"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "breakPoints, cuspPoints"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Vector of indices of points in "},{"type": "varname","children": [],"string": "Y"},{"type": "text","children": [],"string": " where wrapping or folding has been detected and processed."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atan", "modulo"]},"xcov": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcov"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes discrete auto or cross covariance"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[c, lagindex] = xcov(x)", "[c, lagindex] = xcov(x, y)", "[c, lagindex] = xcov(.., maxlags)", "[c, lagindex] = xcov(.., maxlags, scaling)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of real or complex floating point numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of real or complex floating point numbers. The default value is "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxlags"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar with integer value greater than 1. The default value is "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ". Where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the maximum of the "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " vector length."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scaling"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string with possible value: "},{"type": "literal","children": [],"string": "\"biased\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"unbiased\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"coeff\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": ". The default value is "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of real or complex floating point numbers with same orientation as "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lagindex"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a row vector, containing the lags index corresponding to the "},{"type": "literal","children": [],"string": "c"},{"type": "text","children": [],"string": " values."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcorr", "corr", "fft"]},"conv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "conv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete 1-D convolution. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "C = conv(A,B [,shape])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shape"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an optional character string with possible values:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"full\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "conv"},{"type": "text","children": [],"string": " computes the full convolution. It is the default value."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"same\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "conv"},{"type": "text","children": [],"string": " computes the central part of the convolution of the same size as "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"valid\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "conv"},{"type": "text","children": [],"string": " computes the convolution parts without the zero-padding of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["convol", "conv2"]},"conv2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "conv2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete 2-D convolution. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["C = conv2(A,B [,shape])", "C = conv2(hrow,hcol,B [,shape])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hrow"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hcol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex 2-D array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex 2-D array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shape"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an optional character string with possible values:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"full\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "conv2"},{"type": "text","children": [],"string": " computes the full two-dimensional convolution. It is the default value."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"same\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "conv2"},{"type": "text","children": [],"string": " computes the central part of the convolution of the same size as "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"valid\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "conv2"},{"type": "text","children": [],"string": " computes the convolution parts without the zero-padding of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex 2-D array."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["convol2d", "conv"]},"convol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "convol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convolution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = convol(h, x)", "[y,e1] = convol(h, x, e0)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector, first input sequence (\"short\" one) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector, second input sequence ( \"long\" one)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector,old tail to overlap add (not used in first call)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector, the convolution. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "new tail to overlap add (not used in last call)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["corr", "fft", "pspect"]},"convol2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "convol2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discrete 2-D convolution, using fft. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "C = convol2d(A, B)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex 2-D array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex 2-D array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex 2-D array."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["conv2", "conv", "convol", "real", "clean"]},"corr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "corr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "correlation, covariance"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[cov,Mean] = corr(x,[y],nlags)", "[cov,Mean] = corr('fft',xmacro,[ymacro],n,sect)", "[w,xu] = corr('updt',x1,[y1],w0)", "[w,xu] = corr('updt',x2,[y2],w,xu)", "...", "wk = corr('updt',xk,[yk],w,xu)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector, default value x."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nlags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, number of correlation coefficients desired."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmacro"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scilab external (see below)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ymacro"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scilab external (see below), default value xmacro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer, total size of the sequence (see below)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "size of sections of the sequence (see below)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "yi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector,default value xi."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cov"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector, the correlation coefficients"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mean"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number or vector,  the mean of x and if given y"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcorr", "xcov", "correl", "cov", "covar"]},"hank": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hank"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "covariance to hankel matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "hk =hank(m, n, cov)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of bloc-rows"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of bloc-columns"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cov"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sequence of covariances; it must be given as :[R0 R1 R2...Rk]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hk"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "computed hankel matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "toeplitz"},"xcorr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcorr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes discrete auto or cross correlation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[c, lagindex] = xcorr(x)", "[c, lagindex] = xcorr(x, y)", "[c, lagindex] = xcorr(.., maxlags)", "[c, lagindex] = xcorr(.., maxlags, scaling)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of real or complex floating point numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of real or complex floating point numbers. The default value is "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxlags"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar with integer value greater than 1. The default value is "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ". Where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the maximum of the "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " vector length."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scaling"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string with possible value: "},{"type": "literal","children": [],"string": "\"biased\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"unbiased\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"coeff\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": ". The default value is "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of real or complex floating point numbers with same orientation as "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lagindex"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a row vector, containing the lags index corresponding to the "},{"type": "literal","children": [],"string": "c"},{"type": "text","children": [],"string": " values."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcov", "corr", "fft"]},"_DesignEllipticFilter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "How to design an elliptic filter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to design an elliptic filter (analog and digital)"},"string": []},"synopsis": [],"varlist": [],"seealso": ["bode", "iir", "poly", "syslin", "zpell", "flts", "tf2ss", "dscr", "csim", "trans", "analpf"]},"analpf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "analpf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create analog low-pass filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[hs,pols,zers,gain]=analpf(n,fdesign,rp,omega)", "hs=analpf(n,fdesign,rp,omega)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer: filter order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fdesign"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a string: that indicated the filter design method: "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"butt\" is for  Butterworth filter."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"cheb1\" is for Chebyshev type I filter."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"cheb2\" is for Chebyshev type II filter (also called inverse  Chebyshev filter)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"ellip\" is for  elliptic filter."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rp"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a 2-vector of ripples values for \"cheb1\", \"cheb2\" and \"ellip\" filters. It's elements value must respect "},{"type": "literal","children": [],"string": "0<rp(1),rp(2)<1"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "For \"cheb1\" filters only "},{"type": "literal","children": [],"string": "rp(1)"},{"type": "text","children": [],"string": " is used. The passband ripple is between "},{"type": "literal","children": [],"string": "1-rp(1)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "For \"cheb2\" filters only "},{"type": "literal","children": [],"string": "rp(2)"},{"type": "text","children": [],"string": " is used. The stopband ripple is between "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "rp(2)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "For \"ellip\" filters "},{"type": "literal","children": [],"string": "rp(1)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "rp(2)"},{"type": "text","children": [],"string": " are both used. The passband ripple is between "},{"type": "literal","children": [],"string": "1-rp(1)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " while the stopband ripple is between "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "rp(2)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omega"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "cut-off frequency of low-pass filter in rad/s"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the rational polynomial transfer function (see "},{"type": "link","children": [],"string": "syslin"},{"type": "text","children": [],"string": "). Is is "},{"type": "literal","children": [],"string": "hs = gain*syslin(\"c\", real(poly(zers, \"s\")), real(poly(pols, \"s\"))) "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row vector: the poles of transfer function"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zers"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row vector: zeros of transfer function"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gain"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar: the gain of transfer function"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["repfreq", "bode", "csim", "syslin"]},"buttmag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "buttmag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Power transmission of a Butterworth filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[h]=buttmag(order,omegac,sample)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer : filter order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real : cut-off angular frequency (in rad/s)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sample"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector of angular frequencies (in rad/s), where the transmission must be evaluated."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Butterworth filter values at sample points"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"casc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "casc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cascade realization of filter from coefficients (utility function)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["cels = casc(x)", "cels = casc(x, vname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(4xN)-matrix where each column is a cascade element, the first two rows values being the numerators coefficients, and the last two rows values being the denominator coefficients."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string: the name of the cascade variable (\"z\" if not specified)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cels"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting cascade representation"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "rlist"},"cheb1mag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cheb1mag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "response of Chebyshev type 1 filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[h2]=cheb1mag(n,omegac,epsilon,sample)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer : filter order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real : cut-off frequency"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsilon"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real : ripple in pass band"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sample"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of frequencies where "},{"type": "literal","children": [],"string": "cheb1mag"},{"type": "text","children": [],"string": " is evaluated"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Chebyshev I filter values at sample points"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "buttmag"},"cheb2mag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cheb2mag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "response of type 2 Chebyshev filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[h2]=cheb2mag(n,omegar,A,sample)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer ; filter order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar : cut-off frequency"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "attenuation in stop band"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sample"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of frequencies where cheb2mag is evaluated"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of Chebyshev II filter values at sample points"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "cheb1mag"},"ell1mag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ell1mag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "magnitude of elliptic filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[v]=ell1mag(eps,m1,z)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "eps"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "passband ripple="},{"type": "literal","children": [],"string": "1/(1+eps^2)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "stopband ripple="},{"type": "literal","children": [],"string": "1/(1+(eps^2)/m1)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sample vector of values in the complex plane"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "elliptic filter values at sample points"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "buttmag"},"eqfir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eqfir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "minimax approximation of FIR filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[hn]=eqfir(nf,bedge,des,wate)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of output filter points desired"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bedge"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Mx2 matrix giving a pair of edges for each band"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "des"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "M-vector giving desired magnitude for each band"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wate"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "M-vector giving relative weight of error in each band"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output of linear-phase FIR filter coefficients"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"eqiir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eqiir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Design of iir filters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[cells,fact,zzeros,zpoles]=eqiir(ftype,approx,om,deltap,deltas)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ftype"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "filter type ("},{"type": "literal","children": [],"string": "'lp','hp','sb','bp'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "approx"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "design approximation ("},{"type": "literal","children": [],"string": "'butt','cheb1','cheb2','ellip'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "om"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "4-vector of cutoff frequencies (in radians) "},{"type": "literal","children": [],"string": "om=[om1,om2,om3,om4]"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "0 <= om1 <= om2 <= om3 <= om4 <= pi "},{"type": "text","children": [],"string": " .When "},{"type": "literal","children": [],"string": "ftype"},{"type": "text","children": [],"string": "='lp' or 'hp', "},{"type": "literal","children": [],"string": "om3"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "om4"},{"type": "text","children": [],"string": " are not used and may be set to 0."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deltap"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ripple in the passband. "},{"type": "literal","children": [],"string": "0<= deltap <=1 "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deltas"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ripple in the stopband. "},{"type": "literal","children": [],"string": "0<= deltas <=1 "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cells"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "realization of the filter as second order cells"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fact"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "normalization constant"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zzeros"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "zeros in the z-domain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zpoles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "poles in the z-domain"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["eqfir", "iir", "syredi"]},"faurre": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "faurre"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "filter computation by simple Faurre algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[P,R,T]=faurre(n,H,F,G,R0)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of iterations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H, F, G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "estimated triple from the covariance sequence of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "E(yk*yk')"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "solution of the Riccati equation after n iterations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R, T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "gain matrix of the filter."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["srfaur", "lindquist", "phc"]},"ffilt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ffilt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "coefficients of FIR low-pass"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x]=ffilt(ft,n,fl,fh)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ft"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "filter type where "},{"type": "literal","children": [],"string": "ft"},{"type": "text","children": [],"string": " can take the values"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"lp\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for low-pass filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"hp\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for high-pass filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"bp\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for band-pass filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"sb\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for stop-band filter"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (number of filter samples desired)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (low frequency cut-off)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (high frequency cut-off)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of filter coefficients"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"filt_sinc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "filt_sinc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "samples of sinc function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x]=filt_sinc(n,fl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of samples"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "cut-off frequency of the associated low-pass filter in Hertz."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "samples of the sinc function"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sinc", "sincd"]},"filter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "filter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "filters a data sequence using a digital filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[y,zf] = filter(B, A, x [,zi])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector : the coefficients of the filter numerator in decreasing power order, or a polynomial."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector : the coefficients of the filter denominator in decreasing power order, or a polynomial."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector : the input signal"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real row vector of length "},{"type": "literal","children": [],"string": "max(length(a),length(b))-1"},{"type": "text","children": [],"string": ": the initial condition relative to a \"direct form II transposed\" state space representation. The default value is a vector filled with zeros."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector : the filtered signal. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector : the final state. It can be used to filter a next batch of the input signal."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["flts", "rtitr", "ltitr", "sgolayfilt"]},"find_freq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "find_freq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "parameter compatibility for elliptic filter design"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[m]=find_freq(epsilon,A,n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsilon"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "passband ripple"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "stopband attenuation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "filter order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "frequency needed for construction of elliptic filter"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "percentk"},"frmag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "frmag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "magnitude of FIR and IIR filters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[xm,fr]=frmag(sys,npts)", "[xm,fr]=frmag(num,den,npts)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sys"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single input, single output discrete transfer function, or a polynomial or the vector of polynomial coefficients, the filter."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a polynomial or the vector of polynomial coefficients, the numerator of the filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "den"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a polynomial or the vector of polynomial coefficients, the denominator of the filter (the default value is 1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "npts"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the number of points in frequency response."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of magnitude of frequency response at the points "},{"type": "literal","children": [],"string": "fr"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "points in the normalized frequency domain where magnitude is evaluated."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["iir", "eqfir", "repfreq", "calfrq", "phasemag"]},"fsfirlin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fsfirlin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "design of FIR, linear phase filters, frequency sampling technique"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[hst]=fsfirlin(hd,flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of desired frequency response samples"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is equal to 1 or 2, according to the choice of type 1 or type 2 design"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hst"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector giving the approximated continuous response on a dense grid of frequencies"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ffilt", "wfir"]},"group": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "group"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "group delay for digital filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[tg [,fr]] = group(npts, H) (call with a siso transfert function)", "[tg [,fr]] = group(npts, C) (call with a vector of transfert functions, cascaded second order representation)", "[tg [,fr]] = group(npts, F) (call with the vector of an FIR filter coefficients)", "[tg [,fr]] = group(npts, a1i, a2i, b1i, b2i) (call with 4 vectors of numbers, cascaded second order Deczky representation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "npts"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer : number of points desired in calculation of group delay"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "in coefficient, polynomial, rational polynomial, or cascade polynomial form this variable is the transfer function of the filter. In coefficient polynomial form this is a vector of coefficients (see below)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a2i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "in coeff poly form this is a vector of coeffs"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b1i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "in coeff poly form this is a vector of coeffs"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b2i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "in coeff poly form this is a vector of coeffs"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "values of group delay evaluated on the grid fr"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "grid of normalized frequency values where group delay is evaluated"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"hilbert": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hilbert"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete-time analytic signal computation of a real signal  using Hilbert transform "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x=hilbert(xr)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector : the real signal samples"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Complex vector: the discrete-time analytic signal."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["window", "hilb"]},"iir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "iir digital filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["hz=iir(n,ftype,fdesign,frq,delta)", "[p,z,g]=iir(n,ftype,fdesign,frq,delta)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive number witn integer value, the filter order."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ftype"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string specifying the filter type, the possible values are: "},{"type": "literal","children": [],"string": "'lp'"},{"type": "text","children": [],"string": " for low-pass,"},{"type": "literal","children": [],"string": "'hp'"},{"type": "text","children": [],"string": " for high pass,"},{"type": "literal","children": [],"string": "'bp'"},{"type": "text","children": [],"string": " for band pass and "},{"type": "literal","children": [],"string": "'sb'"},{"type": "text","children": [],"string": " for stop band."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fdesign"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string specifying the analog filter design, the possible values are: "},{"type": "literal","children": [],"string": "'butt'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "'cheb1'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "'cheb2'"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "'ellip'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "2-vector of discrete cut-off frequencies (i.e., "},{"type": "literal","children": [],"string": "0<frq<.5"},{"type": "text","children": [],"string": "). For "},{"type": "literal","children": [],"string": "'lp'"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "'hp'"},{"type": "text","children": [],"string": " filters only "},{"type": "literal","children": [],"string": "frq(1)"},{"type": "text","children": [],"string": " is used (in this case, "},{"type": "varname","children": [],"string": "frq"},{"type": "text","children": [],"string": " can be a scalar). For "},{"type": "literal","children": [],"string": "'bp'"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "'sb'"},{"type": "text","children": [],"string": " filters "},{"type": "literal","children": [],"string": "frq(1)"},{"type": "text","children": [],"string": " is the upper cut-off frequency and "},{"type": "literal","children": [],"string": "frq(2)"},{"type": "text","children": [],"string": " is the lower cut-off frequency."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "delta"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "2-vector of error values for "},{"type": "literal","children": [],"string": "cheb1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "cheb2"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "ellip"},{"type": "text","children": [],"string": " filters where only "},{"type": "literal","children": [],"string": "delta(1)"},{"type": "text","children": [],"string": " is used for "},{"type": "literal","children": [],"string": "cheb1"},{"type": "text","children": [],"string": " case, only "},{"type": "literal","children": [],"string": "delta(2)"},{"type": "text","children": [],"string": " is used for "},{"type": "literal","children": [],"string": "cheb2"},{"type": "text","children": [],"string": " case, and "},{"type": "literal","children": [],"string": "delta(1)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "delta(2)"},{"type": "text","children": [],"string": " are both used for "},{"type": "literal","children": [],"string": "ellip"},{"type": "text","children": [],"string": " case. "},{"type": "literal","children": [],"string": "0<delta(1),delta(2)<1"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "for "},{"type": "literal","children": [],"string": "cheb1"},{"type": "text","children": [],"string": " filters "},{"type": "literal","children": [],"string": "1-delta(1)<ripple<1"},{"type": "text","children": [],"string": " in passband"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "for "},{"type": "literal","children": [],"string": "cheb2"},{"type": "text","children": [],"string": " filters "},{"type": "literal","children": [],"string": "0<ripple<delta(2)"},{"type": "text","children": [],"string": " in stopband"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "for "},{"type": "literal","children": [],"string": "ellip"},{"type": "text","children": [],"string": " filters "},{"type": "literal","children": [],"string": "1-delta(1)<ripple<1"},{"type": "text","children": [],"string": " in passband and "},{"type": "literal","children": [],"string": "0<ripple<delta(2)"},{"type": "text","children": [],"string": " in stopband"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hz"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single input single output discrete transfer function, the low pass filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of transformed filter poles."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of transformed filter zeros."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar: transformed filter gain."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["eqfir", "eqiir", "analpf", "bilt"]},"iirgroup": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iirgroup"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "group delay Lp IIR filter optimization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[lt,grad]=iirgroup(p,r,theta,omega,wt,td)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Lp criterion"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of the module of the poles and the zeros of the filters"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of the argument of the poles and the zeros of the filters"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omega"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "frequencies where the filter specifications are given"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "weighting function for and the group delay"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "td"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "desired group delay"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lt, grad"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "criterium and gradient values"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"iirlp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iirlp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lp IIR filter optimization"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[cost,grad,ind]=iirlp(x,ind,p,[flag],lambda,omega,ad,wa,td,wt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Lp criterion"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1X2 vector of the module and argument of the poles and the zeros of the filters"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string : "},{"type": "literal","children": [],"string": "'a'"},{"type": "text","children": [],"string": " for amplitude, 'gd' for group delay; default case for amplitude and group delay."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omega"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "frequencies where the filter specifications are given"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wa,wt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "weighting functions for the amplitude and the group delay"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lambda"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "weighting (with "},{"type": "literal","children": [],"string": "1-lambda"},{"type": "text","children": [],"string": ") of the costs ("},{"type": "literal","children": [],"string": "'a'"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "'gd'"},{"type": "text","children": [],"string": " for getting the global cost."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ad, td"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "desired amplitude and group delay"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cost, grad"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "criterium and gradient values"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"kalm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kalm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Kalman update"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x1,p1,x,p]=kalm(y,x0,p0,f,g,h,q,r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f,g,h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "current system matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "q, r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "covariance matrices of dynamics and observation noise"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0,p0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state estimate and error variance at t=0 based on data up to t=-1"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "current observation Output"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1,p1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "updated estimate and error covariance at t=1 based on data up to t=0"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "updated estimate and error covariance at t=0  based on data up to t=0"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["srkf", "sskf"]},"lev": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lev"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Yule-Walker equations (Levinson's algorithm)  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[ar, sigma2, rc]=lev(r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "correlation coefficients"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "auto-Regressive model parameters"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sigma2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scale constant"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "reflection coefficients"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"levin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "levin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Toeplitz system solver by Levinson algorithm (multidimensional)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[la,sig]=levin(n,cov)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar with integer value: the maximum order of the filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cov"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "A "},{"type": "literal","children": [],"string": "(nlag*d) x d"},{"type": "text","children": [],"string": " matrix. It contains the "},{"type": "literal","children": [],"string": "Rk"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "d x d"},{"type": "text","children": [],"string": " matrices for a "},{"type": "literal","children": [],"string": "d"},{"type": "text","children": [],"string": "-dimensional process) stored in the following way :"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "la"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A list, the successively calculated Levinson polynomials (degree 1 to "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "), with coefficients "},{"type": "literal","children": [],"string": "Ak"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A list, the successive mean-square errors."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "phc"},"lindquist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lindquist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lindquist's algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[P,R,T]=lindquist(n,H,F,G,R0)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of iterations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H, F, G"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "estimated triple from the covariance sequence of "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "E(yk*yk')"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "solution of the Riccati equation after n iterations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R, T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "gain matrices of the filter."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["srfaur", "faurre", "phc"]},"remez": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "remez"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remez exchange algorithm for the weighted chebyshev approximation of a continuous function with a sum of cosines."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "an=remez(guess,mag,fgrid,weight)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "guess"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real array of size "},{"type": "literal","children": [],"string": "n+2 the "},{"type": "text","children": [],"string": "initial guess"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fgrid"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real array of size "},{"type": "literal","children": [],"string": "ng"},{"type": "text","children": [],"string": ": the grid of normalized frequency points in [0,.5["}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real array of size "},{"type": "literal","children": [],"string": "ng"},{"type": "text","children": [],"string": ": the desired magnitude on grid "},{"type": "literal","children": [],"string": "fg"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "weight"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real array of size "},{"type": "literal","children": [],"string": "ng"},{"type": "text","children": [],"string": ": weighting function on error on grid "},{"type": "literal","children": [],"string": "fg"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "an"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real array of size "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ": cosine coefficients"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["remezb", "eqfir"]},"remezb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "remezb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Minimax approximation of magnitude response"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[an]=remezb(nc,fg,ds,wt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Number of cosine functions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Grid of frequency points in [0,.5)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ds"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Desired magnitude on grid "},{"type": "literal","children": [],"string": "fg"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Weighting function on error on grid "},{"type": "literal","children": [],"string": "fg"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "an"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Cosine filter coefficients"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "eqfir"},"sgolay": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sgolay"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Savitzky-Golay Filter Design"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[B, C] = sgolay(k, nf)", "[B, C] = sgolay(k, nf, w)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar with integer value: the fitting polynomial degree."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar with integer value: the filter length, must be odd and greater than k+1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector of length nf with positive entries: the weights. If omitted no weights are applied."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real n by n array: the set of filter coefficients: the early rows of B smooth based on future values and later rows smooth based on past values, with the middle row using half future and half past. In particular, you can use row i to estimate x(k) based on the i-1 preceding values and the n-i following values of x values as y(k) = B(i,:) * x(k-i+1:k+n-i)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real n by k+1 array: the matrix of differentiation filters. Each column of C is a differentiation filter for derivatives of order P-1 where P is the column index. Given a signal X with length nf, an estimate of the P-th order derivative of its middle value can be found from: "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " (P) X ((nf+1)/2) = P!*C(:,P+1)'*X"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sgolayfilt", "conv"]},"sgolaydiff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sgolaydiff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Numerical derivatives computation using Savitzky-Golay filter."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["D = sgolaydiff(X, order, k, nf)", "D = sgolaydiff(X, order, k, nf, w)", "D = sgolaydiff(X, order, C)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "It can be either a real vector or a general real array. If it is an array the derivation is applied along the first non singleton dimension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar with integer value, the order of derivation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real nf by k+1 array: the matrix of differentiation filters computed by the "},{"type": "link","children": [],"string": "sgolay"},{"type": "text","children": [],"string": " function."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar with integer value: the fitting polynomial degree."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar with integer value: the filter length, must be odd and greater the k+1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real vector of length nf with positive entries: the weights. If omitted no weights are applied."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector with identical shape as X, the estimated derivative."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sgolay", "sgolayfilt", "diff"]},"sgolayfilt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sgolayfilt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Filter signal using Savitzky-Golay Filter."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xf = sgolayfilt(X, B)", "xf = sgolayfilt(X, k, nf)", "xf = sgolayfilt(X, k, nf, w)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real array. If it is a vector it contains the signal to be filtered else each column of X is filtered."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "B"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real n by n array: the set of filter coefficients produced by the "},{"type": "link","children": [],"string": "sgolay"},{"type": "text","children": [],"string": " function."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar with integer value: the fitting polynomial degree."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar with integer value: the filter length, must be odd and greater than k+1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real array: the filtered signal(s)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sgolay", "filter", "wfir"]},"srfaur": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "srfaur"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "square-root algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[p,s,t,l,rt,tt]=srfaur(h,f,g,r0,n,p,s,t,l)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h, f, g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "convenient matrices of the state-space model."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "E(yk*yk')."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of iterations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "estimate of the solution after n iterations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s, t, l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "intermediate matrices for  successive iterations;"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rt, tt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "gain matrices of the filter model after "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " iterations."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p, s, t, l"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "may be given as input if more than one recursion is desired (evaluation of intermediate values of "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["phc", "faurre", "lindquist"]},"srkf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "srkf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "square root Kalman filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x1,p1]=srkf(y,x0,p0,f,h,q,r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f, h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "current system matrices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "q, r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "covariance matrices of dynamics and observation noise"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0, p0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "state estimate and error variance at t=0 based on data up to t=-1"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "current observation Output"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1, p1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "updated estimate and error covariance at t=1 based on data up to t=0"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["kalm", "sskf"]},"sskf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sskf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "steady-state Kalman filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xe = sskf(y,f,h,q,r,x0)", "[xe, pe]=sskf(y,f,h,q,r,x0)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "data in form "},{"type": "literal","children": [],"string": "[y0,y1,...,yn]"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "yk"},{"type": "text","children": [],"string": " a column vector"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "system matrix dim(NxN)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "observations matrix dim(MxN)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dynamics noise matrix dim(NxN)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "observations noise matrix dim(MxM)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial state estimate"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xe"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "estimated state"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pe"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "steady-state error covariance"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"syredi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "syredi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Design of iir filters, syredi code interface"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[fact,b2,b1,b0,c1,c0,zzeros,zpoles]=syredi(ityp,iapro,om,deltap,deltas)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "itype"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the filter type: 1 stands for low-pass, 2 for high-pass, 3 for band-pass, 4 for stop-band."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iappro"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, the design approximation type: 1 stands for butterworth, 2 for elliptic, 3 for Chebytchev1, 4 for Chebytchev2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "om"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "4-vector of cutoff frequencies (in radians) "},{"type": "literal","children": [],"string": "om=[om1,om2,om3,om4]"},{"type": "text","children": [],"string": ", "}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "0<= om1 <= om2 <= om3 <= om4 <= pi "},{"type": "text","children": [],"string": " ."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "literal","children": [],"string": "ftype"},{"type": "text","children": [],"string": "='lp' or "},{"type": "literal","children": [],"string": "'hp'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "om3"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "om4"},{"type": "text","children": [],"string": " are not used and may be set to 0."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deltap"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar, the ripple in the passband. "},{"type": "literal","children": [],"string": "0< deltap <1 "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deltas"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real scalar, the ripple in the stopband. "},{"type": "literal","children": [],"string": "0< deltas <1 "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gain"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar, the filter gain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector, degree 2 coefficients of numerators."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector, degree 1 coefficients of numerators."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector, degree 0 coefficients of numerators."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector, degree 1 coefficients of denominators."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector, degree 0 coefficients of denominators."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zzeros"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "complex row vector, filter zeros in the z-domain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zpoles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "complex row vector, filter poles in the z-domain"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "eqiir"},"system": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "system"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "observation update"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x1,y]=system(x0,f,g,h,q,r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input state vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "system matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Output matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input noise covariance matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output noise covariance matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output state vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output observation"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"trans": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "trans"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "low-pass to other filter transform"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["hzt=trans(hz,tr_type,frq)", "hzt=trans(pd,zd,gd,tr_type,frq)", "[pt,zt,gt]=trans(hz,tr_type,frq)", "[pt,zt,gt]=trans(pd,zd,gd,tr_type,frq)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hz"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single input single output discrete transfer function, the low pass filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vector of given filter poles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vector of given filter zeros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar: the given filter gain"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tr_type"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, the type of transformation, see description for possible values "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "2-vector of discrete cut-off frequencies (i.e.,"},{"type": "literal","children": [],"string": "0<frq<.5"},{"type": "text","children": [],"string": "). see description for details."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hzt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "transformed filter transfert function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of transformed filter zeros."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of transformed filter poles."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar: transformed filter gain."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["iir", "bilt"]},"wfir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "wfir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear-phase FIR filters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[wft,wfm,fr]=wfir(ftype,forder,cfreq,wtype,fpar)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ftype"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string : "},{"type": "literal","children": [],"string": "'lp','hp','bp','sb'"},{"type": "text","children": [],"string": " (filter type)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "forder"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Filter order (pos integer)(odd for "},{"type": "literal","children": [],"string": "ftype='hp'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'sb'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cfreq"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "2-vector of cutoff frequencies ("},{"type": "literal","children": [],"string": "0<cfreq(1),cfreq(2)<.5"},{"type": "text","children": [],"string": ") only "},{"type": "literal","children": [],"string": "cfreq(1)"},{"type": "text","children": [],"string": " is used when "},{"type": "literal","children": [],"string": "ftype='lp'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'hp'"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wtype"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Window type ("},{"type": "literal","children": [],"string": "'re','tr','hm','hn','kr','ch'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fpar"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "2-vector of window parameters. Kaiser window "},{"type": "literal","children": [],"string": "fpar(1)>0 fpar(2)=0"},{"type": "text","children": [],"string": ". Chebyshev window "},{"type": "literal","children": [],"string": "fpar(1)>0, fpar(2)<0"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "fpar(1)<0, 0<fpar(2)<.5"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wft"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "time domain filter coefficients"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wfm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "frequency domain filter response on the grid fr"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Frequency grid"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"wfir_gui": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "wfir_gui"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Graphical user interface that can be used to interactively design wfir filters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[ftype,forder,cfreq,wtype,fpar] = wfir_gui()"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ftype"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the selected filter type."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "forder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar with positive integer value: the selected filter order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cfreq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 2 vector: the cut-off frequencies in normalized frequencies"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wtype"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the selected window type."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fpar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2-vector of window parameters."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "wfir"},"wiener": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "wiener"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Wiener estimate"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[xs,ps,xf,pf]=wiener(y,x0,p0,f,g,h,q,r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f, g, h"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "system matrices in the interval "},{"type": "literal","children": [],"string": "[t0,tf]"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "="},{"type": "literal","children": [],"string": "[f0,f1,...,ff]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "fk"},{"type": "text","children": [],"string": " is a nxn matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "="},{"type": "literal","children": [],"string": "[g0,g1,...,gf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "gk"},{"type": "text","children": [],"string": " is a nxn matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "="},{"type": "literal","children": [],"string": "[h0,h1,...,hf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "hk"},{"type": "text","children": [],"string": " is a mxn matrix"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "q, r"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "covariance matrices of dynamics and observation noise"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "q"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "="},{"type": "literal","children": [],"string": "[q0,q1,...,qf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "qk"},{"type": "text","children": [],"string": " is a nxn matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "="},{"type": "literal","children": [],"string": "[r0,r1,...,rf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "gk"},{"type": "text","children": [],"string": " is a mxm matrix"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0, p0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial state estimate and error variance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "observations in the interval "},{"type": "literal","children": [],"string": "[t0,tf]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "y=[y0,y1,...,yf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "yk"},{"type": "text","children": [],"string": " is a column m-vector"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Smoothed state estimate "},{"type": "literal","children": [],"string": "xs= [xs0,xs1,...,xsf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "xsk"},{"type": "text","children": [],"string": " is a column n-vector"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ps"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Error covariance of smoothed estimate "},{"type": "literal","children": [],"string": "ps=[p0,p1,...,pf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "pk"},{"type": "text","children": [],"string": " is a nxn matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Filtered state estimate "},{"type": "literal","children": [],"string": "xf= [xf0,xf1,...,xff]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "xfk"},{"type": "text","children": [],"string": " is a column n-vector"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Error covariance of filtered estimate "},{"type": "literal","children": [],"string": "pf=[p0,p1,...,pf]"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "pk"},{"type": "text","children": [],"string": " is a nxn matrix"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"wigner": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "wigner"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "'time-frequency' wigner spectrum"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[tab]=wigner(x,h,deltat,zp)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tab"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "wigner spectrum (lines correspond to the time variable)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "analyzed signal"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "data window"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deltat"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "analysis time increment (in samples)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "length of FFT's. "},{"type": "literal","children": [],"string": "%pi/zp"},{"type": "text","children": [],"string": " gives the frequency increment."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"window": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "window"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compute symmetric window of various type"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["win_l=window('re',n)", "win_l=window('tr',n)", "win_l=window('hn',n)", "win_l=window('hm',n)", "win_l=window('kr',n,Beta)", "[win_l,cwp]=window('ch',n,par)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "window length"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "par"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "parameter 2-vector "},{"type": "literal","children": [],"string": "par=[dp,df])"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "dp"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "0<dp<.5"},{"type": "text","children": [],"string": ") rules the main lobe width and "},{"type": "literal","children": [],"string": "df"},{"type": "text","children": [],"string": " rules the side lobe height ("},{"type": "literal","children": [],"string": "df>0"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Only one of these two value should be specified, the other one must be equal to a nonpositive value."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Beta"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Kaiser window parameter "},{"type": "literal","children": [],"string": "Beta >0"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "window"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cwp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "unspecified Chebyshev window parameter"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["wfir", "frmag", "ffilt"]},"yulewalk": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "yulewalk"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "least-square filter design"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Hz = yulewalk(N,frq,mag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (order of desired filter)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real row vector (non-decreasing order), frequencies."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "non negative real row vector (same size as frq), desired magnitudes."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Hz"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "filter "},{"type": "literal","children": [],"string": "B(z)/A(z)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"zpbutt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zpbutt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Butterworth analog filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[pols,gain]=zpbutt(n,omegac)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (filter order)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real (cut-off angular frequency in radians per second)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting poles of filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gain"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting gain of filter"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"zpch1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zpch1"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Chebyshev analog filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[poles,gain]=zpch1(n,epsilon,omegac)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (filter order)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsilon"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real : ripple in the pass band ("},{"type": "literal","children": [],"string": "0<epsilon<1"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real : cut-off angular frequency in radians per second"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "poles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting filter poles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gain"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting filter gain"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"zpch2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zpch2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Chebyshev analog filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[zeros,poles,gain]=zpch2(n,A,omegar)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer : filter order"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real : attenuation in stop band ("},{"type": "literal","children": [],"string": "A>1"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real : cut-off angular frequency in radians per second"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zeros"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting filter zeros"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "poles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting filter poles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gain"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Resulting filter gain"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"zpell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zpell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lowpass elliptic filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[zeros,poles,gain]=zpell(epsilon,A,omegac,omegar)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsilon"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real : ripple of filter in pass band ("},{"type": "literal","children": [],"string": "0<epsilon<1"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real : attenuation of filter in stop band ("},{"type": "literal","children": [],"string": "A>1"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real : pass band cut-off angular frequency in radians per second"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "omegar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real : stop band cut-off angular frequency in radians per second"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zeros"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting zeros of filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "poles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting poles of filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gain"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting gain of filter"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ell1mag", "eqiir"]},"frfit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "frfit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency response fit"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sys=frfit(w,fresp,order)", "[num,den]=frfit(w,fresp,order)", "sys=frfit(w,fresp,order,weight)", "[num,den]=frfit(w,fresp,order,weight)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive real vector of frequencies (Hz)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fresp"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "complex vector of frequency responses (same size as "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer (required order, degree of "},{"type": "literal","children": [],"string": "den"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "weight"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "positive real vector (default value "},{"type": "literal","children": [],"string": "ones(w)"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num,den"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "stable polynomials"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["frep2tf", "factors", "cepstrum", "mrfit", "freq", "calfrq"]},"lattn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lattn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "recursive solution of normal equations"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[la,lb]=lattn(n,p,cov)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "maximum order of the filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fixed dimension of the MA part. If "},{"type": "literal","children": [],"string": "p= -1"},{"type": "text","children": [],"string": ", the algorithm reduces to the classical Levinson recursions."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cov"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "matrix containing the "},{"type": "literal","children": [],"string": "Rk"},{"type": "text","children": [],"string": "'s ("},{"type": "literal","children": [],"string": "d*d"},{"type": "text","children": [],"string": " matrices for a d-dimensional process).It must be given the following way"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "la"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list-type variable, giving the successively calculated polynomials (degree 1 to degree n),with coefficients Ak"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["levin", "lattp"]},"lattp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lattp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Identification of MA part of a vector ARMA process"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[la,lb]=lattp(n,p,cov)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "maximum order of the filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fixed dimension of the MA part. If "},{"type": "literal","children": [],"string": "p= -1"},{"type": "text","children": [],"string": ", the algorithm reduces to the classical Levinson recursions."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cov"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "matrix containing the "},{"type": "literal","children": [],"string": "Rk"},{"type": "text","children": [],"string": "'s ("},{"type": "literal","children": [],"string": "d*d"},{"type": "text","children": [],"string": " matrices for a d-dimensional process).It must be given the following way"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "la"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list-type variable, giving the successively calculated polynomials (degree 1 to degree p),with coefficients Ak"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["levin", "lattn"]},"mrfit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mrfit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency response fit"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sys=mrfit(w,mag,order)", "[num,den]=mrfit(w,mag,order)", "sys=mrfit(w,mag,order,weight)", "[num,den]=mrfit(w,mag,order,weight)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive real vector of frequencies (Hz)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector of frequency responses magnitude (same size as "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer (required order, degree of "},{"type": "literal","children": [],"string": "den"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "weight"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "positive real vector (default value "},{"type": "literal","children": [],"string": "ones(w)"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num,den"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "stable polynomials"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cepstrum", "frfit", "freq", "calfrq"]},"phc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "phc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Markovian representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[H,F,G]=phc(hk,d,r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hk"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "hankel matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dimension of the observation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "desired dimension of the state vector for the approximated model"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H, F, G"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "relevant matrices of the Markovian model"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "levin"},"rpem": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rpem"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Recursive Prediction-Error Minimization estimation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[w1,[v]]=rpem(w0,u0,y0,[lambda,[k,[c]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w0"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "list(theta,p,l,phi,psi)"},{"type": "text","children": [],"string": " where:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "[a,b,c] is a real vector of order "},{"type": "literal","children": [],"string": "3*n"}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "a,b,c"},{"type": "listitem","children": {"type": "para","children": {"type": "literal","children": [],"string": "a=[a(1),...,a(n)], b=[b(1),...,b(n)], c=[c(1),...,c(n)]"},"string": []},"string": []}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(3*n x 3*n) real matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi,psi,l"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector of dimension "},{"type": "literal","children": [],"string": "3*n"}],"string": []},"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Applicable values for the first call:"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector of inputs (arbitrary size). ("},{"type": "literal","children": [],"string": "u0($)"},{"type": "text","children": [],"string": " is not used by rpem)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y0"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vector of outputs (same dimension as "},{"type": "literal","children": [],"string": "u0"},{"type": "text","children": [],"string": "). ("},{"type": "literal","children": [],"string": "y0(1)"},{"type": "text","children": [],"string": " is not used by rpem)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the time domain is "},{"type": "literal","children": [],"string": "(t0,t0+k-1)"},{"type": "text","children": [],"string": " the "},{"type": "literal","children": [],"string": "u0"},{"type": "text","children": [],"string": " vector contains the inputs"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "u(t0),u(t0+1),..,u(t0+k-1)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "y0"},{"type": "text","children": [],"string": " the outputs"}],"string": []},{"type": "para","children": {"type": "literal","children": [],"string": "y(t0),y(t0+1),..,y(t0+k-1)"},"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"cepstrum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cepstrum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cepstrum calculation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fresp = cepstrum(w,mag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive real vector of frequencies (rad/sec)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector of magnitudes (same size as "},{"type": "literal","children": [],"string": "w"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fresp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "complex vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "frfit"},"cspect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cspect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "two sided cross-spectral estimate between 2 discrete time signals using the correlation method"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sm = cspect(nlags, npoints, wtype, x)", "sm = cspect(nlags, npoints, wtype, x, y)", "sm = cspect(nlags, npoints, wtype, nx)", "sm = cspect(nlags, npoints, wtype, nx, ny)", "[sm, cwp] = cspect(.., wpar)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector, the data of the first signal."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector, the data of the second signal. If "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " is omitted it is supposed to be equal to "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " (auto-correlation). If it is present, it must have the same number of element than "},{"type": "literal","children": [],"string": "x."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nx"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar : the number of points in the "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " signal. In this case the segments of the x signal are loaded by a user defined function named "},{"type": "literal","children": [],"string": "getx"},{"type": "text","children": [],"string": " (see below)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ny"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar : the number of points in the "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " signal. In this case the segments of the "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " signal are loaded by a user defined function named "},{"type": "literal","children": [],"string": "gety"},{"type": "text","children": [],"string": " (see below). If present "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " must be equal to "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nlags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of correlation lags (positive integer)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "npoints"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of transform points (positive integer)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wtype"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The window type"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'re'"},{"type": "text","children": [],"string": ": rectangular"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'tr'"},{"type": "text","children": [],"string": ": triangular"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'hm'"},{"type": "text","children": [],"string": ": Hamming"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'hn'"},{"type": "text","children": [],"string": ": Hann"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'kr'"},{"type": "text","children": [],"string": ": Kaiser, in this case the "},{"type": "literal","children": [],"string": "wpar"},{"type": "text","children": [],"string": " argument must be given"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'ch'"},{"type": "text","children": [],"string": ": Chebyshev, in this case the "},{"type": "literal","children": [],"string": "wpar"},{"type": "text","children": [],"string": " argument must be given"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wpar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "optional parameters for Kaiser and Chebyshev windows:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'kr': "},{"type": "literal","children": [],"string": "wpar"},{"type": "text","children": [],"string": " must be a strictly positive number"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'ch': "},{"type": "literal","children": [],"string": "wpar"},{"type": "text","children": [],"string": " must be a 2 element vector "},{"type": "literal","children": [],"string": " [main_lobe_width,side_lobe_height]"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "0<main_lobe_width<.5"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "side_lobe_height>0"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The power spectral estimate in the interval "},{"type": "literal","children": [],"string": "[0,1]"},{"type": "text","children": [],"string": " of the normalized frequencies. It is a row array of size "},{"type": "varname","children": [],"string": "npoints"},{"type": "text","children": [],"string": ". The array is real in case of auto-correlation and complex in case of cross-correlation."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cwp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the unspecified Chebyshev window parameter in case of Chebyshev windowing, or an empty matrix."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pspect", "mese", "corr"]},"czt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "czt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "chirp z-transform algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[czx]=czt(x,m,w,phi,a,theta)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "input data sequence"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "czt is evaluated at "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " points in z-plane"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "magnitude multiplier"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "phi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "phase increment"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial magnitude"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial phase"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "czx"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "chirp z-transform output"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"mese": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mese"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "maximum entropy spectral estimation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[sm,fr]=mese(x [,npts]);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Input sampled data sequence"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "npts"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Optional parameter giving number of points of "},{"type": "literal","children": [],"string": "fr"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "sm"},{"type": "text","children": [],"string": " (default is 256)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Samples of spectral estimate on the frequency grid "},{"type": "literal","children": [],"string": "fr"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "npts equally spaced frequency samples in "},{"type": "literal","children": [],"string": "[0,.5)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"pspect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pspect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "two sided cross-spectral estimate between 2 discrete time signals using the Welch's average periodogram method."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sm = pspect(sec_step, sec_leng, wtype, x)", "sm = pspect(sec_step, sec_leng, wtype, x, y)", "sm = pspect(sec_step, sec_leng, wtype, nx)", "sm = pspect(sec_step, sec_leng, wtype, nx, ny)", "[sm, cwp] = pspect(.., wpar)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector, the time-domain samples of the first signal."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector, the time-domain samples of the second signal. If "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " is omitted it is supposed to be equal to "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " (auto-correlation). If it is present, it must have the same number of element than "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nx"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar : the number of samples in the "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " signal. In this case the segments of the "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " signal are loaded by a user defined function named "},{"type": "literal","children": [],"string": "getx"},{"type": "text","children": [],"string": " (see below)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ny"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar : the number of samples in the "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " signal. In this case the segments of the y signal are loaded by a user defined function named "},{"type": "literal","children": [],"string": "gety"},{"type": "text","children": [],"string": " (see below). If present "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " must be equal to "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sec_step"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "offset of each data window. The overlap "},{"type": "literal","children": [],"string": "D"},{"type": "text","children": [],"string": " is given by "},{"type": "literal","children": [],"string": "sec_leng - sec_step"},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "sec_step == sec_leng/2"},{"type": "text","children": [],"string": " 50% overlap is made."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sec_leng"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Number of points of the window."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wtype"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The window type"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'re'"},{"type": "text","children": [],"string": ": rectangular"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'tr'"},{"type": "text","children": [],"string": ": triangular"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'hm'"},{"type": "text","children": [],"string": ": Hamming"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'hn'"},{"type": "text","children": [],"string": ": Hann"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'kr'"},{"type": "text","children": [],"string": ": Kaiser,in this case the wpar argument must be given"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'ch'"},{"type": "text","children": [],"string": ": Chebyshev, in this case the wpar argument must be given"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wpar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "optional parameters for Kaiser and Chebyshev windows:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'kr': "},{"type": "literal","children": [],"string": "wpar"},{"type": "text","children": [],"string": " must be a strictly positive number"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'ch': "},{"type": "literal","children": [],"string": "wpar"},{"type": "text","children": [],"string": " must be a 2 element vector "},{"type": "literal","children": [],"string": " [main_lobe_width,side_lobe_height]"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "0<main_lobe_width<.5"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "side_lobe_height>0"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sm"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Two sided power spectral estimate in the interval "},{"type": "literal","children": [],"string": "[0,1]"},{"type": "text","children": [],"string": " of the normalized frequencies. It is a row array with "},{"type": "literal","children": [],"string": "sec_len"},{"type": "text","children": [],"string": " elements. The array is real in case of auto-correlation and complex in case of cross-correlation."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The associated normalized frequencies array is "},{"type": "literal","children": [],"string": "linspace(0,1,sec_len)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cwp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the unspecified Chebyshev window parameter in case of Chebyshev windowing, or an empty matrix."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cspect", "pspect", "mese", "window"]},"dct": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "dct"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "idct"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete cosine transform."},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse discrete cosine transform."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["X = dct(A)", "X = dct(A, sign)", "X = dct(A, sign, selection)", "X = dct(A, sign, dims, incr)", "X = dct(.., option)", "X = idct(A)", "X = idct(A, selection)", "X = idct(A, dims, incr)", "X = idct(.., option)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector or real or complex array (vector, matrix or N-D array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real or complex array with same shape as "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sign"},{"type": "listitem","children": [{"type": "text","children": [],"string": "an integer. with possible values "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": ". Select direct or inverse transform. The default value is "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " (direct transform)."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "selection"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector containing index on "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " array dimensions. See the Description part for details."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector of positive numbers with integer values, or a vector of positive integers. See the Description part for details. "},{"type": "para","children": [{"type": "text","children": [],"string": "Each element must be a divisor of the total number of elements of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "The product of the elements must be less than the total number of elements of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "incr"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector of positive numbers with integer values, or a vector of positive integers. See the Description part for details. "},{"type": "para","children": [{"type": "literal","children": [],"string": "incr"},{"type": "text","children": [],"string": " must have the same number of elements than "},{"type": "literal","children": [],"string": "dims"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "Each element must be a divisor of the total number of elements of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "incr"},{"type": "text","children": [],"string": " elements must be in strictly increasing order."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "option"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a character string. with possible values "},{"type": "literal","children": [],"string": "\"dct1\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dct2\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dct4\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"dct\""},{"type": "text","children": [],"string": " for direct transform and "},{"type": "literal","children": [],"string": "\"dct1\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dct3\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dct4\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"idct\""},{"type": "text","children": [],"string": " for inverse transform. The default value is "},{"type": "literal","children": [],"string": "\"dct\""},{"type": "text","children": [],"string": " for direct transform and "},{"type": "literal","children": [],"string": "\"idct\""},{"type": "text","children": [],"string": " for inverse transform. See the Description part for details."}],"string": []}],"string": []}],"string": []},"seealso": ["fft", "dst", "fftw_flags", "get_fftw_wisdom", "set_fftw_wisdom", "fftw_forget_wisdom"]},"dst": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "dst"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "idst"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete sine transform."},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse discrete sine transform."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["X=dst(A [,sign] [,option])", "X=dst(A,sign,selection [,option])", "X=dst(A,sign,dims,incr [,option])", "X=idst(A [,option])", "X=idst(A,selection [,option])", "X=idst(A,dims,incr [,option])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex vector or real or complex array (vector, matrix or N-D array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real or complex array with same shape as "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sign"},{"type": "listitem","children": [{"type": "text","children": [],"string": "an integer. with possible values "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": ". Select direct or inverse transform. The default value is "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " (direct transform)."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "selection"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector containing index on "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " array dimensions. See the Description part for details."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector of positive numbers with integer values, or a vector of positive integers. See the Description part for details. "},{"type": "para","children": [{"type": "text","children": [],"string": "Each element must be a divisor of the total number of elements of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "The product of the elements must be less than the total number of elements of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "incr"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector of positive numbers with integer values, or a vector of positive integers. See the Description part for details. "},{"type": "para","children": [{"type": "literal","children": [],"string": "incr"},{"type": "text","children": [],"string": " must have the same number of elements than "},{"type": "literal","children": [],"string": "dims"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "Each element must be a divisor of the total number of elements of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "incr"},{"type": "text","children": [],"string": " elements must be in strictly increasing order."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "option"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a character string. with possible values "},{"type": "literal","children": [],"string": "\"dst1\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dst2\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dst4\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"dst\""},{"type": "text","children": [],"string": " for direct transform and "},{"type": "literal","children": [],"string": "\"dst1\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dst3\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"dst4\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"idst\""},{"type": "text","children": [],"string": " for inverse transform. The default value is "},{"type": "literal","children": [],"string": "\"dst\""},{"type": "text","children": [],"string": " for direct transform and "},{"type": "literal","children": [],"string": "\"idst\""},{"type": "text","children": [],"string": " for inverse transform. See the Description part for details."}],"string": []}],"string": []}],"string": []},"seealso": ["fft", "dct", "fftw_flags", "get_fftw_wisdom", "set_fftw_wisdom", "fftw_forget_wisdom"]},"fft": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "fft"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "ifft"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "Direct or inverse Fast Fourier Transform of a vector, matrix, or hypermatrix"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse fast Fourier transform."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["X = fft(A)", "X = fft(A, sign)", "X = fft(A, sign, directions)", "X = fft(A, sign, dims, incr)", "X = fft(.., symmetry)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A, X"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vectors, matrices or ND-arrays of real or complex numbers, of same sizes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sign"},{"type": "listitem","children": [{"type": "text","children": [],"string": "-1 or 1 : sign of the ±2iπ factor in the exponential term of the transform formula, setting the direct or inverse transform. The default value is "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " = Direct transform. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "directions"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector containing indices of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " dimensions (in [1, ndims(A)]) along which the (multidirectional) FFT must be computed. Default directions=1:ndims(A): The \"cumulated\" FFT is computed for all directions. See the Description section. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "symmetry"},{"type": "listitem","children": [{"type": "text","children": [],"string": "optional character string, helping fft() to choose the best algorithm: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "\"symmetric\""},{"type": "text","children": [],"string": ": forces to consider "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or all its \"slices\" as conjugate symmetric. This is useful when an exact symmetry of "},{"type": "varname","children": [],"string": "A"},{"type": "text","children": [],"string": " or its \"slices\" is possibly altered only by round-off errors. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " A ND-array "},{"type": "literal","children": [],"string": "B"},{"type": "text","children": [],"string": " of sizes "},{"type": "literal","children": [],"string": "[s1,s2,..,sN]"},{"type": "text","children": [],"string": " is conjugate symmetric for the FFT if and only if "},{"type": "literal","children": [],"string": "B==conj(B([1 s1:-1:2],[1 s2:-1:2],...,[1 sN:-1:2]))"},{"type": "text","children": [],"string": ". In such a case, the result "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": " is real, and an efficient specific algorithm can be used to compute it. "},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "\"nonsymmetric\""},{"type": "text","children": [],"string": ": Then fft() does not take care of any symmetry. "},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "not specified: Then an automatic determination of symmetry is performed. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of positive integers. Old syntax. Each element must be a divisor of length(A). The product of the elements must be strictly smaller than length(A). See the Description section for details. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "incr"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of positive strictly increasing integers, as long as "},{"type": "varname","children": [],"string": "dims"},{"type": "text","children": [],"string": ". Old syntax. Each element must be a divisor of length(A). See the Description section for details. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["corr", "fftw_flags", "get_fftw_wisdom", "set_fftw_wisdom", "fftw_forget_wisdom"]},"fft2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fft2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "two-dimension fast Fourier transform"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=fft2(x)", "y=fft2(x,n,m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector/matrix/array (Real or Complex)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector/matrix/array (Real or Complex)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, number of rows."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, number of columns."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "fft"},"fftshift": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fftshift"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "rearranges the fft output, moving the zero frequency to the center of the spectrum"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = fftshift(x)", "y = fftshift(x, along)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vectors, matrices or hypermatrices, of same sizes."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "along"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 | \"r\" | 2 | \"c\" | 0<along<=ndims(x): dimension along which halves are switched."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ifftshift", "flipdim", "circshift", "fft"]},"hilb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hilb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "FIR approximation to a Hilbert transform filter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xh=hilb(n [,wtype [,par]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "odd integer : number of points in filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wtype"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string : window type "},{"type": "literal","children": [],"string": "('re','tr','hn','hm','kr','ch')"},{"type": "text","children": [],"string": " (default "},{"type": "literal","children": [],"string": "='re'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "par"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "window parameter for "},{"type": "literal","children": [],"string": "wtype='kr' or 'ch'"},{"type": "text","children": [],"string": " default "},{"type": "literal","children": [],"string": "par=[0 0]"},{"type": "text","children": [],"string": " see the function window for more help"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Hilbert transform"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["window", "hilbert"]},"ifftshift": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ifftshift"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inverse of fftshift"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = ifftshift(x)", "y = ifftshift(x, along)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vectors, matrices or hypermatrices of same sizes and types."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "along"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 | \"r\" | 2 | \"c\" | 0<along<=ndims(x): dimension along which halves are switched."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["fftshift", "fft", "flipdim"]},"fftw_flags": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fftw_flags"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set method for fft planner algorithm selection"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[a,[S]]=fftw_flags(flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string or an integer. Specifies the planner algorithm. See below."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer. The planner code. See below."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string. The planner name."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["fft", "set_fftw_wisdom", "get_fftw_wisdom", "fftw_forget_wisdom"]},"fftw_forget_wisdom": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fftw_forget_wisdom"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Reset fftw wisdom"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fftw_forget_wisdom()"},"varlist": [],"seealso": ["get_fftw_wisdom", "set_fftw_wisdom"]},"get_fftw_wisdom": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "get_fftw_wisdom"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "return fftw wisdom"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[txt]=get_fftw_wisdom()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String matrix that contains fftw wisdom."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["fft", "set_fftw_wisdom", "fftw_forget_wisdom"]},"set_fftw_wisdom": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "set_fftw_wisdom"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set fftw wisdom"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "set_fftw_wisdom(txt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String matrix that contains fftw wisdom."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["get_fftw_wisdom", "fftw_forget_wisdom"]},"percentk": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%k"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Jacobi's complete elliptic integral of the first kind (vectorized)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "K = %k(m)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of real numbers in [-∞,1): parameter of the elliptic integral."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of respective values of the integral."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["delip", "ellipj"]},"airy": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "airy"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Airy functions of the first and second kind, and their derivatives"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["a = airy(z)", "a = airy(fun, z)", "a = airy(fun, z, scaled)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "text","children": [],"string": "array of decimal or complex numbers of any size, from scalr to hypermatrix."},"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Selected Airy function to evaluate. It can be either a string among \"Ai\" \"dAi\" \"Bi\" \"dBi\", or an equivalent integer in [0, 3] (for compatibility with Octave and Julia) "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scaled"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Single boolean or integer 0|1. Default %F. When "},{"type": "varname","children": [],"string": "scaled"},{"type": "text","children": [],"string": " is %T or set to 1, the raw result is scaled by the following factors before being returned: "}],"string": []}],"string": []}],"string": []},"seealso": ["besseli", "besselj", "gamma"]},"amell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "amell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função \"am\" de Jacobi"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[sn]=amell(u,k)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou vetor de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou vetor de reais"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["delip", "ellipj", "percentk"]},"bessel": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "besseli"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "besselj"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "besselk"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "bessely"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "besselh"},"string": []}],"refpurpose": [{"type": "refpurpose","children": [{"type": "text","children": [],"string": "funções modificadas de Bessel do primeiro tipo (I"},{"type": "subscript","children": [],"string": "α"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "refpurpose","children": [{"type": "text","children": [],"string": "funções de Bessel do primeiro tipo (J"},{"type": "subscript","children": [],"string": "α"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "refpurpose","children": [{"type": "text","children": [],"string": "funções modificadas de Bessel do segundo tipo (K"},{"type": "subscript","children": [],"string": "α"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "refpurpose","children": [{"type": "text","children": [],"string": "funções de Bessel do segundo tipo (Y"},{"type": "subscript","children": [],"string": "α"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "funções de Bessel do terceiro tipo (também conhecidas como funções de Hankel)"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["y = besseli(alpha, x [,ice])", "y = besselj(alpha, x [,ice])", "y = besselk(alpha, x [,ice])", "y = bessely(alpha, x [,ice])", "y = besselh(alpha, x)", "y = besselh(alpha, K, x [,ice])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ice"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "flag (sinalizador) inteiro, com valor padrão 0 "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, com valores possíveis 1 ou 2, a função do tipo de Hankel."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"beta": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "beta"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função beta"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "z = beta(x,y)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois reais positivos ou duas matrizes (ou vetores) de reais positivos de mesmo tamanho"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um real ou uma matriz de reais com mesmo tamanho que "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " com "},{"type": "literal","children": [],"string": "z(i,j) = beta(x(i,j),y(i,j)) "},{"type": "text","children": [],"string": " ."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["gamma", "cdfbet"]},"calerf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "calerf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa funções de erro"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = calerf(x, erfType)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "erfType"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro: "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz ou vetor de reais (de mesmo tamanho que x)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["erf", "erfc", "erfcx"]},"dawson": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dawson"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compute the Dawson (scaled imaginary error) function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = dawson(z)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "text","children": [],"string": "vector or matrix of real or complex numbers"},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "text","children": [],"string": "vector or matrix of real or complex numbers (of same size than x)."},"string": []}],"string": []}],"string": []},"seealso": ["erf", "erfc", "calerf"]},"delip": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "delip"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Integral elíptica"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = delip(x, ck)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor real com elementos não-negativos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ck"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real entre -1 e 1 "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "número real ou complexo ou vetor de reais ou complexos com mesmo tamanho que "},{"type": "literal","children": [],"string": "x"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"dlgamma": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dlgamma"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "derivada da função gammaln, função psi"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = dlgamma(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais com o mesmo tamanho"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["gamma", "gammaln"]},"ellipj": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ellipj"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Jacobi elliptic functions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sn = ellipj(x, m)", "[sn, cn] = ellipj(x, m)", "[sn, cn, dn] = ellipj(x, m)", "struc = ellipj(funames, x, m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of real or complex numbers inside the fundamental rectangle defined by the elliptic integral. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar decimal number in "},{"type": "literal","children": [],"string": "[0,1]"},{"type": "text","children": [],"string": ": Parameter of the elliptic integral. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sn, cn, dn"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Arrays of real or complex numbers, of the size of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ": the x-element-wise values of the sn, cn and dn Jacobi elliptic functions. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funames"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of case-sensitive keywords among "},{"type": "literal","children": [],"string": "\"cn\", \"dn\", \"sn\", \"nc\", \"nd\", \"ns\""},{"type": "text","children": [],"string": ": Name(s) of Jacobi elliptic functions whose values must be computed and returned. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "struc"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Structure with fields named with the elements of "},{"type": "varname","children": [],"string": "funames"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["amell", "delip", "percentk"]},"erf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "erf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função de erro "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = erf(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais (de mesmo tamanho que x)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["calerf", "cdfnor", "erfc", "erfcx", "erfinv"]},"erfc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "erfc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função de erro complementar "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = erfc(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector or matrix (of same size than x)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["erf", "erfcx", "calerf"]},"erfcx": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "erfcx"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função de erro complementar escalada "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = erfcx(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais (de mesmo tamanho que x)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["erf", "erfc", "calerf"]},"erfi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "erfi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The imaginary error function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = erfi(z)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix (of same size than x)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["erf", "erfcx", "erfc", "calerf"]},"erfinv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "erfinv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função inversa à função de erro"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = erfinv(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais (de mesmo tamanho que x)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"findm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "for elliptic filter design"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[m]=findm(chi)"},"varlist": [],"seealso": "percentk"},"gamma": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gamma"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gamma function, complete or incomplete normalized"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = gamma(u)", "y = gamma(x, a)", "y = gamma(x, a, b)", "y = gamma(x, .., \"upper\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": [{"type": "text","children": [],"string": "array of positive or negative real numbers "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "gamma(u)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "gamma(x,…)"},{"type": "text","children": [],"string": " can be overloaded for complex numbers with "},{"type": "literal","children": [],"string": "%s_gamma_user()"},{"type": "text","children": [],"string": ", and for other "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " types with the usual overload naming rule. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, a, b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "arrays of positive real numbers. If at least one input is not scalar, scalar ones are expanded to its size. If several inputs are not scalar, they must have the same size. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "array of real numbers, with the size of "},{"type": "varname","children": [],"string": "u"},{"type": "text","children": [],"string": " or of (the non-scalar) "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": ", or "},{"type": "varname","children": [],"string": "b"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["gammaln", "dlgamma", "cdfgam", "factorial"]},"gammaln": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gammaln"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "o logaritmo (natural) da função gama "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y = gammaln(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais com o mesmo tamanho"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["gamma", "dlgamma"]},"legendre": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "legendre"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "funções associadas de Legendre"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = legendre(n, m, x)", "y = legendre(n, m, x, normflag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro não-negativo ou vetor de inteiros não-negativos igualmente espaçados com incremento igual a 1"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro não-negativo ou vetor de inteiros não-negativos igualmente espaçados com incremento igual a 1"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor (linha) de reais (os elementos de "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " devem estar no intervalo "},{"type": "literal","children": [],"string": "(-1,1)"},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "normflag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) escalar string "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"sinc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sinc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função sinc (seno cardinal)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t=sinc(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor ou matriz de reais ou complexos "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["filt_sinc", "sincd", "sin"]},"sincd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sincd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "digital sinc function or Dirichlet kernel"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[s]=sincd(n,flag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "flag = 1"},{"type": "text","children": [],"string": " the function is centred around the origin; if "},{"type": "literal","children": [],"string": "flag = 2"},{"type": "text","children": [],"string": " the function is delayed by "},{"type": "literal","children": [],"string": "%pi/(2*n)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of values of the function on a dense grid of frequencies"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sinc", "filt_sinc", "sin"]},"kmeans": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kmeans"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "K-means clustering"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["idx = kmeans(X, k)", "[idx, c] = kmeans(X, k)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is a nxp (n observations, p variables) real matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive integer. It corresponds to number of clusters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "idx"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer column vector. It corresponds to clusters indices."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a k x p real matrix containing to cluster centroid locations."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "pca"},"polyfit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polyfit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Polynomial curve fitting"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["p = polyfit(x, y, n)", "[p, S] = polyfit(x, y, n)", "[p, S, mu] = polyfit(x, y, n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector/matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real or complex vector/matrix. "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " must have the same size as "},{"type": "literal","children": [],"string": "x"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an integer, n>=0. It is a degree of the fitting polynomial. Or a polynom.  In the case, "},{"type": "literal","children": [],"string": "polyfit"},{"type": "text","children": [],"string": " extracts the degree of polynom and returns a polynom containing the coefficients."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "varname","children": [],"string": "1"},{"type": "text","children": [],"string": " x "},{"type": "varname","children": [],"string": "n+1"},{"type": "text","children": [],"string": " real or complex vector or polynom, the polynomial coefficients"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a structure containing the following fields:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix of doubles, the triangular factor R form the "},{"type": "link","children": [],"string": "qr"},{"type": "text","children": [],"string": " decomposition"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "df"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real, the degrees of freedom"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "normr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real, the norm of the residuals"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mu"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "varname","children": [],"string": "1"},{"type": "text","children": [],"string": " x "},{"type": "varname","children": [],"string": "2"},{"type": "text","children": [],"string": " vector. "},{"type": "literal","children": [],"string": "mu(1)"},{"type": "text","children": [],"string": " is  "},{"type": "literal","children": [],"string": "mean(x)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "mu(2)"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "stdev(x)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["vander", "polyval"]},"polyval": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polyval"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "evaluates the polynomial for given values"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = polyval(p, x)", "y = polyval(p, x, [], mu)", "[y, d] = polyval(p, x, S)", "[y, d] = polyval(p, x, S, mu)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of doubles or polynom, the polynomial coefficients"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector/matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a structure (second output of "},{"type": "link","children": [],"string": "polyfit"},{"type": "text","children": [],"string": ") containing the following fields:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix of doubles, the triangular factor R form the "},{"type": "link","children": [],"string": "qr"},{"type": "text","children": [],"string": " decomposition"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "df"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real, the degrees of freedom"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "normr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real, the norm of the residuals"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mu"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "varname","children": [],"string": "1"},{"type": "text","children": [],"string": " x "},{"type": "varname","children": [],"string": "2"},{"type": "text","children": [],"string": " vector  (third output of "},{"type": "link","children": [],"string": "polyfit"},{"type": "text","children": [],"string": "). "},{"type": "literal","children": [],"string": "mu(1)"},{"type": "text","children": [],"string": " is  "},{"type": "literal","children": [],"string": "mean(x)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "mu(2)"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "stdev(x)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a real or complex vector/matrix, the result of the polynomial evaluated at "},{"type": "literal","children": [],"string": "x"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of the same size as "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ", the standard error for prediction"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["vander", "polyfit"]},"binomial": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "binomial"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "probabilidades de distribuição binomial"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pr = binomial(p, n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha com n+1 componentes "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real em [0,1] "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro >= 1"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbin", "grand"]},"cdfbet": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfbet"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function Beta distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfbet(\"PQ\",X,Y,A,B)", "[X,Y]=cdfbet(\"XY\",A,B,P,Q)", "[A]=cdfbet(\"A\",B,P,Q,X,Y)", "[B]=cdfbet(\"B\",P,Q,X,Y,A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,X,Y,A,B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "five real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from 0 to X of the beta distribution (Input range: [0, 1].)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1-P"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X,Y (Y=1-X)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Upper limit of integration of beta density (Input range: [0,1],  Search range: [0,1]) A,B : The two parameters of the beta density (input range: (0, +infinity), Search range: [1D-300,1D300] )"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbin", "cdfchi", "cdfchn", "cdff", "cdffnc", "cdfgam", "cdfnbn", "cdfnor", "cdfpoi", "cdft"]},"cdfbin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfbin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function Binomial distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfbin(\"PQ\",S,Xn,Pr,Ompr)", "[S]=cdfbin(\"S\",Xn,Pr,Ompr,P,Q)", "[Xn]=cdfbin(\"Xn\",Pr,Ompr,P,Q,S)", "[Pr,Ompr]=cdfbin(\"PrOmpr\",P,Q,S,Xn)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,S,Xn,Pr,Ompr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "six real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The cumulation from 0 to S of the binomial distribution. (Probability of S or fewer successes in XN trials each with probability of success PR.) Input range: [0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The number of successes observed. Input range: [0, XN] Search range: [0, XN]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Xn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The number of binomial trials. Input range: (0, +infinity). Search range: [1E-300, 1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pr,Ompr (Ompr=1-Pr)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The probability of success in each binomial trial. Input range: [0,1]. Search range: [0,1]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfchi", "cdfchn", "cdff", "cdffnc", "cdfgam", "cdfnbn", "cdfnor", "cdfpoi", "cdft"]},"cdfchi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfchi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function chi-square distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfchi(\"PQ\",X,Df)", "[X]=cdfchi(\"X\",Df,P,Q);", "[Df]=cdfchi(\"Df\",P,Q,X)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,Xn,Df"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "four real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from 0 to X of the chi-square distribution. Input range: [0, 1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Upper limit of integration of the non-central chi-square distribution. Input range: [0, +infinity). Search range: [0,1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Df"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Degrees of freedom of the chi-square distribution. Input range: (0, +infinity). Search range: [ 1E-300, 1E300]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchn", "cdff", "cdffnc", "cdfgam", "cdfnbn", "cdfnor", "cdfpoi", "cdft"]},"cdfchn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfchn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function  non-central chi-square distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfchn(\"PQ\",X,Df,Pnonc)", "[X]=cdfchn(\"X\",Df,Pnonc,P,Q);", "[Df]=cdfchn(\"Df\",Pnonc,P,Q,X)", "[Pnonc]=cdfchn(\"Pnonc\",P,Q,X,Df)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,X,Df,Pnonc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "five real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from 0 to X of the non-central chi-square distribution. Input range: [0, 1-1E-16)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Upper limit of integration of the non-central chi-square distribution. Input range: [0, +infinity). Search range: [0,1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Df"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Degrees of freedom of the non-central chi-square distribution. Input range: (0, +infinity). Search range: [ 1E-300, 1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pnonc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Non-centrality parameter of the non-central chi-square distribution. Input range: [0, +infinity). Search range: [0,1E4]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdff", "cdffnc", "cdfgam", "cdfnbn", "cdfnor", "cdfpoi", "cdft"]},"cdff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function Fisher distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdff(\"PQ\",F,Dfn,Dfd)", "[F]=cdff(\"F\",Dfn,Dfd,P,Q);", "[Dfn]=cdff(\"Dfn\",Dfd,P,Q,F);", "[Dfd]=cdff(\"Dfd\",P,Q,F,Dfn)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,F,Dfn,Dfd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "five real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from 0 to F of the f-density. Input range: [0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Upper limit of integration of the f-density. Input range: [0, +infinity). Search range: [0,1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Dfn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Degrees of freedom of the numerator sum of squares. Input range: (0, +infinity). Search range: [ 1E-300, 1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Dfd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Degrees of freedom of the denominator sum of squares. Input range: (0, +infinity). Search range: [ 1E-300, 1E300]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdfchn", "cdffnc", "cdfgam", "cdfnbn", "cdfnor", "cdfpoi", "cdft"]},"cdffnc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdffnc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function non-central f-distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdffnc(\"PQ\",F,Dfn,Dfd,Pnonc)", "[F]=cdffnc(\"F\",Dfn,Dfd,Pnonc,P,Q);", "[Dfn]=cdffnc(\"Dfn\",Dfd,Pnonc,P,Q,F);", "[Dfd]=cdffnc(\"Dfd\",Pnonc,P,Q,F,Dfn)", "[Pnonc]=cdffnc(\"Pnonc\",P,Q,F,Dfn,Dfd);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,F,Dfn,Dfd,Pnonc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "six real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from 0 to F of the non-central f-density. Input range: [0,1-1E-16)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Upper limit of integration of the non-central f-density. Input range: [0, +infinity). Search range: [0,1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Dfn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Degrees of freedom of the numerator sum of squares. Input range: (0, +infinity). Search range: [ 1E-300, 1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Dfd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Degrees of freedom of the denominator sum of squares. Must be in range: (0, +infinity). Input range: (0, +infinity). Search range: [ 1E-300, 1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pnonc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The non-centrality parameter Input range: [0,infinity) Search range: [0,1E4]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdfchn", "cdff", "cdfgam", "cdfnbn", "cdfnor", "cdfpoi", "cdft"]},"cdfgam": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfgam"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function gamma distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfgam(\"PQ\",X,Shape,Rate)", "[X]=cdfgam(\"X\",Shape,Rate,P,Q)", "[Shape]=cdfgam(\"Shape\",Rate,P,Q,X)", "[Rate]=cdfgam(\"Rate\",P,Q,X,Shape)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,X,Shape,Rate"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "five real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from 0 to X of the gamma density. Input range: [0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The upper limit of integration of the gamma density. Input range: [0, +infinity). Search range: [0,1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Shape"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The shape parameter of the gamma density. Input range: (0, +infinity). Search range: [1E-300,1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Rate"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The rate parameter of the gamma density. Input range: (0, +infinity). Search range: (1E-300,1E300]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdfchn", "cdff", "cdffnc", "cdfnbn", "cdfnor", "cdfpoi", "cdft"]},"cdfnbn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfnbn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function  negative binomial distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfnbn(\"PQ\",S,Xn,Pr,Ompr)", "[S]=cdfnbn(\"S\",Xn,Pr,Ompr,P,Q)", "[Xn]=cdfnbn(\"Xn\",Pr,Ompr,P,Q,S)", "[Pr,Ompr]=cdfnbn(\"PrOmpr\",P,Q,S,Xn)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,S,Xn,Pr,Ompr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "six real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The cumulation from 0 to S of the  negative binomial distribution. Input range: [0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The upper limit of cumulation of the binomial distribution. There are F or fewer failures before the XNth success. Input range: [0, +infinity). Search range: [0, 1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Xn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The number of successes. Input range: [0, +infinity). Search range: [0, 1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The probability of success in each binomial trial. Input range: [0,1]. Search range: [0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ompr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1-PR Input range: [0,1]. Search range: [0,1] PR + OMPR = 1.0"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdfchn", "cdff", "cdffnc", "cdfgam", "cdfnor", "cdfpoi", "cdft"]},"cdfnor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfnor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function normal distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfnor(\"PQ\",X,Mean,Std)", "X=cdfnor(\"X\",Mean,Std,P,Q)", "Mean=cdfnor(\"Mean\",Std,P,Q,X)", "Std=cdfnor(\"Std\",P,Q,X,Mean)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,X,Mean,Std"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of doubles of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from -infinity to X of the normal density. Input range: (0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Upper limit of integration of the normal-density. Input range: ( -infinity, +infinity)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mean"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The mean of the normal density. Input range: (-infinity, +infinity)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Standard Deviation of the normal density. Input range: (0, +infinity)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdfchn", "cdff", "cdffnc", "cdfgam", "cdfnbn", "cdfpoi", "cdft"]},"cdfpoi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdfpoi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function poisson distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdfpoi(\"PQ\",S,Xlam)", "[S]=cdfpoi(\"S\",Xlam,P,Q)", "[Xlam]=cdfpoi(\"Xlam\",P,Q,S);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,S,Xlam"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "four real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The cumulation from 0 to S of the poisson density. Input range: [0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of integers. Upper limit of cumulation of the Poisson. Input range: [0, +infinity). Search range: [0,1E300]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Xlam"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Mean of the Poisson distribution. Input range: [0, +infinity). Search range: [0,1E300]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdfchn", "cdff", "cdffnc", "cdfgam", "cdfnbn", "cdfnor", "cdft"]},"cdft": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cdft"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cumulative distribution function Student's T distribution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[P,Q]=cdft(\"PQ\",T,Df)", "[T]=cdft(\"T\",Df,P,Q)", "[Df]=cdft(\"Df\",P,Q,T)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q,T,Df"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "six real vectors of the same size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P,Q (Q=1-P)  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The integral from -infinity to t of the t-density. Input range: (0,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Upper limit of integration of the t-density. Input range: ( -infinity, +infinity). Search range: [ -1E150, 1E150 ]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Df"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Degrees of freedom of the t-distribution. Input range: (0 , +infinity). Search range: [1e-300, 1E10]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cdfbet", "cdfbin", "cdfchi", "cdfchn", "cdff", "cdffnc", "cdfgam", "cdfnbn", "cdfnor", "cdfpoi"]},"center": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "center"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "center"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s = center(x)", "s = center(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the center is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "wcenter"},"geomean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "geomean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "geometric mean"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["gm = geomean(X)", "GM = geomean(X, orien)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vector, matrix or hypermatrix of real or complex numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orien"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Dimension accross which the geometric average is computed. The value must be among "},{"type": "literal","children": [],"string": "'*' (default value), 'r', 1, 'c', 2, .. ndims(X)"},{"type": "text","children": [],"string": ". Values "},{"type": "literal","children": [],"string": "'r'"},{"type": "text","children": [],"string": " (rows) and "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " are equivalent, as "},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " (columns) and "},{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " are."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Scalar number: the geometric mean "},{"type": "literal","children": [],"string": "gm = prod(X)^(1/N)"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "N = length(X)"},{"type": "text","children": [],"string": " is the number of components in "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "GM"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vector, matrix or hypermatrix of numbers. "},{"type": "literal","children": [],"string": "s = size(GM)"},{"type": "text","children": [],"string": " is equal to "},{"type": "literal","children": [],"string": "size(X)"},{"type": "text","children": [],"string": ", except that "},{"type": "literal","children": [],"string": "s(orien)"},{"type": "text","children": [],"string": " is set to 1 (due to the projected application of geomean() over components along the orien dimension)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " is a matrix, we have: "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "literal","children": [],"string": "GM = geomean(X,1)  =>  GM(1,j) = geomean(X(:,j))"},"string": []},{"type": "listitem","children": {"type": "literal","children": [],"string": "GM = geomean(X,2)  =>  GM(i,1) = geomean(X(i,:))"},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["prod", "harmean"]},"harmean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "harmean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "harmonic mean : inverse of the inverses average (without zeros)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["hm = harmean(x)", "hm = harmean(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector, matrix, or hypermatrix of real or complex numbers or polynomials. Rationals not supported."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the harmean is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"m\""},{"type": "text","children": [],"string": ". \"m\" is equivalent to "},{"type": "literal","children": [],"string": "find(size(x)>1,1)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hm"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar, or row (if "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " is used), or column (if "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " is used). If "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " are polynomials, "},{"type": "varname","children": [],"string": "hm"},{"type": "text","children": [],"string": " is of rational type."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mean", "geomean"]},"mean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mean of all values, or means along a given dimension"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = mean(x)", "y = mean(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vector, matrix, or hypermatrix of real or complex numbers. Sparse matrices accepted. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the mean is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"m\""},{"type": "text","children": [],"string": ". \"m\" is equivalent to "},{"type": "literal","children": [],"string": "find(size(x)>1,1)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "dense scalar if "},{"type": "varname","children": [],"string": "orientation"},{"type": "text","children": [],"string": " is not used or if "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " is a scalar. Otherwise, array such that "},{"type": "literal","children": [],"string": "size(y,orientation)"},{"type": "text","children": [],"string": " is 1 (sparse-encoded if "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " is so)."}],"string": []}],"string": []}],"string": []},"seealso": ["sum", "median", "stdev"]},"meanf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "meanf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "weighted mean of a vector or a matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["m = meanf(x, fre, [orien])", "m = meanf(x, fre, 'r') or m = meanf(x, fre, 1)", "m = meanf(x, fre, 'c') or m = meanf(x, fre, 2)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A real or complex, full or sparse matrix, or an integer matrix, or an hypermatrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fre "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A real or complex, full or sparse matrix, or an integer matrix, or an hypermatrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orien "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The orientation of the computation. Valid values are"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1 or \"r\": result is a row, after a column-wise computation."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 or \"c\": result is a column, after a row-wise computation."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"*\": full undirectional computation."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The mean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mean", "stdevf", "variancef"]},"median": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "median"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "median (row median, column median,...) of vector/matrix/array entries"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=median(x)", "y=median(x,'r')", "y=median(x,'c')", "y=median(x,'m')", "y=median(x,dim)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector, matrix or an array"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar,vector, matrix or an array"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sum", "mean"]},"trimmean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "trimmean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "trimmed mean of a vector or a matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "m=trimmean(x[,discard [,flag [,verbose]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "discard"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Optional real value between 0 and 100 representing the part of the data to discard. It discard is not in the [0,100] range, an error is generated. Default value for discard=50."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Optional string or real parameter which controls the behaviour when x is a matrix. Available values for flag are : \"all\", 1, 2, r or c (default is flag=\"all\"). The two values flag=r and flag=1 are equivalent. The two values flag=c and flag=2 are equivalent."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Optional integer. If set to 1, then enables verbose logging. Default is 0."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"wcenter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "wcenter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "center and weight"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s = wcenter(x)", "s = wcenter(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": {"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "x: real or complex vector or matrix"},"string": []},"string": []},"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the wcenter is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "center"},"iqr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iqr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interquartile range"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["q = iqr(x)", "q = iqr(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the iqr is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"m\""},{"type": "text","children": [],"string": ". \"m\" is equivalent to "},{"type": "literal","children": [],"string": "find(size(x)>1,1)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"mad": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mad"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mean absolute deviation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s2 = mad(x)", "s2 = mad(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the mad is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"stdev": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "stdev"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "standard deviation (row or column-wise) of vector/matrix entries"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = stdev(x)", "y = stdev(x, '*')", "y = stdev(x, 'r'|1)", "y = stdev(x, 'c'|2)", "y = stdev(x, orien, m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector, matrix or hypermatrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar, vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orien"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or 1, "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " or 2, or 0<integer<=ndims(x): direction along which calculations are performed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar, vector or hypermatrix, the a priori mean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["nanstdev", "stdevf", "sum", "median", "mean"]},"stdevf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "stdevf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "standard deviation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s = stdevf(x,fre)", "s = stdevf(x, fre, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fre"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the stdevf is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"strange": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strange"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "range"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["r = strange(x)", "r = strange(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the strange is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"variance": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "variance"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variance (and mean) of a vector or matrix (or hypermatrix) of real or complex numbers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[s [,mc]] = variance(x [,orien [,m]])", "[s, mc] = variance(x)", "[s, mc] = variance(x, \"r\"|1 )", "[s, mc] = variance(x, \"c\"|2 )", "[s, mc] = variance(x, \"*\"  , %nan)", "[s, mc] = variance(x, \"r\"|1, %nan)", "[s, mc] = variance(x, \"c\"|2, %nan)", "s = variance(x, \"*\", m)", "s = variance(x, \"r\"|1, m)", "s = variance(x, \"c\"|2, m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real or complex vector or matrix. A hypermatrix is accepted only for undirectional computations "},{"type": "literal","children": [],"string": "variance(x)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "variance(x,\"*\",m)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orien"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the orientation of the computation. Valid values are "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "1 or \"r\": result is a row, after a column-wise computation."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "2 or \"c\": result is a column, after a row-wise computation."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"*\": full undirectional computation (default); explicitly required when "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " is used."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "The known mean of the underlying statistical distribution law (assuming that it is known). "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "\"*\" mode (default): "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " must be scalar"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"r\" or 1 mode: "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " is a row of length "},{"type": "literal","children": [],"string": "size(x,2)"},{"type": "text","children": [],"string": ". The variance along the column #j is computed using "},{"type": "literal","children": [],"string": "m(j)"},{"type": "text","children": [],"string": " as the mean for the considered column. If "},{"type": "literal","children": [],"string": "m(j)"},{"type": "text","children": [],"string": " is the same for all columns, it can be provided as a scalar "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"c\" or 2 mode: "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " is a column of length "},{"type": "literal","children": [],"string": "size(x,1)"},{"type": "text","children": [],"string": ". The variance along the row #i is computed using "},{"type": "literal","children": [],"string": "m(i)"},{"type": "text","children": [],"string": " as the mean for the considered row. If "},{"type": "literal","children": [],"string": "m(i)"},{"type": "text","children": [],"string": " is the same for all rows, it can be provided as a scalar "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " is not provided, the "},{"type": "literal","children": [],"string": "variance"},{"type": "text","children": [],"string": " is built dividing the quadratic distance of "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " values to "},{"type": "literal","children": [],"string": "mean(x)"},{"type": "text","children": [],"string": " (or "},{"type": "literal","children": [],"string": "mean(x,\"c\")"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "mean(x,\"r\")"},{"type": "text","children": [],"string": ") by "},{"type": "literal","children": [],"string": "n-1"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " being "},{"type": "literal","children": [],"string": "length(x)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "size(x,1)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "size(x,2)"},{"type": "text","children": [],"string": "). If the elements of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " are mutually independent, the result is then statistically unbiased."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Else, the "},{"type": "literal","children": [],"string": "variance"},{"type": "text","children": [],"string": " is built dividing the quadratic distance of values to "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " by the number n of considered values (n being length(x) or size(x,1) or size(x,2))."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If a true value "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " independent from x elements is used, "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " values are mutually independent, and the result is then unbiased."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When the special value "},{"type": "literal","children": [],"string": "m = %nan"},{"type": "text","children": [],"string": " is provided, the variance is still normalized by n (not n-1) but is computed using "},{"type": "literal","children": [],"string": "m=mean(x)"},{"type": "text","children": [],"string": " instead (or "},{"type": "literal","children": [],"string": "m = mean(x,\"c\")"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "m = mean(x,\"r\")"},{"type": "text","children": [],"string": "). This "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " does not bring independent information, and yields a statistically biased result."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": [{"type": "text","children": [],"string": "The variance of unweighted values of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " elements. It is a scalar or a column vector or a row vector according to "},{"type": "varname","children": [],"string": "orien"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mc"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar or "},{"type": "varname","children": [],"string": "orien"},{"type": "text","children": [],"string": "-wise mean of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " elements (unweighted) ("},{"type": "literal","children": [],"string": "= mean(x,..)"},{"type": "text","children": [],"string": "), as computed before and used as reference in the variance."}],"string": []}],"string": []}],"string": []},"seealso": ["variancef", "mtlb_var", "stdev"]},"variancef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "variancef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variance (and mean) of a vector or matrix of frequency-weighted real or complex numbers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[s [,mc]] = variancef(x, fre [,orien [,m]])", "[s, mc] = variancef(x)", "[s, mc] = variancef(x, fre, \"r\"|1 )", "[s, mc] = variancef(x, fre, \"c\"|2 )", "[s, mc] = variancef(x, fre, \"*\"  , %nan)", "[s, mc] = variancef(x, fre, \"r\"|1, %nan)", "[s, mc] = variancef(x, fre, \"c\"|2, %nan)", "s = variancef(x, fre, \"*\", m)", "s = variancef(x, fre, \"r\", m)", "s = variancef(x, fre, \"c\", m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix of real or complex numbers"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fre"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector or matrix of positive decimal integers = frequencies: "},{"type": "text","children": [],"string": " is the number of times that "},{"type": "text","children": [],"string": " must be counted. "},{"type": "varname","children": [],"string": "fre"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " have same sizes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orien"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the orientation of the computation. Valid values are: "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "1 or \"r\" : result is a row, after a column-wise computation."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "2 or \"c\" : result is a column, after a row-wise computation."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"*\" : full undirectional computation (default); explicitly required when "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " is used."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "The known mean of the underlying statistical distribution law (assuming that it is known). "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "\"*\" mode (default): "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " must be scalar"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"r\" or 1 mode: "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " is a row of length "},{"type": "literal","children": [],"string": "size(x,2)"},{"type": "text","children": [],"string": ". The variance along the column #j is computed using "},{"type": "literal","children": [],"string": "m(j)"},{"type": "text","children": [],"string": " as the mean for the considered column. If "},{"type": "literal","children": [],"string": "m(j)"},{"type": "text","children": [],"string": " is the same for all columns, it can be provided as a scalar "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "\"c\" or 2 mode: "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " is a column of length "},{"type": "literal","children": [],"string": "size(x,1)"},{"type": "text","children": [],"string": ". The variance along the row #i is computed using "},{"type": "literal","children": [],"string": "m(i)"},{"type": "text","children": [],"string": " as the mean for the considered row. If "},{"type": "literal","children": [],"string": "m(i)"},{"type": "text","children": [],"string": " is the same for all rows, it can be provided as a scalar "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " is not provided, the "},{"type": "literal","children": [],"string": "variance"},{"type": "text","children": [],"string": " is built dividing the quadratic distance of n values to "},{"type": "literal","children": [],"string": "mean(x,fre)"},{"type": "text","children": [],"string": "(or "},{"type": "literal","children": [],"string": "mean(x,fre,\"c\")"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "mean(x,fre,\"r\")"},{"type": "text","children": [],"string": ") by (n-1) (n being sum(fre) or sum(fre,\"c\") or sum(fre,\"r\")). If the elements of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " are mutually independent, the result is then statistically unbiased."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Else, the "},{"type": "literal","children": [],"string": "variance"},{"type": "text","children": [],"string": " is built dividing the quadratic distance of values to "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " by the number n of considered values."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If a true value "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " independent from x elements is used, "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " values are mutually independent, and the result is then unbiased."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When the special value "},{"type": "literal","children": [],"string": "m = %nan"},{"type": "text","children": [],"string": " is provided, the variance is still normalized by n (not n-1) but is computed using "},{"type": "literal","children": [],"string": "m = mean(x, fre)"},{"type": "text","children": [],"string": " instead (or "},{"type": "literal","children": [],"string": "m = mean(x,fre,\"c\")"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "m = mean(x,fre,\"r\")"},{"type": "text","children": [],"string": "). This "},{"type": "varname","children": [],"string": "m"},{"type": "text","children": [],"string": " does not bring independent information, and yields a statistically biased result."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": [{"type": "text","children": [],"string": "The variance of weighted values of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " elements. It is a scalar or a column vector or a row vector according to "},{"type": "varname","children": [],"string": "orien"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mc"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar or "},{"type": "varname","children": [],"string": "orien"},{"type": "text","children": [],"string": "-wise mean of weighted "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " elements ("},{"type": "literal","children": [],"string": "= mean(x, fre,..)"},{"type": "text","children": [],"string": "), as computed before and used as reference in the variance."}],"string": []}],"string": []}],"string": []},"seealso": ["variance", "mtlb_var", "stdevf"]},"cmoment": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cmoment"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "central moments of all orders"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mom = cmoment(x, ord)", "mom = cmoment(x, ord, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ord"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the cmoment is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mom"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sum", "median", "stdev", "mean", "meanf", "moment", "nanmean", "nanmeanf", "stdev", "stdevf", "variance", "variancef", "nanstdev"]},"histc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "histc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computes the histogram of a simple series of data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Heights = histc(Data)", "Heights = histc(Data, nbins)", "Heights = histc(Data, -binsWidth)", "Heights = histc(Data, binsAlgo)", "Heights = histc(Data, binsEdges)", "Heights = histc(Data, binsValues [, \"discrete\"])", "Heights = histc(Data,    , Options)", "Heights = histc(Data, .. , Options)", "[Heights, jokers]              = histc(Data, ..)", "[Heights, jokers, bins]        = histc(Data, ..)", "[Heights, jokers, bins, inBin] = histc(Data, ..)"]},"varlist": [],"seealso": ["histplot", "bar3d", "bar", "barh", "plot2d2", "dsearch", "members", "grep", "strcmp", "isnan", "isinf"]},"moment": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "moment"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "non central moments of all orders"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mom = moment(x, ord)", "mom = moment(x, ord, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ord"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the moment is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mom"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"perctl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "perctl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computation of percentils"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "p=perctl(x,y)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of positive integer values between 0 and 100."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"quart": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "quart"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computation of quartiles"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s = quart(x)", "s = quart(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the quart is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tabul": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tabul"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency of values of a matrix or vector"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[m]=tabul(X [,order])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix (of real or complex numbers or strings)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) a character equal to \"d\" or \"i\" (default value \"d\")"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 2 columns matrix (if "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": " is a numerical vector or matrix) or a list with 2 members (if "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": " is a string vector or matrix)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["dsearch", "histplot"]},"correl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "correl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "correlation of two variables"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "rho=correl(x, y [, fre])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fre"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of type length(x) x length(y). (Optional)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "covar"},"cov": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cov"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sample covariance matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["C = cov(x)", "C = cov(x, 0)", "C = cov(x, 1)", "C = cov(x, y)", "C = cov(x, y, 0)", "C = cov(x, y, 1)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a nobs-by-1 or nobs-by-n matrix of doubles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a nobs-by-1 or nobs-by-m matrix of doubles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a square matrix of doubles, the empirical covariance or cross-covariance"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"covar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "covar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "covariance of two variables"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s=covar(x,y,fre)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fre"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of type length(x) x length(y)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"pca": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pca"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes principal component analysis for the data matrix X"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["comprinc = pca(X)", "[comprinc, score, lambda] = pca(X)", "[comprinc, score, lambda, tsquare] = pca(X)", "[comprinc, score, lambda, tsquare, explained, mu] = pca(X)", "comprinc = pca(X, Name, Value)", "[comprinc, score, lambda] = pca(X, Name, Value)", "[comprinc, score, lambda, tsquare] = pca(X, Name, Value)", "[comprinc, score, lambda, tsquare, explained, mu] = pca(X, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is a nxp (n individuals, p variables) real matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'Centered'"},{"type": "text","children": [],"string": ": boolean indicator for centering the columns. Default value: %t."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'Economy'"},{"type": "text","children": [],"string": ": boolean indicator, use to allow economy size singular value decomposition.  Default value: %t."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'NumComponents'"},{"type": "text","children": [],"string": ": integer value, number of components returned. Default value: size(X, 2)."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'Weights'"},{"type": "text","children": [],"string": ": row vector of doubles of length size(X, 1) containing observation weights. Default value: ones(1, size(X, 1))."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'VariableWeights'"},{"type": "text","children": [],"string": ": \"variance\" value or row vector of doubles of length size(X, 2) containing variable weights. Default value: []."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comprinc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "are the  principal component coefficients, p-by-p matrix where p is equal to size(X,2)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "score"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "n-by-p matrix or n-by-NumComponents matrix if 'NumComponents' is specified."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "are the principal component scores."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lambda"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "is a p-by-1 or NumComponents-by-1 (if 'NumComponents' is specified) vector."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "contains the eignevalues of the covariance X"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tsquare"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " column vector. It contains the Hotelling's T^2 statistic for each data point."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "explained"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector of length \"number of components\". The percentage of variance explained by  each principal component."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mu"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a row vector of length "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": ". The estimated mean of each variable of  "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "show_pca"},"princomp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "princomp"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "Principal components analysis"},"string": []},{"type": "refpurpose","children": [{"type": "text","children": [],"string": "This function is obsolete. Please use "},{"type": "link","children": [],"string": "pca"},{"type": "text","children": [],"string": " instead."}],"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "[facpr,comprinc,lambda,tsquare, explained, mu] = princomp(x,eco)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "-by-"},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " individuals, "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " variables) real matrix."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "eco"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean, use to allow economy size singular value decomposition."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "facpr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": "-by-"},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " matrix. It contains the principal factors: eigenvectors of the correlation matrix "},{"type": "literal","children": [],"string": "V"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comprinc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "-by-"},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " matrix. It contains the principal components. Each column of this matrix is the M-orthogonal projection of individuals onto principal axis. Each one of this columns is a linear combination of the variables x1, ...,xp with maximum variance under condition "},{"type": "literal","children": [],"string": "u'_i M^(-1) u_i=1 "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lambda"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " column vector. It contains the eigenvalues of "},{"type": "literal","children": [],"string": "V"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "V"},{"type": "text","children": [],"string": " is the correlation matrix."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tsquare"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " column vector. It contains the Hotelling's T^2 statistic for each data point."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "explained"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector of length \"number of components\". The percentage of variance explained by  each principal component."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mu"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a row vector of length "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": ". The estimated mean of each variable of  "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["wcenter", "pca"]},"reglin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "reglin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Linear regression"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[a,b,sig]=reglin(x,y)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y, a, b, sig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "numerical vectors or matrices."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["nanreglin", "pinv", "leastsq", "qr"]},"show_pca": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "show_pca"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Visualization of principal components analysis results"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "show_pca(lambda, facpr, N)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lambda"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Is a p x 1 vector, the eigenvalues of V, where V is the correlation p x p matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "facpr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Are the principal factors: eigenvectors of V. Each column is an eigenvector element of the dual of "},{"type": "literal","children": [],"string": "R^p"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Is a 2x1 integer vector. Its coefficients point to the eigenvectors corresponding to the eigenvalues of the correlation matrix "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " ordered by decreasing values of eigenvalues. If "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": ". is missing, we suppose "},{"type": "literal","children": [],"string": "N=[1 2]"},{"type": "text","children": [],"string": ".."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "pca"},"nancumsum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nancumsum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "This function returns the cumulative sum of the values of a matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = nancumsum(x,orient)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "x is a numerical vector or matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is an optional parameter. The possible values are '*', 1, 2, 'r' or 'c'."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "numerical scalar or vector. It contains the cumulative sum of the values of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ", ignoring the NAN's."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["nansum", "cumsum"]},"nand2mean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nand2mean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "difference of the means of two independent samples"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[dif]=nand2mean(sample1,sample2)", "[dif]=nand2mean(sample1,sample2,conf)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sample1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sample2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "conf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real scalar between 0 and 1"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nanmean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nanmean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mean  (ignoring  Nan's)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["m = nanmean(val)", "m = nanmean(val, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "val"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the nanmean is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nanmeanf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nanmeanf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mean (ignoring Nan's) with a given frequency."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["m = nanmean(val, fre)", "m = nanmean(val, fre, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "val"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fre"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector  or matrix with same dimensions  than val"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the nanmeanf is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nanmedian": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nanmedian"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "median of the  values of a numerical vector or matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["m = nanmedian(x)", "m = nanmedian(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the nanmedian is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nanreglin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nanreglin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Linear regression"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[a,b]=nanreglin(x,y)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y, a, b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "numerical vectors or matrices."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["reglin", "pinv", "leastsq", "qr"]},"nanstdev": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nanstdev"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "standard deviation (ignoring the NANs).  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s = nanstdev(x)", "s = nanstdev(x, orientation)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "index of the dimension along which the nanstdev is computed. It can be either"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a character "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " (default), "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"c\""}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a positive integer: 1 or 2. 1 is equivalent to \"r\" and 2 is equivalent to \"c\"."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex scalar or vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nansum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nansum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sum of values ignoring NAN's"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = nansum(x,orient)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "numerical vector or matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nothing or '*'. 'r' or 1. 'c' or 2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Numerical scalar or vector containing the value of the adding operation."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["nancumsum", "sum"]},"thrownan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "thrownan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Eliminates nan values"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[nonan,numb]=thrownan(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a m-by-n real or complex matrix of doubles. If the number of columns in "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " is different from 1, then the column-by-column matrix "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " is considered."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nonan"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a (m*n)-by-1 real or complex matrix of doubles, without any %nan entries."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "numb"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a (m*n)-by-1 real or complex matrix of floating point integers, the indices "},{"type": "literal","children": [],"string": "k"},{"type": "text","children": [],"string": " in "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "x(k)"},{"type": "text","children": [],"string": " is non-nan."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"ftest": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ftest"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Fisher ratio"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["f=ftest(samples)", "[f,p]=ftest(samples)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "samples"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex matrix of type nr X nc"},"string": []},"string": []}],"string": []},"string": []},"seealso": "ftuneq"},"ftuneq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ftuneq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Fisher ratio for samples of unequal size.  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["f=ftuneq(sample1[,sample2[,sample3]...]])", "[f,p]=ftuneq(sample1[,sample2[,sample3]...]])"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "sample1, sample2, sample3,...  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex matrix of any type"},"string": []},"string": []}],"string": []},"string": []},"seealso": "ftuneq"},"chfact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "chfact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração esparsa de Cholesky"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "spcho=chfact(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz simétrica, positiva e esparsa"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "spcho"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista contendo os fatores de Cholesky em forma codificada"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["chsolve", "sparse", "lufact", "luget", "spchol"]},"chsolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "chsolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solucionador esparso de Cholesky"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sol=chsolve(spcho,rhs)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "spcho"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista contendo os fatores de Cholesky na forma codificada retornados por chfact"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rhs, sol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores colunas cheios"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["chfact", "sparse", "lufact", "luget", "spchol"]},"ordmmd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ordmmd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compute multiple minimum degree ordering"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[perm,invp,nofsub]=ordmmd(xadj,iadj,n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, integer value, the number of equations"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xadj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(n+1)-by-1 matrix of doubles, integer value, pointer to the rows of A"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iadj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nnz-by-1 matrix of doubles, integer value, the row indices of A"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "perm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n-by-1 matrix of doubles, integer value, the minimum degree ordering"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "invp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n-by-1 matrix of doubles, integer value, the inverse of perm"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nofsub"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1-by-1 matrix of doubles, integer value, an upper bound on the number of nonzero subscripts for the compressed storage scheme"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sp2adj", "spchol"]},"ludel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ludel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função utilitária usada com lufact"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ludel(hand)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "hand"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador para fatores lu esparsos (saída de lufact)"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"lufact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lufact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração LU esparsa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[hand,rk]=lufact(A,prec)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada esparsa "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hand"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador para fatores LU esparsos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rk"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (posto de A) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prec"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de tamanho 2 "},{"type": "literal","children": [],"string": "prec=[eps,reps]"},{"type": "text","children": [],"string": " fornecendo os limiares absoluto e relativo."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"luget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "luget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "extração dos fatores LU esparsos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[P,L,U,Q]=luget(hand)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hand"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "manipulador, saída de "},{"type": "literal","children": [],"string": "lufact"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de permutação esparsa"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz esparsa, triangular infeiror se "},{"type": "literal","children": [],"string": "hand"},{"type": "text","children": [],"string": " é obtida de uma matriz não-singular"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "U"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada triangular superior esparsa não-snigular preenchida com 1 ao longo da diagonal principal"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de permutação esparsa"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"lusolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lusolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solucionador de sistemas lineares esparsos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x=lusolve(hand,b)", "x=lusolve(A,b)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais completa "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada de reais esparsa e invertível "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hand"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador para fatores de lu esparsos previamente computados (saída de lufact)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais completa "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"spchol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spchol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fatoração esparsa de Cholesky"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[R,P] = spchol(X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz simétrica, esparsa e positiva definida de reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "P"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de permutação "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "fator de Cholesky"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"issparse": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "issparse"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tests whether the input is sparse encoded (numeric or boolean)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = issparse(S)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scilab object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean: %T if the matrix is a sparse, and %F otherwise/"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isreal", "sparse", "type", "typeof"]},"nnz": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nnz"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "número de entradas não-nulas de uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "n=nnz(X)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais ou complexos esparsa (ou cheia) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, número de elementos não-nulos de X. "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"speye": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "speye"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz identidade esparsa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Isp = speye(A)", "Isp = speye(nrows, ncols)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nrows"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de linhas) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ncols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de colunas) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz identidade esparsa "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sparse", "full", "eye", "diag", "toeplitz", "spzeros", "spones"]},"spones": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spones"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz esparsa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sp=spones(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sparse", "full", "eye", "speye", "spzeros"]},"sprand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sprand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz esparsa randômica"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sp=sprand(nrows,ncols,fill [,typ])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nrows"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de linhas) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ncols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de colunas)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coeficiente de preenchimento (densidade) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ("},{"type": "literal","children": [],"string": "'uniform'"},{"type": "text","children": [],"string": " (padrão) ou "},{"type": "literal","children": [],"string": "'normal'"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sparse", "full", "rand", "speye"]},"spzeros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spzeros"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "matriz nula esparsa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sp=spzeros(nrows,ncols)", "sp=spzeros(A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nrows"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de linhas) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ncols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro (número de colunas) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz nula esparsa "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sparse", "full", "eye", "speye", "spones"]},"adj2sp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "adj2sp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte forma de adjacência para matriz esparsa "},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xadj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros de comprimento (n+1). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "adjncy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros de comprimento nz contendo os índices de linha para os elementos correspondentes em anz"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "anz"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de comprimento nz contendo os elementos não-nulos de A"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor linha com duas entradas, "},{"type": "literal","children": [],"string": "mn=size(A)"},{"type": "text","children": [],"string": " (opcional)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz quadrada esparsa de reais ou complexos (nz entradas não-nulas)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sp2adj", "spcompack"]},"full": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "full"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de matriz esparsa para cheia (completa)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "X = full(sp)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector ou matriz densa ou esparsa de booleanos ou números reais ou complexos, ou de strings."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz cheia (completa)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sparse", "sprand", "speye"]},"sp2adj": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sp2adj"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte uma matriz esparsa para forma de adjacência"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa de reais ou complexos (nz entradas não-nulas)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xadj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros de comprimento (n+1). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "adjncy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros de comprimento nz contendo os índices de linha para os elementos correspondentes em anz"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "anz"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna de comprimento nz contendo os elementos não-nulos de A"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["adj2sp", "sparse", "spcompack", "spget"]},"sparse": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sparse"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "definição de matriz esparsa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sp = sparse(X)", "sp = sparse(ij, v)", "sp = sparse(ij, v, mn)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz completa (ou esparsa) de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ij"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros de duas colunas (índices das entradas não nulas)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros com duas entradas (dimensão de linha, dimensão de coluna)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"spcompack": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spcompack"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte uma representação de adjacência comprimida em representação de adjacência padrão"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xadj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros de comprimento (n+1). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xlindx"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros de comprimento n+1 (ponteiros). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lindx"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "adjncy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"spget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "recupera entradas de matriz esparsa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[ij,v,mn]=spget(sp)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz esparsa de reais ou complexos "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ij"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de inteiros de duas colunas (índices das entradas não-nulas)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros com duas entradas (dimensão de linha, dimensão de coluna)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor coluna "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"spCompHessian": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spCompHessian"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Consruct a compressed Hessian engine from its sparsity pattern using column intersection graph coloring"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["hess = spCompHessian(g,sp)", "hess = spCompHessian(g,sp,options)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab function computing the gradient"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sequence of optional named arguments allowing to customize the engine (see available options below)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hess"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the returned engine, an MList of _spCompHessian type (fields are described below)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["spCompJacobian", "numderivative"]},"spCompJacobian": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spCompJacobian"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Consruct a compressed Jacobian engine from its sparsity pattern using column intersection graph coloring"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["jac = spCompJacobian(f,sp)", "jac = spCompJacobian(f,sp,options)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab function"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sequence of optional named arguments allowing to customize the engine (see available options below)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the returned engine, an MList of _spCompJacobian type (fields are described below)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["spCompHessian", "numderivative"]},"spyCol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "spyCol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Represent sparsity pattern of a matrix with column coloring"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "spyCol(A,col)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a full or sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "col"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of integers"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["spCompJacobian", "spCompHessian"]},"conjgrad": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "conjgrad"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conjugate gradient solvers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[x, flag, err, iter, res] = conjgrad(A, b [, method [, tol [, maxIter [, M [, M2 [, x0 [, verbose]]]]]]])", "[x, flag, err, iter, res] = conjgrad(A, b [, method [, key=value,...]])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a matrix, or a function, or a list computing "},{"type": "literal","children": [],"string": "A*x"},{"type": "text","children": [],"string": " for each given "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ". The following is a description of the computation of A*x depending on the type of A."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "matrix."},{"type": "text","children": [],"string": "If A is a matrix, it can be dense or sparse"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "function."},{"type": "text","children": [],"string": "If A is a function, it must have the following header :"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "list."},{"type": "text","children": [],"string": "If A is a list, the first element of the list is expected to be a function and the other elements in the list are the arguments of the function, from index 2 to the end. When the function is called, the current value of x is passed to the function as the first argument. The other arguments passed are the one given in the list."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "right hand side vector (size: nx1)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar string, \"pcg\", \"cgs\", \"bicg\" or \"bicgstab\" (default \"bicgstab\")"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "error relative tolerance (default: 1e-8). The termination criteria is based on the 2-norm of the residual r=b-Ax, divided by the 2-norm of the right hand side b."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxIter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "maximum number of iterations (default: n)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "preconditioner: full or sparse matrix or function returning "},{"type": "literal","children": [],"string": "M\\x"},{"type": "text","children": [],"string": " (default: none)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "preconditioner: full or sparse matrix or function returning "},{"type": "literal","children": [],"string": "M2\\x"},{"type": "text","children": [],"string": " for each "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " (default: none)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial guess vector (default: zeros(n,1))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "set to 1 to enable verbose logging (default 0)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "solution vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "0 if "},{"type": "literal","children": [],"string": "conjgrad"},{"type": "text","children": [],"string": " converged to the desired tolerance within "},{"type": "literal","children": [],"string": "maxi"},{"type": "text","children": [],"string": " iterations, 1 else"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "final relative norm of the residual (the 2-norm of the right-hand side b is used)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of iterations performed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of the residual relative norms"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["backslash", "qmr", "gmres"]},"gmres": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gmres"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generalized Minimum RESidual method"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x,flag,err,iter,res] = gmres(A,b,[rstr,[tol,[maxi,[M,[x0]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n-by-n matrix or function returning "},{"type": "literal","children": [],"string": "A*x"},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " is a function, it must have the following header :"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "right hand side vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "initial guess vector (default: zeros(n,1))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "preconditioner: matrix of size n-by-n or function returning "},{"type": "literal","children": [],"string": "M*x"},{"type": "text","children": [],"string": " (In the first case, default: eye(n,n)). If M is a function, it must have the following header :"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rstr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of iterations between restarts (default: 10)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "maximum number of iterations (default: n)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "error tolerance (default: 1e-6)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "solution vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "final residual norm"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of iterations performed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "0 ="},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "gmres"},{"type": "text","children": [],"string": " converged to the desired tolerance within "},{"type": "literal","children": [],"string": "maxi"},{"type": "text","children": [],"string": " iterations"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1 ="},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "no convergence given "},{"type": "literal","children": [],"string": "maxi"}],"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "residual vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["conjgrad", "qmr"]},"qmr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "qmr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "quasi minimal residual method with preconditioning  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x, flag, err, iter, res] = qmr(A, b, x0, M1, M2, maxi, tol)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Square dense or sparse matrix of size n-by-n, or function."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If A is a function which returns "},{"type": "literal","children": [],"string": "A*x"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "A'*x"},{"type": "text","children": [],"string": " depending on a option t, it must have the following header: "},{"type": "literal","children": [],"string": "function y = A(x, t)"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "t = \"notransp\""},{"type": "text","children": [],"string": ": the function returns "},{"type": "literal","children": [],"string": "A*x"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "t = \"transp\""},{"type": "text","children": [],"string": ": the function returns "},{"type": "literal","children": [],"string": "A'*x"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": [{"type": "text","children": [],"string": "right hand side vector "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": [{"type": "text","children": [],"string": "initial guess vector (default: zeros(n,1)). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "left preconditioner: matrix or function (In the first case, default: eye(n,n)). If "},{"type": "literal","children": [],"string": "M1"},{"type": "text","children": [],"string": " is a function, it returns: "},{"type": "literal","children": [],"string": "M1*x"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "M1'*x"},{"type": "text","children": [],"string": ", depending on "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "right preconditioner: matrix or function (In the first case, default: eye(n,n)). If "},{"type": "literal","children": [],"string": "M2"},{"type": "text","children": [],"string": " is a function, it returns: "},{"type": "literal","children": [],"string": "M2*x"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "M2'*x"},{"type": "text","children": [],"string": " depending on "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxi"},{"type": "listitem","children": [{"type": "text","children": [],"string": "maximum number of iterations (default: n) "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": [{"type": "text","children": [],"string": "error tolerance (default: 1000*%eps) "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "solution vector. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "flag"},{"type": "text","children": [],"string": "=0: "},{"type": "literal","children": [],"string": "qmr"},{"type": "text","children": [],"string": " converged to the desired tolerance within "},{"type": "varname","children": [],"string": "maxi"},{"type": "text","children": [],"string": " iterations."}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "flag"},{"type": "text","children": [],"string": "=1: no convergence up to "},{"type": "varname","children": [],"string": "maxi"},{"type": "text","children": [],"string": " iterations,"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "-7 < flag < 0"},{"type": "text","children": [],"string": ": A breakdown occurred because one of the scalar quantities calculated was equal to zero."}],"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": [{"type": "text","children": [],"string": "residual vector. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": [{"type": "text","children": [],"string": "final residual norm. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": [{"type": "text","children": [],"string": "number of iterations performed. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["gmres", "conjgrad"]},"cond2sp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cond2sp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computes an approximation of the 2-norm condition number of a s.p.d. sparse matrix  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[K2, lm, vm, lM, vM] = cond2sp(A, C_ptr [, rtol, itermax, verb])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real symmetric positive definite sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to a Cholesky factorization (got with taucs_chfact)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) relative tolerance (default 1.e-3) (see details in DESCRIPTION)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "itermax  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) maximum number of iterations in the underlying algorithms (default 30)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verb  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) boolean, must be %t for displaying the intermediary results, and %f (default) if you do not want."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K2  "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "estimated 2-norm condition number "},{"type": "literal","children": [],"string": "K2 = ||A||_2 ||A^(-1)||_2 = lM/lm"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lm  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(real positive scalar) minimum eigenvalue"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vm  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "associated eigenvector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lM  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(real positive scalar) maximum eigenvalue"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vM  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "associated eigenvector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["condestsp", "taucs_chfact", "rcond"]},"condestsp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "condestsp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "estimate the condition number of a sparse matrix  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[K1] = condestsp(A, LUp, t)", "[K1] = condestsp(A, LUp)", "[K1] = condestsp(A, t)", "[K1] = condestsp(A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex square sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LUp  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) a pointer to (umf) LU factors of A obtained by a call to umf_lufact ; if you have already computed the LU (= PAQ) factors it is recommended to give this optional parameter (as the factorization may be time consuming)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) a positive integer (default value 2) by increasing this one you may hope to get a better (even exact) estimate"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "K1  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "estimated 1-norm condition number of A "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["umf_lufact", "rcond"]},"PlotSparse": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PlotSparse"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "plot the pattern of non nul elements of a sparse matrix  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "PlotSparse(A [,style])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style  "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(optional) a string given the color and/or the marker type of the form \"[color][mark]\" where color may be a number referring the color you want to use (in the current colormap). If you use the std colormap then color may be one of the following letters :"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "mark must be one of the following :"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "by default you have \"b.\" (in fact the 2d color) and this is also forced in case of error."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": "ReadHBSparse"},"ReadHBSparse": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ReadHBSparse"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "read a Harwell-Boeing sparse format file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[A, description, ref, mtype] = ReadHBSparse([filename])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "(optional) a string given the filename (eventually preceding by the path), if filename is not given then the function use "},{"type": "link","children": [],"string": "uigetfile"},{"type": "text","children": [],"string": " to get filename interactively"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "description"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string given some information about the matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ref"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string given the reference of the matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mtype"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string given the type of the matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "PlotSparse"},"res_with_prec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "res_with_prec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computes the residual r = Ax-b with precision  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[r,norm2_r] = res_with_prec(A, x, b)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real or complex sparse matrix (m x n)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector (n x 1) or matrix (n x p) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector (m x 1) or matrix (m x p)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector (m x 1) or matrix (m x p)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "norm2_r  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar or vector (1 x p) when b is a m x p matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "taucs_chsolve"},"taucs_chdel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "taucs_chdel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility function used with taucs_chfact  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "taucs_chdel(C_ptr) or taucs_chdel()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "C_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to a Cholesky factorization"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["taucs_chfact", "taucs_chsolve", "taucs_chinfo", "taucs_chget"]},"taucs_chfact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "taucs_chfact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cholesky factorization of a sparse s.p.d. matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "C_ptr = taucs_chfact(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sparse real symmetric positive definite (s.p.d.) matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C_ptr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to the Cholesky factors (C,p : A(p,p)=CC')"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["taucs_chsolve", "taucs_chdel", "taucs_chinfo", "taucs_chget", "cond2sp"]},"taucs_chget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "taucs_chget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retrieve the Cholesky factorization at the scilab level  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Ct,p] = taucs_chget(C_ptr)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to the Cholesky factorization (C,p : A(p,p)=CC')"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ct  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scilab sparse matrix (you get the upper triangle i.e. Ct is equal to C') "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector storing the permutation"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["taucs_chfact", "taucs_chsolve", "taucs_chdel", "taucs_chinfo", "taucs_chget", "cond2sp"]},"taucs_chinfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "taucs_chinfo "},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get information on Cholesky factors  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[OK, n, cnz] = taucs_chinfo(C_ptr)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to a Cholesky factorization"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "OK  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar boolean"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cnz  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar integer"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["taucs_chfact", "taucs_chsolve", "taucs_chdel", "taucs_chget"]},"taucs_chsolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "taucs_chsolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solves a linear s.p.d. system A*X = B from Cholesky factors of the sparse A"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x] = taucs_chsolve(C_ptr, b [, A])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to a handle of the Cholesky factors (C,p with A(p,p)=CC')"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real column vector or a matrix (multiple rhs)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real column vector or a matrix in case of multiple rhs ( x(:,i) is solution of A x(:,i) = b(:,i))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) Real symetric positive definite (s.p.d.) matrix (to use for iterative refinement step)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["taucs_chfact", "taucs_chdel", "taucs_chinfo", "taucs_chget", "cond2sp"]},"umf_ludel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "umf_ludel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility function used with umf_lufact  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "umf_ludel(LU_ptr) or umf_ludel()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "LU_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to a handle of umf lu factors (L,U,p,q,R)"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["umfpack", "umf_lufact", "umf_lusolve", "umf_luget", "umf_luinfo"]},"umf_lufact": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "umf_lufact"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lu factorization of a sparse matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "LU_ptr = umf_lufact(A)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sparse, real or complex, square or rectangular, matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LU_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to umf lu factors (L,U,p,q,R)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["umfpack", "umf_luget", "umf_lusolve", "umf_ludel", "umf_luinfo", "condestsp"]},"umf_luget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "umf_luget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retrieve lu factors at the Scilab level"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[L,U,p,q,Rd] = umf_luget(LU_ptr)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LU_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to umf lu factors (L,U,p,q,R)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L,U  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scilab sparse matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p,q  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vectors storing the permutations"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Rd "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector storing the (row) scaling factors"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["umfpack", "umf_lufact", "umf_lusolve", "umf_ludel", "umf_luinfo"]},"umf_luinfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "umf_luinfo "},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get information on LU factors  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[OK, nrow, ncol, lnz, unz, udiag_nz, it] = umf_luinfo(LU_ptr)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LU_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to umf lu factors (L,U,p,q, R)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "OK  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar boolean"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nrow, ncol, lnz, unz, udiag_nz, it"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalars (integers)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["umfpack", "umf_lufact", "umf_lusolve", "umf_ludel", "umf_luget"]},"umf_lusolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "umf_lusolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solve a linear sparse system given the LU factors  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x] = umf_lusolve(LU_ptr, b [, st, A])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LU_ptr  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a pointer to umf lu factors (L,U,p,q,R) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or complex column vector or a matrix (multiple rhs)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "st  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) a string \"Ax=b\" (default) or \"Ax'=b\" (to be written \"Ax''=b\" in scilab language: a quote in a string must be doubled !)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(optional) the sparse square matrix corresponding to the LU factors (LU_ptr must be got with LU_ptr = umf_lufact(A))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector or a matrix in case of multiple rhs ( x(:,i) is solution of A x(:,i) = b(:,i) or A'x(:,i) = b(:,i) )"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["umfpack", "umf_lufact", "umf_luget", "umf_ludel", "umf_luinfo"]},"umfpack": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "umfpack"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "solve sparse linear system  "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = umfpack(A,\"\\\",b)", "x = umfpack(b,\"/\",A)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a sparse (real or complex) square matrix n x n"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "in the first case, a column vector (n x 1) or a n x m matrix ; in the second case, a row vector (1 x n) or a m x n matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "in the first case , a column vector (n x 1) or a n x m matrix ; in the second case, a row vector (1 x n) or a m x n matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2d arg  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string specifier \"\\\" or \"/\""},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["umf_lufact", "umf_lusolve", "umf_ludel", "umf_luinfo", "umf_luget", "linsolve", "backslash"]},"fsolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fsolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "find a zero of a system of n nonlinear functions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[x, v, info] = fsolve(x0, fct)", "[x, v, info] = fsolve(x0, fct, fjac)", "[x, v, info] = fsolve(x0, fct, fjac, tol)", "[x, v, info] = fsolve(x0, fct, tol)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector (initial value of function argument)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fct"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "external (i.e function or list or string)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fjac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "external (i.e function or list or string)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar. precision tolerance: termination occurs when the algorithm estimates that the relative error between x and the solution is at most tol. ("},{"type": "literal","children": [],"string": "tol=1.d-10"},{"type": "text","children": [],"string": " is the default value)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector (final value of function argument, estimated zero)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional real vector: value of function at x."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional termination indicator:"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["external", "qpsolve", "optim"]},"karmarkar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "karmarkar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solves a linear optimization problem."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xopt=karmarkar(Aeq,beq,c)", "xopt=karmarkar(Aeq,beq,c,x0)", "xopt=karmarkar(Aeq,beq,c,x0,rtolf)", "xopt=karmarkar(Aeq,beq,c,x0,rtolf,gam)", "xopt=karmarkar(Aeq,beq,c,x0,rtolf,gam,maxiter)", "xopt=karmarkar(Aeq,beq,c,x0,rtolf,gam,maxiter,outfun)", "xopt=karmarkar(Aeq,beq,c,x0,rtolf,gam,maxiter,outfun,A,b)", "xopt=karmarkar(Aeq,beq,c,x0,rtolf,gam,maxiter,outfun,A,b,lb)", "xopt=karmarkar(Aeq,beq,c,x0,rtolf,gam,maxiter,outfun,A,b,lb,ub)", "[xopt,fopt] = karmarkar(...)", "[xopt,fopt,exitflag] = karmarkar(...)", "[xopt,fopt,exitflag,iter] = karmarkar(...)", "[xopt,fopt,exitflag,iter,yopt] = karmarkar(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Aeq"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a n-by-p matrix of doubles, where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the number of linear equality constraints and "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " is the number of unknowns, the matrix in the linear equality constraints."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "beq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a n-by-1 matrix of doubles, the right hand side of the linear equality constraint."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a p-by-1 matrix of doubles, the linear part of the objective function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a p-by-1 matrix of doubles, the initial guess (default "},{"type": "literal","children": [],"string": "x0=[]"},{"type": "text","children": [],"string": "). If "},{"type": "literal","children": [],"string": "x0==[]"},{"type": "text","children": [],"string": ", the karmarkar function automatically computes a feasible initial guess."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtolf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, a relative tolerance on "},{"type": "literal","children": [],"string": "f(x)=c'*x"},{"type": "text","children": [],"string": " (default "},{"type": "literal","children": [],"string": "rtolf=1.d-5"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gam"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, the scaling factor (default "},{"type": "literal","children": [],"string": "gam=0.5"},{"type": "text","children": [],"string": "). The scaling factor must satisfy "},{"type": "literal","children": [],"string": "0<gam<1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxiter"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-1 matrix of floating point integers, the maximum number of iterations (default "},{"type": "literal","children": [],"string": "maxiter=200"},{"type": "text","children": [],"string": "). The maximum number of iterations must be greater than 1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outfun"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a function or a list, the output function. See below for details."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a ni-by-p matrix of doubles, the matrix of linear inequality constraints."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a ni-by-1 matrix of doubles, the right-hand side of linear inequality constraints."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a p-by-1 matrix of doubles, the lower bounds."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ub"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a p-by-1 matrix of doubles, the upper bounds."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xopt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a p-by-1 matrix of doubles, the solution."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, the objective function value at optimum, i.e. "},{"type": "literal","children": [],"string": "fopt=c'*xopt"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "exitflag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of floating point integers, the status of execution. See below for details."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of floating point integers, the number of iterations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "yopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "literal","children": [],"string": "struct"},{"type": "text","children": [],"string": " containing the dual solution. The structure yopt has four fields : ineqlin, eqlin, upper, lower. The field "},{"type": "literal","children": [],"string": "yopt.ineqlin"},{"type": "text","children": [],"string": " is the Lagrange multiplier for the inequality constraints. The field "},{"type": "literal","children": [],"string": "yopt.eqlin"},{"type": "text","children": [],"string": " is the Lagrange multiplier for the equality constraints. The field "},{"type": "literal","children": [],"string": "yopt.upper"},{"type": "text","children": [],"string": " is the Lagrange multiplier for the upper bounds. The field "},{"type": "literal","children": [],"string": "yopt.lower"},{"type": "text","children": [],"string": " is the Lagrange multiplier for the lower bounds."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"NDcost": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "NDcost"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "generic external for optim computing gradient using finite differences"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[f,g,ind]=NDcost(x,ind,fun,varargin)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector or matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer parameter (see optim)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Scilab function with syntax "},{"type": "literal","children": [],"string": "F=fun(x,varargin)"},{"type": "text","children": [],"string": " varargin may be use to pass parameters "},{"type": "literal","children": [],"string": "p1,...pn"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "criterion value at point "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " (see optim)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "gradient value at point "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " (see optim)"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim", "external", "numderivative"]},"optim": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optim"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "non-linear optimization routine"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["fopt = optim(costf, x0)", "fopt = optim(costf [,<contr>],x0 [,algo] [,df0 [,mem]] [,work] [,<stop>] [,<params>] [,iprint=iflag])", "[fopt, xopt] = optim(...)", "[fopt, xopt, gopt] = optim(...)", "[fopt, xopt, gopt, work] = optim(...)", "[fopt, xopt, gopt, work, iters] = optim(...)", "[fopt, xopt, gopt, work, iters, evals] = optim(...)", "[fopt, xopt, gopt, work, iters, evals, err] = optim(...)", "[fopt, xopt, [gopt, work, iters, evals, err], ti, td] = optim(..., params=\"si\",\"sd\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "costf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a function, a list or a string, the objective function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector, the initial guess for "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<contr>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an optional sequence of arguments containing the lower and upper bounds on "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ". If bounds are required, this sequence of arguments must be "},{"type": "literal","children": [],"string": "\"b\",binf,bsup"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "binf"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "bsup"},{"type": "text","children": [],"string": " are real vectors with same dimension as "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "algo"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a string, the algorithm to use (default "},{"type": "literal","children": [],"string": "algo=\"qn\""},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The available algorithms are:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"qn\""},{"type": "text","children": [],"string": ": Quasi-Newton with BFGS"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"gc\""},{"type": "text","children": [],"string": ": limited memory BFGS"}],"string": []},"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"nd\""},{"type": "text","children": [],"string": ": non-differentiable."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "\"nd\""},{"type": "text","children": [],"string": " algorithm does not accept bounds on "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "\"qn\""},{"type": "text","children": [],"string": " cannot be used if "},{"type": "literal","children": [],"string": "size(x0)>46333"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "df0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar, a guess of the decreasing of "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " at first iteration. (default "},{"type": "literal","children": [],"string": "df0=1"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mem"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer, the number of variables used to approximate the Hessian (default "},{"type": "literal","children": [],"string": "mem=10"},{"type": "text","children": [],"string": "). This feature is available for the "},{"type": "literal","children": [],"string": "\"gc\""},{"type": "text","children": [],"string": " algorithm without constraints and the non-smooth algorithm "},{"type": "literal","children": [],"string": "\"nd\""},{"type": "text","children": [],"string": " without constraints."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<stop>"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a sequence of arguments containing the parameters controlling the convergence of the algorithm. The following sequences are available: "},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "where:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nap"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "maximum number of calls to "},{"type": "literal","children": [],"string": "costf"},{"type": "text","children": [],"string": " allowed (default "},{"type": "literal","children": [],"string": "nap=100"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "maximum number of iterations allowed (default "},{"type": "literal","children": [],"string": "iter=100"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsg"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "threshold on gradient norm (default "},{"type": "literal","children": [],"string": "epsg= %eps"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "threshold controlling decreasing of "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " (default "},{"type": "literal","children": [],"string": "epsf=0"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsx"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "threshold controlling variation of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " (default "},{"type": "literal","children": [],"string": "epsx=0"},{"type": "text","children": [],"string": "). This vector (possibly matrix) with same size as "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": " can be used to scale "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<params>"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "in the case where the objective function is a C or Fortran routine, a sequence of arguments containing the method to communicate with the objective function. This option has no meaning when the cost function is a Scilab script."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The available values for <params> are the following."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "\"in\""},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "That mode allows to allocate memory in the internal Scilab workspace so that the objective function can get arrays with the required size, but without directly allocating the memory. The "},{"type": "literal","children": [],"string": "\"in\""},{"type": "text","children": [],"string": " value stands for \"initialization\". In that mode, before the value and derivative of the objective function is to be computed, there is a dialog between the "},{"type": "literal","children": [],"string": "optim"},{"type": "text","children": [],"string": " Scilab primitive and the objective function "},{"type": "literal","children": [],"string": "costf"},{"type": "text","children": [],"string": ". In this dialog, the objective function is called two times, with particular values of the "},{"type": "literal","children": [],"string": "ind"},{"type": "text","children": [],"string": " parameter. The first time, "},{"type": "literal","children": [],"string": "ind"},{"type": "text","children": [],"string": " is set to 10 and the objective function is expected to set the "},{"type": "literal","children": [],"string": "nizs"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "nrzs"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "ndzs"},{"type": "text","children": [],"string": " integer parameters of the "},{"type": "literal","children": [],"string": "nird"},{"type": "text","children": [],"string": " common, which is defined as:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This allows Scilab to allocate memory inside its internal workspace. The second time the objective function is called, "},{"type": "literal","children": [],"string": "ind"},{"type": "text","children": [],"string": " is set to 11 and the objective function is expected to set the "},{"type": "literal","children": [],"string": "ti"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "tr"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "tz"},{"type": "text","children": [],"string": " arrays. After this initialization phase, each time it is called, the objective function is ensured that the "},{"type": "literal","children": [],"string": "ti"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "tr"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "tz"},{"type": "text","children": [],"string": " arrays which are passed to it have the values that have been previously initialized."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "\"ti\",valti"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "In this mode, "},{"type": "literal","children": [],"string": "valti"},{"type": "text","children": [],"string": " is expected to be a Scilab vector variable containing integers. Whenever the objective function is called, the "},{"type": "literal","children": [],"string": "ti"},{"type": "text","children": [],"string": " array it receives contains the values of the Scilab variable."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "\"td\", valtd"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "In this mode, "},{"type": "literal","children": [],"string": "valtd"},{"type": "text","children": [],"string": " is expected to be a Scilab vector variable containing double values. Whenever the objective function is called, the "},{"type": "literal","children": [],"string": "td"},{"type": "text","children": [],"string": " array it receives contains the values of the Scilab variable."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "\"ti\",valti,\"td\",valtd"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This mode combines the two previous modes."},"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "\"si\""},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "In this mode, "},{"type": "literal","children": [],"string": "valti"},{"type": "text","children": [],"string": " is saved in the output variable "},{"type": "varname","children": [],"string": "ti"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "\"sd\""},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "In this mode, "},{"type": "literal","children": [],"string": "valtd"},{"type": "text","children": [],"string": " is saved in the output variable "},{"type": "varname","children": [],"string": "td"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "\"si\",\"sd\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This mode combines the two previous modes."},"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "ti, td"},{"type": "text","children": [],"string": " arrays may be used so that the objective function can be computed. For example, if the objective function is a polynomial, the ti array may may be used to store the coefficients of that polynomial."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Users should choose carefully between the "},{"type": "literal","children": [],"string": "\"in\""},{"type": "text","children": [],"string": " mode and the "},{"type": "literal","children": [],"string": "\"ti\""},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "\"td\""},{"type": "text","children": [],"string": " mode, depending on the fact that the arrays are Scilab variables or not. If the data is available as Scilab variables, then the "},{"type": "literal","children": [],"string": "\"ti\", valti, \"td\", valtd"},{"type": "text","children": [],"string": " mode should be chosen. If the data is available directly from the objective function, the "},{"type": "literal","children": [],"string": "\"in\""},{"type": "text","children": [],"string": " mode should be chosen. Notice that there is no "},{"type": "literal","children": [],"string": "\"tr\""},{"type": "text","children": [],"string": " mode, since, in Scilab, all real values are doubles."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If neither the \"in\" mode, nor the \"ti\", \"td\" mode is chosen, that is, if <params> is not present as an option of the optim primitive, the user may should not assume that the ti,tr and td arrays can be used : reading or writing the arrays may generate unpredictable results."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"iprint=iflag\""},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "named argument used to set the trace mode (default "},{"type": "literal","children": [],"string": "iprint=0"},{"type": "text","children": [],"string": ", which prints no messages). If "},{"type": "varname","children": [],"string": "iprint"},{"type": "text","children": [],"string": " is greater or equal to 1, more information are printed, depending on the algorithm chosen. More precisely:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"qn\""},{"type": "text","children": [],"string": " without constraints: from "},{"type": "literal","children": [],"string": "iflag=1"},{"type": "text","children": [],"string": " to "},{"type": "literal","children": [],"string": "iflag=3"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=1"},{"type": "text","children": [],"string": ": initial and final print,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=2"},{"type": "text","children": [],"string": ": one line per iteration (number of iterations, number of calls to f, value of f),"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=3"},{"type": "text","children": [],"string": ": extra information on line searches."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"qn\""},{"type": "text","children": [],"string": " with bounds constraints: from "},{"type": "literal","children": [],"string": "iflag=1"},{"type": "text","children": [],"string": " to "},{"type": "literal","children": [],"string": "iflag=4"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=1"},{"type": "text","children": [],"string": ": initial and final print,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=2"},{"type": "text","children": [],"string": ": one line per iteration (number of iterations, number of calls to f, value of f),"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=3"},{"type": "text","children": [],"string": ": extra information on line searches."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"gc\""},{"type": "text","children": [],"string": " without constraints: from "},{"type": "literal","children": [],"string": "iflag=1"},{"type": "text","children": [],"string": " to "},{"type": "literal","children": [],"string": "iflag=5"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=1"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "iflag>=2"},{"type": "text","children": [],"string": ": initial and final print,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag=3"},{"type": "text","children": [],"string": ": one line per iteration (number of iterations, number of calls to f, value of f),"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=4"},{"type": "text","children": [],"string": ": extra information on lines searches."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"gc\""},{"type": "text","children": [],"string": " with bounds constraints: from "},{"type": "literal","children": [],"string": "iflag=1"},{"type": "text","children": [],"string": " to "},{"type": "literal","children": [],"string": "iflag=3"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=1"},{"type": "text","children": [],"string": ": initial and final print,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=2"},{"type": "text","children": [],"string": ": one print per iteration,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag=3"},{"type": "text","children": [],"string": ": extra information."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"nd\""},{"type": "text","children": [],"string": " with bounds constraints: from "},{"type": "literal","children": [],"string": "iflag=1"},{"type": "text","children": [],"string": " to "},{"type": "literal","children": [],"string": "iflag=8"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=1"},{"type": "text","children": [],"string": ": initial and final print,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=2"},{"type": "text","children": [],"string": ": one print on each convergence,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=3"},{"type": "text","children": [],"string": ": one print per iteration,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=4"},{"type": "text","children": [],"string": ": line search,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=5"},{"type": "text","children": [],"string": ": various tolerances,"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "iflag>=6"},{"type": "text","children": [],"string": ": weight and information on the computation of direction."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "iprint"},{"type": "text","children": [],"string": " is lower than 0, then the cost function is evaluated every "},{"type": "varname","children": [],"string": "-m"},{"type": "text","children": [],"string": " iterations, with "},{"type": "literal","children": [],"string": "ind=1"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the value of the objective function at the point "},{"type": "literal","children": [],"string": "xopt"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "best value of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " found."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the gradient of the objective function at the point "},{"type": "literal","children": [],"string": "xopt"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "work"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "working array for hot restart for quasi-Newton method. This array is automatically initialized by "},{"type": "literal","children": [],"string": "optim"},{"type": "text","children": [],"string": " when "},{"type": "literal","children": [],"string": "optim"},{"type": "text","children": [],"string": " is invoked. It can be used as input parameter to speed-up the calculations."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iters"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar, the number of iterations that is displayed when "},{"type": "literal","children": [],"string": "iprint=2"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "evals"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar, the number of "},{"type": "literal","children": [],"string": "cost"},{"type": "text","children": [],"string": " function evaluations that is displayed when "},{"type": "literal","children": [],"string": "iprint=2"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar, a termination indicator. The success flag is "},{"type": "literal","children": [],"string": "9"},{"type": "text","children": [],"string": " and possible values are: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=1"},{"type": "text","children": [],"string": ": Norm of projected gradient lower than..."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=2"},{"type": "text","children": [],"string": ": At last iteration f decreases by less than..."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=3"},{"type": "text","children": [],"string": ": Optimization stops because of too small variations for x."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=4"},{"type": "text","children": [],"string": ": Optim stops: maximum number of calls to f is reached."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=5"},{"type": "text","children": [],"string": ": Optim stops: maximum number of iterations is reached."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=6"},{"type": "text","children": [],"string": ": Optim stops: too small variations in gradient direction."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=7"},{"type": "text","children": [],"string": ": Stop during calculation of descent direction."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=8"},{"type": "text","children": [],"string": ": Stop during calculation of estimated hessian."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=9"},{"type": "text","children": [],"string": ": End of optimization, successful completion."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "err=10"},{"type": "text","children": [],"string": ": End of optimization (linear search fails)."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["external", "qpsolve", "datafit", "leastsq", "numderivative", "NDcost"]},"qld": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "qld"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear quadratic programming solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x [,lagr [,info]]] = qld(Q, p, C, b, ci, cs, me [,tol])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real positive definite symmetric matrix (dimension "},{"type": "literal","children": [],"string": " n x n "},{"type": "text","children": [],"string": " )."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real (column) vector (dimension "},{"type": "literal","children": [],"string": " n"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix (dimension "},{"type": "literal","children": [],"string": " (me + md) x n "},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "RHS column vector (dimension "},{"type": "literal","children": [],"string": " (me + md) "},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ci"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "column vector of lower-bounds (dimension "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "). If there are no lower bound constraints, put "},{"type": "literal","children": [],"string": "ci = []"},{"type": "text","children": [],"string": ". If some components of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " are bounded from below, set the other (unconstrained) values of "},{"type": "literal","children": [],"string": "ci"},{"type": "text","children": [],"string": " to a very large negative number (e.g. "},{"type": "literal","children": [],"string": " ci(j) = -number_properties('huge') "},{"type": "text","children": [],"string": " ."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of upper-bounds. (Same remarks as above)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "me"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "number of equality constraints (i.e. "},{"type": "literal","children": [],"string": " C(1:me,:)*x = b(1:me) "},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Floating point number, required precision."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optimal solution found."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lagr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of Lagrange multipliers. "},{"type": "para","children": [{"type": "text","children": [],"string": "If lower and upper-bounds "},{"type": "literal","children": [],"string": "ci, cs"},{"type": "text","children": [],"string": " are provided, "},{"type": "literal","children": [],"string": "lagr"},{"type": "text","children": [],"string": " has "},{"type": "literal","children": [],"string": "me + md + 2* n"},{"type": "text","children": [],"string": " components. The components "},{"type": "literal","children": [],"string": "lagr(1:me + md)"},{"type": "text","children": [],"string": " are associated with the linear constraints and "},{"type": "literal","children": [],"string": " lagr (me + md + 1 : 2 * n) "},{"type": "text","children": [],"string": " are associated with the lower and upper bounds constraints."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "If an upper-bound (resp. lower-bound) constraint "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " is active "},{"type": "literal","children": [],"string": "lagr(i)"},{"type": "text","children": [],"string": " is > 0 (resp. <0). If no bounds are provided, "},{"type": "literal","children": [],"string": "lagr"},{"type": "text","children": [],"string": " has only "},{"type": "literal","children": [],"string": "me + md"},{"type": "text","children": [],"string": " components."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "On successful termination, all values of "},{"type": "literal","children": [],"string": "lagr"},{"type": "text","children": [],"string": " with respect to inequalities and bounds should be greater or equal to zero."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer, return the execution status instead of sending errors."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "info==1 : Too many iterations needed"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "info==2 : Accuracy insufficient to satisfy convergence criterion"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "info==5 : Length of working array is too short"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "info==10: The constraints are inconsistent"},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["qpsolve", "optim"]},"qp_solve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "qp_solve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear quadratic programming solver builtin"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x [,iact [,iter [,f [,info]]]]] = qp_solve(Q, p, C, b, me)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real positive definite symmetric matrix (dimension "},{"type": "literal","children": [],"string": "n x n "},{"type": "text","children": [],"string": " )."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real (column) vector (dimension "},{"type": "literal","children": [],"string": " n"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix (dimension "},{"type": "literal","children": [],"string": " (me + md) x n"},{"type": "text","children": [],"string": "). This matrix may be dense or sparse."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "RHS column vector (dimension "},{"type": "literal","children": [],"string": " m=(me + md) "},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "me"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "number of equality constraints (i.e. "},{"type": "literal","children": [],"string": "x'*C(:,1:me) = b(1:me)' "},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optimal solution found."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iact"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector, indicator of active constraints. The non zero entries give the index of the active constraints. The entries of the iact vector are ordered this way: equality constraints come first, then come the inequality constraints."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2x1 vector, first component gives the number of \"main\" iterations, the second one says how many constraints were deleted after they became active."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, error flag. If it is present and qp_solve encounters an error, then a warning is issued. The current results are returned, so in this case they are probably inaccurate."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim", "qld", "qpsolve"]},"qpsolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "qpsolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear quadratic programming solver"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x [,iact [,iter [,f]]]]=qpsolve(Q,p,C,b,ci,cs,me)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Q"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real positive definite symmetric matrix (dimension "},{"type": "literal","children": [],"string": "n x n "},{"type": "text","children": [],"string": " )."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real (column) vector (dimension "},{"type": "literal","children": [],"string": " n"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "C"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real matrix (dimension "},{"type": "literal","children": [],"string": " (me + md) x n"},{"type": "text","children": [],"string": "). This matrix may be dense or sparse."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "RHS column vector (dimension "},{"type": "literal","children": [],"string": " m=(me + md) "},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ci"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "column vector of lower-bounds (dimension "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "). If there are no lower bound constraints, put "},{"type": "literal","children": [],"string": "ci = []"},{"type": "text","children": [],"string": ". If some components of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " are bounded from below, set the other (unconstrained) values of "},{"type": "literal","children": [],"string": "ci"},{"type": "text","children": [],"string": " to a very large negative number (e.g. "},{"type": "literal","children": [],"string": "ci(j) = -number_properties('huge') "},{"type": "text","children": [],"string": " ."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of upper-bounds. (Same remarks as above)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "me"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "number of equality constraints (i.e. "},{"type": "literal","children": [],"string": "C(1:me,:)*x = b(1:me) "},{"type": "text","children": [],"string": " )"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optimal solution found."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iact"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector, indicator of active constraints. The first non zero entries give the index of the active constraints"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": ". 2x1 vector, first component gives the number of \"main\" iterations, the second one says how many constraints were deleted after they became active."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim", "qp_solve", "qld"]},"readmps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "readmps"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Reads a Linear Program from a MPS file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mps= readmps (file-name, bounds);", "mps= readmps (file-name, bounds,maxsizes);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file-name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the name of the mps file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bounds"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "2-vector "},{"type": "literal","children": [],"string": "[lowbound,upbound]"},{"type": "text","children": [],"string": " , default lower and upper bounds"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxsizes"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "3-vector "},{"type": "literal","children": [],"string": "[maxm,maxn,maxnza]"},{"type": "text","children": [],"string": " Maximum number of constraints and variables, maximum number of nonzeros entries in the LP constraint matrix. If omitted readmps reads the file once just to compute these numbers."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mps"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a tlist, with type \"mps\" and with following fields"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "irobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer (index of the objective row)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "namec"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string (Name of the objective)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nameb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string (Name of the right hand side)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "namran"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string (Name of the ranges section)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nambnd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string (Name of the bounds section)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string (Name of the  LP problem)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rownames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string column vector (Name of the rows)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colnames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string row vector (Name of the columns)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rowstat"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer vector,  row types:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row type is \"=\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row type is \">=\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row type is \"<=\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "objective row"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "5"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "other free row"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rowcode"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "real matrix "},{"type": "literal","children": [],"string": "[hdrowcd,lnkrow]"},{"type": "text","children": [],"string": " with"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdrowcd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector (Header to the linked list of rows with the same codes)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lnkrow"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector (Linked list of rows with the same codes)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colcode"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "real matrix "},{"type": "literal","children": [],"string": "[hdcolcd,lnkcol]"},{"type": "text","children": [],"string": " with"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdcolcd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector (Header to the linked list of columns with the same codes)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lnkcol"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector (Linked list of columns with the same codes)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rownmbs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector (Row numbers of nonzeros in columns of matrix A.)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colpnts"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector (Pointers to the beginning of columns of matrix A)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "acoeff"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector (Array of nonzero elements for each column)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rhs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector ( Right hand side of the linear program)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ranges"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector of constraint ranges."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bounds"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "real matrix "},{"type": "literal","children": [],"string": "[lbounds,ubounds]"},{"type": "text","children": [],"string": " with"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ubounds"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "full column vector of upper bounds"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lbounds"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "full column vector of lower bounds"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stavar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "full column vector of variable status"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "standard (non negative) variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "upper bounded variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lower bounded variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lower and upper bounded variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "minus infinity type variable  i.e -inf<x<=u"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "5"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "plus infinity type variable  i.e l<=x< inf"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "6"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "fixed type variable  i.e l=x=u"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "free variable"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"optim_sa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optim_sa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A Simulated Annealing optimization method"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x_best = optim_sa(x0,f,ItExt,ItInt,T0,Log,temp_law,param_temp_law,neigh_func,param_neigh_func)", "[x_best,f_best] = optim_sa(..)", "[x_best,f_best,mean_list] = optim_sa(..)", "[x_best,f_best,mean_list,var_list] = optim_sa(..)", "[x_best,f_best,mean_list,var_list,f_history] = optim_sa(..)", "[x_best,f_best,mean_list,var_list,f_history,temp_list] = optim_sa(..)", "[x_best,f_best,mean_list,var_list,f_history,temp_list,x_history] = optim_sa(..)", "[x_best,f_best,mean_list,var_list,f_history,temp_list,x_history,iter] = optim_sa(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the initial solution"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the objective function to be optimized (the prototype if f(x))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ItExt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of temperature decrease"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ItInt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of iterations during one temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the initial temperature (see compute_initial_temp to compute easily this temperature)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Log"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "if %T, some information will be displayed during the run of the simulated annealing"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "temp_law"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature decrease law (see temp_law_default for an example of such a function)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_temp_law"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a structure (of any kind - it depends on the temperature law used) which is transmitted as a parameter to temp_law"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "neigh_func"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a function which computes a neighbor of a given point (see neigh_func_default for an example of such a function)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_neigh_func"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a structure (of any kind like vector, list, it depends on the neighborhood function used) which is transmitted as a parameter to neigh_func"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_best"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the best solution found so far"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f_best"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the objective function value corresponding to x_best"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mean_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mean of the objective function value for each temperature stage. A vector of float (optional)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the variance of the objective function values for each temperature stage. A vector of float (optional)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f_history"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the computed objective function values for each iteration. Each input of the list corresponds to a temperature stage. Each input of the list is a vector of float which gathers all the objective function values computed during the corresponding temperature stage - (optional)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "temp_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of temperature computed for each temperature stage. A vector of float (optional)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_history"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the parameter values computed for each iteration. Each input of the list corresponds to a temperature stage. Each input of the list is a vector of input variables which corresponds to all the variables computed during the corresponding temperature stage - (optional - can slow down a lot the execution of optim_sa)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a double, the actual number of external iterations in the algorithm (optional)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["compute_initial_temp", "neigh_func_default", "temp_law_default"]},"accept_func_default": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "accept_func_default"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The default Simulated Annealing acceptation function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Level = accept_func_default(F_current, F_neigh, T)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F_current"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current function value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F_neigh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the function value of the neighbour"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current temperature"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Level "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the level of acceptation, in the interval [0,1]."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "accept_func_vfsa"},"accept_func_vfsa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "accept_func_vfsa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The Very Fast Simulated Annealing acceptation function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Level = accept_func_vfsa(F_current, F_neigh, T)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F_current"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current function value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F_neigh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the function value of the neighbour"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current temperature"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Level "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the level of acceptation, in the interval [0,1]."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "accept_func_default"},"compute_initial_temp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "compute_initial_temp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A SA function which allows to compute the initial temperature of the simulated annealing"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "T_init = compute_initial_temp(x0,f,proba_init, ItMX [, param] )"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the starting point"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the objective function which will be send to the simulated annealing for optimization"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "proba_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the initial probability of accepting a bad solution (usually around 0.7)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ItMX"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of iterations of random walk (usually around 100)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "optional, a data structure managed with the parameters module."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "optim_sa"},{"type": "text","children": [],"string": " function is sensitive to the following fields."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"neigh_func\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a function which computes a neighbor of a given point. The default neighbourhood function is "},{"type": "literal","children": [],"string": "neigh_func_default"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"type_accept\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the type of acceptation function. If the type is equal to \"sa\", then the initial temperature is computed from "},{"type": "literal","children": [],"string": "T_init = - f_sum ./ log(proba_init)"},{"type": "text","children": [],"string": ". If the type is equal to \"vfsa\", it is computed from "},{"type": "literal","children": [],"string": "T_init = abs(f_sum / log(1/proba_init - 1))"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The initial temperature corresponding to the given probability of accepting a bad solution"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "neigh_func_default", "temp_law_default"]},"neigh_func_csa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "neigh_func_csa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The classical neighborhood relationship for the simulated annealing"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x_neigh = neigh_func_csa(x_current,T,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_current"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the point for which we want to compute a neighbor"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current temperature"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector with the same size than x_current. A normalization vector which allows to distort the shape of the neighborhood. This parameter allows to take into account the differences of interval of variation between variables. By default, this parameter is set to a vector of ones."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_neigh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the computed neighbor"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["neigh_func_default", "temp_law_huang", "optim_sa"]},"neigh_func_default": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "neigh_func_default"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A SA function which computes a neighbor of a given point"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x_neigh = neigh_func_default(x_current,T)", "x_neigh = neigh_func_default(x_current,T,param)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_current"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the point for which we want to compute a neighbor"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current temperature. This parameter is ignored but is there to make all the neighbour function consistent."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a two columns vector. The first column correspond to the negative amplitude of variation and the second column corresponds to the positive amplitude of variation of the neighborhood. By default, the first column is a column of -0.1 and the second column is a column of 0.1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_neigh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the computed neighbor"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "compute_initial_temp", "temp_law_default"]},"neigh_func_fsa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "neigh_func_fsa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The Fast Simulated Annealing neighborhood relationship"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x_neigh = neigh_func_fsa(x_current,T,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_current"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the point for which we want to compute a neighbor"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current temperature"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector with the same size than x_current. A normalization vector which allows to distort the shape of the neighborhood. This parameter allows to take into account the differences of interval of variation between variables. By default, this parameter is set to a vector of ones."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_neigh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the computed neighbor"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "temp_law_fsa", "neigh_func_default"]},"neigh_func_vfsa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "neigh_func_vfsa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The Very Fast Simulated Annealing neighborhood relationship"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x_neigh = neigh_func_vfsa(x_current,T,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_current"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the point for which we want to compute a neighbor"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the current temperature"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a ones column vector. The column correspond to the amplitude of variation of the neighborhood. By default, the column is a column of 0.1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_neigh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the computed neighbor"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "neigh_func_vfsa", "temp_law_huang"]},"temp_law_csa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "temp_law_csa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The classical temperature decrease law"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "T_out = temp_law_csa(T_in,step_mean,step_var,temp_stage,n,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature at the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_mean"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mean value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the variance value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "temp_stage"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the index of the current temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the dimension of the decision variable (the x in f(x))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "not used for this temperature law"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature for the temperature stage to come"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "temp_law_huang", "neigh_func_default"]},"temp_law_default": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "temp_law_default"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A SA function which computed the temperature of the next temperature stage"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "T_next = temp_law_default(T,step_mean,step_var,temp_stage,n,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature applied during the last temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_mean"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mean of the objective function values computed during the last temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the variance of the objective function values computed during the last temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "temp_stage"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the index of the current temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the dimension of the decision variable (the x in f(x))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a float between 0 and 1. Corresponds to the decrease in temperature of the geometric law (0.9 by default)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_next"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the new temperature to be applied for the next temperature stage"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "compute_initial_temp", "neigh_func_default"]},"temp_law_fsa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "temp_law_fsa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The Szu and Hartley Fast simulated annealing"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "T_out = temp_law_fsa(T_in,step_mean,step_var,temp_stage,n,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature at the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_mean"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mean value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the variance value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "temp_stage"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the index of the current temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the dimension of the decision variable (the x in f(x))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "not used for this temperature law"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature for the temperature stage to come"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "temp_law_huang", "neigh_func_default"]},"temp_law_huang": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "temp_law_huang"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The Huang temperature decrease law for the simulated annealing"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "T_out = temp_law_huang(T_in,step_mean,step_var,temp_stage,n,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature at the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_mean"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mean value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the variance value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "temp_stage"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the index of the current temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the dimension of the decision variable (the x in f(x))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a float corresponding to the lambda parameter of the Huang temperature decrease law (0.01 by default)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature for the temperature stage to come"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "temp_law_csa", "neigh_func_csa"]},"temp_law_vfsa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "temp_law_vfsa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "This function implements the Very Fast Simulated Annealing from L. Ingber"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "T_out = temp_law_vfsa(T_in,step_mean,step_var,temp_stage,n, param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature at the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_mean"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mean value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step_var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the variance value of the objective function computed during the current stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "temp_stage"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the index of the current temperature stage"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the dimension of the decision variable (the x in f(x))"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a float: the 'c' parameter of the VFSA method (0.01 by default)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the temperature for the temperature stage to come"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_sa", "neigh_func_vfsa", "temp_law_huang"]},"optim_ga": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optim_ga"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A flexible genetic algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[pop_opt,fobj_pop_opt,pop_init,fobj_pop_init] = optim_ga(ga_f,pop_size,nb_generation,p_mut,p_cross,Log,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ga_f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the function to be optimized. The prototype if y = f(x) or y = list(f,p1,p2,...)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_size"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the size of the population of individuals (default value: 100)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb_generation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of generations (equivalent to the number of iterations in classical optimization) to be computed (default value: 10)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_mut"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mutation probability (default value: 0.1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_cross"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the crossover probability (default value: 0.7)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Log"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if %T, will call the output function at the end of each iteration, see "},{"type": "literal","children": [],"string": "\"output_func\""},{"type": "text","children": [],"string": " under "},{"type": "varname","children": [],"string": "param"},{"type": "text","children": [],"string": " variable below."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"codage_func\": the function which will perform the coding and decoding of individuals (default function: "},{"type": "link","children": [],"string": "coding_ga_identity"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"init_func\": the function which will perform the initialization of the population (default function: "},{"type": "link","children": [],"string": "init_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"dimension\", \"minbounds\" and \"maxbounds\": parameters used by the initialization function to define the initial population."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"crossover_func\": the function which will perform the crossover between two individuals (default function: "},{"type": "link","children": [],"string": "crossover_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"mutation_func\": the function which will perform the mutation of one individual (default function: "},{"type": "link","children": [],"string": "mutation_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"selection_func\": the function which will perform the selection of individuals at the end of a generation (default function: "},{"type": "link","children": [],"string": "selection_ga_elitist"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"nb_couples\": the number of couples which will be selected so as to perform the crossover and mutation (default value: 100)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"pressure\": the value of the efficiency of the worst individual (default value: 0.05)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"output_func\": a callback function called after each generation if "},{"type": "varname","children": [],"string": "Log"},{"type": "text","children": [],"string": " is %T (default function "},{"type": "link","children": [],"string": "output_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the population of optimal individuals."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of objective function values associated to pop_opt (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the initial population of individuals (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of objective function values associated to pop_init (optional)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_moga", "optim_nsga", "optim_nsga2"]},"optim_moga": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optim_moga"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "multi-objective genetic algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[pop_opt,fobj_pop_opt,pop_init,fobj_pop_init] = optim_moga(ga_f,pop_size,nb_generation,p_mut,p_cross,Log,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ga_f"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "the function to be optimized. The header of the function is the following :"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "or"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_size"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the size of the population of individuals (default value: 100)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb_generation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of generations (equivalent to the number of iterations in classical optimization) to be computed (default value: 10)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_mut"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mutation probability (default value: 0.1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_cross"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the crossover probability (default value: 0.7)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Log"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if %T, will call the output function at the end of each iteration, see "},{"type": "literal","children": [],"string": "\"output_func\""},{"type": "text","children": [],"string": " under "},{"type": "varname","children": [],"string": "param"},{"type": "text","children": [],"string": " variable below."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'codage_func': the function which will perform the coding and decoding of individuals (default function: "},{"type": "link","children": [],"string": "coding_ga_identity"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'init_func': the function which will perform the initialization of the population (default function: "},{"type": "link","children": [],"string": "init_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'dimension', 'minbounds' and 'maxbounds': parameters used by the initialization function to define the initial population."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'crossover_func': the function which will perform the crossover between two individuals (default function: "},{"type": "link","children": [],"string": "crossover_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'mutation_func': the function which will perform the mutation of one individual (default function: "},{"type": "link","children": [],"string": "mutation_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'selection_func': the function whcih will perform the selection of individuals at the end of a generation (default function: "},{"type": "link","children": [],"string": "selection_ga_elitist"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'nb_couples': the number of couples which will be selected so as to perform the crossover and mutation (default value: 100)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'pressure': the value the efficiency of the worst individual (default value: 0.05)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"output_func\": a callback function called after each generation if "},{"type": "varname","children": [],"string": "Log"},{"type": "text","children": [],"string": " is %T (default function "},{"type": "literal","children": [],"string": "output_moga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the population of optimal individuals."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of multi-objective function values associated to pop_opt (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the initial population of individuals (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of multi-objective function values associated to pop_init (optional)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_ga", "optim_nsga", "optim_nsga2"]},"optim_nsga": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optim_nsga"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A multi-objective Niched Sharing Genetic Algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[pop_opt,fobj_pop_opt,pop_init,fobj_pop_init] = optim_nsga(ga_f,pop_size,nb_generation,p_mut,p_cross,Log,param,sigma,pow)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ga_f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the function to be optimized. The prototype if y = f(x) or y = list(f,p1,p2,...)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_size"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the size of the population of individuals (default value: 100)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb_generation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of generations (equivalent to the number of iterations in classical optimization) to be computed (default value: 10)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_mut"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mutation probability (default value: 0.1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_cross"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the crossover probability (default value: 0.7)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Log"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if %T, will call the output function at the end of each iteration, see "},{"type": "literal","children": [],"string": "\"output_func\""},{"type": "text","children": [],"string": " under "},{"type": "varname","children": [],"string": "param"},{"type": "text","children": [],"string": " variable below."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters. "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'codage_func': the function which will perform the coding and decoding of individuals (default function: "},{"type": "link","children": [],"string": "coding_ga_identity"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'init_func': the function which will perform the initialization of the population (default function: "},{"type": "link","children": [],"string": "init_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'dimension', 'minbounds' and 'maxbounds': parameters used by the initialization function to define the initial population."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'crossover_func': the function which will perform the crossover between two individuals (default function: "},{"type": "link","children": [],"string": "crossover_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'mutation_func': the function which will perform the mutation of one individual (default function: "},{"type": "link","children": [],"string": "mutation_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'selection_func': the function whcih will perform the selection of individuals at the end of a generation (default function: "},{"type": "link","children": [],"string": "selection_ga_elitist"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'nb_couples': the number of couples which will be selected so as to perform the crossover and mutation (default value: 100)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'pressure': the value the efficiency of the worst individual (default value: 0.05)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"output_func\": a callback function called after each generation if "},{"type": "varname","children": [],"string": "Log"},{"type": "text","children": [],"string": " is %T (default function "},{"type": "literal","children": [],"string": "output_nsga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sigma"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the radius of the sharing area."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pow"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the power coefficient of the penalty formula."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the population of optimal individuals."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of objective function values associated to pop_opt (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the initial population of individuals (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of objective function values associated to pop_init (optional)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_moga", "optim_ga", "optim_nsga2"]},"optim_nsga2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optim_nsga2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A multi-objective Niched Sharing Genetic Algorithm version 2"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[pop_opt,fobj_pop_opt,pop_init,fobj_pop_init] = optim_nsga2(ga_f,pop_size,nb_generation,p_mut,p_cross,Log,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ga_f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the function to be optimized. The prototype if y = f(x) or y = list(f,p1,p2,...)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_size"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the size of the population of individuals (default value: 100)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb_generation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of generations (equivalent to the number of iterations in classical optimization) to be computed (default value: 10)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_mut"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the mutation probability (default value: 0.1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p_cross"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the crossover probability (default value: 0.7)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Log"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if %T, will call the output function at the end of each iteration, see "},{"type": "literal","children": [],"string": "\"output_func\""},{"type": "text","children": [],"string": " under "},{"type": "varname","children": [],"string": "param"},{"type": "text","children": [],"string": " variable below."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters. "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'codage_func': the function which will perform the coding and decoding of individuals (default function: "},{"type": "link","children": [],"string": "coding_ga_identity"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'init_func': the function which will perform the initialization of the population (default function: "},{"type": "link","children": [],"string": "init_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'dimension', 'minbounds' and 'maxbounds': parameters used by the initialization function to define the initial population."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'crossover_func': the function which will perform the crossover between two individuals (default function: "},{"type": "link","children": [],"string": "crossover_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'mutation_func': the function which will perform the mutation of one individual (default function: "},{"type": "link","children": [],"string": "mutation_ga_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "'selection_func': the function whcih will perform the selection of individuals at the end of a generation (default function: "},{"type": "link","children": [],"string": "selection_ga_elitist"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'nb_couples': the number of couples which will be selected so as to perform the crossover and mutation (default value: 100)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'pressure': the value the efficiency of the worst individual (default value: 0.05)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"output_func\": a callback function called after each generation if "},{"type": "varname","children": [],"string": "Log"},{"type": "text","children": [],"string": " is %T (default function "},{"type": "literal","children": [],"string": "output_nsga2_default"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the population of optimal individuals."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_opt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of objective function values associated to pop_opt (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the initial population of individuals (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fobj_pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of objective function values associated to pop_init (optional)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_moga", "optim_ga", "optim_nsga"]},"coding_ga_binary": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "coding_ga_binary"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A function which performs conversion between binary and continuous representation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pop_out = coding_ga_binary(pop_in,direction,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list which contains all the individuals in the current population."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "direction"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'code' or 'decode'. If direction == 'code' then we perform a continuous to binary encoding. Else, we convert from binary to continuous."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a parameter list."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'binary_length': the number of bits by variables. If binary_length = 8 and the variable X is of dimension 2 then the binary code will be 16 bits length."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'minboun': a vector of minimum bounds for the variable X."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'maxbound': a vector of maximum bounds for the variable X."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the population coded to binary or decoded to continuous values."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_ga", "mutation_ga_binary", "crossover_ga_binary"]},"coding_ga_identity": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "coding_ga_identity"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A \"no-operation\" conversion function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pop_out = coding_ga_identity(pop_in,direction,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the population to be converted."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "direction"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"code\" or \"decode\". This value has no influence of the state of pop_in."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a parameter list. For this function, there are no useful parameters set."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pop_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a population identical to pop_in."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mutation_ga_default", "crossover_ga_default", "init_ga_default", "optim_ga"]},"crossover_ga_binary": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "crossover_ga_binary"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A crossover function for binary code"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Crossed_Indiv1, Crossed_Indiv2, mix] = crossover_ga_binary(Indiv1, Indiv2, param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv1"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "the first individual (here a binary code) to be crossed-over."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv2"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "the second individual to be crossed-over."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"binary_length\""},{"type": "text","children": [],"string": ": an integer, the length of the binary code (default 8)."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"multi_cross\""},{"type": "text","children": [],"string": ": a boolean. If "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " then we allow several cuts in the binary code (default "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"multi_cross_nb\""},{"type": "text","children": [],"string": ": an integer, the number of cuts in the binary code. Only used when multi_cross is set to %T (default 2)."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Crossed_Indiv1"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The first individual obtained by the cross-over function."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Crossed_Indiv2"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The second individual obtained by the cross-over function."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mix"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A vector of integers"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The positions the crossover occurred."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["crossover_ga_binary", "crossover_ga_default", "mutation_ga_binary", "optim_ga", "grand"]},"crossover_ga_default": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "crossover_ga_default"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A crossover function for continuous variable functions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Crossed_Indiv1,Crossed_Indiv2] = crossover_ga_default(Indiv1,Indiv2,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The first individual to be crossed-over."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The second individual to be crossed-over."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters. "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'beta': the range of the random generator. A random value will be sampled between -beta and 1+beta. This sampled value will be used to perform a convex combination between Indiv1 and Indiv2."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'minbound': a vector of minimum bounds for the variable X."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'maxbound': a vector of maximum bounds for the variable X."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Crossed_Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The first individual resulting from the crossover."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Crossed_Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The second individual resulting from the crossover."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["crossover_ga_binary", "mutation_ga_default", "init_ga_default", "optim_ga"]},"init_ga_default": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "init_ga_default"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A function a initialize a population"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Pop_init = init_ga_default(popsize,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "popsize"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the number of individuals to generate."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters. "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"dimension\": the size of the vector X. Default dimension=2. "},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"minbound\": a vector of minimum bounds for the variable X. Default minbound = -2*ones(1,dimension)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"maxbound\": a vector of maximum bounds for the variable X. Default maxbound=2*ones(1,dimension)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pop_init"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list which contains the initial population of individuals."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["crossover_ga_default", "mutation_ga_default", "mutation_ga_binary", "optim_ga"]},"mutation_ga_binary": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mutation_ga_binary"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A function which performs binary mutation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Mut_Indiv, pos] = mutation_ga_binary(Indiv,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The individual on which we will perform the mutation."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"binary_length\": an integer scalar, the size of the binary code. "},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"multi_mut\": a boolean. If %T, several random bits will be flipped."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"multi_mut_nb\": an integer scalar, the number of bits to be flipped. Only used when multi_mut is set to %T (default 2)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mut_Indiv"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The mutated individual."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pos"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A vector of integers."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The positions of the mutated bits."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["mutation_ga_default", "crossover_ga_binary", "init_ga_default", "optim_ga"]},"mutation_ga_default": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mutation_ga_default"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A continuous variable mutation function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Mut_Indiv = mutation_ga_default(Indiv,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The individual to be mutated."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters. "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'delta': a random perturbation will be sampled via an uniform distribution between -delta and + delta."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'minbound': a vector of minimum bound for the variable X."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'maxbound': a vector of maximum bound for the variable X."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mut_Indiv"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The resulting mutated individual."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mutation_ga_binary", "crossover_ga_default", "init_ga_default", "optim_ga"]},"output_ga_default": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "output_ga_default"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A simple output function used for logging purposes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "stop = output_ga_default(gen_index, nb_generation, Pop, FObj_Pop, param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gen_index"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The index of the current generation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb_generation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The maximum number of generations."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pop"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current population."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Pop"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The evaluation for each member of the population."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A parameter list for optional parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stop"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean. If %F, will stop the execution of the genetic algorithm."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_moga", "optim_nsga", "optim_nsga2"]},"pareto_filter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pareto_filter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A function which extracts non dominated solution from a set "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[F_out,X_out,Ind_out] = pareto_filter(F_in,X_in)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of multi-objective function values from which we want to extract the non dominated solutions."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the associated values in the parameters space."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of non dominated multi-objective function values."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the associated values in the parameters space."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Ind_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the set of indexes of the non dominated individuals selected from the set X_in."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optim_moga", "optim_nsga", "optim_nsga2"]},"selection_ga_elitist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "selection_ga_elitist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "An 'elitist' selection function "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Pop_out,FObj_Pop_out,Efficiency,MO_Total_FObj_out] = selection_ga_elitist(Pop_in,Indiv1,Indiv2,FObj_Pop_in,FObj_Indiv1,FObj_Indiv2,MO_Total_FObj_in,MO_FObj_Indiv1,MO_FObj_Indiv2,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pop_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The initial population of individuals."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a first set of children generated via crossover + mutation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a second set of children generated via crossover + mutation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Pop_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of objective function values associated to each individuals of Pop_in."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of objective function values associated to each individuals of Indiv1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of objective function values associated to each individuals of Indiv2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_Total_FObj_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of multi-objective function values associated to each individuals of Pop_in."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_FObj_Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of multi-objective function values associated to each individuals of Indiv1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_FObj_Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of multi-objective function values associated to each individuals of Indiv2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list of parameters. - 'pressure': the selection pressure coefficient. Each individuals with 0 efficiency will have an efficiency value equal to 'pressure'."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pop_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the selected individuals in a population of size pop_size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Pop_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the objective function values associated to each individuals of Pop_out."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Efficiency"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the efficiency values associated to each individuals of Pop_out."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_Total_FObj_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the multi-objective function values associated to each individuals of Pop_out."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["selection_ga_random", "mutation_ga_default", "crossover_ga_default", "init_ga_default", "optim_ga"]},"selection_ga_random": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "selection_ga_random"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A function which performs a random selection of individuals"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Pop_out,FObj_Pop_out,Efficiency,MO_Total_FObj_out] = selection_ga_random(Pop_in,Indiv1,Indiv2,FObj_Pop_in,FObj_Indiv1,FObj_Indiv2,MO_Total_FObj_in,MO_FObj_Indiv1,MO_FObj_Indiv2,param)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pop_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The initial population of individuals."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a first set of children generated via crossover + mutation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a second set of children generated via crossover + mutation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Pop_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of objective function values associated to each individuals of Pop_in."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of objective function values associated to each individuals of Indiv1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of objective function values associated to each individuals of Indiv2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_Total_FObj_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of multi-objective function values associated to each individuals of Pop_in."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_FObj_Indiv1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of multi-objective function values associated to each individuals of Indiv1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_FObj_Indiv2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of multi-objective function values associated to each individuals of Indiv2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list of parameters. "},"string": []},{"type": "itemizedlist","children": {"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'pressure': the selection pressure coefficient. Each individuals with 0 efficiency will have an efficiency value equal to 'pressure'."},"string": []},"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Pop_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the selected individuals in a population of size pop_size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "FObj_Pop_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the objective function values associated to each individuals of Pop_out."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Efficiency"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the efficiency values associated to each individuals of Pop_out."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "MO_Total_FObj_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "all the multi-objective function values associated to each individuals of Pop_out."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["selection_ga_elitist", "mutation_ga_default", "crossover_ga_default", "init_ga_default", "optim_ga"]},"datafit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datafit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Non linear (constrained) parametric fit of measured (weighted) data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[p, dmin, status] = datafit(G, Data, p0)", "[p, dmin, status] = datafit(G, Data, Wd, p0)", "[p, dmin, status] = datafit(G, Data, Wd, 'b', p_inf, p_sup, p0)", "[p, dmin, status] = datafit(G, Data, 'b', p_inf, p_sup, p0)", "[p, dmin, status] = datafit(G, Data [,Wd] [,Wg][,'b',p_inf,p_sup], p0 [,algo][,stop])", "[p, dmin, status] = datafit(G, DG, Data, ..)", "[p, dmin, status] = datafit(iprint, ..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p0"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matrix of initial guess of the model parameters (np elements). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"b\""},{"type": "listitem","children": [{"type": "text","children": [],"string": "keyword heading the "},{"type": "literal","children": [],"string": "p_inf, p_sup"},{"type": "text","children": [],"string": " sequence, where "},{"type": "literal","children": [],"string": "p_inf"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "p_sup"},{"type": "text","children": [],"string": " are real matrices with the "},{"type": "literal","children": [],"string": "p0"},{"type": "text","children": [],"string": " shape and sizes. "},{"type": "literal","children": [],"string": "p_inf"},{"type": "text","children": [],"string": " is the vector of lower bounds of respective "},{"type": "literal","children": [],"string": "p"},{"type": "text","children": [],"string": " components. "},{"type": "literal","children": [],"string": "p_sup"},{"type": "text","children": [],"string": " are upper bounds. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Matrix of the best fitting model parameters, with the "},{"type": "varname","children": [],"string": "p0"},{"type": "text","children": [],"string": " sizes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Data"},{"type": "listitem","children": [{"type": "text","children": [],"string": "(ndc × nd) matrix of experimental data points, where "},{"type": "literal","children": [],"string": "Data(:,i)"},{"type": "text","children": [],"string": " are the ndc coordinates of the ith measurement. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Wd"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Data weights (optional). Row vector with nd elements. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "G"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Gap function: handle of a function in Scilab language or of a compiled external function. Computed gap(s) between the fitting model and data may be of the first order, not quadratic."},"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "If G()"},{"type": "text","children": [],"string": " does not need any own input parameters (like constants), only arguments, its syntax must be "},{"type": "literal","children": [],"string": "g = G(p, Data)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "If G() "},{"type": "text","children": [],"string": " needs some own input parameters in addition to input arguments, its syntax must be "},{"type": "literal","children": [],"string": "g = G(p, Data, param1, param2, .., paramN)"},{"type": "text","children": [],"string": ". Then, "},{"type": "literal","children": [],"string": "list(G, param1, param2, .., paramN)"},{"type": "text","children": [],"string": " must be provided to "},{"type": "literal","children": [],"string": "datafit()"},{"type": "text","children": [],"string": ", instead of only "},{"type": "literal","children": [],"string": "G"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The sizes of G arguments are the following ones: "},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "DG"},{"type": "listitem","children": [{"type": "text","children": [],"string": "(optional) Handle of a function in Scilab language or of a compiled external function, computing the partial of "},{"type": "varname","children": [],"string": "G"},{"type": "text","children": [],"string": " wrt "},{"type": "varname","children": [],"string": "p"},{"type": "text","children": [],"string": ". Its syntax must be like "},{"type": "literal","children": [],"string": "S = DG(p, Data)"},{"type": "text","children": [],"string": ". The expected sizes of the result are (ng × np × 1) (Data-unvectorized) or (ng × np × nd) (Data-vectorized). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Wg"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Optional (ng × ng) matrix of weights of gaps definitions. Default = eye(). "},{"type": "varname","children": [],"string": "G()"},{"type": "text","children": [],"string": " defines as many types of gaps as required. Most often, a unique gap will be computed -- most often the vertical one --, but other ones can be computed (horizontal, nearest distance, etc). This matrix allows to weight the different types. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "algo"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Word "},{"type": "literal","children": [],"string": "'qn'"},{"type": "text","children": [],"string": " (quasi-Newton, default), or "},{"type": "literal","children": [],"string": "'gc'"},{"type": "text","children": [],"string": " (conjugate gradient), or "},{"type": "literal","children": [],"string": "'nd'"},{"type": "text","children": [],"string": " (non-differentiable. Then "},{"type": "varname","children": [],"string": "p_inf"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "p_sup"},{"type": "text","children": [],"string": " parameters bounds are not accepted). Selects the algorithm used to perform the fitting. See "},{"type": "function","children": [],"string": "optim()"},{"type": "text","children": [],"string": " for more details. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stop"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "sequence of optional arguments controlling the convergence of the fitting algorithm:"},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "'ar',nap, [iter [,epsg [,epsf [,epsx]]]]"},{"type": "text","children": [],"string": ", with"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dmin"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Average Model-to-data residual distance. It is equal to "},{"type": "literal","children": [],"string": "sqrt(fmin/ng/nd)"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "sqrt(fmin/ng/sum(Wd))"},{"type": "text","children": [],"string": ", where fmin is the quadratic residue of the cost function "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " (see the description). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iprint"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar used to set the trace mode: "},{"type": "text","children": [],"string": " "},{"type": "warning","children": {"type": "text","children": [],"string": "Most of the reports are displayed in the Scilab console."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": [{"type": "text","children": [],"string": "return flag = termination status (only for the 'qn' default algorithm. Set to %nan otherwise): "},{"type": "literal","children": [],"string": "9"},{"type": "text","children": [],"string": " is successful. Possible values are: "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["backslash", "lsqrsolve", "optim", "leastsq"]},"leastsq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "leastsq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solves non-linear least squares problems"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["fopt=leastsq(fun, x0)", "fopt=leastsq(fun, x0)", "fopt=leastsq(fun, dfun, x0)", "fopt=leastsq(fun, cstr, x0)", "fopt=leastsq(fun, dfun, cstr, x0)", "fopt=leastsq(fun, dfun, cstr, x0, algo)", "fopt=leastsq([iprint], fun [,dfun] [,cstr],x0 [,algo],[df0,[mem]],[stop])", "[fopt,xopt] = leastsq(...)", "[fopt,xopt,gopt] =  = leastsq(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "value of the function "},{"type": "literal","children": [],"string": "f(x)=||fun(x)||^2"},{"type": "text","children": [],"string": " at "},{"type": "literal","children": [],"string": "xopt"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "best value of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " found to minimize "},{"type": "literal","children": [],"string": "||fun(x)||^2"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gopt"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "gradient of "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " at "},{"type": "literal","children": [],"string": "xopt"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scilab function or a list defining a function from "},{"type": "literal","children": [],"string": "R^n"},{"type": "text","children": [],"string": " to "},{"type": "literal","children": [],"string": "R^m"},{"type": "text","children": [],"string": " (see more details in DESCRIPTION)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector (initial guess of the variable to be minimized)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dfun"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scilab function or a string defining the Jacobian matrix of "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " (see more details in DESCRIPTION)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cstr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "bound constraints on "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ". They must be introduced by the string keyword "},{"type": "literal","children": [],"string": "'b'"},{"type": "text","children": [],"string": " followed by the lower bound "},{"type": "literal","children": [],"string": "binf"},{"type": "text","children": [],"string": " then by the upper bound "},{"type": "literal","children": [],"string": "bsup"},{"type": "text","children": [],"string": " (so "},{"type": "literal","children": [],"string": "cstr"},{"type": "text","children": [],"string": " appears as "},{"type": "literal","children": [],"string": "'b',binf,bsup"},{"type": "text","children": [],"string": " in the syntax). Those bounds are real vectors with same dimension than "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": " (-%inf and +%inf may be used for dimension which are unrestricted)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "algo"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string with possible values: "},{"type": "literal","children": [],"string": "'qn'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'gc'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'nd'"},{"type": "text","children": [],"string": ". These strings stand for quasi-Newton (default), conjugate gradient or non-differentiable respectively. Note that "},{"type": "literal","children": [],"string": "'nd'"},{"type": "text","children": [],"string": " does not accept bounds on "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iprint"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar argument used to set the trace mode. "},{"type": "literal","children": [],"string": "iprint=0"},{"type": "text","children": [],"string": " nothing (except errors) is reported, "},{"type": "literal","children": [],"string": "iprint=1"},{"type": "text","children": [],"string": " initial and final reports, "},{"type": "literal","children": [],"string": "iprint=2"},{"type": "text","children": [],"string": " adds a report per iteration, "},{"type": "literal","children": [],"string": "iprint>2"},{"type": "text","children": [],"string": " add reports on linear search. Warning, most of these reports are written on the Scilab standard output."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "df0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real scalar. Guessed decreasing of "},{"type": "literal","children": [],"string": "||fun||^2"},{"type": "text","children": [],"string": " at first iteration. ("},{"type": "literal","children": [],"string": "df0=1"},{"type": "text","children": [],"string": " is the default value)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mem"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer, number of variables used to approximate the Hessian (second derivatives) of "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " when "},{"type": "literal","children": [],"string": "algo"},{"type": "literal","children": [],"string": "='qn'"},{"type": "text","children": [],"string": ". Default value is 10."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stop"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "sequence of optional parameters controlling the convergence of the algorithm. They are introduced by the keyword "},{"type": "literal","children": [],"string": "'ar'"},{"type": "text","children": [],"string": ", the sequence being of the form "},{"type": "literal","children": [],"string": "'ar',nap, [iter [,epsg [,epsf [,epsx]]]]"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nap"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "maximum number of calls to "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " allowed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "maximum number of iterations allowed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "threshold on gradient norm."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "threshold controlling decreasing of "},{"type": "literal","children": [],"string": "f"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsx"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "threshold controlling variation of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": ". This vector (possibly matrix) of same size as "},{"type": "literal","children": [],"string": "x0"},{"type": "text","children": [],"string": " can be used to scale "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["lsqrsolve", "optim", "NDcost", "datafit", "external", "qpsolve"]},"lsqrsolve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lsqrsolve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "minimize the sum of the squares of nonlinear functions, levenberg-marquardt algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[x [,v [,info]]]=lsqrsolve(x0,fct,m [,stop [,diag]])", "[x [,v [,info]]]=lsqrsolve(x0,fct,m ,fjac [,stop [,diag]])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector of size "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "(initial estimate of the solution vector)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fct"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "external (i.e function or list or string)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer, the number of functions. "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " must be greater than or equal to "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fjac"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "external (i.e function or list or string)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stop"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "optional vector "},{"type": "literal","children": [],"string": "[ftol,xtol,gtol,maxfev,epsfcn,factor]"},{"type": "text","children": [],"string": " the default value is "},{"type": "literal","children": [],"string": "[1.d-8,1.d-8,1.d-5,1000,0,100]"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ftol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A positive real number,termination occurs when both the actual and predicted relative reductions in the sum of squares are at most "},{"type": "literal","children": [],"string": "ftol"},{"type": "text","children": [],"string": ". therefore, "},{"type": "literal","children": [],"string": "ftol"},{"type": "text","children": [],"string": " measures the relative error desired in the sum of squares."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xtol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A positive real number, termination occurs when the relative error between two consecutive iterates is at most "},{"type": "literal","children": [],"string": "xtol"},{"type": "text","children": [],"string": ". therefore, "},{"type": "literal","children": [],"string": "xtol"},{"type": "text","children": [],"string": " measures the relative error desired in the approximate solution."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gtol"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A nonnegative input variable. termination occurs when the cosine of the angle between "},{"type": "literal","children": [],"string": "fct"},{"type": "text","children": [],"string": "(x) and any column of the jacobian is at most "},{"type": "literal","children": [],"string": "gtol"},{"type": "text","children": [],"string": " in absolute value. therefore, "},{"type": "literal","children": [],"string": "gtol "},{"type": "text","children": [],"string": "measures the orthogonality desired between the function vector and the columns of the jacobian."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "maxfev"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A positive integer, termination occurs when the number of calls to "},{"type": "literal","children": [],"string": "fct"},{"type": "text","children": [],"string": " is at least maxfev by the end of an iteration."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "epsfcn"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A positive real number, used in determining a suitable step length for the forward-difference approximation. this approximation assumes that the relative errors in the functions are of the order of "},{"type": "literal","children": [],"string": "epsfcn"},{"type": "text","children": [],"string": ". if "},{"type": "literal","children": [],"string": "epsfcn"},{"type": "text","children": [],"string": " is less than the machine precision, it is assumed that the relative errors in the functions are of the order of the machine precision."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "factor"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A positive real number, used in determining the initial step bound. this bound is set to the product of factor and the euclidean norm of "},{"type": "literal","children": [],"string": "diag*x"},{"type": "text","children": [],"string": " if nonzero, or else to "},{"type": "literal","children": [],"string": "factor"},{"type": "text","children": [],"string": " itself. in most cases "},{"type": "literal","children": [],"string": "factor"},{"type": "text","children": [],"string": " should lie in the interval "},{"type": "literal","children": [],"string": "(0.1,100)"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "100"},{"type": "text","children": [],"string": " is a generally recommended value."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "diag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is an array of length "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "diag"},{"type": "text","children": [],"string": " must contain positive entries that serve as multiplicative scale factors for the variables."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector (final estimate of the solution vector)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v :"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "real vector (value of "},{"type": "literal","children": [],"string": "fct(x)"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "termination indicator"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "improper input parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "both actual and predicted relative reductions in the sum of squares are at most "},{"type": "literal","children": [],"string": "ftol"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "relative error between two consecutive iterates is at most "},{"type": "literal","children": [],"string": "xtol"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "3"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "conditions for "},{"type": "literal","children": [],"string": "info = 1"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "info = 2"},{"type": "text","children": [],"string": " both hold."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "4"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the cosine of the angle between "},{"type": "literal","children": [],"string": "fvec"},{"type": "text","children": [],"string": " and any column of the jacobian is at most "},{"type": "literal","children": [],"string": "gtol"},{"type": "text","children": [],"string": " in c absolute value."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "5"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "number of calls to "},{"type": "literal","children": [],"string": "fcn"},{"type": "text","children": [],"string": " has reached or exceeded "},{"type": "literal","children": [],"string": "maxfev"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "6"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "ftol"},{"type": "text","children": [],"string": " is too small. no further reduction in the sum of squares is possible."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "7"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "xtol"},{"type": "text","children": [],"string": " is too small. no further improvement in the approximate solution"},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " is possible."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "8"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "gtol"},{"type": "text","children": [],"string": " is too small. "},{"type": "literal","children": [],"string": "fvec"},{"type": "text","children": [],"string": " is orthogonal to the columns of the jacobian to machine precision."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["external", "qpsolve", "optim", "fsolve"]},"fminsearch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fminsearch"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the unconstrained minimum of given function with the Nelder-Mead algorithm."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = fminsearch ( costf , x0 )", "x = fminsearch ( costf , x0 , options )", "[x,fval] = fminsearch ( costf , x0 , options )", "[x,fval,exitflag] = fminsearch ( costf , x0 , options )", "[x,fval,exitflag,output] = fminsearch ( costf , x0 , options )"]},"varlist": [],"seealso": ["optim", "neldermead", "optimset", "optimget", "optimplotfval", "optimplotx", "optimplotfunccount"]},"neldermead": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "neldermead"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Provides direct search optimization algorithms."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["newobj = neldermead_new ()", "this = neldermead_destroy (this)", "this = neldermead_configure (this,key,value)", "value = neldermead_cget (this,key)", "value = neldermead_get ( this , key )", "this = neldermead_search ( this )", "this = neldermead_restart ( this )", "[ this , result ] = neldermead_function ( this , x )", "stop = neldermead_defaultoutput(state, data)"]},"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of variables"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbineq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of inequality constraints"},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Spendley, Hext and Himsworth fixed shape simplex method"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This algorithm solves an unconstrained optimization problem with a fixed shape simplex made of k=n+1 vertices."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Nelder and Mead variable shape simplex method"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This algorithm solves an unconstrained optimization problem with a variable shape simplex made of k=n+1 vertices."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Box complex method"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This algorithm solves an constrained optimization problem with a variable shape simplex made of an arbitrary k number of vertices (k=2n is recommended by Box)."},"string": []},"string": []}],"string": []}],"string": []}],"seealso": ["optimbase_new", "optimsimplex_new", "optimbase_overview", "optimsimplex_overview", "nmplot"]},"neldermead_overview": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "overview"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "An overview of the Nelder-Mead toolbox."},"string": []},"synopsis": [],"varlist": [],"seealso": []},"nmplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nmplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Provides direct search optimization algorithms."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["newobj = nmplot_new ()", "this = nmplot_destroy (this)", "this = nmplot_configure (this,key,value)", "value = nmplot_cget (this,key)", "this = nmplot_display ( this )", "value = nmplot_get ( this , key )", "this = nmplot_search ( this )", "this = nmplot_restart ( this )", "[ this , xdata , ydata , zdata ] = nmplot_contour ( this , xmin , xmax , ymin , ymax , nx , ny )", "this = nmplot_historyplot ( this , datafile  , mytitle , myxlabel , myylabel )", "this = nmplot_simplexhistory ( this , colorforeground , markforeground , markstyle )"]},"varlist": [],"seealso": "neldermead"},"optimget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Queries an optimization data structure."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["val = optimget ( options , key )", "val = optimget ( options , key , value )"]},"varlist": [],"seealso": "optimset"},"optimplotfunccount": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimplotfunccount"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Plot the number of function evaluations of an optimization algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "optimplotfunccount ( x , optimValues , state )"},"varlist": [],"seealso": ["optimset", "fminsearch", "optimplotx", "optimplotfval"]},"optimplotfval": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimplotfval"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Plot the function value of an optimization algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "optimplotfval ( x , optimValues , state )"},"varlist": [],"seealso": ["optimset", "fminsearch", "optimplotx", "optimplotfunccount"]},"optimplotx": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimplotx"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Plot the value of the parameters of an optimization algorithm"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "optimplotx ( x , optimValues , state )"},"varlist": [],"seealso": ["optimset", "fminsearch", "optimplotfval", "optimplotfunccount"]},"optimset": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimset"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Configures and returns an optimization data structure."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["options = optimset ()", "options = optimset ( funname )", "options = optimset ( key , value )", "options = optimset ( key1 , value1 , key2 , value2, ... )", "options = optimset ( oldoptions , key , value )"]},"varlist": [],"seealso": "optimget"},"optimbase_cget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_cget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the value for the given key."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "value = optimbase_cget(opt, key)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string, the name of the key to query."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the value in function of the given key."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_new", "optimbase_configure", "optimbase_get", "optimbase_histget"]},"optimbase_checkbounds": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_checkbounds"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks the bounds."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_checkbounds(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["optimbase_isinbounds", "optimbase_hasbounds"]},"optimbase_checkcostfun": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_checkcostfun"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks the cost function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_checkcostfun(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["optimbase_function", "optimbase_configure", "optimbase_new"]},"optimbase_checkx0": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_checkx0"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks initial guess."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_checkx0(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["optimbase_isfeasible", "optimbase_configure", "optimbase_cget"]},"optimbase_configure": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_configure"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Configures the current object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_configure(opt, key, value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The value is assigned in function of "},{"type": "literal","children": [],"string": "key"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_new", "optimbase_cget"]},"optimbase_destroy": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_destroy"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Resets the historyfopt and historyxopt fields of an object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_destroy(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["optimbase_new", "optimbase_configure", "optimbase_get", "optimbase_cget"]},"optimbase_function": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_function"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Calls cost function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[opt, f, index] = optimbase_function(opt, x, index)", "[opt, f, c, index] = optimbase_function(opt, x, index)", "[opt, f, g, index] = optimbase_function(opt, x, index)", "[opt, f, g, c, gc, index] = optimbase_function(opt, x, index)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist). (INPUT/OUTPUT)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A column vector of doubles, the current point."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "index "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "An integer. (INPUT/OUTPUT)"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The index input parameter has the following meaning."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 1: nothing is to be computed, the user may display messages, for example."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 2: compute f."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 3: compute g."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 4: compute f and g."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 5: compute c."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 6: compute f and c."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 7: compute f, g, c and gc."},"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The index output parameter has the following meaning ."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index > 0: everything is fine."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index = 0: the optimization must stop."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "index < 0: one function could not be evaluated."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scalar. The value of the cost function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Row matrix of doubles. The gradient of the cost function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Row matrix of doubles. The non-linear, positive, inequality constraints."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gc "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of doubles. The gradient of the non-linear, positive, inequality constraints."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_new", "optimbase_configure", "optimbase_destroy", "optimbase_checkcostfun"]},"optimbase_get": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_get"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the value for the given key."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "value = optimbase_set(opt, key)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string, the name of the key to set."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the value in function of the given key."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_set", "optimbase_cget", "optimbase_histget"]},"optimbase_hasbounds": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_hasbounds"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if the bounds are specified."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, hasbounds] = optimbase_hasbounds(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hasbounds "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_hasconstraints", "optimbase_hasnlcons", "optimbase_checkbounds"]},"optimbase_hasconstraints": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_hasconstraints"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if the constraints are specified."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, hascons] = optimbase_hasbounds(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hascons "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_hasbounds", "optimbase_hasnlcons", "optimbase_isinbounds"]},"optimbase_hasnlcons": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_hasnlcons"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if the non linear constraints are specified."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, hasnlcons] = optimbase_hasnlcons(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hascons "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_hasbounds", "optimbase_hasconstraints", "optimbase_isinnonlincons"]},"optimbase_histget": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_histget"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the history value."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "value = optimbase_histget(opt, iter, key)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer. The iteration number to get."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string. The name of the key to query."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A 1-by-1 matrix of doubles. The value to get."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_histset", "optimbase_get", "optimbase_cget"]},"optimbase_histset": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_histset"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the history value at given iteration for the given key."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_histset(opt, iter, key, value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iter "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer. The iteration number to get."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string. The name of the key to query."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A 1-by-1 matrix of doubles. The value to set."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_histget", "optimbase_set"]},"optimbase_incriter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_incriter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Increments the number of iterations."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_incriter(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["optimbase_new", "optimbase_get"]},"optimbase_isfeasible": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_isfeasible"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if the point satisfies constraints."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, isfeasible] = optimbase_isfeasible(opt, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles. The current point."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isfeasible "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer either -1, 0 or 1."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimbase_checkx0"},"optimbase_isinbounds": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_isinbounds"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if the given point satisfies bounds constraints."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, isfeasible] = optimbase_isinbounds(opt, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the current point."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isfeasible "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_checkbounds", "optimbase_hasbounds"]},"optimbase_isinnonlincons": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_isinnonlincons"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if the given point satisfies the non-linear constraints."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, isfeasible] = optimbase_isinnonlincons(opt, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the current point."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isfeasible "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_checkbounds", "optimbase_hasnlcons"]},"optimbase_log": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_log"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Prints the given message."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_log(opt, msg)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string. The message to print."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimbase_stoplog"},"optimbase_new": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_new"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a new optimization object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_new()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The new object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["optimbase_destroy", "optimbase_configure", "optimbase_cget"]},"optimbase_outputcmd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_outputcmd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Calls back user's output command."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "stop = optimbase_outputcmd(opt, state, data)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "state "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A 1-by-1 matrix of strings, the current state of the algorithm."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Available values are \"init, \"iter\", \"done\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A data structure with type T_OPTDATA containing at least the following fields."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current optimum."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fval "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current function value."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iteration "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current iteration index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funccount"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The number of function evaluations."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stop "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A 1-by-1 matrix of booleans."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "stop"},{"type": "text","children": [],"string": " is %t if the optimization algorithm must be stopped."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "stop"},{"type": "text","children": [],"string": " is %f if the optimization algorithm must continue."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimbase_outstruct", "optimbase_function"]},"optimbase_outstruct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_outstruct"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns a data structure with type T_OPTDATA."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "data = optimbase_outstruct(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A data structure with type T_OPTDATA containing at least the following fields."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current optimum."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fval "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current function value."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iteration "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current iteration index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funccount"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The number of function evaluations."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimbase_outputcmd", "optimbase_function"]},"optimbase_overview": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "overview"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "An overview of the Optimbase toolbox."},"string": []},"synopsis": [],"varlist": [],"seealso": []},"optimbase_proj2bnds": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_proj2bnds"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns a projection point."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, p] = optimbase_proj2bnds(opt, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the current point."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the projected point."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_checkx0", "optimbase_checkbounds", "optimbase_hasbounds"]},"optimbase_set": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_set"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the value for the given key."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_set(opt, key, value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string corresponding to name of the key to set."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the value in function of the given key."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimbase_histset", "optimbase_get"]},"optimbase_stoplog": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_stoplog"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Prints the given stopping message."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimbase_stoplog(opt, msg)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string, the message to print."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimbase_log"},"optimbase_terminate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimbase_terminate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if the algorithm is terminated."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[opt, terminate, status] = optimbase_terminate(opt, previousfopt, currentfopt, previousxopt, currentxopt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The object of TOPTIM type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "previousfopt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the previous value of the cost function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "currentfopt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the current value of the cost function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "previousxopt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the previous x optimum."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "currentxopt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of doubles, the current x optimum."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "terminate "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A boolean."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "terminate = %t if the algorithm must terminate."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "terminate = %f if the algorithm must continue."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "terminate"},{"type": "text","children": [],"string": " = %t, the detailed status of the termination corresponds to :"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"maxiter\""},{"type": "listitem","children": [{"type": "text","children": [],"string": "The maximum number of iterations, provided by the "},{"type": "literal","children": [],"string": "-maxiter"},{"type": "text","children": [],"string": " option, is reached."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"maxfuneval\""},{"type": "listitem","children": [{"type": "text","children": [],"string": "The maximum number of function evaluations, provided by the "},{"type": "literal","children": [],"string": "-maxfunevals"},{"type": "text","children": [],"string": " option, is reached."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"tolf\""},{"type": "listitem","children": [{"type": "text","children": [],"string": "The tolerance on the function value is reached. This status is associated with the "},{"type": "literal","children": [],"string": "-tolfunmethod"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "-tolfunabsolute"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "-tolfunrelative"},{"type": "text","children": [],"string": " options."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"tolx\""},{"type": "listitem","children": [{"type": "text","children": [],"string": "The tolerance on x is reached. This status is associated with the "},{"type": "literal","children": [],"string": "-tolxmethod"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "-tolxabsolute"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "-tolxrelative"},{"type": "text","children": [],"string": " options."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": "optimbase_function"},"optimsimplex_center": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_center"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the center."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sicenter = optimsimplex_center(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sicenter "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A vector of length "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": " is the number of vertices in the current simplex object."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_new"},"optimsimplex_check": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_check"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks the consistency of internal data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "optimsimplex_check(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": "optimsimplex_new"},"optimsimplex_compsomefv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_compsomefv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the values of the function at vertices points."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["opt = optimsimplex_compsomefv(opt, fun, indices)", "[opt, data] = optimsimplex_compsomefv(opt, fun, indices, data)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The function to compute at vertices."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " function is expected to have the following input and output arguments:"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indices "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A 1-by-m matrix of doubles, integers, positive, the indices of the vertices to compute (default "},{"type": "literal","children": [],"string": "indices"},{"type": "text","children": [],"string": " = 1 to nbve, where nbve is the number of vertices)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "User-defined data passed to the function (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "data"},{"type": "text","children": [],"string": " is provided, it is passed to the callback function both as an input and output argument. In that case, the function must have the following header :"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The data input parameter may be used if the function uses some additional parameters. It is returned as an output parameter because the function may modify the data while computing the function value. This feature may be used, for example, to count the number of times that the function has been called."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_computefv", "optimsimplex_new"]},"optimsimplex_computefv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_computefv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the values of the function at vertices points."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["opt = optimsimplex_computefv(opt, fun)", "[opt, data] = optimsimplex_computefv(opt, fun, data)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The function to compute at vertices."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " function is expected to have the following input and output arguments:"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "User-defined data passed to the function (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "data"},{"type": "text","children": [],"string": " is provided, it is passed to the callback function both as an input and output argument. In that case, the function must have the following header :"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The data input parameter may be used if the function uses some additional parameters. It is returned as an output parameter because the function may modify the data while computing the function value. This feature may be used, for example, to count the number of times that the function has been called."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_compsomefv", "optimsimplex_new"]},"optimsimplex_deltafv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_deltafv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the difference of function values."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "df = optimsimplex_deltafv(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "df "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A column vector of length "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_deltafvmax", "optimsimplex_new"]},"optimsimplex_deltafvmax": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_deltafvmax"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the difference of function value between the highest and the lowest vertices."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "dfm = optimsimplex_deltafvmax(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dfm "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_deltafv", "optimsimplex_new"]},"optimsimplex_destroy": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_destroy"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Destroys the simplex object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_destroy(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": "optimsimplex_new"},"optimsimplex_dirmat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_dirmat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the directions."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "m = optimsimplex_dirmat(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A n-by-n matrix of doubles."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_new"},"optimsimplex_fvmean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_fvmean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the mean."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "m = optimsimplex_fvmean(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar, the mean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_fvstdev", "optimsimplex_fvvariance"]},"optimsimplex_fvstdev": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_fvstdev"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the standard deviation."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sd = optimsimplex_fvstdev(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sd "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar, the standard deviation."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_fvmean", "optimsimplex_fvvariance"]},"optimsimplex_fvvariance": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_fvvariance"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the variance."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "v = optimsimplex_fvvariance(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar, the variance."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_fvmean", "optimsimplex_fvstdev"]},"optimsimplex_getall": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getall"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns all the data contained in the simplex object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "simplex = optimsimplex_getall(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "simplex "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The simplex data."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The simplex matrix has size "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": "-by-"},{"type": "literal","children": [],"string": "n+1"},{"type": "text","children": [],"string": ", and is organized by row by row as follows:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "simplex(k,1) is the function value of the vertex #k, with k = 1 to nbve"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "simplex(k,2:n+1) is the coordinates of the vertex #k, with k = 1 to nbve"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_setall", "optimsimplex_getallfv", "optimsimplex_getallx", "optimsimplex_setallfv", "optimsimplex_setallx"]},"optimsimplex_getallfv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getallfv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns all the function values contained in the simplex object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fv = optimsimplex_getallfv(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fv "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A row vector of function values."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The function value of vertex #k is stored in fv(k) with k = 1 to nbve."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_setallfv", "optimsimplex_getfv", "optimsimplex_getall", "optimsimplex_setfv", "optimsimplex_setall"]},"optimsimplex_getallx": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getallx"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns all the coordinates."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x = optimsimplex_getallx(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The coordinates."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The vertex #k is stored in x(k, 1:n) with k = 1 to nbve."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_setallx", "optimsimplex_getall", "optimsimplex_setall", "optimsimplex_getx", "optimsimplex_setx"]},"optimsimplex_getfv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getfv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the function value at given index."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fv = optimsimplex_getfv(opt, ive)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ive "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The vertex index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fv "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar, the function value at given index."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_setfv", "optimsimplex_getall", "optimsimplex_getallfv", "optimsimplex_setall", "optimsimplex_setallfv"]},"optimsimplex_getn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the dimension of the space."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "n = optimsimplex_getn(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the dimension of the space of the simplex."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_setn"},"optimsimplex_getnbve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getnbve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gets the number of vertices of the simplex."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "nbve = optimsimplex_getnbve(opt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbve "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the number of vertices of the simplex."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_setnbve"},"optimsimplex_getve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gets the vertex at the given index."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "vertex = optimsimplex_getve(opt, ive)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ive "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the vertex index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vertex "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A tlist, the vertex at given index."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_setve"},"optimsimplex_getx": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_getx"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gets the coordinates of the vertex at given index."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x = optimsimplex_getx(opt, ive)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ive "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the vectex index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The coordinates of the point, as a row vector."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_setx", "optimsimplex_getall", "optimsimplex_getallx", "optimsimplex_setall", "optimsimplex_setallx"]},"optimsimplex_gradientfv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_gradientfv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the simplex gradient of the function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["g = optimsimplex_gradientfv(opt, [fun, [method]])", "[g, data] = optimsimplex_gradientfv(opt, fun, method, data)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The function to compute at vertices (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " function is expected to have the following input and output arguments:"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "methods "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The method to use to compute the simplex gradient (optional)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Two methods are available: "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The \"forward\" method used the current simplex to compute the simplex gradient."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The \"centered\" method creates an intermediate reflected simplex and computes the average."},"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If not provided, the default method is \"forward\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "User-defined data passed to the function (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "data"},{"type": "text","children": [],"string": " is provided, it is passed to the callback function both as an input and output argument. In that case, the function must have the following header :"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The data input parameter may be used if the function uses some additional parameters. It is returned as an output parameter because the function may modify the data while computing the function value. This feature may be used, for example, to count the number of times that the function has been called."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A column vector of doubles."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_new", "optimsimplex_getallfv", "optimsimplex_setallfv"]},"optimsimplex_new": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_new"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a new simplex object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["newobj = optimsimplex_new([coords, [fun]])", "[newobj, data] = optimsimplex_new(coords, fun, data)", "newobj = optimsimplex_new(\"axes\", x0, [fun, [len]])", "[newobj, data] = optimsimplex_new(\"axes\", x0, x0, fun, len, data)", "newobj = optimsimplex_new(\"pfeffer\", x0, [fun, [deltausual, [deltazero]]])", "[newobj, data] = optimsimplex_new(\"pfeffer\", x0, fun, deltausual, deltazero, data)", "newobj = optimsimplex_new(\"randbounds\", x0, fun, boundsmin, boundsmax)", "[newobj, data] = optimsimplex_new(\"randbounds\", x0, fun, boundsmin, boundsmax, nbpoints, [data])", "newobj = optimsimplex_new(\"spendley\", x0, [fun, [len]])", "[newobj, data] = optimsimplex_new(\"spendley\", x0, fun, len, data)", "newobj = optimsimplex(\"oriented\", simplex0, fun)", "[newobj, data] = optimsimplex(\"oriented\", simplex0, fun, data)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newobj "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The new simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "user-defined data passed to the function (optional)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "coords"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Matrix of point coordinates in the simplex (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This argument is expected to be "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": "-by-"},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " matrix, where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the dimension of the space and "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": " is the number of vertices in the simplex, with "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": " >= "},{"type": "literal","children": [],"string": "n + 1"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The function to compute at vertices (default fun = []) (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " is equal to [], then the function values are not computed."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The initial point, as a row vector of length "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "len"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "the length of the simplex (default length = 1.0) (optional)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If length is a value, that unique length is used in all directions. If length is a vector with n values, each length is used with the corresponding direction (n is the dimension of the space)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument is only used if the method is \"axes\" or \"spendley\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deltausual"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "the absolute delta for non-zeros values (default value is 0.05) (optional)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument is only used if the method is \"pfeffer\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deltazero"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "the absolute delta for zero values (default value is 0.0075) (optional)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument is only used if the method is \"pfeffer\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "boundsmin"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "array of minimum bounds."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument is only used if the method is \"randbounds\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "boundsmax"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "array of maximum bounds."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument is only used if the method is \"randbounds\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbpoints"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "total number of points in the simplex (default value = n+1, where n is the size of x0)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument is only used if the method is \"randbounds\"."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_destroy"},"optimsimplex_overview": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "overview"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "An overview of the Optimsimplex toolbox."},"string": []},"synopsis": [],"varlist": [],"seealso": []},"optimsimplex_reflect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_reflect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the reflected simplex object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["r = optimsimplex_reflect(opt, fun)", "[r, data] = optimsimplex_reflect(opt, fun, data)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The function to compute at vertices."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " function is expected to have the following input and output arguments:"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "User-defined data passed to the function (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "data"},{"type": "text","children": [],"string": " is provided, it is passed to the callback function both as an input and output argument. In that case, the function must have the following header :"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The data input parameter may be used if the function uses some additional parameters. It is returned as an output parameter because the function may modify the data while computing the function value. This feature may be used, for example, to count the number of times that the function has been called."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The reflected simplex object."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_new"},"optimsimplex_setall": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setall"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets all in the simplex object."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setall(opt, simplex)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "simplex "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The simplex to set."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The given matrix is expected to be a "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": "-by- "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the dimension of the space, "},{"type": "literal","children": [],"string": "nbve"},{"type": "text","children": [],"string": " is the number of vertices and with the following content (where the data is organized by row with function value first, and "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " coordinates)"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "simplex(k,1) is the function value of the vertex #k, with k = 1 to nbve"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "simplex(k,2:n+1) is the coordinates of the vertex #k, with k = 1 to nbve"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_getall", "optimsimplex_getallfv", "optimsimplex_getallx", "optimsimplex_setallfv", "optimsimplex_setallx"]},"optimsimplex_setallfv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setallfv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets all the function values."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setallfv(opt, fv)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "simplex "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A row vector of function values."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_getallfv", "optimsimplex_getall", "optimsimplex_setall", "optimsimplex_getfv", "optimsimplex_setfv"]},"optimsimplex_setallx": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setallx"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets all the coordinates."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setallx(opt, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The coordinates of the vertices."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_getallx", "optimsimplex_getall", "optimsimplex_setall", "optimsimplex_getx", "optimsimplex_setx"]},"optimsimplex_setfv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setfv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets the function value at given index."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setfv(opt, ive, fv)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ive "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar, vertex index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fv "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar, function value."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_getfv", "optimsimplex_getallfv", "optimsimplex_setallfv", "optimsimplex_getall", "optimsimplex_setall"]},"optimsimplex_setn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets the dimension of the space."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setn(opt, n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the dimension of the space of the simplex."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_getn"},"optimsimplex_setnbve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setnbve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets the number of vertices of the simplex."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setnbve(opt, nbve)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbve "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the number of vertices."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_getnbve"},"optimsimplex_setve": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setve"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets the data at given index in the current simplex."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setve(opt, ive, fv, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ive "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the vectex index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fv "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The function value."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The coordinates of the point, as a row vector."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_getve"},"optimsimplex_setx": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_setx"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets the coordinates at given index into the current simplex."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_setx(opt, ive, x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ive "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the vectex index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The coordinates of the point, as a row vector."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["optimsimplex_getx", "optimsimplex_getallx", "optimsimplex_setallx", "optimsimplex_getall", "optimsimplex_setall"]},"optimsimplex_shrink": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_shrink"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Shrinks the simplex."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["opt = optimsimplex_shrink(opt, fun, [sigma])", "[opt, data] = optimsimplex_shrink(opt, fun, sigma, data)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The function to compute at vertices."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "fun"},{"type": "text","children": [],"string": " function is expected to have the following input and output arguments:"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sigma "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The shrinkage coefficient (optional). The default value is 0.5."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "User-defined data passed to the function (optional)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "data"},{"type": "text","children": [],"string": " is provided, it is passed to the callback function both as an input and output argument. In that case, the function must have the following header :"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The data input parameter may be used if the function uses some additional parameters. It is returned as an output parameter because the function may modify the data while computing the function value. This feature may be used, for example, to count the number of times that the function has been called."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_new"},"optimsimplex_size": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_size"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the size."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ssize = optimsimplex_size(opt, [method])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "The method to use to compute the size (optional)."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The available methods are the following: "},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"sigmaplus\". This is the default."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The sigmaplus size is the maximum 2-norm length of the vector from each vertex to the first vertex. It requires one loop over the vertices."},"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"sigmaminus\"."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The sigmaminus size is the minimum 2-norm length of the vector from each vertex to the first vertex. It requires on loop over the vertices."},"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"Nash\"."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The Nash size is the sum of the norm of the norm-1 length of the vector form the given vertex to the first vertex. It requires one loop over the vertices."},"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"diameter\"."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The diameter size is the maximum norm-2 length of all the edges of the simplex. It requires 2 nested loops over the vertices."},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ssize "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A scalar."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_new"},"optimsimplex_sort": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_sort"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sorts the simplex."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "opt = optimsimplex_sort(opt)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": "optimsimplex_new"},"optimsimplex_xbar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "optimsimplex_xbar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the center of n vertices."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "cen = optimsimplex_xbar(opt, iexcl)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The current simplex object of TSIMPLEX type (tlist)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iexcl "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The index of the vertex to exclude in center computation. The default value of "},{"type": "literal","children": [],"string": "iexcl"},{"type": "text","children": [],"string": " is the number of vertices: in that case, if the simplex is sorted in increasing function value order, the worst vertex is excluded."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cen "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A row vector."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "optimsimplex_new"},"aplat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "aplat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Flattens a list. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[lf,ind] = aplat(l,r)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an optional flat list"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a flat list (a single hierachical level)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list, each entry give the path of the corresponding lf entry in the original list"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "recons"},"lmisolver": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lmisolver"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solve linear matrix inequations."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[XLISTF[,OPT]] = lmisolver(XLIST0,evalfunc [,options])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "XLIST0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a list of containing initial guess (e.g. "},{"type": "literal","children": [],"string": "XLIST0=list(X1,X2,..,Xn)"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "evalfunc"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a Scilab function (\"external\" function with specific syntax)"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The syntax the function "},{"type": "literal","children": [],"string": "evalfunc"},{"type": "text","children": [],"string": " must be as follows:"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "[LME,LMI,OBJ]=evalfunct(X)"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": " is a list of matrices, "},{"type": "literal","children": [],"string": "LME, LMI "},{"type": "text","children": [],"string": " are lists and "},{"type": "literal","children": [],"string": "OBJ"},{"type": "text","children": [],"string": " a real scalar."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "XLISTF"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a list of matrices (e.g. "},{"type": "literal","children": [],"string": "XLIST0=list(X1,X2,..,Xn)"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional parameter. If given, "},{"type": "literal","children": [],"string": "options"},{"type": "text","children": [],"string": " is a real row vector with 5 components "},{"type": "literal","children": [],"string": "[Mbound,abstol,nu,maxiters,reltol]"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "lmitool"},"lmitool": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lmitool"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Graphical tool for solving linear matrix inequations."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["lmitool(filename)", "txt=lmitool(probname,varlist,datalist)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string referring to a "},{"type": "literal","children": [],"string": ".sci"},{"type": "text","children": [],"string": " function"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "probname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string containing the name of the problem"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varlist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string containing the names of the unknown matrices (separated by commas if there are more than one)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datalist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string containing the names of  data matrices (separated by commas if there are more than one)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string providing information on what the user should do next"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "lmisolver"},"pack": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pack"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compress a list of block-diagonal symmetric matrices."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["CA = pack(A,blocksizes)", "[CA,sel] = pack(A,blocksizes)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "m-by-n real matrix of doubles, the entries of a list of block-diagonal symmetric matrices. n is the number of matrices stored into "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "blocksizes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "b-by-1 real matrix of doubles, the sizes of the blocks."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "CA"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "p-by-n real matrix of doubles, a compressed representation of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sel"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1-by-s real matrix of doubles, the indices of the rows of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": " which have been selected in "},{"type": "literal","children": [],"string": "CA"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "unpack"},"recons": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "recons"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse function for aplat."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = recons(fl,ind)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a \"flat\" list."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list of paths"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a hierachical list build with the leaves of fl"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "aplat"},"semidef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "semidef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Solve semidefinite problems."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x=semidef(x0,Z0,F,blocksizes,c,options)", "[x,Z]=semidef(...)", "[x,Z,ul]=semidef(...)", "[x,Z,ul,info]=semidef(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "m-by-1 real column vector (must be strictly primal feasible, see below)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "L-by-1 real vector (compressed form of a strictly feasible dual matrix, see below)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "F"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "L-by-(m+1) real matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "blocksizes"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "p-by-2 integer matrix (sizes of the blocks) defining the dimensions of the (square) diagonal blocks "},{"type": "literal","children": [],"string": "size(Fi(j)=blocksizes(j) j=1,...,m+1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "m-by-1 real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-5 matrix of doubles "},{"type": "literal","children": [],"string": "[nu,abstol,reltol,tv,maxiters]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ul"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-2 matrix of doubles."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"unpack": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unpack"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Uncompress a list of block-diagonal symmetric matrices."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "A=unpack(CA,blocksizes)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "CA"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "p-by-n real matrix of doubles, a compressed representation of "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "blocksizes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "b-by-1 real matrix of doubles, the sizes of the blocks."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "m-by-n real matrix of doubles, the entries of a list of block-diagonal symmetric matrices. n is the number of matrices stored into "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "pack"},"htmlDump": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "htmlDump"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Dump a HTML document"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "str = htmlDump(xmlDoc [, indent])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmlDoc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xmlDoc, a XML document"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indent"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "indent, a boolean"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "str, a matrix of strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xmlWrite"},"htmlRead": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "htmlRead"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read a HTML stream from a local or distant file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "doc = htmlRead(path [, encoding])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the path to the file to read."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "encoding"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the file encoding."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLDoc"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["htmlReadStr", "xmlGetOpenDocs", "xmlDelete", "xmlDocument", "xmlXPath"]},"htmlReadStr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "htmlReadStr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read a HTML tree from a string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "doc = htmlReadStr(string)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, containing XML code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLDoc"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["htmlRead", "xmlGetOpenDocs", "xmlDelete", "xmlDocument"]},"htmlWrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "htmlWrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write a HTML document in a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["htmlWrite(doc [, filename] [, indent])", "htmlWrite(doc [, indent])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "doc, a mlist typed XMLDoc"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "filename, a string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indent"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "indent, a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xmlDump"},"xmlAddNs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlAddNs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add a namespace to a XML Element"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmlAddNs(elem, [, ns1 [, ns2, ...]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "elem"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLElem"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nsi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLNs"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["XMLObjects", "xmlDocument", "xmlElement", "xmlNs", "xmlGetNsByHref", "xmlGetNsByPrefix"]},"xmlAppend": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlAppend"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Append an element to the parent children"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmlAppend(parent, child)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLElem"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "child"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLElem"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["XMLObjects", "xmlElement"]},"xmlAsNumber": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlAsNumber"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert the result of a XPath query into a row of numbers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "nums = xmlAsNumber(xp)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xp, a XML mlist typed XMLSet or XMLList"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nums"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nums, a single row of doubles"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlXPath", "xmlAsText", "xmlName"]},"xmlAsText": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlAsText"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert the result of a XPath query into a row of strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "strings = xmlAsText(xp)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xp, a XML mlist typed XMLSet or XMLList"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strings"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "strings, a single row of strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlXPath", "xmlAsNumber", "xmlName"]},"xmlDelete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlDelete"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Delete a XML document"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xmlDelete(obj1 [, obj2, [...]])", "xmlDelete(\"all\")"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "obji"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist type XMLDoc or XMLValid, the document to delete"},"string": []},"string": []}],"string": []},"string": []},"seealso": "xmlGetOpenDocs"},"xmlDocument": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlDocument"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a new XML document"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "doc = xmlDocument([uri, [, version]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "uri"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving document uri"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "version"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the XML version ofthe document"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLDoc"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["XMLObjects", "xmlElement"]},"xmlDTD": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlDTD"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a XML DTD object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "dtd = xmlDTD(path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path of the validation file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dtd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLValid"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xmlValidate"},"xmlDump": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlDump"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Dump a XML object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "str = xmlDump(xmlObj [, indent])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmlObj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xmlObj, a XML mlist"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indent"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "indent, a boolean"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "str, a matrix of strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xmlWrite"},"xmlElement": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlElement"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a new XML element"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "e = xmlElement(doc, name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLDoc"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the element name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLElem"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["XMLObjects", "xmlDocument"]},"xmlFormat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlFormat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Format a Scilab variable into XML"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmlCode = xmlFormat(scilabVar)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scilabVar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scilabVar, a Scilab's variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmlCode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xmlCode, a string containing XML code"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xmlGetNsByHref": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlGetNsByHref"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get a namespace by its href"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ns = xmlGetNsByHref(elem, href)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "elem"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLElem"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "href"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the href"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ns"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLNs"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlNs", "xmlGetNsByPrefix"]},"xmlGetNsByPrefix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlGetNsByPrefix"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get a namespace by prefix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ns = xmlGetNsByPrefix(elem, prefix)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "elem"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLElem"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prefix"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the prefix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ns"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLNs"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlNs", "xmlGetNsByHref"]},"xmlGetOpenDocs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlGetOpenDocs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get all open XML documents or all open XML Validation files."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "list = xmlGetOpenDocs()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list, a list containing all the open documents or XML Validation files"},"string": []},"string": []}],"string": []},"string": []},"seealso": "xmlDelete"},"xmlGetValues": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlGetValues"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Parses and gets values of chosen tags attributes in a XML file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Values = xmlGetValues(path2tag, attributes)", "Values = xmlGetValues(path2tag, attributes, XMLsource)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path2tag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "unique string: in the XML source file, path targeting a chosen tag whose attributes must be read. The path is the list of nested tags leading to the required one, such as "},{"type": "literal","children": [],"string": "\"/a/b/c/d\""},{"type": "text","children": [],"string": ", or equivalently "},{"type": "literal","children": [],"string": "\"//b/c/d\""},{"type": "text","children": [],"string": ". It is case-sensitive."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "attributes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix of strings: names of attributes of the chosen tag, whose values must be read. The order of attributes does not matter wrt their actual order in the tag. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "XMLsource"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "points to the XML document from which informations must be extracted. It can be one of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "unique string: path to the XML source file. By default, the main preferences file "},{"type": "literal","children": [],"string": "SCIHOME+'/XConfiguration.xml'"},{"type": "text","children": [],"string": " is considered."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "XML handle of type "},{"type": "literal","children": [],"string": "XMLdoc"},{"type": "text","children": [],"string": ", as returned by a prior "},{"type": "text","children": [],"string": " external instruction."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Values"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of strings: Values of the chosen attributes of the chosen tag: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If the set of chosen "},{"type": "varname","children": [],"string": "attributes"},{"type": "text","children": [],"string": " is provided as a matrix with several rows, then only the first occurrence of the chosen tag is considered, and "},{"type": "varname","children": [],"string": "Values(i,j)"},{"type": "text","children": [],"string": " is the value of its "},{"type": "varname","children": [],"string": "attributes(i,j)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Otherwise, if the names of "},{"type": "varname","children": [],"string": "attributes"},{"type": "text","children": [],"string": " are provided in a row vector, then "},{"type": "emphasis","children": [],"string": "all occurrences"},{"type": "text","children": [],"string": " of the chosen tag are considered: Results are returned with one row per occurrence, and one column per attribute. Thus, "},{"type": "varname","children": [],"string": "Values(i,j)"},{"type": "text","children": [],"string": " is the value of the "},{"type": "varname","children": [],"string": "attributes(j)"},{"type": "text","children": [],"string": " for the "},{"type": "literal","children": [],"string": " ith "},{"type": "text","children": [],"string": " occurrence of the tag in the document."}],"string": []}],"string": []},{"type": "text","children": [],"string": " If some final values are expected to be numeric rather than literal (text), "},{"type": "text","children": [],"string": " may be applied to them to get expected numbers."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlSetValues", "xmlXPath", "xmlRead", "xmlDelete", "atomsGetConfig", "printsetupbox", "csvDefault"]},"xmlIsValidObject": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlIsValidObject"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Test the existence of a XML object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "exists = xmlIsValidObject(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a XML object or a matrix of strings containing the variables names"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "exists"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean or a matrix of booleans to indicate if the XML objects exist or not"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["XMLObjects", "xmlDelete"]},"xmlName": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlName"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retrieve the name of the elements."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "names = xmlName(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "obj, a XML mlist typed XMLSet or XMLList or XMLElem or XMLAttr"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "names, a single row of strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlXPath", "xmlAsText", "xmlAsNumber"]},"xmlNs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlNs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a new XML Namespace"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ns = xmlNs(elem, prefix, href)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "elem"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLElem"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prefix"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the prefix for this namespace or the empty matrix to have an empty prefix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "href"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the href for this namespace"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["XMLObjects", "xmlDocument", "xmlElement", "xmlAddNs", "xmlGetNsByHref", "xmlGetNsByPrefix"]},"XMLObjects": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "XML Objects"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Describe the properties of the different XML objects"},"string": []},"synopsis": [],"varlist": [],"seealso": ["xmlRead", "xmlReadStr", "xmlElement", "xmlDocument", "xmlNs", "xmlDTD", "xmlSchema", "xmlRelaxNG"]},"xmlRead": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlRead"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read a XML stream from a local or distant file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "doc = xmlRead(path [, encoding] [, validateDTD])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the path to the file to read."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "encoding"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the file encoding."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "validateDTD"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean to indicate if the document must be validated."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLDoc"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlReadStr", "xmlGetOpenDocs", "xmlDelete", "xmlDocument", "xmlXPath", "xmlValidate"]},"xmlReadStr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlReadStr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read a XML tree from a string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "doc = xmlReadStr(string [, validateDTD])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, containing XML code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "validateDTD"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean to indicate if the document must be validated."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLDoc"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlRead", "xmlGetOpenDocs", "xmlDelete", "xmlDocument", "xmlValidate"]},"xmlRelaxNG": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlRelaxNG"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a XML Relax NG object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "schema = xmlRelaxNG(path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path of the validation file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dtd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLValid"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xmlValidate"},"xmlRemove": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlRemove"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove an element or a list of elements from their parents"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmlRemove(elems)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "elems"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "elems, a XMLElem or a XMLSet (result of XPath query) or a XMLlist (a children list)"},"string": []},"string": []}],"string": []},"string": []},"seealso": "XMLObjects"},"xmlSchema": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlSchema"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a XML Schema object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "schema = xmlSchema(path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path of the validation file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dtd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLValid"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xmlValidate"},"xmlSetAttributes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlSetAttributes"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the attributes name and value."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmlObj = xmlSetAttributes(xmlObj, nameValue)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmlObj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xmlObj, a XML mlist typed XMLSet or XMLList or XMLElem or XMLAttr"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nameValue"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nameValue, a matrix nx2 or nx3 of strings where each rows contains [name value] or [prefix name value]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "XMLObjects"},"xmlSetValues": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlSetValues"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets some attribute=value in an XML document for a given tag/XPath"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xmlSetValues(xpath, attributes_values)", "xmlSetValues(xpath, attributes_values, doc)"]},"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: XPath request pointing to the chosen tag in the XML document."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "attributes_values"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 2xN matrix of strings: the (attribute,value) pairs to set."},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "mlist typed XMLDoc: the XML document in which to write values. By default, it is the main Scilab preferences file ("},{"type": "literal","children": [],"string": "SCIHOME + '/XConfiguration.xml'"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},"string": []}],"seealso": "xmlGetValues"},"xmlValidate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlValidate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Validate a document in using a DTD, a Relax NG or a Schema."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "error = xmlValidate(docs [, valid])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "docs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLDoc or a matrix of string containing path to XML documents"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "valid"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mlist typed XMLValid."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "error"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of string if an error occurred or []"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xmlDTD", "xmlSchema", "xmlRelaxNG"]},"xmlWrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlWrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write a XML document in a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xmlWrite(doc [, filename] [, indent])", "xmlWrite(doc [, indent])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "doc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "doc, a mlist typed XMLDoc"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "filename, a string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indent"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "indent, a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xmlDump"},"xmlXPath": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmlXPath"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Make a XPath query on a XML document"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = xmlXPath(xmlObj, queryStr)", "result = xmlXPath(xmlObj, queryStr, namespaces)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmlObj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a XML mlist typed XMLDoc or XMLElem"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "queryStr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Xpath query"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "namespaces"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An optional matrix nx2 of strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "result can be a set of XMLElements or a number or a string or a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"h5attr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5attr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create an attribute"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5attr(obj, location, name, data [, targetType])", "h5attr(filename, location, name, data [, targetType])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the location in the object or in the file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to the new dataset"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab data"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "targetType"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the type of the target"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5group", "h5attr"]},"h5close": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5close"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Close a HDF5 object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h5close([obj_1 [, obj_2 [, ...]]])"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["h5open", "h5group", "h5dataset", "h5attr"]},"h5cp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5cp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Copy an object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5cp(srcobj [, srcloc], destobj [, destloc])", "h5cp(srcobj [, srcloc], destfile, destloc)", "h5cp(srcfile, srcloc, destobj [, destloc])", "h5cp(srcfile, srcloc, destfile, destloc)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "srcobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "srcloc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the source location"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destloc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the destination location"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "srcfile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string the source filename"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destfile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the destination filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5open", "h5mv", "h5rm", "h5flush"]},"h5dataset": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5dataset"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a dataset and write the data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5dataset(obj, name, sourceInfo [, sourceType], data, targetInfo [, targetType])", "h5dataset(filename, name, sourceInfo [, sourceType], data, targetInfo [, targetType])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to the new dataset"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sourceInfo"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix 5xn of doubles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sourceType"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the type of the source"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab data"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "targetInfo"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix 6xn of doubles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "targetType"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the type of the target"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5group", "h5attr", "h5write", "h5writeattr"]},"h5dump": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5dump"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Dump the content of an H5 object on the standard output stream"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5dataset(obj, name)", "h5dataset(filename, name)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to dump"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "h5open"},"h5exists": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5exists"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Test the existence of named object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["b = h5exists(obj, locations)", "b = h5exists(obj, location, attrNames)", "b = h5exists(filename, locations)", "b = h5exists(filename, location, attrNames)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "locations"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of string containing the path to check"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the location where to check the attributes names"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "attrNames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of string containing the attributes names to check"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of booleans"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5open", "h5get"]},"h5flush": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5flush"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Flush all the buffers associated with a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h5flush(obj [, local])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "local"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5open", "h5open"]},"h5get": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5get"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get a named object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "nobj = h5get(obj, location [, isAttr])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the location"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isAttr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean to indicate that an attribute must be got"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "h5open"},"h5group": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5group"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a group"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5group(obj, names)", "h5group(filename, names)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings giving the names"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5group", "h5dataset", "h5attr"]},"h5label": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5label"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Label a dataset"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5label(obj, location, dims, names)", "h5label(filename, location, dims, names)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the location"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of strings with the same size as dims"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "h5open"},"h5ln": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5ln"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Link an object to another one"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5ln(obj, linkname, destobj [, hard])", "h5ln(obj, linkname, destname [, hard])", "h5ln(obj, linkname, destfile, destname)", "h5ln(filename, location, linkname, destname [, hard])", "h5ln(filename, location, linkname, destfile, destname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "linkname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the link name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destfile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the destination filename"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hard"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the location in the file"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "h5open"},"h5ls": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5ls"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "List the content of an HDF5 object (group or dataset)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["content = h5ls(obj [, name [, filter]])", "content = h5ls(filename, name [, filter])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to the object to list"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the type to filter"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "content"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings with 2 columns"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "h5open"},"h5mount": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5mount"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Mount a file on a group"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h5mount(obj, location, fileobj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the mount point"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fileobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5open", "h5umount"]},"h5mv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5mv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Move an object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5mv(srcobj [, srcloc], destobj [, destloc])", "h5mv(srcobj [, srcloc], destfile, destloc)", "h5mv(srcfile, srcloc, destobj [, destloc])", "h5mv(srcfile, srcloc, destfile, destloc)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "srcobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destobj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "srcloc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the source location"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destloc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the destination location"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "srcfile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string the source filename"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destfile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the destination filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5open", "h5cp", "h5rm", "h5flush"]},"h5objects": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "H5 Objects"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Describe the properties of the different H5 objects"},"string": []},"synopsis": [],"varlist": [],"seealso": ["h5attr", "h5close", "h5cp", "h5dataset", "h5dump", "h5exists", "h5flush", "h5get", "h5group", "h5isAttr", "h5isFile", "h5isGroup", "h5isRef", "h5isSet", "h5isSpace", "h5isType", "h5label", "h5ln", "h5ls", "h5mount", "h5mv", "h5open", "h5readattr", "h5rm", "h5umount", "h5write", "h5writeattr"]},"h5open": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5open"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open an HDF5 file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["obj = h5open(filename [, access])", "obj = h5open(filename, access, driver [, driver_options...])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "access"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the access mode to use"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "driver"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the driver name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "driver_options"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean or a double depending of the driver value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A H5Object corresponding to the open file"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "h5close"},"h5read": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5read"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read the data of HDF5 dataset"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5read(obj [, name, [, start, count [, stride [, block]]]])", "h5read(filename, name [, start, count [, stride [, block]])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to the new dataset"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "start"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the start of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "count"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the count of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stride"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the stride of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the block of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5readattr", "h5write", "h5dataset"]},"h5readattr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5readattr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read the data of an HDF5 attribute"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5readattr(obj [, location], name)", "h5readattr(filename, location, name)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to the attribute name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to the group or the dataset containing the attribute"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5read", "h5writeattr", "h5attr"]},"h5rm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5rm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove elements from an HDF5 file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5rm(obj [, names])", "h5rm(filename, names)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings giving the locations to remove"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving an the path of a HDF5 file"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5group", "h5dataset", "h5attr"]},"h5umount": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5umount"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Unmount a previously mounted file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h5umount(obj, location)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the mount point"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5open", "h5mount"]},"h5write": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5write"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a dataset (if it does not exist) and write the data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h5write(obj, name, data [, targetType], [, start, count [, stride [, block]]])", "h5write(filename, name, data [, targetType], [, start, count [, stride [, block]]])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the path to the dataset"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab data"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "targetType"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the type of the target"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "start"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the start of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "count"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the count of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stride"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the stride of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row of doubles containing the block of the hyperslab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string giving the filename"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5group", "h5attr"]},"h5writeattr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5writeattr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write an attribute in a group or a dataset"},"string": []},"synopsis": [],"varlist": [],"seealso": "h5attr"},"h5isArray": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isArray"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is an array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isArray(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isSet", "h5isAttr", "h5isSpace", "h5isType", "h5isRef", "h5isCompound", "h5isVlen"]},"h5isAttr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isAttr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is an attribute"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isAttr(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isGroup", "h5isSet", "h5isSpace", "h5isType", "h5isRef", "h5isArray", "h5isArray", "h5isVlen"]},"h5isCompound": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isCompound"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a compound object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isCompound(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isSet", "h5isAttr", "h5isSpace", "h5isType", "h5isRef", "h5isArray", "h5isVlen"]},"h5isFile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isFile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isFile(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isGroup", "h5isSet", "h5isAttr", "h5isSpace", "h5isType", "h5isRef", "h5isArray", "h5isArray", "h5isVlen"]},"h5isGroup": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isGroup"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a group"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isGroup(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isSet", "h5isAttr", "h5isSpace", "h5isType", "h5isRef", "h5isArray", "h5isArray", "h5isVlen"]},"h5isRef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isRef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a reference object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isRef(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isGroup", "h5isSet", "h5isAttr", "h5isSpace", "h5isType", "h5isArray", "h5isArray", "h5isVlen"]},"h5isSet": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isSet"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a dataset"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isSet(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isGroup", "h5isAttr", "h5isSpace", "h5isType", "h5isRef", "h5isArray", "h5isArray", "h5isVlen"]},"h5isSpace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isSpace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a dataspace"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isSpace(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isGroup", "h5isSet", "h5isAttr", "h5isType", "h5isRef", "h5isArray", "h5isArray", "h5isVlen"]},"h5isType": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isType"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a type"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isType(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isGroup", "h5isSet", "h5isAttr", "h5isSpace", "h5isRef", "h5isArray", "h5isArray", "h5isVlen"]},"h5isVlen": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "h5isVlen"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if the HDF5 object is a variable length array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "b = h5isVlen(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a H5Object"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["h5isFile", "h5isSet", "h5isAttr", "h5isSpace", "h5isType", "h5isRef", "h5isCompound", "h5isVlen"]},"compress": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "compress"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compress files in an archive"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "files = compress(archivename, inputs, <opt_args>)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String vector of file names that have been compressed in the archive."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "archivename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string specifying the archive path and name that will be created."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "inputs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String matrix of file names or folders that will be package and compress. When a folder is given, the content will be added recursively. Values can contain wildcards like "},{"type": "literal","children": [],"string": "*.sci"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string with one of the following values: zip, tar, 7zip, tar_ustar, tar_pax_interchange, tar_pax_restricted, tar_gnutar, raw."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "compression"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string with one of the following values: none, gzip, lzma, xz."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "level"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A constant with a value between 0 and 9."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "password"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The password string is used to encrypt the archive. "},{"type": "warning","children": {"type": "text","children": [],"string": "This option is only available for ZIP files."},"string": []}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["decompress", "fileinfo", "fileparts", "save"]},"decompress": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "decompress"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "decompress files from an archive"},"string": []},"synopsis": [{"type": "synopsis","children": [],"string": "files = decompress(archivename, <opt_args>)"},{"type": "synopsis","children": [],"string": "files = decompress(archivename, output, <opt_args>)"}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String vector of file names that have been extracted from the archive."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "archivename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string specifying the archive path and name that will be extracted."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "output (optional)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the path where to extract the archive."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "password"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The password string needed to decrypt the archive. "},{"type": "warning","children": {"type": "text","children": [],"string": "This option is only available for ZIP files."},"string": []}],"string": []},"string": []}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"seealso": "compress"},"dispfiles": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dispfiles"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "displays properties of opened files"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "dispfiles([units])"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "units"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of integer numbers, the file's logical units. By default all opened files."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["file", "mopen"]},"fprintfMat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fprintfMat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "writes a matrix in a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fprintfMat(file, M [,format,text])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the pathname of the file to be written"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of real numbers"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a character string giving the format. This is an optional parameter, the default value is "},{"type": "literal","children": [],"string": "\"%lf\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Supported format: "},{"type": "literal","children": [],"string": "%[width].[precision]type"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "%type"},{"type": "text","children": [],"string": ", where:"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "width"},{"type": "text","children": [],"string": ": an optional number that specifies the minimum number of characters output;"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "precision"},{"type": "text","children": [],"string": ": an optional number that specifies the maximum number of characters printed for all or part of the output field, or the minimum number of digits printed for integer values;"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": ": lf, lg, d, i, e, f, g (see "},{"type": "link","children": [],"string": "scanf_conversion"},{"type": "text","children": [],"string": " for details)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a row (column) vector of strings giving non numerical comments stored at the beginning of the file."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["scanf_conversion", "mclose", "meof", "mfprintf", "mfscanf", "fscanfMat", "mget", "mgetstr", "mopen", "mprintf", "mput", "mputstr", "mscanf", "mseek", "mtell", "mdelete"]},"fscanfMat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fscanfMat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "reads a matrix from a text file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["M = fscanfMat(filename[, fmt]);", "[M, text] = fscanfMat(filename [, fmt]);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string giving the name of the file to be scanned."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmt"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a character string giving the format. This is an optional parameter, the default value is "},{"type": "literal","children": [],"string": "\"%lg\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Supported format: "},{"type": "literal","children": [],"string": "%[width].[precision]type"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "%type"},{"type": "text","children": [],"string": " where:"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "width"},{"type": "text","children": [],"string": ": optional number that specifies the minimum number of characters output;"}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "precision"},{"type": "text","children": [],"string": ": optional number that specifies the maximum number of characters printed for all or part of the output field, or the minimum number of digits printed for integer values."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": ": lf, lg, d, i, e, f, g (see "},{"type": "link","children": [],"string": "scanf_conversion"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "output variable. A matrix of real numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "output variable. A column vector of strings. It is comments in the beginning of the file "},{"type": "varname","children": [],"string": "filename"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["scanf_conversion", "mclose", "meof", "mfprintf", "fprintfMat", "mfscanf", "mget", "mgetstr", "mopen", "mprintf", "mput", "mputstr", "mseek", "mtell", "mdelete", "csvRead"]},"getdeprecated": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getdeprecated"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get names of deprecated functions and replacement function names."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["deprecated = getdeprecated();", "[deprecated, replaced_by] = getdeprecated();"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "deprecated"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String vector of deprecated functions."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "replaced_by"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String vector of the same size as "},{"type": "literal","children": [],"string": "deprecated"},{"type": "text","children": [],"string": " containing the replacement functions."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"getmd5": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getmd5"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna soma de verificação md5"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["res=getmd5(filename)", "res=getmd5(ParamString,'string')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resultado md5 (string)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nome do arquivo (string ou matrizes de strings)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ParamString"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matrizes de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"hash": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hash"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get checksum of file or string using various digest algorithms"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["res = hash(fd, algorithm)", "res = hash(string, algorithm)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "hash result (a string)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of file descriptors returned by the function mopen."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string or a matrix of strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "algorithm"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string (the hashing algorithm)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"percentio": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%io"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "protected variable providing ids of the standard input and standard output"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["%io(1)", "%io(2)"]},"varlist": [],"seealso": ["getio", "consolebox", "write", "mprintf", "file", "dispfiles"]},"listvarinfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "listvarinfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lists variables stored in a binary archive (names, types, sizes..)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["listvarinfile(filename);", "[names, typs, dims, vols] = listvarinfile(filename)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the pathname of the file to be inspected."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nams"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings, names of the variables saved in the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list, dimensions of the variables saved in the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a numeric matrix, types of the variables saved in the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a numeric matrix, size in bytes of the variables saved in the file."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["save", "load", "save_format", "type", "whos", "who"]},"mclearerr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mclearerr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "resets binary file access errors"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "flag = mclearerr([fd])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar: the "},{"type": "varname","children": [],"string": "fd"},{"type": "text","children": [],"string": " parameter returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": ". -1 stands for last opened file. Default value is -1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a boolean: "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " if "},{"type": "varname","children": [],"string": "fd"},{"type": "text","children": [],"string": " points to a valid file identifier and "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " else."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["merror", "mclose", "mopen", "mput", "mget", "mgetstr", "mputstr", "meof", "mseek", "mtell"]},"mclose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mclose"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "closes opened files"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["err = mclose(fd)", "err = mclose(paths)", "mclose('all')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix of integers: the "},{"type": "varname","children": [],"string": "fd"},{"type": "text","children": [],"string": " matrix returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": " is used as a matrix of file descriptors."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "paths"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings: the absolute paths of files to be closed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of integers: error indicators."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["meof", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mgetl", "mgetstr", "mopen", "mprintf", "mput", "mputl", "mputstr", "mseek", "mtell", "file", "mdelete"]},"meof": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "meof"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checks if end of file has been reached"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "err=meof(fd)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar: the "},{"type": "varname","children": [],"string": "fd"},{"type": "text","children": [],"string": " parameter returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": ". -1 stands for last opened file. Default value is -1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar: an error indicator."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mclose", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mgetstr", "mopen", "mprintf", "mput", "mputstr", "mseek", "mtell", "mdelete"]},"merror": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "merror"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tests the file access errors indicator"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["err = merror([fd])", "[err, msg] = merror([fd])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar: the "},{"type": "varname","children": [],"string": "fd"},{"type": "text","children": [],"string": " parameter returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": " is used as a file descriptor (it's a positive integer). -1 stands for last opened file. The default value is -1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a scalar: an error status number of the most recent file I/O operation associated with the specified file."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the most recent I/O operation performed on the specified file was successful, the value of "},{"type": "varname","children": [],"string": "msg"},{"type": "text","children": [],"string": " is empty and "},{"type": "function","children": [],"string": "merror"},{"type": "text","children": [],"string": " returns an "},{"type": "varname","children": [],"string": "err"},{"type": "text","children": [],"string": " value of 0."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: an error string message."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mclearerr", "mclose", "mopen", "mput", "mget", "mgetstr", "mputstr", "meof", "mseek", "mtell"]},"mfprintf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mfprintf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converts, formats, and writes data to a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mfprintf(fd, format, a1, ..., an)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "scalar positive index identifying the file, as provided by "},{"type": "literal","children": [],"string": "mopen"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "fd"},{"type": "text","children": [],"string": " equals 0: redirection to stderr."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "fd"},{"type": "text","children": [],"string": " equals 6: redirection to stdout (console)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string providing the format to use to write all next arguments. The "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " follows -- as close as possible -- the C printf format operand syntax, as described in the "},{"type": "link","children": [],"string": "printf_conversion"},{"type": "text","children": [],"string": " page. UTF-8 extended characters are supported. "},{"type": "warning","children": {"type": "text","children": [],"string": "Numbered placeholders \"%n$..\" are not supported."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1, ..., an"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Data to be converted and written according to the "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " argument. Supported types: all numbers, booleans, strings. Only the real part of complex numbers is considered (current Scilab limitation)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["printf_conversion", "csvWrite", "fprintfMat", "write", "mputl", "mputstr", "mopen", "mclose", "mprintf", "mfscanf"]},"mfscanf": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "mfscanf"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "mscanf"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "msscanf"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "reads input from the stream pointer stream (interface to the C fscanf function)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "reads input from the standard input (interface to the C scanf function)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "reads its input from the character string (interface to the C sscanf function)"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["[n, v_1,..., v_m] = mfscanf([niter,]fd, format)", "L = mfscanf([niter,] fd,format)", "[n, v_1,..., v_m] = mscanf([niter,] format)", "L = mscanf([niter,]format)", "[n, v_1,..., v_m] = msscanf([niter,]str, format)", "L = msscanf([niter,] str, format)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a Scilab string describing the format to use to write the remaining operands. The "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " operand follows, as close as possible, the C "},{"type": "function","children": [],"string": "printf"},{"type": "text","children": [],"string": " format operand syntax as described in "},{"type": "link","children": [],"string": "scanf_conversion"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a positive integer: a file descriptor returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": ". The value -1 refers to the last opened file."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab string or string vector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "niter"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an integer: the number of times the "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " to be used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer: the number of data read or -1 if EOL has been encountered before any datum has been read."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v_i"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Each function reads characters, interprets them according to a "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": ", and stores the results in its output arguments. If more than "},{"type": "varname","children": [],"string": "n"},{"type": "text","children": [],"string": " output arguments are provided, the last ones "},{"type": "varname","children": [],"string": "v_n+1, ..., v_m"},{"type": "text","children": [],"string": " are set to empty matrices."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "if all data are homogeneous they are stored in a unique vector which is returned, otherwise subsequences of same data type are stored in matrices and a "},{"type": "literal","children": [],"string": "mlist"},{"type": "text","children": [],"string": " (with type "},{"type": "literal","children": [],"string": "cblock"},{"type": "text","children": [],"string": ") containing all the built matrices is returned."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mclose", "meof", "mfprintf", "fprintfMat", "fscanfMat", "mget", "mgetstr", "mopen", "mprintf", "mput", "mputstr", "mseek", "mtell", "mdelete", "scanf_conversion"]},"mget": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "mget"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "mgeti"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "parses numbers in a binary file and returns them as decimals"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "parses numbers in a binary file and returns them as encoded integers"},"string": []}],"synopsis": [{"type": "synopsis","children": [],"string": ["D = mget(nNumb)", "D = mget(nNumb, binFormat)", "D = mget(nNumb, binFormat, fileID)"]},{"type": "synopsis","children": [],"string": ["I = mgeti(nNumb)", "I = mgeti(nNumb, binFormat)", "I = mgeti(nNumb, binFormat, fileID)"]}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fileID"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "file identifier (single integer) returned by "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": " when opening the file. By default, the last opened file is considered. "},{"type": "important","children": [{"type": "text","children": [],"string": "The file must be priorly opened in "},{"type": "emphasis","children": [],"string": "r"},{"type": "text","children": [],"string": "ead "},{"type": "emphasis","children": [],"string": "b"},{"type": "text","children": [],"string": "inary mode with "},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nNumb"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single integer > 0: number of numbers to be parsed and returned. Each number is encoded over one or several bytes, according to the used "},{"type": "varname","children": [],"string": "binFormat"},{"type": "text","children": [],"string": ". "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "binFormat"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a text word made of one, 2 or 3 character codes: the binary format used to parse numbers in the binary file. Available binary codes are the following: "},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The default order of bytes in a block can be set using a "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": " option when opening the file. This order may be forced afterwards using an optional "},{"type": "function","children": [],"string": "mget"},{"type": "text","children": [],"string": " or "},{"type": "function","children": [],"string": "mgeti"},{"type": "text","children": [],"string": " flag to be appended to "},{"type": "varname","children": [],"string": "binFormat"},{"type": "text","children": [],"string": ": "}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "D"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Row of "},{"type": "varname","children": [],"string": "nNumb"},{"type": "text","children": [],"string": " Decimal numbers (or available ones if the End Of File has been reached)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "I"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Row of "},{"type": "varname","children": [],"string": "nNumb"},{"type": "text","children": [],"string": " encoded Integers (or available ones if the End Of File has been reached). The "},{"type": "function","children": [],"string": "inttype"},{"type": "text","children": [],"string": " of returned integers depends on the used "},{"type": "varname","children": [],"string": "binFormat"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mopen", "mclose", "mput", "mseek", "mtell", "meof", "inttype"]},"mgetl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mgetl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "reads lines from an text file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "txt = mgetl(file_desc [,m])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file_desc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string giving the file name or an integer giving a logical unit returned by "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer scalar: a number of lines to read. Default value is -1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector of strings."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mputl", "mclose", "mfscanf", "mget", "mput", "mgetstr", "mopen", "read"]},"mgetstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mgetstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "reads a character string from a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "str = mgetstr(n, [fd])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "non-negative integer: how many characters should be read."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an integer: file descriptor as returned by "},{"type": "link","children": [],"string": "mopen"},{"type": "text","children": [],"string": ": where characters should be read. The value "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " stands for the last opened file and is the default."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the character string to be read."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mclose", "meof", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mopen", "mprintf", "mput", "mputstr", "mseek", "mtell", "mdelete"]},"mopen": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mopen"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "opens files in Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[fd, err] = mopen(files [, mode, swap ])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings containing the paths of the files to open."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string specifying the access mode requested for the files."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "swap"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a scalar. If "},{"type": "varname","children": [],"string": "swap"},{"type": "text","children": [],"string": " is present and "},{"type": "text","children": [],"string": " then automatic bytes swap is disabled."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The default value is 1."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a matrix of integers. Error indicators."},"string": []},{"type": "warning","children": {"type": "text","children": [],"string": "When this output argument is given, no error will be raised by the function."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of file descriptors (they are positive integers)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["file", "mclose", "merror", "meof", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mgetl", "mgetstr", "mprintf", "mput", "mputl", "mputstr", "mseek", "mtell", "mdelete"]},"mput": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mput"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "writes  byte or word in a given binary format"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mput(x [, type, fd])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of floating point or integer type numbers"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar: a file descriptor returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " stands for last opened file. Default value is "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string: the binary format used to write all the entries of "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mclose", "meof", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mgetl", "mgetstr", "mopen", "mprintf", "mputl", "mputstr", "mseek", "mtell", "mdelete"]},"mputl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mputl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "writes strings in a text file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = mputl(txt, file_desc)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "returns "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "%f"},{"type": "text","children": [],"string": " to check if function has correctly wrote on the file."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file_desc"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a character string giving the name of the file or"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "an integer scalar: a file descriptor returned by "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": " function."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of strings."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mget", "mgetl", "mclose", "mfprintf", "mput", "mputstr", "mopen", "write"]},"mputstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mputstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "write a single text in an open file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mputstr(str)", "mputstr(str, fid)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fid"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer: file identifier returned by "},{"type": "literal","children": [],"string": "mopen(…)"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " (default) stands for the last opened file."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single text to write in the file. Multilingual UTF-8 characters are accepted. "},{"type": "varname","children": [],"string": "str"},{"type": "text","children": [],"string": " can include special formatting characters like ascii(9) (tab), ascii(10) (newline) and ascii(13) (carriage return). Sequences like \"\\t\", \"\\n\" and \"\\r\" have no special meaning and are written as is."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mgetstr", "mputl", "mgetl", "mput", "mfprintf", "save", "write", "csvWrite"]},"mseek": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mseek"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sets current position in a binary file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mseek(n [,fd, flag])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar: the offset in a number of bytes."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar: a file descriptor returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " stands for last opened file. Default value is "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string: specifies the origin. Default value "},{"type": "literal","children": [],"string": "'set'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mclose", "meof", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mgetstr", "mopen", "mprintf", "mput", "mputstr", "mtell", "mdelete"]},"mtell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the offset of the current byte relative to the beginning of a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mtell([fd])"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar: a file descriptor returned by the function "},{"type": "function","children": [],"string": "mopen"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " stands for last opened file. Default value is "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["mclose", "meof", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mgetstr", "mopen", "mprintf", "mput", "mputstr", "mseek", "mdelete"]},"save_format": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "save format"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "format of files produced by \"save\""},"string": []},"synopsis": [],"varlist": [],"seealso": ["save", "load", "listvarinfile", "type", "typeof"]},"scanf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scanf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converts formatted input on standard input"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[v_1, ..., v_n] = scanf(format);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: specifies the format conversion."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v_1, ..., v_n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "converted results."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["read", "mfscanf", "scanf_conversion"]},"scanf_conversion": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scanf_conversion"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mscanf, msscanf, mfscanf conversion specifications"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "%"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "accepts a single "},{"type": "literal","children": [],"string": "%"},{"type": "text","children": [],"string": " (percent sign) input at this point; no assignment is done."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d, i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "accepts a decimal integer."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "u"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "accepts an unsigned decimal integer."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "o"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "accepts an octal integer."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "accepts a hexadecimal integer."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e, f, g"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "accepts a floating-point number. The next field is converted accordingly and stored through the corresponding parameter, which should be a pointer to a float. The input format for floating-point numbers is a string of digits, with the following optional characteristics:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "it can be a signed value;"},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "it can be an exponential value, containing a decimal point followed by an exponent field, which consists of an "},{"type": "literal","children": [],"string": "E"},{"type": "text","children": [],"string": " or an "},{"type": "literal","children": [],"string": "e"},{"type": "text","children": [],"string": " followed by an (optionally signed) integer;"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "it can be one of the special values "},{"type": "constant","children": [],"string": "%inf"},{"type": "text","children": [],"string": ", "},{"type": "constant","children": [],"string": "%nan"},{"type": "text","children": [],"string": ";"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "accepts a string of characters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character value is expected. The normal skip over white-space is suppressed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "%lg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "gets value as a double."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["msscanf", "mfscanf", "mscanf", "printf_conversion"]},"chdir": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "chdir"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "cd"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "muda o diretório corrente do Scilab"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "muda o diretório corrente do Scilab"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["b = chdir(path)", "realpath = cd(path)", "cd path"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano %t se a operação chdir estiver ok."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um string"},"string": []},{"type": "text","children": [],"string": ". O caminho padrão é "},{"type": "literal","children": [],"string": "home"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "realpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string, o nome real do endereço após a conversão do nome do endereço (ver abaixo)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"createdir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "createdir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "makes new directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["createdir(dirname)", "status = createdir(dirname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mkdir", "rmdir", "removedir"]},"dir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gets file list "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["dir path", "S=dir([path])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string matrix giving a directory pathname (eventually  ended by a pattern built with "},{"type": "literal","children": [],"string": "*"},{"type": "text","children": [],"string": "). Default value is "},{"type": "literal","children": [],"string": "."},{"type": "text","children": [],"string": " (a dot)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "S"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a "},{"type": "literal","children": [],"string": "tlist"},{"type": "text","children": [],"string": " of type "},{"type": "literal","children": [],"string": "dir"},{"type": "text","children": [],"string": " with fields : "},{"type": "literal","children": [],"string": "name"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "date"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "bytes"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "isdir"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["listfiles", "findfiles", "ls", "fileinfo", "date"]},"isdir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isdir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checks that a path points to an existing directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = isdir(path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or a matrix of strings: a directory pathname."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a boolean: "},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": " if "},{"type": "varname","children": [],"string": "path"},{"type": "text","children": [],"string": " is a path to a directory."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isfile", "fileinfo"]},"ls": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ls"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "shows files"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["files = ls [path]", "files = ls( [path] )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string matrix giving a directory pathname (eventually  ended by a pattern built with "},{"type": "literal","children": [],"string": "*"},{"type": "text","children": [],"string": "). Default value is "},{"type": "literal","children": [],"string": "."},{"type": "text","children": [],"string": " (a dot)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string column vector. By default it contains a column formatted output."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["listfiles", "findfiles", "dir", "fileinfo"]},"mkdir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mkdir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "makes a new directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mkdir(dirname)", "mkdir(parentdir, dirname)", "status = mkdir( ... )", "[status, msg] = mkdir( ... )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: a directory to create."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parentdir"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string: a directory in which the new directory "},{"type": "varname","children": [],"string": "dirname"},{"type": "text","children": [],"string": " will be created."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer: the status of the operation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: a message about an error."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["chdir", "dir", "rmdir"]},"pwd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pwd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gets Scilab current directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["pwd", "x = pwd()"]},"varlist": [],"seealso": "chdir"},"removedir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "removedir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "removes a directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["removedir(dirname)", "[status] = removedir(dirname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createdir", "mkdir", "rmdir"]},"rmdir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rmdir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "removes a directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["rmdir(dirname)", "rmdir(dirname,'s')", "[status, message] = rmdir(dirname,'s')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "'s'"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a mark to remove directory "},{"type": "varname","children": [],"string": "dirname"},{"type": "text","children": [],"string": " with subdirectories."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "message"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: a message about an error."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createdir", "mkdir", "removedir"]},"copyfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "copyfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "copies a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["copyfile(source, destination)", "[status, message] = copyfile(source, destination)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "source"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: a filename or a directory name."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destination"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: a directory name."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["movefile", "mdelete"]},"deletefile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "deletefile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "deletes a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "status = deletefile(filename)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character strings interpreted as existing file names or not."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "booleans "},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": " on success or "},{"type": "constant","children": [],"string": "%f"},{"type": "text","children": [],"string": " on error. It has the same size as "},{"type": "varname","children": [],"string": "filename"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mdelete", "rmdir"]},"fileinfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fileinfo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Fornece informações sobre um arquivo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = fileinfo(filesPaths)", "[x,ierr] = fileinfo(filesPaths)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filesPaths"},{"type": "para","children": {"type": "text","children": [],"string": "vector of paths (as text). Files of any type can be targeted: regular files, directories (in their own), shortcuts, symbolic links, etc."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "matrix of decimal integers, of sizes (m,13) with m: number of provided files paths. The row #i returns informations about the file "},{"type": "literal","children": [],"string": "filesPaths(i)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If only one path is queried and the file does not exist, "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " returns []."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If several files are queried: when a file among them does not exist, its "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " row is filled with "},{"type": "constant","children": [],"string": "Nan"},{"type": "text","children": [],"string": " values."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ierr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "indicador de erro : 0, se não for encontrado nenhum erro."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"findfiles": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findfiles"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "finding all files with a given file specification"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["f = findfiles()", "f = findfiles(path)", "f = findfiles(path, filespec)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, a path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filespec"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character stirng, a file specification, for example "},{"type": "literal","children": [],"string": "\"*.sce\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector of strings, filenames."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "listfiles"},"isfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checks whether argument is an existing file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x = isfile(filenames)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filenames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or a string matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix of boolean ("},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": " if "},{"type": "varname","children": [],"string": "filenames"},{"type": "text","children": [],"string": " are existing files)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["fileinfo", "isdir"]},"listfiles": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "listfiles"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "list of files"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "files = listfiles(paths [, flag, flagexpand])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "paths"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string matrix giving a set of pathnames (eventually  ended by a pattern built with "},{"type": "literal","children": [],"string": "*"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag, flagexpand"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "boolean optional parameters (default value is "},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findfiles", "basename", "pathconvert"]},"mdelete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mdelete"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "deletes file(s)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mdelete(filename)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: the pathname of the file(s) to delete."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["mopen", "mclose", "meof", "mfprintf", "fprintfMat", "mfscanf", "fscanfMat", "mget", "mgetstr", "mprintf", "mput", "mputstr", "mscanf", "mseek", "mtell"]},"movefile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "movefile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "moves file or directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["movefile(source, destination)", "[status, message] = movefile(source, destination)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "source"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "destination"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer: the status of the operation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "message"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string: a message about an error."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "copyfile"},"newest": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "newest"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o arquivo mais novo de um conjunto de arquivos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["k=newest(paths)", "k=newest(path1,path2,...,pathn)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o índice do arquivo mais novo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "paths"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings, paths(i) é o endereço do i-ésimo arquivo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pathi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o endereço do i-ésimo arquivo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "fileinfo"},"basename": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "basename"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "strip directory and suffix from filenames"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "processedfiles = basename(files[,flag [,flagexpand]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix giving a set of file names."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional boolean, used to convert the given path(s) for the current operating system. Default value is true ("},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flagexpand"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional boolean, used to expand leading variables in paths. Only used with "},{"type": "varname","children": [],"string": "flag"},{"type": "text","children": [],"string": " argument. Default value is true ("},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "processedFiles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix containing the processed filenames."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["listfiles", "pathconvert", "fileparts"]},"fileext": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fileext"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns extension for a file path"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "extension = fileext(fullpath)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fullpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix, the given file path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "extension"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string matrix, the extension part is any or "},{"type": "literal","children": [],"string": "''"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "fileparts"},"fileparts": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fileparts"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns the path, filename and extension for a file path"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[path, fname, extension] = fileparts(fullpath)", "value = fileparts(fullpath, sel)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fullpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string or a string matrix, the given file path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sel"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a optional character string selector, with possible values: "},{"type": "literal","children": [],"string": "'path'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "'fname'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'extension'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string or a string matrix, the path of the directory pointed to by "},{"type": "varname","children": [],"string": "fullpath"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string or a string matrix, the filename part is any or "},{"type": "literal","children": [],"string": "''"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "extension"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string or a string matrix, the extension part is any or "},{"type": "literal","children": [],"string": "''"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string or a string matrix, depending on "},{"type": "varname","children": [],"string": "sel"},{"type": "text","children": [],"string": " value."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pathconvert", "basename", "fullfile"]},"filesep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "filesep"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns directory separator for current platform"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = filesep()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"fullfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fullfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "builds a full filename from parts"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "f = fullfile(varargin)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character strings, all directories and filename used to build the full filename (at least one directory and filename)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or matrix of strings, full filename."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pathconvert", "fileparts"]},"fullpath": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fullpath"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "creates an full path name for the specified relative path name."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = fullpath(relative_path)"},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string or matrix of string."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "relative_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string or a matrix of string."},"string": []},"string": []}],"string": []},"string": []}],"seealso": []},"get_absolute_file_path": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "get_absolute_file_path"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fornece o nome de endereço absoluto de um arquivo aberto no Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "pathname = get_absolute_file_path(filename)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : nome do arquivo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pathname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : o nome de endereço absoluto"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"getdrives": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getdrives"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gets the drive letters of all mounted filesystems on the computer"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "drives = getdrives()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "drives"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"getlongpathname": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getlongpathname"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gets long path name"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["longpath = getlongpathname(shortpath)", "[longpath, bOK] = getlongpathname(shortpath)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shortpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or matrix of strings: the short path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "longpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or matrix of strings: the long path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bOK"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a boolean or a matrix of boolean: "},{"type": "constant","children": [],"string": "%T"},{"type": "text","children": [],"string": " if path has been converted else "},{"type": "constant","children": [],"string": "%F"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["getshortpathname", "getrelativefilename", "pwd"]},"getrelativefilename": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getrelativefilename"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "dado um nome de diretório absoluto e um nome de arquivo relativo, retorna um nome de arquivo relativo."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "rel_file = getrelativefilename(abs_dir,abs_file)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "abs_dir"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : o diretório absoluto"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "abs_file"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : o nome de arquivo absoluto"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rel_file"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : o nome de arquivo relativo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["getshortpathname", "getlongpathname", "pwd"]},"getshortpathname": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getshortpathname"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gets short path name"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["shortpath = getshortgpathname(longpath)", "[shortpath, bOK] = getshortpathname(longpath)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "longpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or matrix of strings: the long path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shortpath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or a matrix of strings: the short path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bOK"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a boolean or a matrix of boolean: "},{"type": "constant","children": [],"string": "%T"},{"type": "text","children": [],"string": " if path has been converted else "},{"type": "constant","children": [],"string": "%F"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["getlongpathname", "getrelativefilename", "pwd"]},"is_absolute_path": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "is_absolute_path"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checks if argument is an absolute path"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = is_absolute_path(path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or a matrix of strings: a directory pathname."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a boolean: "},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": " if "},{"type": "varname","children": [],"string": "path"},{"type": "text","children": [],"string": " is an absolute path."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["get_absolute_file_path", "fileparts"]},"pathconvert": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pathconvert"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converts a path to an OS path format."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["paths = pathconvert(paths)", "paths = pathconvert(paths, flagtrail)", "paths = pathconvert(paths, flagtrail, flagexpand)", "paths = pathconvert(paths, flagtrail, flagexpand, type)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "paths"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix giving a set of file paths"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flagtrail"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional boolean, used to add a trailing file separator to the paths ("},{"type": "literal","children": [],"string": "\\"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "/"},{"type": "text","children": [],"string": ", depending on the target path format). Default value is true ("},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flagexpand"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional boolean, used to expand leading variables in paths. Default value is true ("},{"type": "constant","children": [],"string": "%t"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional string, used to specify the target path format: "},{"type": "literal","children": [],"string": "'u'"},{"type": "text","children": [],"string": " for POSIX path format (GNU/Linux,...), and "},{"type": "literal","children": [],"string": "'w'"},{"type": "text","children": [],"string": " for Windows path format."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["basename", "fileparts", "listfiles"]},"pathsep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pathsep"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "provides the path separator used in the PATH environment variable of the current OS."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = pathsep()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a character: "},{"type": "literal","children": [],"string": "\";\""},{"type": "text","children": [],"string": " on Windows, or "},{"type": "literal","children": [],"string": "\":\""},{"type": "text","children": [],"string": " on Linux. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},"string": []},"seealso": ["filesep", "getenv"]},"tempname": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tempname"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "creates a file with an unique filename"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tmp_name = tempname([prefix])"},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "tmp_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "prefix"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: prefix of filename (On Windows, 3 characters maximum)."},"string": []},"string": []}],"string": []},"string": []}],"seealso": []},"file": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "file"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gerenciamento de arquivos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[unit, err] = file(\"open\", file-name [,status] [,access [,recl]] [,format])", "file(\"close\", unit)", "file(\"rewind\", unit)", "file(\"backspace\", unit)", "file(\"last\", unit)", "[units, typ, nams, mod, swap] = file()", "[units, typ, nams, mod, swap] = file(unit)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file-name"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string, nome o arquivo a ser aberto"},"string": []},{"type": "warning","children": {"type": "text","children": [],"string": "This function can not open files whose path has non-ascii UTF characters (accented, etc). In this case, please use mopen."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string, o status do arquivo a ser aberto"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"new\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o arquivo não deve existir, novo arquivo (padrão)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"old\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o arquivo já deve existir"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"unknown\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "status desconhecido"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"scratch\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o arquivo deve ser deletado ao fim da sessão"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "access"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string, o tipo de acesso ao arquivo"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"sequential\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "acesso seqüencial (padrão)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"direct\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "acesso direto. The next input argument "},{"type": "varname","children": [],"string": "recl"},{"type": "text","children": [],"string": " is then mandatory."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string,"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"formatted\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "para um arquivo formatado (padrão)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"unformatted\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "registro binário"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "recl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "inteiro, é o tamanho de registros quando "},{"type": "literal","children": [],"string": "access=\"direct\""}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "unit"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, descritor de unidade lógica do arquivo aberto"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "units"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros, descritores de unidades lógicas dos arquivos abertos. As unidades 5 e 6 são reservadas pelo sistema para dispositivos de entrada e saída."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings, tipo (C ou Fortran) dos arquivos abertos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nams"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings, endereços dos arquivos abertos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mod"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "modo de abertura de arquivo. Formado por três dígitos abc:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "swap"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "alavanca de troca automática. swap=1 se a troca automática estiver ativada. swap é sempre 0 para arquivos Fortran."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": [{"type": "para","children": [],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "inteiro, número de erro, se a abertura falha. Se "},{"type": "varname","children": [],"string": "err"},{"type": "text","children": [],"string": " for omitido, uma mensagem de erro aparece."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "action"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "é um dos seguintes strings:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"close\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fecha os arquivos fornecidos pelos descritores de unidades lógicas fornecidos em "},{"type": "literal","children": [],"string": "units"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rewind\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coloca o ponteiro no início do arquivo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"backspace\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coloca o ponteiro no início do último registro."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"last\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coloca o ponteiro após o último registro."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["isfile", "read", "write", "mopen", "save", "load", "uigetfile"]},"getio": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getio"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorno de unidades lógicas de entrada/saída do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ios=getio()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "ios"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um vetor [rio rte wio wte]"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rio"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "unidade lógica corrente para leitura de instruções"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rte"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "unidade lógica designada para entrada na janela do Scilab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wio"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "unidade lógica relativa ao arquivo de diário, se houer. wio=0 significa que nenhum arquivo de diário foi aberto"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wte"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "unidade lógica designada para saída na janela do Scilab"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"string": []},"seealso": ["percentio", "consolebox", "file", "exec"]},"load": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "load"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Loads some archived variables, a saved graphic figure, a library of functions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["load(filename)", "load(filename, x1,...,xn)", "load(\"path/myfigure.scg\")", "load(\"libdir/lib\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "path and name of the single file where archived variables are stored. Any prepended \"SCI\", \"TMPDIR\", \"SCIHOME\" or \"home\" word being a predefined Scilab variable is expanded into its value."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "name(s) -- given as strings -- of Scilab variable(s) to be recovered."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["listvarinfile", "loadGui", "xload", "lib", "xcos", "loadmatfile", "save", "save_format", "exec"]},"read": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "read"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Leitura de matrizes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[x]=read(file-desc,m,n,[format])", "[x]=read(file-desc,m,n,k,format)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file-desc"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string especificando o nome do arquivo ou valor inteiro especificando uma unidade lógica (fortran)(ver "},{"type": "link","children": [],"string": "file"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m, n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros (dimensões da matriz x). Ajuste m=-1 se você desconhece o número de linhas, para que todo o arquivo seja lido."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, especifica um formato \"Fortran\". Este string deve começar com um parêntese direito e terminar com um parêntese esquerdo. Formatos não podem misturar pontos flutuantes, inteiros ou modo de edição de caractere"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro ou vetor de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["file", "write", "x_dialog", "mscanf", "mfscanf", "msscanf", "fscanfMat"]},"save": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "save"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Saves some chosen variables in a binary data file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["save(filename)", "save(filename, x1, x2,...,xn)", "save(filename, variables)", "save(filename, \"-append\", ..)", "save(.., \"-append\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Character string containing the path of the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Names (as strings) of Scilab variables to be saved. Objects returned by expressions -- like gcf() -- can't be directly saved. They must be explicitly named: "},{"type": "literal","children": [],"string": "f = gcf(); save(filename, \"f\")"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "variables"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A matrix of strings containing the names of Scilab variables to be saved, e.g. "},{"type": "literal","children": [],"string": "[\"x1\", \"x2\", ..., \"xn\"]"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["load", "save_format", "savematfile", "xsave", "saveGui", "write"]},"write": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "write"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "escreve números reais ou strings no console ou em um arquivo formatado"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["write(file_desc, a)", "write(file_desc, a, format)", "write(file_desc, a, k, format)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file_desc"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string especificando o nome do arquivo ou valor inteiro especificando a unidade lógica (ver file)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Quer "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "o string especificando o nome do arquivo. Tentar sobrescrever um arquivo existente produzirá um erro."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "ou o ID inteiro de um arquivo aberto com  "},{"type": "literal","children": [],"string": "file(…)"},{"type": "text","children": [],"string": " (veja "},{"type": "link","children": [],"string": "file"},{"type": "text","children": [],"string": "). Usando "},{"type": "literal","children": [],"string": "%io(2)"},{"type": "text","children": [],"string": " irá escrever no console."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Esta função não consegue abrir um arquivo UTF. Neste caso, por favor use "},{"type": "link","children": [],"string": "file"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais, ou vetor coluna de strings."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string, especifica um formato \"Fortran\". Este string deve começar com um parêntese esquerdo e terminar com um parêntese direito. Formatos não podem misturar pontos flutuantes, inteiros ou modo de edição de caractere."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Exemplos de formatos : "},{"type": "literal","children": [],"string": "\"(1x,e10.3,5x,3(f3.0),1x,i4)\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"(10x,a20)\""},{"type": "text","children": [],"string": ". "},{"type": "text","children": [],"string": " Consulte um livro de Fortran para obter mais informações."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["save", "file", "fileinfo", "print", "mfprintf", "mprintf", "fprintfMat"]},"getenv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getenv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o valor de uma variável de ambiente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "env=getenv(str [, rep] )"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string especificando o nome da variável de ambiente; rep : um string opcional. Quando este valor opcional é usado, a função "},{"type": "literal","children": [],"string": "getenv"},{"type": "text","children": [],"string": " retorna o valor "},{"type": "literal","children": [],"string": "rep"},{"type": "text","children": [],"string": " quando a variável de ambiente "},{"type": "literal","children": [],"string": "str"},{"type": "text","children": [],"string": " não é encontrada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "env"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string que contém o valor da variável de ambiente"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"getpid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getpid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o identificador do processo Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "id=getpid()"},"varlist": [],"seealso": []},"host": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "host"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "unix"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "executes a Windows, Linux, or MacOS command"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "alias of host()"},"string": []}],"synopsis": [{"type": "synopsis","children": [],"string": "status = host(commands)"},{"type": "synopsis","children": [],"string": "status = unix(commands)"}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "commands"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Single text containing Windows, Linux, or MacOS instructions sent to the OS command interpreter."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "On Windows, "},{"type": "varname","children": [],"string": "commands"},{"type": "text","children": [],"string": " must have less than 8191 characters (after expansion of possibly included environment variables)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer flag: -1 if the "},{"type": "varname","children": [],"string": "commands"},{"type": "text","children": [],"string": " can't be executed (for instance due to unsufficient memory). If "},{"type": "varname","children": [],"string": "commands"},{"type": "text","children": [],"string": " is executed (successfully or not) : exit code number returned by the Operating System (OS) interpreter."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["consolebox", "getos", "setenv", "unix_g", "unix_s", "unix_w", "unix_x", "dos", "powershell"]},"scilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "run command or file in another Scilab"},"string": []},"synopsis": [{"type": "synopsis","children": [],"string": "[err, stdout, stderr] = scilab(code, file, mode, quit, args)"},{"type": "synopsis","children": [],"string": "scilab(..., background)"}],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "code"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "command to execute in the new Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "file to execute in the new Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"nwni\""},{"type": "text","children": [],"string": ": to start a new Scilab without graphical and Xcos features."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "\"nw\""},{"type": "text","children": [],"string": ": to start a new Scilab with graphical and Xcos features. (default)"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "quit"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean to indicate if Scilab must quit after execution (default: %t)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "args"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Other arguments to pass to the new Scilab, they can be retrieved via "},{"type": "link","children": [],"string": "sciargs"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "boolean to indicate that the new Scilab must be launched in a detached process without waiting for end of execution to continue."},"string": []},{"type": "warning","children": {"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "background"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " the function will not return any value."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "status of execution (0 if succeeded)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stdout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Content of Standard Output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "stderr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Content of Standard Error."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["execstr", "exec", "evstr", "sciargs", "startup_options"]},"setenv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setenv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ajusta o valor de uma variável de ambiente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "rep=setenv(name, value )"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "aponta para o nome de uma variável de ambiente. (name é um string)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "aponta para o valor a ser atribuído à variável de ambiente (value é um string)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rep"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Retorna %T, se estiver tudo correto ou %F, em caso contrário"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "getenv"},"unix_g": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unix_g"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "executa algumas instruções do Windows, Linux ou MacOS, saída em variáveis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["rep = unix_g(commands)", "[rep, status] = unix_g(commands)", "[rep, status, msgerr] = unix_g(commands)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "commands"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Texto contendo instruções do Windows ou Linux ou MacOS."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rep"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coluna de texto : saída padrão"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro o status de erro. status=0 se nenhum erro tiver ocorrido."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msgerr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coluna de texto : erro padrão"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"unix_s": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unix_s"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "executa silenciosamente algumas instruções do Windows, Linux ou MacOS"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "unix_s(commands)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "commands"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Texto único contendo algumas instruções do Windows, Linux ou MacOS."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["unix_g", "unix_w", "unix_x", "host", "powershell", "setenv", "getos"]},"unix_w": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unix_w"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "executa algumas instruções do Windows, Linux ou MacOS, resulta no console do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "unix_w(commands)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "commands"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Texto único contendo algumas instruções do Windows, Linux ou MacOS."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["unix_g", "unix_s", "unix_x", "host", "powershell", "setenv", "getos"]},"unix_x": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unix_x"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "executar algumas instruções do Windows, Linux ou MacOS, resulta em uma janela de mensagem pop-up"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "unix_x(commands)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "commands"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Texto único contendo algumas instruções do Windows, Linux ou MacOS."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["unix_g", "unix_s", "unix_w", "host", "powershell", "setenv", "messagebox"]},"Compound_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Compound properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the Compound entity properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains the handle of the parent. The parent of the text entity should be of the type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A vector containing the handles of all graphics objects children of the "},{"type": "literal","children": [],"string": "Compound"},{"type": "text","children": [],"string": ". These graphics objects can be of type "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Rectangle\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Polyline\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Patch\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Segs\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Arc\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Grayplot\""},{"type": "text","children": [],"string": ", ..."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " property value for the entity. It should be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". By default, value is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " where graphics entities children of the "},{"type": "literal","children": [],"string": "Compound"},{"type": "text","children": [],"string": " are drawn according to their visibility property. If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " all children of "},{"type": "literal","children": [],"string": "Compound"},{"type": "text","children": [],"string": " are not displayed on the screen."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be use to store any scilab variable in the figure data structure, and to retrieve it."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["glue", "unglue", "graphics_entities"]},"GlobalProperty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GlobalProperty"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Customização de aparência dos objetos (curvas, superfícies...) num comando plot ou surf."},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"CData\" or \"ColorData\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz de reais especificando as cores em todos os pontos definidos pela matriz "},{"type": "literal","children": [],"string": "Z"},{"type": "text","children": [],"string": ". TEsta propriedade esta ligada à propriedade "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": "). Note que esta propriedade está disponível para superfícies apenas."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"CDataMapping\" ou \"ColorDataMapping\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um string com valor "},{"type": "literal","children": [],"string": "'scaled'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'direct'"},{"type": "text","children": [],"string": ". Se um "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " estiver ajustado, cada índice de cor especifica um único valor para cada vértice. "},{"type": "literal","children": [],"string": "cdata_mapping"},{"type": "text","children": [],"string": " determina se estes índices estão em escala para serem mapeados linearmente no mapa de cores corrente (modo"},{"type": "literal","children": [],"string": "'scaled'"},{"type": "text","children": [],"string": ") ou aponta diretamente para este mapa de cores (modo "},{"type": "literal","children": [],"string": "'direct"},{"type": "text","children": [],"string": "'). Esta propriedade é útil quando "},{"type": "literal","children": [],"string": "color_flag"},{"type": "text","children": [],"string": " é igual a "},{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "4"},{"type": "text","children": [],"string": ". Note que esta propriedade só existe em entidades "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": ". Note também que "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": " tem modo "},{"type": "literal","children": [],"string": "'direct'"},{"type": "text","children": [],"string": " por padrão e "},{"type": "literal","children": [],"string": "surf"},{"type": "text","children": [],"string": " tem modo"},{"type": "literal","children": [],"string": " 'scaled'"},{"type": "text","children": [],"string": " por padrão."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"Clipping\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um string "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " definindo o modo de recorte ("},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " por padrão). É equivalente à propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property. Este campo contém a propriedade (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "). Note que esta propriedade ainda não está disponível para entidades de superfícies."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"Color\" ou \"Foreground\" (apenas polylines) :"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Uma cor especificada pelo seu nome (texto) entre as cores nomeadas predefinidas na "},{"type": "link","children": [],"string": "lista de cores"},{"type": "text","children": [],"string": "), ou pelo seu código hexadecimal "},{"type": "literal","children": [],"string": "\"#RRGGBB\""},{"type": "text","children": [],"string": " (texto), ou por seu índice no mapa de cores (inteiro), ou pelo vetor "},{"type": "literal","children": [],"string": "[r,g,b]"},{"type": "text","children": [],"string": " de suas intensidades Vermelho-Verde-Azul no intervalo [0,1]."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "foreground"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"EdgeColor\" or \"Foreground\" (apenas superfícies) :"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Uma cor especificada pelo seu nome (texto) entre as cores nomeadas predefinidas na "},{"type": "link","children": [],"string": "lista de cores"},{"type": "text","children": [],"string": "), ou pelo seu código hexadecimal "},{"type": "literal","children": [],"string": "\"#RRGGBB\""},{"type": "text","children": [],"string": " (texto), ou por seu índice no mapa de cores (inteiro), ou pelo vetor "},{"type": "literal","children": [],"string": "[r,g,b]"},{"type": "text","children": [],"string": " de suas intensidades Vermelho-Verde-Azul no intervalo [0,1]."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "foreground"},{"type": "text","children": [],"string": " da superfície (ver "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"FaceColor\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um string com valor "},{"type": "literal","children": [],"string": "'none'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "'flat'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'interp'"},{"type": "text","children": [],"string": " especificando o modo como as cores das facetas são renderizadas. Quando"},{"type": "literal","children": [],"string": " 'none'"},{"type": "text","children": [],"string": " é selecionado, uma malha da superfície é desenhada; se "},{"type": "literal","children": [],"string": "'flat'"},{"type": "text","children": [],"string": " (modo padrão) é selecionado, os valores "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "color.data"},{"type": "text","children": [],"string": " determinam uma cor por faceta utilizando a cor do vértice da faceta. Se o valor é "},{"type": "literal","children": [],"string": "'interp'"},{"type": "text","children": [],"string": ", uma gradação interpolada é feita na faceta utilizando "},{"type": "literal","children": [],"string": "color.data"},{"type": "text","children": [],"string": " para determinar a cor em cada vértice da faceta."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"LineStyle\":"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade deve ser um string definindo um estilo de linha. Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"Marker\" or \"MarkStyle\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um string definindo um tipo de marca. Note que se você especificar uma marca sem um estilo de linha, ambas linhas (com valor padrão sólido hablitado) e marcas são desenhadas . Esta propriedade está ligada às propriedades "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"MarkerEdgeColor\" ou \"MarkForeground\":"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Uma cor especificada pelo seu nome (texto) entre as cores nomeadas predefinidas na "},{"type": "link","children": [],"string": "lista de cores"},{"type": "text","children": [],"string": "), ou pelo seu código hexadecimal "},{"type": "literal","children": [],"string": "\"#RRGGBB\""},{"type": "text","children": [],"string": " (texto), ou por seu índice no mapa de cores (inteiro), ou pelo vetor "},{"type": "literal","children": [],"string": "[r,g,b]"},{"type": "text","children": [],"string": " de suas intensidades Vermelho-Verde-Azul no intervalo [0,1]."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"MarkerFaceColor\" ou \"MarkBackground\":"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Uma cor especificada pelo seu nome (texto) entre as cores nomeadas predefinidas na "},{"type": "link","children": [],"string": "lista de cores"},{"type": "text","children": [],"string": "), ou pelo seu código hexadecimal "},{"type": "literal","children": [],"string": "\"#RRGGBB\""},{"type": "text","children": [],"string": " (texto), ou por seu índice no mapa de cores (inteiro), ou pelo vetor "},{"type": "literal","children": [],"string": "[r,g,b]"},{"type": "text","children": [],"string": " de suas intensidades Vermelho-Verde-Azul no intervalo [0,1]."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Esta propriedade esta ligada à propriedade "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"MarkerSize\" ou \"MarkSize\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um escalar definindo o tamanho do marcador em unidade "},{"type": "literal","children": [],"string": "point"},{"type": "text","children": [],"string": ". Esta propriedade está ligada a propriedade "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " do objeto com "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " habilitado para "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": " (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"Visible\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um string "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " definindo o modo de visibilidade ("},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " por padrão). Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"X data\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor ou matriz de reais (re-)definindo os dados fornecidos para todas as linhas ou superfícies esboçadas. A respeito das dimensões, note que estes novos dados devem corresponder a todos os anteriores especificados por "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": " isto é, todas as matrizes devem ter as mesmas dimensões. Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "data.x"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"Y data\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor ou matriz de reais (re-)definindo os dados fornecidos para todas as linhas ou superfícies esboçadas. A respeito das dimensões, note que estes novos dados devem corresponder a todos os anteriores especificados por "},{"type": "literal","children": [],"string": "Y"},{"type": "text","children": [],"string": " data , isto é, todas as matrizes devem ter as mesmas dimensões. Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "data.y"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"Z data\":"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "quando usado com "},{"type": "literal","children": [],"string": "plot"},{"type": "text","children": [],"string": ", um vetor ou matriz de reais adicionando dados"},{"type": "literal","children": [],"string": " Z"},{"type": "text","children": [],"string": " para todas as linhas esboçadas; com "},{"type": "literal","children": [],"string": "surf"},{"type": "text","children": [],"string": ", uma matriz de reais (re-)definindo os dados fornecidos para todas as superfícies. A respeito das dimensões, note que estes novos dados devem corresponder a todos os anteriores especificados por "},{"type": "literal","children": [],"string": "X"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "Y"},{"type": "text","children": [],"string": " data. Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "data.z"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " ou "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["LineSpec", "plot", "surf", "clf", "polyline_properties", "surface_properties"]},"Graphics": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Graphics"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Resumo da biblioteca de gráficos"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "plot2d"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Esboço 2d"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "plot2d2"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Esboço 2d (funções de degraus)"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "plot2d3"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Esboço 2d (barras veticais)"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "plot2d4"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Esboço 2d (setas)"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "champ"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esboço de campo vetorial 2d"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fchamp"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "campo direcional de uma EDO 2d de primeira ordem"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "contour2d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "curvas de nível de uma superfície em um esboço 2d"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "grayplot"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esboço 2d de uma superfície utilizando-se cores"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fgrayplot"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esboço 2d de uma superfície definida por uma função utilizando cores"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sgrayplot"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esboço 2d suave de uma superfície utilizando cores"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sfgrayplot"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esboço 2d suave de uma superfície definida por uma função utilizando cores"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xgrid"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "adiciona um grid em um esboço 2d"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errbar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "adiciona barras de erro veriticais a um esboço 2d"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "histplot"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esboça um histograma"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Matplot"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esboço 2d de uma matriz utilizando-se cores"},"string": []},{"type": "para","children": {"type": "emphasis","children": [],"string": "Examplo:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"graphics_entities": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "graphics_entities"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das estruturas de dados de entidades gráficas"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Console, root, mouse: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "With its menus, the console may be considered as a special graphic windows. Its menus and some graphical meta options may be addressed through its handle as returned by "},{"type": "text","children": [],"string": ". See "},{"type": "link","children": [],"string": "Console properties"},{"type": "text","children": [],"string": " for details."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The root object is a virtual graphical object used to get the computer screen properties. Its handle is the same as the console's one: "},{"type": "text","children": [],"string": ", but the screen properties can be addressed only in read-only mode. See "},{"type": "link","children": [],"string": "Root properties"},{"type": "text","children": [],"string": " for details."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "On Windows, some additional screen, windowing and mouse parameters may be retrieved throught the "},{"type": "link","children": [],"string": "getsystemmetrics"},{"type": "text","children": [],"string": " function."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Figure:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade figura é o topo da hierarquia de entidades gráficas. Esta entidade define os parâmetros para a figura em si tanto quanto os valores padrões dos parâmetros para criação de galhos. Os galhos das figuras são as entidades de eixos."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "O manipulador da figura corrente (a figura para onde os desenhos foram enviados) pode ser obtido utilizando-se "},{"type": "literal","children": [],"string": "get(\"current_figure\")"},{"type": "text","children": [],"string": " e pode ser ajustado utilizando-se "},{"type": "literal","children": [],"string": "set(\"current_figure\",h)"},{"type": "text","children": [],"string": ", onde "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " pode ser tanto um manipulador da figura ou um idenficador da figura "},{"type": "literal","children": [],"string": "figure_id"},{"type": "text","children": [],"string": " neste último caso, se não existir, um é automaticamente criado."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "link","children": [],"string": "figure_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Axes:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a entidade de eixos está no segundo nível da hierarquia de entidades gráficas. Esta entidade define parâmetros para a mudança de coordenadas dos eixos e o desenho dos eixos tanto quanto os parâmetros padrões para criação de seus galhos. Ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": " for details. para detalhes. O manipulador dos eixos correntes pode ser obtido utilizando-se "},{"type": "literal","children": [],"string": "get(\"current_axes\")"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Compound:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade composta é simplesmente um vetor de galhos com uma única propriedade (propriedade de visibilidade). É usada para colar um conjunto de entidades."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver as documentações "},{"type": "link","children": [],"string": "glue"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "unglue"},{"type": "text","children": [],"string": " e "},{"type": "link","children": [],"string": "Compound_properties"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Axis:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade eixo é uma folha da hierarquia de entidades gráficas. Esta entidade define os parâmetros de escala de um eixo e aparência."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "axis_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Polyline:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade poligonal é uma folha na hierarquia de entidades gráficas. define propriedades de desenho de poligonais e extensões poligonais 2d e 3d."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Arc:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade arco é uma folha na hierarquia de entidades gráficas. Esta entidade define parâmetros para elipses e partes de elipses."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "arc_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Rectangle:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade retângulo é uma folha na hierarquia de entidades gráficas. Esta entidade define parâmetros para retângulos e retângulos preenchidos."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "rectangle_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Surface:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a entidade superfície é uma folha na hierarquia de entidades gráficas. possui sub-tipos "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "Plot3d"},{"type": "text","children": [],"string": ". Esta entidade define parâmetros para esboço de superfícies 3d."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fec:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade Fec é uma folha na hierarquia de entidades gráficas. Representa esboços de elementos 2d finitos."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "fec_properties"},{"type": "text","children": [],"string": " para detalhes"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Grayplot:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade Grayplot é uma folha na hierarquia de entidades gráficas. Representa esboços 2d de superfícies utilizando cores e imagens."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "grayplot_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Matplot:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade Matplot é uma folha na hierarquia de entidades gráficas. Representa esboços 2d utilizando matrizes de inteiros."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "Matplot_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Segs:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade de segmentos é uma folha na hierarquia de entidades gráficas. Esta entidade define parâmetros um conjunto de flechas ou segmentos coloridos."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "segs_properties"},{"type": "text","children": [],"string": " para detalhes"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Champ:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade Champ é uma folha na hierarquia de entidades gráficas. Esta entidade define parâmetros para esboços 2d de campos vetoriais."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "champ_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Text:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a entidade texto é uma folha na hierarquia de entidades gráficas. Esta entidade define parâmetros para impressão de strings."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "text_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Label:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a entidade rótulo é um galho da entidade gráfica "},{"type": "literal","children": [],"string": "Axes"},{"type": "text","children": [],"string": " (de eixos). Esta entidade define parâmetros para os rótulos dos 3 eixos x, y e z desenhados em uma janela de gráficos."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "label_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Legend:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a legenda é uma folha na hierarquia de entidades gráficas. Esta entidade define parâmetros para legendas desenhadas impressas sob gráficos "},{"type": "literal","children": [],"string": "plot2dx"},{"type": "text","children": [],"string": ". Esta entidade requer futuros desenvolvimentos."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Ver "},{"type": "link","children": [],"string": "legend_properties"},{"type": "text","children": [],"string": " para detalhes."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "move", "delete", "ged", "object_editor", "plot", "surf", "getsystemmetrics", "setlookandfeel"]},"object_editor": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "object_editor"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "graphic"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "menus"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das capacidades do editor de objetos gráficos"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das capacidades do editor de objetos gráficos"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das capacidades do editor de objetos gráficos"},"string": []}],"synopsis": [],"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Select figure as current:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "permite que uma figura seja a corrente."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Redraw figure:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "redesenha o conteúdo da janela de gráficos"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Erase figure:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "apaga o conteúdo da janela de gráficos. Sua ação corresponde a um comando "},{"type": "literal","children": [],"string": "clf"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Os últimos oito itens são especialmente dedicados ao editor gráfico:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Copy object:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "utilizando o mouse, permite que o usuário selecione um objeto 2d (como uma curva, um retângulo...) e coloque na área de transferência. Logo, por uma nova chamada a "},{"type": "literal","children": [],"string": "Paste object "},{"type": "text","children": [],"string": " ,(colar objeto), o objeto é copiado nos eixos correntes selecionados."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Paste object:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "permite que o usuário cole um objeto anterior posto na àrea de transferência nos eixos correntes selecionados."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Move object:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "utilizando o mouse, permite que o usuário mova um objeto 2d (como uma curva, um retângulo...) dentro dos eixos correntes selecionados."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Delete object:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "utilizando o mouse, permite que o usuário selecione um objeto 2d(como uma curva, um retângulo...) dentro dos eixos correntes selecionados e delete-o instantaneamente."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Figure Properties:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "lança a interface Tcl/Tk para o objeto Figure aplicado ao manipulador da figura da janela de gráficos."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Current Axes Properties:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "lança a interface Tcl/Tk para o objeto Axes aplicado ao manipulador dos eixos correntes da janela de gráficos."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Start Entity Picker:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "inicia um manipulador de eventos na janela de gráficos para pegar os cliques do mouse sobre objetos gráficos e lança a interface Tcl/Tk correspondente. O clique com botão esquerdo do mouse permite edição de objetos e com botão direito realiza um movimento do objeto selecionado. Note que, por ora, este recurso só se aplica a objetos 2d."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Stop Entity Picker:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "para a ação de Entity Picker terminando o manipulador de eventos na janela de gráficos."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Um tree selector (seletor de árvore):"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "posicionado à direita do editor gráfico, um seletor de árvores hierárquicas especifica que objeto é correntemente editado . Pode ser usado para alternar de um objeto gráfico para outro fornecido estando eles na mesma janela de gráficos."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Um notebook (caderno):"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a segunda área representa um caderno composto de diferentes páginas de propriedades (como "},{"type": "literal","children": [],"string": "Style"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "Data"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "Clipping"},{"type": "text","children": [],"string": "...) dependendo do objeto gráfico selecionado. Utilizando-se este editor, pode-se editar mais facilmente todo o conjunto de propriedade gráficas de cada objeto gráfico (como através dos comandos "},{"type": "literal","children": [],"string": "\"set\""},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "\"get\""},{"type": "text","children": [],"string": "). Aqui está um exemplo de um caderno para a entidade Axes exibindo as suas propriedades:"}],"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Line:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Desenhe uma linha entre dois cliques do mouse. A linha vive nos eixos onde o primeiro ponto foi selecionado."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Polyline:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Desenhe uma poligonal clicando no botão esquerdo para definir o caminho da linha e clique no botão direito para completar o desenho. A poligonal vive nos eixos onde o primeiro ponto foi selecionado."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Arrow:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Desenhe uma seta entre dois cliques do mouse. A seta vive nos eixos onde o primeiro ponto foi selecionado."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Double arrow:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Desenhe uma seta dupla entre dois cliques do mouse. A seta dupla vive nos eixos onde o primeiro ponto foi selecionado."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Text:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Abra uma caixa de diálogo para inserir o texto, então clique na janela da figura para posicioná-lo. O texto vive nos eixos onde o primeiro ponto foi selecionado."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Rectangle:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Desenhe um retângulo: dois cliques com o botão direito definem os cantos superior esquerdo e inferior direito do retângulo. O retângulo vive nos eixos onde o primeiro ponto foi selecionado."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Circle:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Desenhe um círculo: 2dois cliques com o botão direito definem os cantos superior esquerdo e inferior direito da caixa em que o círculo vive. O retângulo vive nos eixos onde o primeiro ponto foi selecionado."},"string": []},"string": []}],"string": []},"string": []}],"seealso": ["ieditor", "ged", "graphics_entities", "set", "get", "plot"]},"pie": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pie"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Desenha um gráfico de torta"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["pie(x)", "pie(x[,sp[,txt]])", "hdl = pie(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um escalar real ou vetor de reais positivos. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um escalar real ou vetor de reais."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma célula ou vetor de strings."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output contains a handle to a "},{"type": "literal","children": [],"string": "Compound"},{"type": "text","children": [],"string": " entity whose children are: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "h.children(1)"},{"type": "text","children": [],"string": ": A "},{"type": "literal","children": [],"string": "Compound"},{"type": "text","children": [],"string": " whose children are the labels of the slices (Text entities)"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "h.children(2)"},{"type": "text","children": [],"string": ": A "},{"type": "literal","children": [],"string": "Compound"},{"type": "text","children": [],"string": " whose children are the slices (Polyline entities)"}],"string": []}],"string": []},{"type": "text","children": [],"string": " Use "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to modify properties of a specific or all Text or Polyline entites after they are created. For a list of properties, see "},{"type": "link","children": [],"string": "text_properties"},{"type": "text","children": [],"string": " or "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "xfpolys"},"plot_multiscaled": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "multiscaled plots"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to set several axes for one curve or for curves with distinct scales"},"string": []},"synopsis": [],"varlist": [],"seealso": ["drawaxis", "newaxes"]},"xchange": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xchange"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão de coordenadas reais para coordenadas pixeis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x1,y1,rect]=xchange(x,y,dir)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de tamanho (n1,n2) (coordenadas de um conjunto de pontos)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "parâmetro utilizado para especificar o tipo de conversão (ver \"Description\" para detalhes)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1,y1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "duas matrizes de tamanho (n1,n2) (coordenadas de um conjunto de pontos)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de tamanho 4"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"champ": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "champ"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço de campo vetorial 2d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["champ()  // example", "champ(x, y, fx, fy)", "champ(x, y, fx, fy, arfact)", "champ(x, y, fx, fy, arfact, rect)", "champ(x, y, fx, fy, arfact, rect, strf)", "champ(x, y, fx, fy, <opt_args>)", "hdl = champ(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vectors of decimal numbers, which define the grid of nodes = coordinates of arrows starting points."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fx"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz que descreve o componente x do campo vetorial. "},{"type": "literal","children": [],"string": "fx(i,j)"},{"type": "text","children": [],"string": " é o componente x do campo vetorial no ponto "},{"type": "literal","children": [],"string": "(x(i),y(j))"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fy"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz que descreve o componente y do campo vetorial. "},{"type": "literal","children": [],"string": "fy(i,j)"},{"type": "text","children": [],"string": "é o componente y do campo vetorial no ponto "},{"type": "literal","children": [],"string": "(x(i),y(j))"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa a seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1,key2=value2"},{"type": "text","children": [],"string": ",... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes: arfact, rect, strf (ver abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arfact"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um argumento opcional do tipo real que fornece um fator de escala para a exibição das cabeças das setas no esboço (o valor padrão é 1.0)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor "},{"type": "literal","children": [],"string": "rect=[xmin,ymin,xmax,ymax]"},{"type": "text","children": [],"string": " que fornece as fronteiras da moldura gráfica à ser utilizada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um string de comprimento 3 \"xyz\" que possui o mesmo significado do parâmetro "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " de "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": ". O primeiro caractere não tem efeito com "},{"type": "literal","children": [],"string": "champ"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Champ"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "champ_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["champ_properties", "fchamp", "xarrows", "polyline_properties"]},"champ_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "champ_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das propriedades da entidade campo vetorial 2d"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade. Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . Se "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " o campo vetorial é desenhado, se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " o campo vetorial não aparece na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo define uma estrutura de dados "},{"type": "literal","children": [],"string": "tlist"},{"type": "text","children": [],"string": " de tipo "},{"type": "literal","children": [],"string": "\"champdata\""},{"type": "text","children": [],"string": " composto de uma linha e índices de colunas de cada elemento: as coordenadas do grid x e y contidas respectivamente em "},{"type": "literal","children": [],"string": "data.x "},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "data.y"},{"type": "text","children": [],"string": ". Os campos complementares chamados "},{"type": "literal","children": [],"string": "data.fx"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "data.fy"},{"type": "text","children": [],"string": " são matrizes que descrevem respectivamente os componentes "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " do campo vetorial no ponto "},{"type": "literal","children": [],"string": "(x(i),y(j))"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode ser utilizado para armazenar qualquer variável Scilab na estrutura de dados da entidade Champ e recuperá-la."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o valor da propriedade "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " deve ser um valor inteiro no intervalo [1 10]. 1 significa linha sólida e os outros valores significam estilos de tracejados (veja "},{"type": "link","children": [],"string": "getlinestyle"},{"type": "text","children": [],"string": "). Esta propriedade aplica-se a todas as linhas usadas para desenhar o campo vetorial."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " (espessura) para todas as linhas utilizadas no desenho. Seu valor deve ser um inteiro não-negativo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colored:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "se o valor desta propriedade for "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", os vetores são coloridos utilizando-se uma cor porporcional à intensidade do campo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arrow_size: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property is a double specifying the size of the arrow. The value can be positive or negative: "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "arrow_size < 0"},{"type": "text","children": [],"string": ": the arrows size is proportional to the average norm of the vectors."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "arrow_size > 0"},{"type": "text","children": [],"string": ": the arrows size is proportional to the windows dimensions."}],"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " para a entidade Champ. Pode ser :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " significa que o campo vetorial não é recortado"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " siginifica que o campo vetorial é recortado fora da caixa da entidade Axes."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " significa que o campo vetorial é recortado fora do retângulo dado pela propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": ". Seu valor pode ser uma matriz vazia se a propriedade clip_state é \"off\" .em outros casos, o vetor "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura, altura) define as porções do campo a serem exibidas, contudo, o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " será modificado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador da raiz. A raiz de uma entidade campo vetorial 2d deve ser do tipo "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "delete", "champ", "graphics_entities"]},"comet": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "comet"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "2D comet animated plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["comet(y)", "comet(x, y)", "comet(x, y, Lf)", "comet(x, fun)", "comet(x, fun, Lf)", "comet(..., \"colors\",c)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real vector or matrix. If omitted, it is assumed to be the vector "},{"type": "literal","children": [],"string": "1:np"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "np"},{"type": "text","children": [],"string": " is the total number of curve points (see below). As a matrix, each column defines the abscissae of the trace of a separate comet. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real vector or matrix. As a matrix, each column defines the  ordinates of the trace of a separate comet. "},{"type": "literal","children": [],"string": "nc=size(y,\"c\")"},{"type": "text","children": [],"string": " is the number of comets simultaneously drawn. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Lf"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real scalar in the interval"},{"type": "literal","children": [],"string": "[0,1["},{"type": "text","children": [],"string": ". Default value is 0.1: It defines the Leading fraction of the comet's trace. The "},{"type": "literal","children": [],"string": "k=Lf*np"},{"type": "text","children": [],"string": " most recent points are plotted in thicker line. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a scilab function with syntax "},{"type": "literal","children": [],"string": "y = fun(x)"},{"type": "text","children": [],"string": ". "},{"type": "varname","children": [],"string": "fun"},{"type": "text","children": [],"string": " can also be a polynomial or a rational fraction. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": [{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": " colors of the "},{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": " comets traces. They may be specified as a vector of "},{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": " color indices or "},{"type": "link","children": [],"string": "color names"},{"type": "text","children": [],"string": " or \"#RRGGBB\" hexadecimal color codes. Or by a matrix (ncx3) of "},{"type": "literal","children": [],"string": "[r,g,b]"},{"type": "text","children": [],"string": " vectors of Red-Green-Blue intensities in the [0,1] interval. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["comet3d", "paramfplot2d", "realtime", "color_list"]},"contour2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "contour2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "curvas de nível de uma superfície em um esboço 2d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["contour2d(x, y, z, nz, [style, strf, leg, rect, nax, fpf])", "contour2d(x, y, z, nz, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de reais de tamanhos n1 e n2: o grid. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2), os valores da função sobre o grid ou uma função Scilab que define uma superfície "},{"type": "literal","children": [],"string": "z=f(x,y)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nz"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "os valores de nível ou o número de níveis."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": {"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um inteiro, seu valor fornece o número de níveis igualmente espaçados de zmin a zmax como segue:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que os níveis "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " não são desenhados (genericamente eles são reduzidos a pontos) mas podem ser adicionados através de"}],"string": []}],"string": []},"string": []},{"type": "varlistentry","children": {"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um vetor, "},{"type": "literal","children": [],"string": "nz(i)"},{"type": "text","children": [],"string": " fornece o valor da i-ésima curva de nível."}],"string": []},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1,key2=value2"},{"type": "text","children": [],"string": ",... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " pode ser um dos seguintes: style, leg, rect, nax, strf ou axesflag e frameflag (ver "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style,strf,leg,rect,nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": ". O argumento "},{"type": "literal","children": [],"string": "style"},{"type": "text","children": [],"string": " fornece os estilos de tracejado ou cores que serão usadas para as curvas de nível. Deve ter o mesmo tamanho que o número de níveis."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fpf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "You can change the format of the floating point number printed on the levels where "},{"type": "varname","children": [],"string": "fpf"},{"type": "text","children": [],"string": " is the format in C format syntax  (for example "},{"type": "text","children": [],"string": "). Set "},{"type": "varname","children": [],"string": "fpf"},{"type": "text","children": [],"string": " to \" \" implies that the level are not drawn on the level curves. If not given, the default format is "},{"type": "literal","children": [],"string": "\"%.3g\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"contour2di": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "contour2di"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computa curvas de nível em um esboço 2d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[xc, yc] = contour2di(x,y,z,nz)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores de reais de tamanhos n1 e n2 definindo o grid."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2), os valores da função."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nz"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "os valores de nível ou o número de níveis."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": {"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um inteiro, seu valor fornece o número de níveis igualmente espaçados de zmin a zmax como segue:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que os níveis "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " não são desenhados (genericamente eles são reduzidos a pontos) mas podem ser adicionados através de"}],"string": []}],"string": []},"string": []},{"type": "varlistentry","children": {"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um vetor, "},{"type": "literal","children": [],"string": "nz(i)"},{"type": "text","children": [],"string": " fornece o valor da i-ésima curva de nível."}],"string": []},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xc,yc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de tamanhos idênticos contendo as definições dos contornos. Ver detalhes abaixo."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contour", "contour2d", "contour2dm", "plot2d"]},"contour2dm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "contour2dm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compute level curves of a surface defined with a mesh"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[xc, yc] = contour2dm(x, y, polygons, func, nz)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "two vectors of size "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "(x(i),y(i))"},{"type": "text","children": [],"string": " gives the coordinates of node "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polygons"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a "},{"type": "literal","children": [],"string": "[Ntr,N+2]"},{"type": "text","children": [],"string": " matrix. Each line of "},{"type": "varname","children": [],"string": "polygons"},{"type": "text","children": [],"string": " specifies a convex polygon of the mesh "},{"type": "literal","children": [],"string": "polygons(j) = [number,node1,node2,node3, ..., nodeN, flag]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "node1,node2,node3, ..., nodeN"},{"type": "text","children": [],"string": " are the number of the nodes which constitutes the polygon. number is the number of the polygons and flag is an integer not used in the "},{"type": "function","children": [],"string": "contour2dm"},{"type": "text","children": [],"string": " function."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "func"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of size "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " : "},{"type": "literal","children": [],"string": "func(i)"},{"type": "text","children": [],"string": " gives the value at node "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " of the function."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nz"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "the level values or the number of levels."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "If nz is an integer "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "its value gives the number of level curves equally spaced from "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " to "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " as follows:"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "If nz is a vector "},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "nz(i)"},{"type": "text","children": [],"string": " gives the value of the "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "-th level curve."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xc, yc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vectors of identical sizes containing the contours definitions. See below for details."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contour2di", "contour2d", "contour", "fec", "plot2d"]},"contourf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "contourf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Curvas de nível preenchidas de uma superfície em um esboço 2d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "contourf(x, y, z, nz, [style, strf, leg, rect, nax, fpf])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores de reais de tamanhos n1 e n2 definindo o grid."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2), os valores da função."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nz"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "os valores de nível ou o número de níveis."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um inteiro, seu valor fornece o número de níveis igualmente espaçados de zmin a zmax como segue:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que os níveis "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " não são desenhados (genericamente eles são reduzidos a pontos) mas podem ser adicionados através de"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um vetor, "},{"type": "literal","children": [],"string": "nz(i)"},{"type": "text","children": [],"string": " fornece o valor da i-ésima curva de nível."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style,strf,leg,rect,nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": ". O argumento "},{"type": "literal","children": [],"string": "style"},{"type": "text","children": [],"string": " fornece as cores a serem utilizadas pelas curvas de nível. Deve ter o mesmo tamanho que o número de níveis."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fpf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "You can change the format of the floating point number printed on the levels where "},{"type": "varname","children": [],"string": "fpf"},{"type": "text","children": [],"string": " is the format in C format syntax  (for example "},{"type": "text","children": [],"string": "). Set "},{"type": "varname","children": [],"string": "fpf"},{"type": "text","children": [],"string": " to \" \" implies that the level are not drawn on the level curves. If not given, the default format of "},{"type": "link","children": [],"string": "contour2d"},{"type": "text","children": [],"string": " is used."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contour", "contour2di", "plot2d"]},"cutaxes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cutaxes"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "plots curves or an existing axes along a discontinuous or multiscaled axis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["cutaxes(x, y, cutaxis, intervals)", "cutaxes(axes0, cutaxis, intervals)", "cutaxes(.., \"ticksmode\", \"alt\" | \"shift\")", "cutaxes(.., \"widths\", \"isoscaled\" | widths)", "[Axes, curves] = cutaxes(x, y, ..)", "Axes = cutaxes(axes0, cutaxis, intervals, ..)"]},"varlist": [],"seealso": ["plot", "plot2d", "subplot", "xsetech"]},"errbar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "errbar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "adiciona barras de erro veriticais a um esboço 2d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "errbar(x,y,em,ep)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,em,ep"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "quatro matrizes de mesmo tamanho."},"string": []},"string": []}],"string": []},"string": []},"seealso": "plot2d"},"fchamp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fchamp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "campo direcional de uma EDO 2d de primeira ordem"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["fchamp(f,t,xr,yr,[arfact,rect,strf])", "fchamp(f,t,xr,yr,<opt_args>)", "hdl = fchamp(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "uma external (função ou string) ou uma lista descrevendo a EDO."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Pode ser um nome de função "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": ", onde "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " se supõe ser uma função do tipo "},{"type": "literal","children": [],"string": "y=f(t,xy [p1,..pn])"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " retorna um vetor coluna de tamanho 2, "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": ", que fornece o valor do campo direcional "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " no ponto "},{"type": "literal","children": [],"string": "xy=[x,y]"},{"type": "text","children": [],"string": " e no tempo "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Também pode ser um objeto do tipo lista, "},{"type": "literal","children": [],"string": "list(f,P1,..Pn)"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "f"},{"type": "text","children": [],"string": " é uma função do tipo "},{"type": "literal","children": [],"string": "y=f(t,xy,p1,..pn)"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "Pi"},{"type": "text","children": [],"string": " fornece o valor do parâmetro "},{"type": "literal","children": [],"string": "pi"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o tempo selecionado. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xr,yr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores linhas de tamanhos n1 e n2 que definem o grid sobre o qual o campo direcional é computado."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de decarações "},{"type": "literal","children": [],"string": "key1=value1,key2=value2"},{"type": "text","children": [],"string": ", ... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " pode ser um dos seguintes : arfact, rect, strf (ver abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arfact,rect,strf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "argumentos opcionais, ver "},{"type": "literal","children": [],"string": "champ"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Champ"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "champ_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["champ", "champ_properties", "xarrows", "polyline_properties"]},"fec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço pseudo-colorido triangular de uma função definida por uma malha triangular"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["fec(x,y,triangles,func,<opt_args>)", "fec(x,y,triangles,func,[strf,leg,rect,nax,zminmax,colminmax,colout,mesh])", "hdl = fec(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "dois vetores de tamanho "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "(x(i),y(i))"},{"type": "text","children": [],"string": " fornece as coordenadas do nó "},{"type": "literal","children": [],"string": "i"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "func"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de tamanho "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " : "},{"type": "literal","children": [],"string": "func(i)"},{"type": "text","children": [],"string": " fornece o valor no nó "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " da função para a qual queremos o esboço pseudo-colorido."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "triangles"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é uma matriz "},{"type": "literal","children": [],"string": "[Ntr,5]"},{"type": "text","children": [],"string": ". Cada linha de "},{"type": "literal","children": [],"string": "triangles"},{"type": "text","children": [],"string": " especifica um triângulo da malha "},{"type": "literal","children": [],"string": "triangle(j) = [number,node1,node2,node3,flag]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "node1,node2,node3"},{"type": "text","children": [],"string": " são os números dos nós que constituem o triângulo. number é o número do triângulo e flag é um inteiro que não é usado na função fec "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes: strf, leg, rect, nax, zminmax, colminmax, colout, mesh (ver "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " para os quatro primeiros)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf,leg,rect,nax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "ver plot2d"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zminmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor com dois compontentes[zmin zmax] (útil para animações em particular)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colminmax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de dois inteiros positivos [colmin colmax] "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de dois inteiros [under_min_col upper_max_col] "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mesh"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar booleano, valor padrão %f (deve ser verdadeiro se você também quiser exibir a malha)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fec"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "fec_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colorbar", "Sfgrayplot", "Sgrayplot"]},"fec_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fec properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the fec entities properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains the handle of the parent. The parent of the fec entity should be of the type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains a vector with the "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": " of the handle. However, "},{"type": "literal","children": [],"string": "Fec"},{"type": "text","children": [],"string": " handles currently do not have any "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " property value for the entity . It should be "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . By default, the plot is visible, the value's property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " the plot is not drawn on the screen."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This is a three column matrix "},{"type": "literal","children": [],"string": "[x,y,f]"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "x(i)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "y(i)"},{"type": "text","children": [],"string": " are the coordinates of the "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "'th node. "},{"type": "literal","children": [],"string": "f(i)"},{"type": "text","children": [],"string": " is the value associated to the node "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "triangles: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This is a  "},{"type": "literal","children": [],"string": "[Ntr,N+2]"},{"type": "text","children": [],"string": " matrix. Each line of "},{"type": "varname","children": [],"string": "triangles"},{"type": "text","children": [],"string": " specifies a convex polygon of the mesh "},{"type": "literal","children": [],"string": "triangles(j) = [number,node1,node2,node3, ..., nodeN, flag]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "node1,node2,node3, ..., nodeN"},{"type": "text","children": [],"string": " are the number of the nodes which constitutes the polygon. number is the number of the polygons and flag is an integer not used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z_bounds: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This vector of size 2, "},{"type": "literal","children": [],"string": "[zmin,zmax]"},{"type": "text","children": [],"string": ", gives the z values associated with the first and the last color (of the current colormap). More exactly if the colormap have "},{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": " colors and if we note "},{"type": "literal","children": [],"string": "dz = (zmax-zmin)/nc "},{"type": "text","children": [],"string": " ,then the part of the triangulation where "},{"type": "literal","children": [],"string": "zmin + (i-1)dz <= z < zmin + i dz"},{"type": "text","children": [],"string": " is filled with the color "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "). By default the "},{"type": "literal","children": [],"string": "z_bounds"},{"type": "text","children": [],"string": " property value is "},{"type": "literal","children": [],"string": "[0,0]"},{"type": "text","children": [],"string": ". In this case, the "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " are autommatically set to the minimum and maximum of the "},{"type": "literal","children": [],"string": "func"},{"type": "text","children": [],"string": " argument."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outside_color: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This vector of size 2, "},{"type": "literal","children": [],"string": "[cmin, cmax]"},{"type": "text","children": [],"string": ", defines the color used when nodes values are outside the "},{"type": "literal","children": [],"string": "z_bounds = [zmin,zmax]"},{"type": "text","children": [],"string": " interval. When node values are lower than "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " the color with index "},{"type": "literal","children": [],"string": "cmin"},{"type": "text","children": [],"string": " is used. When node values are greater than "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " the color with index "},{"type": "literal","children": [],"string": "cmax"},{"type": "text","children": [],"string": " is used. By default, the "},{"type": "literal","children": [],"string": "outside_color"},{"type": "text","children": [],"string": " property value is "},{"type": "literal","children": [],"string": "[0,0]"},{"type": "text","children": [],"string": ". In this case, "},{"type": "literal","children": [],"string": "cmin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "cmax"},{"type": "text","children": [],"string": " are automatically set to the two bounds of the colormap. If "},{"type": "literal","children": [],"string": "cmin"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "cmax"},{"type": "text","children": [],"string": " are negative, then values outside z_bounds interval are not displayed, they appear transparent."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color_range: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This vector of size 2, "},{"type": "literal","children": [],"string": "[rmin, rmax]"},{"type": "text","children": [],"string": ", allows to use only a part of the colormap for display. "},{"type": "literal","children": [],"string": "rmin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "rmax"},{"type": "text","children": [],"string": " stand for colormap indices. If they are both greater than 1, then the actual colormap used to display the fec entity is "},{"type": "literal","children": [],"string": "colormap(rmin:rmax)"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "colormap"},{"type": "text","children": [],"string": " is the colormap of the parent figure. By default, the "},{"type": "literal","children": [],"string": "color_range"},{"type": "text","children": [],"string": " property value is "},{"type": "literal","children": [],"string": "[0,0]"},{"type": "text","children": [],"string": ". In this case, the whole colormap is used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", the wireframe enclosing triangles is drawn. If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", only the inside of triangles are drawn."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This color index specifies the color of the mesh. If "},{"type": "literal","children": [],"string": "line_mode"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", the wireframe is drawn using this color."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value for the fec. It should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " this means that the fec is not clipped."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " this means that the fec is clipped outside the Axes box."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " this means that the fec is clipped outside the rectangle given by property clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field is to determinate the "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property. By Default its value should be an empty matrix if clip_state is \"off\". Other cases the vector "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (upper-left point width height) defines the portions of the fec to display, however "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value will be changed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be use to store any scilab variable in the fec data structure, and to retrieve it."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "delete", "fec", "Sgrayplot", "graphics_entities"]},"fgrayplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fgrayplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d de uma superfície definida por uma função utilizando cores"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["fgrayplot(x,y,f,[strf,rect,nax])", "fgrayplot(x,y,f,<opt_args>)", "h = fgrayplot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de reais"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "função externa do tipo "},{"type": "literal","children": [],"string": "y=f(x,y)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " pode ser um dos seguintes: rect, nax, strf ou axesflag e frameflag (ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf,rect,nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Grayplot"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "grayplot_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"grayplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "grayplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d de uma superfície utilizando-se cores"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["grayplot(x,y,z,[strf,rect,nax])", "grayplot(x,y,z,<opt_args>)", "hdl = grayplot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de reais de tamanhos n1 e n2. ."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2). "},{"type": "literal","children": [],"string": "z(i,j)"},{"type": "text","children": [],"string": " é o valor da superfície no ponto(x(i),y(j))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes: rect, nax, strf, logflag ou axesflag e frameflag (ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf,rect,nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Grayplot"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "grayplot_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["fgrayplot", "plot2d", "Sgrayplot", "Sfgrayplot"]},"grayplot_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "grayplot_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the grayplot entities properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador para a raiz. A raiz de uma entidade grayplot deve ser do tipo "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "esta propriedade contém um vetor com os galhos do manipulador. Contudo, manipuladores grayplot não possuem galhos correntemente."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade. Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . Por padrão, o grayplot é visível, a propriedade é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " o grayplot não é exibido na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo define uma estrutura de dados do tipo "},{"type": "literal","children": [],"string": "tlist"},{"type": "text","children": [],"string": " de tipo "},{"type": "literal","children": [],"string": "\"grayplotdata\""},{"type": "text","children": [],"string": " composto de uma linha e índices de colunas de cada elemento: as coordenadas do grid x e y estão contidas respectivamente em "},{"type": "literal","children": [],"string": "data.x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "data.y"},{"type": "text","children": [],"string": ". O campo complementar chamado "},{"type": "literal","children": [],"string": "data.z"},{"type": "text","children": [],"string": " é o valor da superfície no ponto "},{"type": "literal","children": [],"string": "(x(i),y(j))"},{"type": "text","children": [],"string": " (modo escalado) ou o valor centrado da superfície definido entre dois pontos consecutivos "},{"type": "literal","children": [],"string": "x(i)"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y(j)"},{"type": "text","children": [],"string": " (modo direto). Se "},{"type": "literal","children": [],"string": "data_mapping"},{"type": "text","children": [],"string": " (ver abaixo) for ajustado para "},{"type": "literal","children": [],"string": "\"scaled\""},{"type": "text","children": [],"string": ", todo o dado z é utilizado para realizar uma interpolação de cores, enquanto que, se o valor de "},{"type": "literal","children": [],"string": "data_mapping"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "\"direct\""},{"type": "text","children": [],"string": ", a última linha e coluna dos índices de dados z são ignoradas e a cor é determinada diretamente no mapa de cores através dos índices da submatriz "},{"type": "literal","children": [],"string": "data.z(1:$-1,1:$-1)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data_mapping:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "por padrão, o valor desta propriedade é "},{"type": "literal","children": [],"string": "\"scaled\""},{"type": "text","children": [],"string": " : os índices das cores utilizadas para colorir são proporcionais ao valor das coordenadas "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": ". Em outro caso, a propriedade possui valor "},{"type": "literal","children": [],"string": "\"direct\""},{"type": "text","children": [],"string": " onde o esboço é um grayplot e os índices das cores de pintura são fornecidos pelos dados (ver acima)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " para o grayplot. o valor de clip_state pode ser :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " significa que o grayplot não é recortado."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " significa que o grayplot é recortado fora da caixa dos eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " significa que o grayplot é recortado fora do retângulo dado pela propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo determina a propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " . Por padrão seu valor é uma matriz vazia se a propriedade clip_state é \"off\". Em outros casos, o vetor "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura, altura) define as porções do retângulo a ser exibido, contudo o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " será alterado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode ser utilizado para armazenar qualquer variável Scilab na estrutura de dados da entidade grayplot e recuperá-la."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "delete", "grayplot", "Matplot", "Matplot1", "graphics_entities", "Matplot_properties"]},"graypolarplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "graypolarplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço polar 2d de uma superfície utilizando-se cores"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["graypolarplot(theta,rho,z,[strf,rect])", "h = graypolarplot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho n1, a discretização do ângulo em radianos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rho"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho n2, a discretização do raio "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2). "},{"type": "literal","children": [],"string": "z(i,j)"},{"type": "text","children": [],"string": " é o valor da superfície no ponto (theta(i),rho(j))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "string de comprimento 3 "},{"type": "literal","children": [],"string": "\"xy0\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o padrão é "},{"type": "literal","children": [],"string": "\"030\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controla a exibição de legendas."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sem legendas. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "com legendas. Elas são fornecidas pelo argumento opcional "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controla a computação da moldura."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as molduras correntes (definidas por uma chamada anterior a uma função de esboço de alto-nível) são utilizadas. Útil ao se superpor esboços múltiplos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o argumento opcional "},{"type": "literal","children": [],"string": "rect"},{"type": "text","children": [],"string": " é utilizado para se especificar as fronteiras do esboço."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "as fronteiras do esboço são computadas utilizando-se os valores mínimo e máximo de "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=3"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=1"},{"type": "text","children": [],"string": " mas produz escala de isovisualização."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=4"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=2"},{"type": "text","children": [],"string": " mas produz escala de isovisualização."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=5"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=1"},{"type": "text","children": [],"string": " mas "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " pode mudar as fronteiras do esboço e os tiques dos eixos para se obter boas graduações. Quando o botão de zoom é ativado, este modo é usado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=6"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=2"},{"type": "text","children": [],"string": " mas "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " pode mudar as fronteiras do esboço e os tiques dos eixos para se obter boas graduações. Quando o botão de zoom é ativado, este modo é usado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=7"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=5"},{"type": "text","children": [],"string": " mas a escala do novo esboço é misturada à escala corrente."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=8"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=6"},{"type": "text","children": [],"string": " mas a escala do novo esboço é misturada à escala corrente."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string. É usado quando o primeiro caractere x do argumento "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é 1. "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": " possui a forma "},{"type": "literal","children": [],"string": "\"leg1@leg2@....\""},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "leg1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "leg2"},{"type": "text","children": [],"string": ", etc. são respectivamente as legendas das primeira, segunda, etc. curvas. O padrão é \" \"."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "É usado quando o segundo caractere y do argumento "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é 1, 3 ou 5. É um vetor linha de tamanho 4 e fornece as dimensões da moldura: "},{"type": "literal","children": [],"string": "rect=[xmin,ymin,xmax,ymax]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This optional output contains a handle to a Compound entity."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"histplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "histplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboça um histograma"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["histplot(n, data [,normalization] [,polygon], <opt_args>)", "histplot(x, data [,normalization] [,polygon], <opt_args>)", "cf = histplot(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro positivo (número de classes) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor crescente definindo as classes ("},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " pode ter pelo menos dois componentes)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor (dados a serem analisados) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1,key2=value2"},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " pode ser qualquer normalização ou parâmetro de "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " opcional ("},{"type": "literal","children": [],"string": "style,strf,leg, rect,nax, logflag,frameflag, axesflag "},{"type": "text","children": [],"string": " )No caso de normalização, o valor correspondente deve ser um escalar booleano (valor padrão %t)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Computed frequencies (bins heighs)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"LineSpec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "LineSpec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Customização rápida de linhas que aparecem em um esboço"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Nenhuma. LineSpec é um argumento opcional que pode ser utilizado dentro de um comando plot para customizar os aspectos de cada linha nova. Deve ser fornecido um string concatenado contendo as informações sobre cor, estilo de linha e marcas. É muito útil para especificar de forma rápida estas propriedades de linha básicas.", "Para especificar uma linha vermelha de traço longo com marcas de rombo, o string pode ser 'r--diam'. Como você pode ver, não é necessário escrita completa de cada de cada valor de propriedade, mas o string, que é uma concatenação (em qualquer ordem destas três propriedades), não pode conter ambigüidade. Além disso, a especificação de strings não diferencia letras maiúsculas de minúsculas."]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LineStyle:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um string definindo o estilo de linha. Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Color:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um string definindo a cor da linha. Esta propriedade está ligada à propriedade "},{"type": "literal","children": [],"string": "foreground"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": {"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Uma tabela de cores padrão é utilizada para colorir curvas esboçadas se você não especificar as cores (nem com "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " nem com "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": "). Quando linhas múltiplas são desenhadas, o comando plot automaticamente atribui em ciclos as cores a seguir:"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},"string": []},{"type": "varlistentry","children": {"type": "listitem","children": [],"string": []},"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Marker type:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um string definindo o tipo do marcador. Note que se você especificar um marcador (ou marca) sem um estilo de linha, apenas o marcador é desenhado. Esta propriedade está ligada à propriedade do objeto "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " do objeto (ver "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"loglog": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "loglog"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "2D logarithmic plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["loglog     // demo", "loglog(y)", "loglog(x, y)", "loglog(x, fun)", "loglog(x, list(fun, param))", "loglog(.., LineSpec)", "loglog(.., LineSpec, GlobalProperty)", "loglog(x1, y1, LineSpec1, x2,y2,LineSpec2,...xN, yN, LineSpecN, GlobalProperty1,.. GlobalPropertyM)", "loglog(x1,fun1,LineSpec1, x2,y2,LineSpec2,...xN,funN,LineSpecN, GlobalProperty1, ..GlobalPropertyM)", "loglog(axes_handle,...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector or matrix of strictly positive real numbers or integers. If omitted, it is assumed to be the vector "},{"type": "literal","children": [],"string": "1:n"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the number of curve points given by the "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " parameter."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix of strictly positive real numbers or integers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun, fun1, .."},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "handle of a function, as in "},{"type": "literal","children": [],"string": "loglog(x, gamma)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the function to plot needs some parameters as input arguments, the function and its parameters can be specified through a list, as in "},{"type": "literal","children": [],"string": "loglog(x, list(delip, -0.4))"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LineSpec"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument must be a string that will be used as a shortcut to specify a way of drawing a line. We can have one "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " per "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "{x,y}"},{"type": "text","children": [],"string": " previously entered. "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " options deals with LineStyle, Marker and Color specifiers (see "},{"type": "link","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": "). Those specifiers determine the line style, mark style and color of the plotted lines."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "GlobalProperty"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument represents a sequence of couple statements "},{"type": "literal","children": [],"string": "{PropertyName,PropertyValue}"},{"type": "text","children": [],"string": " that defines global objects' properties applied to all the curves created by this plot. For a complete view of the available properties (see "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_handle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument forces the plot to appear inside the selected axes given by "},{"type": "literal","children": [],"string": "axes_handle"},{"type": "text","children": [],"string": " rather than the current axes (see "},{"type": "link","children": [],"string": "gca"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot", "semilogx", "semilogy", "LineSpec", "GlobalProperty"]},"Matplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Matplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d de uma matriz utilizando-se cores"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Matplot(a,[strf,rect,nax])", "Matplot(a,<opt_args>)", "hdl = Matplot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ajusta as fronteiras do esboço. Se esta chave é fornecida, nem "},{"type": "literal","children": [],"string": "frameflag"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é fornecido, então o caractere "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " de "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é suposto como "},{"type": "literal","children": [],"string": "7"},{"type": "text","children": [],"string": ". Ver valores abaixo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ajusta a definição dos grides. Se esta chave é fornecida, nem "},{"type": "literal","children": [],"string": "axesflag"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é fornecido, então o caractere "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": " cd "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é suposto como "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": ". Ver valores abaixo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frameflag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica como a moldura do esboço é computado. O valor é um inteiro entre 0 e 8. Corresponde ao caractere "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " de "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": ". Ver abaixo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axesflag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica que tipo de eixos são desenhados ao redor do esboço. O valor é um inteiro entre 0 e 5. Corresponde ao caractere "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": " de "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": ". Ver abaixo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Matplot"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "Matplot_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "é um string de comprimento 3 "},{"type": "literal","children": [],"string": "\"xyz\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o padrão é "},{"type": "literal","children": [],"string": "\"081\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controls the display of captions."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sem legendas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "legendas são exibidas. Elas são dadas pelo argumento opcional "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controla a computação dos intervalos de coordenadas reais a partir dos valores mínimos requeridos. Intervalos reais podem ser maiores que os requerimentos mínimos."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sem computação, o esboço utiliza a escala anterior (ou padrão)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a partir do argumento rect"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a partir dos valores mínimo/máximo dos dados x e y"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "constrói uma escala isométrica a partir do argumento rect"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "constrói um esboço em escala isométrica a partir dos valores mínimo/máximo dos dados x e y"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=5"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "aumentados para obtenção de bons eixos a partir do argumento rect"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=6"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "aumentados para obtenção de bons eixos a partir dos valores mínimo/máximo dos dados x e y"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=7"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "como y= 1 mas os anteriores são redesenhados para se utilizar a nova escala"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=8"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "como y= 2 mas os anteriores são redesenhados para se utilizar a nova escala"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "controla a exibição de informação na moldura ao redor do esboço. Se eixos são requeridos, o número de tiques pode ser especificado pelo argumento opcional "},{"type": "literal","children": [],"string": "nax"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nada é desenhado ao redor do esboço."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "eixos são desenhados, o eixo y é exibido à esquerda."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o esboço é cercado por uma caixa sem tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "eixos são desenhados, o eixo y é exibido à direita."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "eixos são desenhados centrados no meio da caixa de moldura."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=5"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "eixos são desenhados cruzando-se no ponto "},{"type": "literal","children": [],"string": "(0,0)"},{"type": "text","children": [],"string": ". Se o ponto "},{"type": "literal","children": [],"string": "(0,0)"},{"type": "text","children": [],"string": " não estiver dentro da moldura, os eixos não aparecerão no gráfico."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This argument is used when the second character "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " of argument "},{"type": "varname","children": [],"string": "strf"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "7"},{"type": "text","children": [],"string": ". It is a row vector of size 4 and gives the dimension of the frame: "},{"type": "literal","children": [],"string": "rect=[xmin,ymin,xmax,ymax]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional é utilizado quando o terceiro caractere z do argumento "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é 1. É um vetor linha de quatro entradas "},{"type": "literal","children": [],"string": "[nx,Nx,ny,Ny]"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": ") é o número de sub-graduações no eixo x (y) axis e "},{"type": "literal","children": [],"string": "Nx"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "Ny"},{"type": "text","children": [],"string": ") é o número de graduações no eixo x (y)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colormap", "plot2d", "Matplot1", "Matplot_properties"]},"Matplot1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Matplot1"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço 2d de matrizes utilizando cores"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Matplot1(a,rect)", "hdl = Matplot1(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": {"type": "literal","children": [],"string": "[xmin,ymin,xmax,ymax]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Grayplot"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "grayplot_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colormap", "plot2d", "Matplot", "grayplot", "Matplot_properties"]},"Matplot_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Matplot properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the Matplot entities properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Graphic handle of the Matplot's parent, that should be of the type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of "},{"type": "varname","children": [],"string": "children"},{"type": "text","children": [],"string": " of the Matplot object. By default, a "},{"type": "literal","children": [],"string": "Matplot"},{"type": "text","children": [],"string": " entity has no "},{"type": "literal","children": [],"string": "child"},{"type": "text","children": [],"string": ", and "},{"type": "varname","children": [],"string": ".children"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", the Matplot patch is not displayed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "(m,n)"},{"type": "text","children": [],"string": " matrix or "},{"type": "literal","children": [],"string": "(m,n,nc)"},{"type": "text","children": [],"string": " hypermatrix of decimal, (u)int8, (u)int16, or (u)int32 numbers representing a matrix of (m,n) colors on "},{"type": "literal","children": [],"string": "nc = 1|3|4"},{"type": "text","children": [],"string": " channels to be plotted. The color encoding/decoding is set by the "},{"type": "varname","children": [],"string": "image_type"},{"type": "text","children": [],"string": " property. The color associated to "},{"type": "literal","children": [],"string": "data(i,j,:)"},{"type": "text","children": [],"string": " is used do draw and fill a small rectangle of fixed sizes touching its neighbors and centered at the "},{"type": "literal","children": [],"string": "(i,j)"},{"type": "text","children": [],"string": " location."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vector "},{"type": "literal","children": [],"string": "[xmin, ymin, xmax, ymax]"},{"type": "text","children": [],"string": " defining a rectangle in data scales of the parent axes. The full "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " matrix is scaled accordingly to fill the "},{"type": "varname","children": [],"string": "rect"},{"type": "text","children": [],"string": " shape: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "Its "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " rows cover the "},{"type": "literal","children": [],"string": "[ymin, ymax]"},{"type": "text","children": [],"string": " interval."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Its "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " columns cover the "},{"type": "literal","children": [],"string": "[xmin, xmax]"},{"type": "text","children": [],"string": " interval."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "data(i,j)"},{"type": "text","children": [],"string": " pixel is drawn in the small rectangle bounded by "},{"type": "literal","children": [],"string": "X = xmin + [j-1, j]*(xmax-xmin)/n"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "Y = ymax - [i-1, i]*(ymax-ymin)/m"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If one "},{"type": "varname","children": [],"string": "rect"},{"type": "text","children": [],"string": " bound goes beyond the corresponding "},{"type": "literal","children": [],"string": ".parent.data_bounds(i)"},{"type": "text","children": [],"string": " axes bound, the overflowing side of the "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " matrix will be clipped, unless "},{"type": "varname","children": [],"string": ".clip_state"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "image_type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "this field defines the image type. It could be one of the values: \"index\", \"gray\", \"rgb\", \"rgba\", \"argb\", \"red\", \"green\", \"blue\", \"rgb332\", \"rgb444\", \"rgb555\", \"rgb4444\", \"rgb5551\"."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Colors are determined by the data type and by "},{"type": "varname","children": [],"string": "image_type"},{"type": "text","children": [],"string": ":"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"index\""},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " are colors indices in the colormap."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"gray\""},{"type": "listitem","children": [{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 provides Gray level color (R-G-B=GRAY-GRAY-GRAY)."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Otherwise, "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " is considered as RGB levels and converted into gray colors (0.299*R+0.587*G+0.114*B)."}],"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rgb\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as an hypermatrix of int8 or uint8 provides the RGB components ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as an hypermatrix of doubles provides normalized RGB components (values between 0 and 1) ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 with a number of rows multiple of 3 provides the RGB components ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int32 provides RGB colors ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of uint32 provides RGBA colors where the alpha channel will be set to 0xFF."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rgba\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as an hypermatrix of int8 or uint8 provides the RGBA components ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as an hypermatrix of doubles provides normalized RGBA components (values between 0 and 1) ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 with a number of rows multiple of 4 provides the RGBA components ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int32 or uint32 provides RGBA colors."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"argb\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as an hypermatrix of int8 or uint8 provides the ARGB components ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as an hypermatrix of doubles provides normalized ARGB components (values between 0 and 1) ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 with a number of rows multiple of 4 provides the ARGB components ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int32 or uint32 provides ARGB colors."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"red\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 provides Red level color (R-G-B=RED-00-00)."}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " of another type is considered as RGB intensities. They are then converted into red levels (a mask is applied to keep the Red component)."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"green\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 provides Green level color (R-G-B=00-GREEN-00)."}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " of another type is considered as RGB intensities. They are then converted into green levels (a mask is applied to keep the Green component)."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"blue\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 provides Blue level color (R-G-B=00-00-BLUE) ;"}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " of another type is considered as RGB intensities. They are then converted into blue levels (a mask is applied to keep the Blue component)."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rgb332\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int8 or uint8 provides RGB colors where R component is wrote on 3 bits, G component on 3 bits and B component on 2 bits."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "For other "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " types, RGB (8-8-8) data are converted into RGB (3-3-2)."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rgb444\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int16 or uint16 provides RGB colors where each components is wrote on 4 bits."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "For other "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " types, RGB (8-8-8) data are converted into RGB (4-4-4)."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rgb555\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int16 or uint16 provides RGB colors where each components is wrote on 5 bits."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "For other "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " types, RGB (8-8-8) data are converted into RGB (5-5-5)."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rgb4444\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int16 or uint16 provides RGBA colors where each components is wrote on 4 bits."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "For other "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " types, RGBA (8-8-8-8) data are converted into RGBA (4-4-4-4)."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"rgb5551\""},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " as a matrix of int16 or uint16 provides RGBA colors where each non-alpha components is wrote on 5 bits and the alpha component on 1 bit."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "For other "},{"type": "varname","children": [],"string": "data"},{"type": "text","children": [],"string": " types, RGBA (8-8-8-8) data are converted into RGBA (5-5-5-1)."}],"string": []}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Its value drives the clipping of the "},{"type": "literal","children": [],"string": "Matplot"},{"type": "text","children": [],"string": " patch outside its parent "},{"type": "literal","children": [],"string": "Axes"},{"type": "text","children": [],"string": " box. Possible values are:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ": The Matplot patch is not clipped. Setting "},{"type": "literal","children": [],"string": ".clip_state = \"off\""},{"type": "text","children": [],"string": " automatically resets "},{"type": "literal","children": [],"string": ".clip_box = []"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": ": The Matplot patch is clipped outside its parent axes. Setting "},{"type": "literal","children": [],"string": ".clip_state = \"clipgrf\""},{"type": "text","children": [],"string": " automatically resets "},{"type": "literal","children": [],"string": ".clip_box = []"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ": The Matplot patch is clipped outside the rectangle defined by the "},{"type": "varname","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property."}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "empty matrix "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " (default) or "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (upper-left point width height) bounds (in data scales) of the rectangular area outside which the Matplot patch must be clipped. Setting "},{"type": "literal","children": [],"string": ".clip_box = [x y w h]"},{"type": "text","children": [],"string": " automatically sets "},{"type": "literal","children": [],"string": ".clip_state = \"on\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "this field can be use to store any scilab variable in the "},{"type": "literal","children": [],"string": "Matplot"},{"type": "text","children": [],"string": " data structure, and to retrieve it."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single text that can be used as identifier/name of the Matplot object. "},{"type": "literal","children": [],"string": "findobj(\"tag\", tag_value)"},{"type": "text","children": [],"string": " will then return its full graphic handle."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["Matplot", "Matplot1", "grayplot", "grayplot_properties", "xrects", "graphics_entities"]},"paramfplot2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "paramfplot2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço animado 2d, curva definida por uma função"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["paramfplot2d(f,x,theta)", "paramfplot2d(f,x,theta,flag)", "paramfplot2d(f,x,theta,flagrect)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "função "},{"type": "literal","children": [],"string": "y=f(x,t)"},{"type": "text","children": [],"string": " . f é uma função Scilab ou rotina dinamicamente ligada (referida através de um string)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais (conjunto de parâmetros). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "'no'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'yes'"},{"type": "text","children": [],"string": ": Se \"yes\" a janela é limpa entre dois esboços consecutivos."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"retângulo\" [xmin, xmax, ymin, ymax] (1 x 4 vetor de reais)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot2d", "feval"]},"plot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço 2d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot     // demo", "plot(y)", "plot(x, y)", "plot(x, func)", "plot(x, list(func, params))", "plot(x, polynomial)", "plot(x, rational)", "plot(.., LineSpec)", "plot(.., LineSpec, GlobalProperty)", "plot(x1, y1, LineSpec1, x2,y2,LineSpec2,...xN, yN, LineSpecN, GlobalProperty1,.. GlobalPropertyM)", "plot(x1,func1,LineSpec1, x2,y2,LineSpec2,...xN,funcN,LineSpecN, GlobalProperty1, ..GlobalPropertyM)", "plot(logflag,...)", "plot(axes_handle,...)", "h = plot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz ou vetor de reais. Se omitido, é assumido como sendo o vetor "},{"type": "literal","children": [],"string": "1:n"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " é o número de pontos de curva dado pelo parâmetro "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "um vetor ou matriz de reais. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "func"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "função definida como um macro ou uma primitiva, como em "},{"type": "literal","children": [],"string": "plot(x, sin)"},{"type": "text","children": [],"string": ". If the function to plot needs some parameters as input arguments, the function and its parameters can be specified through a list, as in "},{"type": "literal","children": [],"string": "plot(x, list(delip,-0.4))"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polynomial"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Single polynomial or array of polynomials. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rational"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Single rational or array of rationals. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y1, y2, y3,.."},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Can be any of the possible input types described above: "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "vectors or matrices of real numbers or of integers"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "handle of a function (possibly in a list with its parameters)."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "polynomials"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "rationals"},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LineSpec"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional deve ser usado como um atalho para especificar um modo de desenhar uma linha. Podemos ter um "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " por"},{"type": "literal","children": [],"string": " y"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "{x,y}"},{"type": "text","children": [],"string": " previamente entrados. As opções "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " lidam com os especificadores LineStyle, Marker e Color (ver "},{"type": "link","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": "). Estes especificadores determinam o estilo de linha, de marcas e a cor das linhas esboçadas."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "GlobalProperty"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional representa uma seqüência de pares de declarações "},{"type": "literal","children": [],"string": "{PropertyName,PropertyValue}"},{"type": "text","children": [],"string": " tque define propriedades globais de objetos a serem aplicadas a todas as curvas criadas pelo esboço. Para uma visualização completa de das propriedades disponíveis veja "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "logflag"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "\"ln\" | \"nl\" | \"ll\" : 2-character word made of \"l\" standing for \""},{"type": "emphasis","children": [],"string": "L"},{"type": "text","children": [],"string": "ogarithmic\" or/and \"n\" standing for \""},{"type": "emphasis","children": [],"string": "N"},{"type": "text","children": [],"string": "ormal\". The first character applies to the X axis, the second to the Y axis. Hence, \"ln\" means that the X axis is logarithmic and the Y axis is normal. The default is \"nn\": both axes in normal scales."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "logflag"},{"type": "text","children": [],"string": " must be used after "},{"type": "literal","children": [],"string": "axes_handle"},{"type": "text","children": [],"string": " (if any) and before the first curve's data "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "func"},{"type": "text","children": [],"string": ". It applies to all curves drawn by the "},{"type": "literal","children": [],"string": "plot(…)"},{"type": "text","children": [],"string": " instruction."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_handle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional força o esboço a aparecer dentro dos eixos selecionados fornecidos por "},{"type": "literal","children": [],"string": "axes_handle"},{"type": "text","children": [],"string": " ao invés dos eixos correntes (ver "},{"type": "link","children": [],"string": "gca"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Polyline"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot2d", "plot2d2", "plot2d3", "plot2d4", "param3d", "surf", "scf", "clf", "close", "delete", "LineSpec", "color_list", "GlobalProperty"]},"plot2d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot2d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "2D plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot2d()   // example", "plot2d(y)", "plot2d(x, y)", "plot2d(logflag, x, y)", "plot2d(.., y, style)", "plot2d(.., y, style, strf)", "plot2d(.., y, style, strf, leg)", "plot2d(.., y, style, strf, leg, rect)", "plot2d(.., y, style, strf, leg, rect, nax)", "plot2d(.., y, key1=value1, key2=value2, ..)", "hdl = plot2d(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real matrix or vector of abscissae. If omitted, abscissae are assumed to be "},{"type": "literal","children": [],"string": "1:n"},{"type": "text","children": [],"string": " for all curves, where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the number of points in curves, as given by "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "real matrix or vector: Ordinates "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The following options "},{"type": "varname","children": [],"string": "logflag"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "style"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "strf"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "leg"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "rect"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "nax"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "frameflag"},{"type": "text","children": [],"string": ", and "},{"type": "varname","children": [],"string": "axesflag"},{"type": "text","children": [],"string": " described below can either be listed in the right order as listed in the synopses, or provided in any order after "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " as named arguments, for instance like in "},{"type": "literal","children": [],"string": "plot(y, frameflag=3, leg=\"Curve 1@Curve 2\")"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "logflag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Sets the linear or logarithmic scale for both X and Y axes. Possible values are "},{"type": "literal","children": [],"string": "\"nn\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"nl\""},{"type": "text","children": [],"string": " , "},{"type": "literal","children": [],"string": "\"ln\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"ll\""},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "\"n\""},{"type": "text","children": [],"string": " stands for "},{"type": "emphasis","children": [],"string": "n"},{"type": "text","children": [],"string": "ormal scale ; "},{"type": "literal","children": [],"string": "\"l\""},{"type": "text","children": [],"string": " stands for "},{"type": "emphasis","children": [],"string": "l"},{"type": "text","children": [],"string": "ogarithmic. The first letter set the X axis. The second one sets the Y axis."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Sets the respective line or mark styles of the curves. It is a vector of decimal integers with one element per curve:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " is strictly positive, the curve is drawn as plain line and "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " defines the index of the color used to draw the curve (see "},{"type": "link","children": [],"string": "getcolor"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "if "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " is negative or zero, the given curve points are drawn using marks. Then "},{"type": "literal","children": [],"string": "abs(style(i))"},{"type": "text","children": [],"string": " is the mark's id. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note that all curves properties -- like also their color, thickness, marks colors, etc -- can be set through their handles (see "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf"},{"type": "listitem","children": [{"type": "text","children": [],"string": "3-character-long string "},{"type": "literal","children": [],"string": "\"abc\""},{"type": "text","children": [],"string": " specifying all together if legends must be displayed, and the values of "},{"type": "varname","children": [],"string": "frameflag"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "axesflag"},{"type": "text","children": [],"string": ". By default, "},{"type": "literal","children": [],"string": "strf= \"081\""},{"type": "text","children": [],"string": ". \"a\", \"b\" and \"c\" are: "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Single string "},{"type": "literal","children": [],"string": "\"leg1@leg2@....\""},{"type": "text","children": [],"string": " setting the legends leg1, leg2, etc for the respective curves #1, #2, etc. The default is "},{"type": "literal","children": [],"string": " \" \""},{"type": "text","children": [],"string": ". The block of legends is drawn on the bottom, below the x-axis."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "After plotting, the handle of the block of legends can be retrieved with "},{"type": "literal","children": [],"string": "gca().children(2)"},{"type": "text","children": [],"string": ". "},{"type": "link","children": [],"string": "legend"},{"type": "text","children": [],"string": " or "},{"type": "link","children": [],"string": "legends"},{"type": "text","children": [],"string": " can also be used instead of "},{"type": "varname","children": [],"string": "leg"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vector of decimal numbers "},{"type": "literal","children": [],"string": "[xmin, ymin, xmax, ymax]"},{"type": "text","children": [],"string": " setting the minimal bounds requested for the plot. "},{"type": "literal","children": [],"string": "[xmin, xmax]"},{"type": "text","children": [],"string": " is the X-axis range, and "},{"type": "literal","children": [],"string": "[ymin, ymax]"},{"type": "text","children": [],"string": " is the Y-axis one."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This argument works with the  "},{"type": "varname","children": [],"string": "frameflag"},{"type": "text","children": [],"string": " option to specify how the actual axes boundaries are computed. If the "},{"type": "varname","children": [],"string": "frameflag"},{"type": "text","children": [],"string": " option is not given, it is supposed to be "},{"type": "literal","children": [],"string": "frameflag=7"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The axes boundaries can also be customized through the "},{"type": "literal","children": [],"string": "gca().data_bounds"},{"type": "text","children": [],"string": " property of the axes (see "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nax"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vector of decimal integers "},{"type": "literal","children": [],"string": "[nx,Nx,ny,Ny]"},{"type": "text","children": [],"string": " specifying the numbers Nx and Ny of major ticks, and the numbers nx and ny of minor ticks between 2 majors, for both respective axes. To use autoticking on an axis, set Nx=-1 or Ny=-1."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the "},{"type": "varname","children": [],"string": "axesflag"},{"type": "text","children": [],"string": " option is not specified, using "},{"type": "varname","children": [],"string": "nax"},{"type": "text","children": [],"string": " sets and uses "},{"type": "literal","children": [],"string": "axesflag=9"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frameflag"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controls the computation of the actual coordinate ranges from the minimal requested values. The associated value should be an integer ranging from 0 to 8."},"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The setting of axes boundaries can also be customized through the "},{"type": "literal","children": [],"string": "gca().data_bounds"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "gca().tight_limits"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "gca().data_bounds"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "gca().isoview"},{"type": "text","children": [],"string": " properties (see "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axesflag"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer code in [0:5 9], controlling the display and position of X and Y axes."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The axes aspect can also be customized directly through the "},{"type": "literal","children": [],"string": "gca().box"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "gca().axes_visible"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "gca().x_location"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "gca().y_location"},{"type": "text","children": [],"string": ", properties (see "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output is a vector containing the handles of the created "},{"type": "literal","children": [],"string": "Polyline"},{"type": "text","children": [],"string": " entities. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " to modify properties of a specific or all entities after they are created. For a list of properties, see "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot", "polyline_properties", "plot2d2", "plot2d3", "plot2d4", "polarplot", "gca", "close", "axes_properties", "clf"]},"plot2d2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot2d2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d (funções de degraus)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot2d2([x],y)", "plot2d2([x],y,<opt_args>)", "plot2d2([logflag],x,y,[style,strf,leg,rect,nax])", "hdl = plot2d2(...)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "args"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " para uma descrição dos parâmetros."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["plot2d", "plot2d3", "plot2d4", "subplot", "clf", "polyline_properties"]},"plot2d3": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot2d3"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d (barras veticais)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot2d3([logflags,] x,y,[style,strf,leg,rect,nax])", "plot232(y)", "plot2d3(x,y <,opt_args>)", "hdl = plot2d3(...)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "args"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " para uma descrição dos parâmetros."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["plot2d", "plot2d2", "plot2d4", "clf", "polyline_properties"]},"plot2d4": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot2d4"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d (setas)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot2d4([logflag,] x,y,[style,strf,leg,rect,nax])", "plot2d4(y)", "hdl = plot2d4(x,y <,opt_args>)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "args"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " para uma descrição dos parâmetros.for a description of parameters."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["fchamp", "plot2d", "plot2d2", "plot2d3", "subplot", "clf", "polyline_properties"]},"plotimplicit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plotimplicit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Plots the (x,y) lines solving an implicit equation or Function(x,y)=0"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plotimplicit(fun)", "plotimplicit(fun, x_grid)", "plotimplicit(fun, x_grid, y_grid)", "plotimplicit(fun, x_grid, y_grid, plotOptions)", "h = plotimplicit(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "It may be one of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "A single Scilab-executable string expression of literal scalar variables \"x\" and \"y\" representing two scalar real numbers. Examples: "},{"type": "literal","children": [],"string": "\"x^3 + 3*y^2 = 1/(2+x*y)\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"(x-y)*(sin(x)-sin(y))\""},{"type": "text","children": [],"string": " (implicitly = 0)."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "The identifier of an existing function of two variables x and y. Example: "},{"type": "literal","children": [],"string": "besselj"},{"type": "text","children": [],"string": " (not "},{"type": "literal","children": [],"string": "\"besselj\""},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "A list, gathering a Scilab or built-in function identifier, followed by the series of its parameters. Example: After "},{"type": "literal","children": [],"string": "function r = test(x,y,a), r = x.*(y-a), endfunction"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "fun"},{"type": "text","children": [],"string": " can be "},{"type": "literal","children": [],"string": "list(test, 3.5)"},{"type": "text","children": [],"string": " to consider and compute "},{"type": "literal","children": [],"string": "test(x, y, 3.5)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_grid, y_grid"},{"type": "listitem","children": [{"type": "para","children": [{"type": "varname","children": [],"string": "x_grid"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "y_grid"},{"type": "text","children": [],"string": " define the cartesian grid of nodes where "},{"type": "varname","children": [],"string": "fun"},{"type": "text","children": [],"string": "(x,y) must be computed."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "x_grid = [-1,1]"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "y_grid = x_grid"},{"type": "text","children": [],"string": " are used. To use default values, just specify nothing. Example skipping "},{"type": "varname","children": [],"string": "y_grid"},{"type": "text","children": [],"string": ": "},{"type": "literal","children": [],"string": "plotimplicit(fun, x_grid, , plotOptions)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Explicit "},{"type": "varname","children": [],"string": "x_grid"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "y_grid"},{"type": "text","children": [],"string": " values can be specified as follow: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "A vector of 2 real numbers = bounds of the x or y domain. Example: "},{"type": "literal","children": [],"string": "[-2, 3.5]"},{"type": "text","children": [],"string": ". Then the given interval is sampled with 201 points."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "A vector of more than 2 real numbers = values where the function is computed. Example: "},{"type": "literal","children": [],"string": "-1:0.1:2"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "The colon "},{"type": "literal","children": [],"string": ":"},{"type": "text","children": [],"string": ". Then the considered interval is given by the data bounds of the current or default axes. This allows to overplot solutions of multiple equations on a shared (x,y) domain, with as many call to "},{"type": "literal","children": [],"string": "plotimplicit(..)"},{"type": "text","children": [],"string": " as required."}],"string": []}],"string": []}],"string": []},{"type": "para","children": {"type": "warning","children": [{"type": "text","children": [],"string": "The bounds of the 1st plot drawn by "},{"type": "literal","children": [],"string": "plotimplicit(..)"},{"type": "text","children": [],"string": " are set according to the bounds "},{"type": "emphasis","children": [],"string": "of the solutions of fun"},{"type": "text","children": [],"string": ". Most often they are (much) narrower than "},{"type": "varname","children": [],"string": "x_grid"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "y_grid"},{"type": "text","children": [],"string": " bounds."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "plotOptions"},{"type": "listitem","children": [{"type": "text","children": [],"string": "List of "},{"type": "link","children": [],"string": "plot()"},{"type": "text","children": [],"string": " line-styling options used when plotting the solutions curves. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This optional output is a vector containing the handles of the created Polyline objects. Use "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to modify properties of a specific or all Polyline objects after they are created. For a list of properties, see "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},"seealso": ["fsolve", "contour", "contour2di", "contour2dm", "LineSpec", "GlobalProperty", "plot"]},"polarplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polarplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço de coordenadas polares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["polarplot(theta,rho,[style,strf,leg,rect])", "polarplot(theta,rho,<opt_args>)", "hdl = polarplot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rho"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor, valores dos raio "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de mesmo tamanho que rho, valores dos ângulos. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde keys podem ser "},{"type": "literal","children": [],"string": "style"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "rect"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "frameflag"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vetor de reais de tamanho nc. O estilo a ser usado pela curva "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " é definido por "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": ". O valor padrão é "},{"type": "literal","children": [],"string": "1:nc"},{"type": "text","children": [],"string": " (1 para a primeira curva, 2 para a segunda, etc.)."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " for negativo, a curva é esboçada utilizando-se a marca com idenfiticador "},{"type": "literal","children": [],"string": "abs(style(i))+1"},{"type": "text","children": [],"string": ". Use "},{"type": "link","children": [],"string": "polyline properties"},{"type": "text","children": [],"string": " para ver os identificadores das marcas."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " for estritamente positivo, uma linha simples com identificador de cor "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " ou linha tracejada com identificador de estilo de tracejado "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " é usada. Use "},{"type": "link","children": [],"string": "polyline properties"},{"type": "text","children": [],"string": " para ver os identificadores de cor."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Quando apenas uma curva é desenhada, "},{"type": "literal","children": [],"string": "style"},{"type": "text","children": [],"string": " pode ser um vetor linha de tamanho 2 "},{"type": "literal","children": [],"string": "[sty,pos]"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "sty"},{"type": "text","children": [],"string": " é utilizado para se especificar o estilo e "},{"type": "literal","children": [],"string": "pos"},{"type": "text","children": [],"string": " é um inteiro entre 1 e 6 que especifica a posição para a legenda. Isto pode ser útil quando o usuário deseja desenhar curvas múltiplas em um esboço chamando a função "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " várias vezes e quer fornecer uma legenda para cada curva."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "istring de comprimento 3 "},{"type": "literal","children": [],"string": "\"xy0\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o padrão é "},{"type": "literal","children": [],"string": "\"030\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controla a exibição de legendas."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sem legendas. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "com legendas. Elas são fornecidas pelo argumento opcional "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controla a computação da moldura. É o mesmo que frameflag"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as fronteiras correntes (definidas por uma chamada anterior a uma função de esboço de alto-nível) são utilizadas. Útil ao se superpor esboços múltiplos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o argumento opcional "},{"type": "literal","children": [],"string": "rect"},{"type": "text","children": [],"string": " é utilizado para se especificar as fronteiras do esboço."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "as fronteiras do esboço são computadas utilizando-se os valores mínimo e máximo de "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=3"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=1"},{"type": "text","children": [],"string": " mas produz escala de isovisualização."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=4"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=2"},{"type": "text","children": [],"string": " mas produz escala de isovisualização."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=5"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=1"},{"type": "text","children": [],"string": " mas "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " pode mudar as fronteiras do esboço e os tiques dos eixos para se obter boas graduações. Quando o botão de zoom é ativado, este modo é usado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=6"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=2"},{"type": "text","children": [],"string": " mas "},{"type": "literal","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " pode mudar as fronteiras do esboço e os tiques dos eixos para se obter boas graduações. Quando o botão de zoom é ativado, este modo é usado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=7"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=5"},{"type": "text","children": [],"string": " mas a escala do novo esboço é misturada à escala corrente."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=8"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "como "},{"type": "literal","children": [],"string": "y=6"},{"type": "text","children": [],"string": " mas a escala do novo esboço é misturada à escala corrente."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string. É usado quando o primeiro caractere x do argumento "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é 1. "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": " possui a forma "},{"type": "literal","children": [],"string": "\"leg1@leg2@....\""},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "leg1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "leg2"},{"type": "text","children": [],"string": ", etc. são respectivamente as legendas das primeira, segunda, etc. curvas. O padrão é \" \" ."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é usado quando o segundo caractere y do argumento "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é 1, 3 ou 5. É um vetor linha de tamanho 4 e fornece as dimensões da moldura: "},{"type": "literal","children": [],"string": "rect=[xmin,ymin,xmax,ymax]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This optional output contains a handle to a Compound entity which is described below."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"scatter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scatter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "2D scatter plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["scatter()   // Example", "scatter(x, y)", "scatter(x, y, msizes)", "scatter(x, y, msizes, mcolors)", "scatter(.., \"fill\")", "scatter(.., \"smallOnTop\")", "scatter(.., marker)", "scatter(..., <marker_property, value>)", "scatter(axes, ..)", "polyline = scatter(..)"]},"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Columns or rows vectors of n real numbers specifying the abscissae and the ordinates of the centers of markers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Handle of the graphical axes in which the scatter plot must be drawn. By default, the current axes is targeted. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polyline"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Handle of the created polyline. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msizes"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Sizes of the markers, as of the area of the circle surrounding the marker, in point-square. Default value = 36. If it is scalar, the same size is used for all markers. Otherwise "},{"type": "varname","children": [],"string": "msizes"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " must have the same number of elements."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mcolors"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Colors of markers. If it is scalar, the same color is used for all markers. Otherwise, "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " must have the same number of elements."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The same color is used for filling the body and drawing the edge of markers."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The values of "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": " are linearly mapped to the colors in the current colormap."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A color can be specified by one of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "Its name, among the predefined names colors (see the "},{"type": "link","children": [],"string": "color_list"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Its standard hexadecimal RGB code as a string, like \"#A532FB\"."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "A matrix of RGB values with 3 columns and n rows, with Red Green and Blue intensities in [0,1]."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Its index in the current color map"},"string": []}],"string": []},{"type": "text","children": [],"string": " The default color is \"blue\"."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"fill\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, only the edge of markers is drawn, unless this keyword or the "},{"type": "varname","children": [],"string": "\"markerFaceColor\""},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "\"markerBackgroundColor\""},{"type": "text","children": [],"string": " properties are set."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"smallOnTop\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "When markers have not all the same size and the population of points becomes crowdy, big markers can hide smaller ones located around the same place. This option can be used to avoid such masking effects. Then points are priorly sorted by decreasing sizes, in order to plot the smallest points at the end, on top of bigger ones."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "marker"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Selects the shape of the markers. The same shape is used for all specified points. The figure below shows the different marker shapes."},"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Each marker shape is specified either by its index (list above) or by its string symbol (table below)."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"marker\",value  or  \"markerStyle\",value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Shape of the marker (index or string keyword). See the table above."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"markerEdgeColor\",value  or  \"markerForeground\",value"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Color of the edge of markers. Colors can be specified as for "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": ". This option supersedes "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"markerFaceColor\",value  or  \"markerBackground\",value"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Color filling the body of markers. Colors can be specified as for "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": ". This option supersedes "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"linewidth\",value  or  \"thickness\",value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Specify the thickness of the edge for all markers. The unit for the value is one point."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"datatips\", k"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Creates a datatip for all (X,Y) points whose indices are in the vector "},{"type": "varname","children": [],"string": "k"},{"type": "text","children": [],"string": ". 1:$ targets all existing points."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "datatip_display_mode"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"mouseover\""},{"type": "text","children": [],"string": ". The datatip anchor is reduced to a point set at the middle of the marker. The default datatips display the (x,y) coordinates of the point. If "},{"type": "varname","children": [],"string": "msizes"},{"type": "text","children": [],"string": " is a vector, the size of each marker is also displayed."}],"string": []}],"string": []}],"string": []}],"string": []}],"seealso": ["scatter3d", "plot", "gca", "gcf", "color_list", "polyline_properties"]},"semilogx": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "semilogx"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "2D semilogarithmic plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["semilogx     // demo", "semilogx(y)", "semilogx(x, y)", "semilogx(x, fun)", "semilogx(x, list(fun, param))", "semilogx(.., LineSpec)", "semilogx(.., LineSpec, GlobalProperty)", "semilogx(x1, y1, LineSpec1, x2,y2,LineSpec2,...xN, yN, LineSpecN, GlobalProperty1,.. GlobalPropertyM)", "semilogx(x1,fun1,LineSpec1, x2,y2,LineSpec2,...xN,funN,LineSpecN, GlobalProperty1, ..GlobalPropertyM)", "semilogx(axes_handle,...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector or matrix of strictly positive real numbers or integers. If omitted, it is assumed to be the vector "},{"type": "literal","children": [],"string": "1:n"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the number of curve points given by the "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " parameter."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix of real numbers or of integers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun, fun1, .."},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "handle of a function, as in "},{"type": "literal","children": [],"string": "semilogx(x, sin)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the function to plot needs some parameters as input arguments, the function and its parameters can be specified through a list, as in "},{"type": "literal","children": [],"string": "semilogx(x, list(delip, -0.4))"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LineSpec"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument must be a string that will be used as a shortcut to specify a way of drawing a line. We can have one "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " per "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "{x,y}"},{"type": "text","children": [],"string": " previously entered. "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " options deals with LineStyle, Marker and Color specifiers (see "},{"type": "link","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": "). Those specifiers determine the line style, mark style and color of the plotted lines."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "GlobalProperty"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument represents a sequence of couple statements "},{"type": "literal","children": [],"string": "{PropertyName,PropertyValue}"},{"type": "text","children": [],"string": " that defines global objects' properties applied to all the curves created by this plot. For a complete view of the available properties (see "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_handle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument forces the plot to appear inside the selected axes given by "},{"type": "literal","children": [],"string": "axes_handle"},{"type": "text","children": [],"string": " rather than the current axes (see "},{"type": "link","children": [],"string": "gca"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot", "semilogy", "loglog", "LineSpec", "GlobalProperty"]},"semilogy": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "semilogy"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "2D semilogarithmic plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["semilogy     // demo", "semilogy(y)", "semilogy(x, y)", "semilogy(x, fun)", "semilogy(x, list(fun, param))", "semilogy(.., LineSpec)", "semilogy(.., LineSpec, GlobalProperty)", "semilogy(x1, y1, LineSpec1, x2,y2,LineSpec2,...xN, yN, LineSpecN, GlobalProperty1,.. GlobalPropertyM)", "semilogy(x1,fun1,LineSpec1, x2,y2,LineSpec2,...xN,funN,LineSpecN, GlobalProperty1, ..GlobalPropertyM)", "semilogy(axes_handle,...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector or matrix of real numbers or integers. If omitted, it is assumed to be the vector "},{"type": "literal","children": [],"string": "1:n"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " is the number of curve points given by the "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " parameter."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector or matrix of strictly positive real numbers or integers. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun, fun1, .."},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "handle of a function, as in "},{"type": "literal","children": [],"string": "semilogy(x, gamma)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the function to plot needs some parameters as input arguments, the function and its parameters can be specified through a list, as in "},{"type": "literal","children": [],"string": "semilogy(x, list(delip, -0.4))"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LineSpec"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument must be a string that will be used as a shortcut to specify a way of drawing a line. We can have one "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " per "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "{x,y}"},{"type": "text","children": [],"string": " previously entered. "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " options deals with LineStyle, Marker and Color specifiers (see "},{"type": "link","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": "). Those specifiers determine the line style, mark style and color of the plotted lines."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "GlobalProperty"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument represents a sequence of couple statements "},{"type": "literal","children": [],"string": "{PropertyName,PropertyValue}"},{"type": "text","children": [],"string": " that defines global objects' properties applied to all the curves created by this plot. For a complete view of the available properties (see "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_handle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional argument forces the plot to appear inside the selected axes given by "},{"type": "literal","children": [],"string": "axes_handle"},{"type": "text","children": [],"string": " rather than the current axes (see "},{"type": "link","children": [],"string": "gca"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot", "semilogx", "loglog", "LineSpec", "GlobalProperty"]},"Sfgrayplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Sfgrayplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d suave de uma superfície definida por uma função utilizando cores"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Sfgrayplot(x,y,f,<opt_args>)", "Sfgrayplot(x,y,f [,strf, rect, nax, zminmax, colminmax, mesh, colout])", "hdl = Sfgrayplot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas de reais de tamanhos n1 e n2. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função do Scilab (z=f(x,y)) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes: strf, rect, nax, zminmax, colminmax, mesh, colout (ver "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " para os três primeiros e "},{"type": "link","children": [],"string": "fec"},{"type": "text","children": [],"string": " para os quatro últimos)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf,rect,nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zminmax, colminmax, mesh, colout"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "link","children": [],"string": "fec"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fec"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "fec_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["fec", "fgrayplot", "grayplot", "Sgrayplot"]},"Sgrayplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Sgrayplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 2d suave de uma superfície utilizando cores"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Sgrayplot(x,y,z,<opt_args>)", "Sgrayplot(x,y,z [,strf, rect, nax, zminmax, colminmax, mesh, colout])", "hdl = Sgrayplot(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas de reais de tamanhos n1 e n2. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2). "},{"type": "literal","children": [],"string": "z(i,j)"},{"type": "text","children": [],"string": " é o valor da superfície no ponto (x(i),y(j))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1,key2=value2"},{"type": "text","children": [],"string": ",... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes: strf, rect, nax, zminmax, colminmax, mesh, colout."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strf"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "é um string de comprimento 3 "},{"type": "literal","children": [],"string": "\"xyz\""},{"type": "text","children": [],"string": " (por padrão "},{"type": "literal","children": [],"string": "strf= \"081\""},{"type": "text","children": [],"string": ")"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controla a exibição de legendas"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sem legendas. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x=1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "legendas são exibidas. Elas são dadas pelo argumento opcional "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "controla a computação dos intervalos de coordenadas reais a partir dos valores mínimos requeridos. Intervalos reais podem ser maiores que os requerimentos mínimos."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "sem computação, o esboço utiliza a escala anterior (ou padrão)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a partir do argumento rect "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a partir dos valores mínimo/máximo dos dados x e y"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "construídos para uma escala isométrica a partir do argumento rect "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "construídos para uma escala isométrica a partir dos valores mínimo/máximo dos dados x e y "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=5"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "aumentados para obtenção de bons eixos a partir do argumento rect"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=6"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "aumentados para obtenção de bons eixos a partir dos valores mínimo/máximo dos dados x e y "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=7"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "como y= 1 mas os anteriores são redesenhados para se utilizar a nova escala "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y=8"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lcomo y= 2 mas os anteriores são redesenhados para se utilizar a nova escala"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "controla a exibição de informação na moldura ao redor do esboço. Se eixos são requeridos, o número de tiques pode ser especificado pelo argumento opcional "},{"type": "literal","children": [],"string": "nax"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nada é desenhado ao redor do esboço. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "eixos são desenhados, o eixo y é exibido à esquerda. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o esboço é cercado por uma caixa sem tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "eixos são desenhados, o eixo y é exibido à direita."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "eixos são desenhados centrados no meio da caixa de moldura. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z=5"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "eixos são desenhados cruzando-se no ponto "},{"type": "literal","children": [],"string": "(0,0)"},{"type": "text","children": [],"string": ". Se o ponto "},{"type": "literal","children": [],"string": "(0,0)"},{"type": "text","children": [],"string": " não estiver dentro da moldura, os eixos não aparecerão no gráfico."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento é utilizado quando o segundo caractere y do argumento "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " é 1, 3 ou 5. É um vetor linha de tamanho quatro e fornece a dimensão da moldura: "},{"type": "literal","children": [],"string": "rect=[xmin,ymin,xmax,ymax]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional é utilizado quando o terceiro caractere z do argumento "},{"type": "literal","children": [],"string": "strf"},{"type": "text","children": [],"string": " ié 1. É um vetor linha de quatro entradas "},{"type": "literal","children": [],"string": "[nx,Nx,ny,Ny]"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": ") é o número de sub-graduações no eixo x (y) axis e "},{"type": "literal","children": [],"string": "Nx"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "Ny"},{"type": "text","children": [],"string": ") é o número de graduações no eixo x (y)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zminmax, colminmax, mesh, colout"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "link","children": [],"string": "fec"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fec"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "fec_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["fec", "fgrayplot", "grayplot", "Sfgrayplot", "colorbar"]},"stackedplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "stackedplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "plot multiple timeseries on time axis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["stackedplot // demo", "stackedplot(ts)", "stackedplot(ts1, ..., tsN)", "stackedplot(..., vars)", "stackedplot(..., LineSpec)", "stackedplot(..., LineSpec, GlobalProperty)", "stackedplot(..., \"CombineMatchingNames\", %f)", "stackedplot(..., Name, Value)", "f = stackedplot(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ts, ts1, ..., tsN"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vars"},{"type": "listitem","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "strings vector containing to variables names of timeseries"},"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "column index vector corresponding to position in variables names timeseries"},"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "cell of strings: each element can contain one or multiple variables names."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LineSpec"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This optional argument must be a string that will be used as a shortcut to specify a way of drawing a line. We can have one "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " per "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "{x,y}"},{"type": "text","children": [],"string": " previously entered. "},{"type": "literal","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": " options deals with LineStyle, Marker and Color specifiers (see "},{"type": "link","children": [],"string": "LineSpec"},{"type": "text","children": [],"string": "). Those specifiers determine the line style, mark style and color of the plotted lines."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "GlobalProperty"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This optional argument represents a sequence of couple statements "},{"type": "literal","children": [],"string": "{PropertyName,PropertyValue}"},{"type": "text","children": [],"string": " that defines global objects properties applied to all the curves created by this plot. For a complete view of the available properties (see "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'Title'"},{"type": "text","children": [],"string": ": string that contains the title of plot."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'DisplayLabels'"},{"type": "text","children": [],"string": ": matrix of strings that contains the names of Y-label for each axe. Default value: variables names of timeseries"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'LegendLabels'"},{"type": "text","children": [],"string": ": matrix of strings that contains the names of timeseries."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "handle of the created figure."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": "timeseries"},"bar3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bar3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gráfico de barras 3D"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["bar3d()     // Exemplo", "bar3d(mtx,[theta,alpha,leg,flag,ebox])", "bar3d(mtx,<opt_args>)", "bar3d(list(mtx,x,y),[theta,alpha,leg,flag,ebox])", "bar3d(list(mtx,x,y),<opt_args>)", "hdl = bar3d(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mtx"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de tamanho (m,n) definindo o histograma "},{"type": "literal","children": [],"string": "mtx(i,j)=F(x(i),y(j))"},{"type": "text","children": [],"string": ", onde "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " asão tomados como "},{"type": "literal","children": [],"string": "0:m"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "0:n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list(mtx,x,y)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "onde f é uma matriz de tamanho (m,n) definindo o histograma "},{"type": "literal","children": [],"string": "mtx(i,j)=F(x(i),y(j))"},{"type": "text","children": [],"string": ", com vetores "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " de tamanho (1,n+1) e (1,m+1)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta,alpha,leg,flag,ebox"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"comet3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "comet3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "3D comet animated plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["comet3d(z)", "comet3d(x, y, z)", "comet3d(x, y, z, Lf)", "comet3d(x, y, fun)", "comet3d(x, y, fun, Lf)", "comet3d(...,\"colors\", c)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real vector or matrix. Default = "},{"type": "literal","children": [],"string": "1:np"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "np"},{"type": "text","children": [],"string": " being the number of points of the trajectory. As a matrix, each column defines the x coordinates of the trace of an individual comet. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real vector (default value = "},{"type": "literal","children": [],"string": "1:np"},{"type": "text","children": [],"string": ") or matrix. As a matrix, each column defines the y coordinates of the trace of an individual comet. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real vector of length "},{"type": "literal","children": [],"string": "np"},{"type": "text","children": [],"string": ", or a matrix with "},{"type": "literal","children": [],"string": "np"},{"type": "text","children": [],"string": " rows. As a matrix, each column defines the z coordinates of the trace of an individual comet. "},{"type": "literal","children": [],"string": "nc=size(z,\"c\")"},{"type": "text","children": [],"string": " is the number of comets simultaneously drawn. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Lf"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a real scalar in the interval"},{"type": "literal","children": [],"string": "[0,1["},{"type": "text","children": [],"string": ". Default value is 0.1: It defines the Leading fraction of the comet's trace. The "},{"type": "literal","children": [],"string": "k=Lf*np"},{"type": "text","children": [],"string": " most recent points are plotted in thicker line. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a scilab function with syntax "},{"type": "literal","children": [],"string": "z=fun(x,y)"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": [{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": " colors of the "},{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": " comets traces. They may be specified as a vector of "},{"type": "literal","children": [],"string": "nc"},{"type": "text","children": [],"string": " color indices or "},{"type": "link","children": [],"string": "color names"},{"type": "text","children": [],"string": " or \"#RRGGBB\" hexadecimal color codes. Or by a matrix (ncx3) of "},{"type": "literal","children": [],"string": "[r,g,b]"},{"type": "text","children": [],"string": " vectors of Red-Green-Blue intensities in the [0,1] interval. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["comet", "paramfplot2d", "realtime", "color_list"]},"contour": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "contour"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "curvas de nível em uma superfície 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["contour(x, y, z, nz, [theta, alpha, leg, flag, ebox, zlev, fpf])", "contour(x, y, z, nz, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de reais de tamanhos n1 e n2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais de tamanho (n1,n2), os valores da função sobre o gride ou uma função Scilab que define uma superfície "},{"type": "literal","children": [],"string": "z=f(x,y)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nz"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "os valores de nível ou o número de níveis."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um inteiro, seu valor fornece o número de níveis igualmente espaçados de zmin a zmax como segue:"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que os níveis "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " não são desenhados (genericamente eles são reduzidos a pontos) mas podem ser adicionados através de"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Se "},{"type": "literal","children": [],"string": "nz"},{"type": "text","children": [],"string": " for um vetor, "},{"type": "literal","children": [],"string": "nz(i)"},{"type": "text","children": [],"string": " fornece o valor da i-ésima curva de nível. Note que isto pode ser útil para se visualizar as curvas de nível "},{"type": "literal","children": [],"string": "zmin"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zmax"},{"type": "text","children": [],"string": " para se adicionar uma tolerância eps: "},{"type": "literal","children": [],"string": "nz=[zmin+%eps,..,zmax-%eps]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde keys podem ser "},{"type": "literal","children": [],"string": "theta"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "alpha"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "zlev"},{"type": "text","children": [],"string": " (ver abaixo). Neste caso, a ordem não possui significado especial."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta, alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores reais de dados em graus, as coordenadas esféricas do ponto de observação."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string definindo os rótulos para cada eixo com @ como um separador de campos, por exemplo \"X@Y@Z\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um vetor real de tamanho três. "},{"type": "literal","children": [],"string": "flag=[mode,type,box]"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string de representação de modo."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as curvas são desenhadas na superfície definida por (x,y,z)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode=1:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as curvas são desenhadas em um esboço 3d e sobre o plano definido pela equação z=zlev."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as curvas são desenhadas em um esboço 2D."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (tipo de escala)"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o esboço é feito utilizando-se a escala 3d corrente (definida por uma chamada anterior a "},{"type": "literal","children": [],"string": "param3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "contour"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "plot3d1"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são especificadas pelo valor do argumento opcional "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são computadas utilizando-se dados fornecidos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=3"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas com fronteiras da caixa dadas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=4"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=5"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas com fronteiras fornecidas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=6"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (moldura ao redor do esboço)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nada é desenhado ao redor do esboço."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "não implementado (é como box=0)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "apenas os eixos atrás da superfície são desenhados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas são adicionadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas e eixos são adicionados."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ebox"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "usado quando "},{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": " é 1. Especifica as fronteiras do esboço através do vetor "},{"type": "literal","children": [],"string": "[xmin,xmax,ymin,ymax,zmin,zmax]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zlev"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número real."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fpf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "You can change the format of the floating point number printed on the levels where "},{"type": "varname","children": [],"string": "fpf"},{"type": "text","children": [],"string": " is the format in C format syntax  (for example "},{"type": "text","children": [],"string": "). Set "},{"type": "varname","children": [],"string": "fpf"},{"type": "text","children": [],"string": " to \" \" implies that the level are not drawn on the level curves. If not given, the default format is "},{"type": "literal","children": [],"string": "\"%.2g\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["contour2d", "plot3d"]},"eval3dp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eval3dp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa facetas 3d de uma superfície parametrizada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Xf,Yf,Zf]=eval3dp(fun,p1,p2)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Xf,Yf,Zf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes de tamanho (4,n-1*m-1). "},{"type": "literal","children": [],"string": "Xf(:,i)"},{"type": "text","children": [],"string": " ,"},{"type": "literal","children": [],"string": "Yf(:,i)"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "Zf(:,i)"},{"type": "text","children": [],"string": " são respectivamente as coordenadas nos eixos x, y e z dos 4 pontos da i-ésima faceta de quatro lados."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma função do Scilab. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p1"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor de tamanho "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor de tamanho "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["genfac3d", "plot3d"]},"fplot3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fplot3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 3d de uma superfície definida por uma função"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["fplot3d(xr,yr,f,[theta,alpha,leg,flag,ebox])", "fplot3d(xr,yr,f,<opt_args>)", "h = fplot3d(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de tamanho n1. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "yr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de tamanho n2. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "external do tipo z=f(x,y). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta,alpha,leg,flag,ebox"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output contains a handle to a "},{"type": "literal","children": [],"string": "Plot3d"},{"type": "text","children": [],"string": ". Use "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to modify its properties. For a list of properties, see "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "plot3d"},"fplot3d1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fplot3d1"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço 3d em escala de cinza ou colorido de nível de uma superfície definida por uma função"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["fplot3d1(xr,yr,f,[theta,alpha,leg,flag,ebox])", "fplot3d1(xr,yr,f,<opt_args>)", "h = fplot3d1(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de tamanho n1. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "yr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de tamanho n2. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função externa (external) do tipo z=f(x,y). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta,alpha,leg,flag,ebox"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot3d1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ver "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output contains a handle to a "},{"type": "literal","children": [],"string": "Plot3d"},{"type": "text","children": [],"string": ". Use "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to modify its properties. For a list of properties, see "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "plot3d1"},"genfac3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "genfac3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa facetas de uma superfície 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[xx,yy,zz]=genfac3d(x,y,z,[mask])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xx,yy,zz"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes de tamanho (4,n-1xm-1). "},{"type": "literal","children": [],"string": "xx(:,i)"},{"type": "text","children": [],"string": " ,"},{"type": "literal","children": [],"string": "yy(:,i)"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zz(:,i)"},{"type": "text","children": [],"string": " são respectivamente as coordenadas nos eixos x, y e z dos 4 pontos da i-ésima faceta de quatro lados"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de coordenadas no eixo y de tamanho n "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de coordenadas no eixo y de tamanho n "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de tamanho (m,n). "},{"type": "literal","children": [],"string": "z(i,j)"},{"type": "text","children": [],"string": " é o valor da superfície no ponto (x(i),y(j))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mask"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de valores booleanos opcional de mesmo tamanho que "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": " utilizada para selecionar entradas de "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": " a serem representadas por facetas"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["eval3dp", "plot3d"]},"geom3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "geom3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "projeção 3d para 2d após um esboço 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x,y]=geom3d(x1,y1,z1)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x1,y1,z1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores reais de mesmo tamanho (pontos em 3d). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetores reais de mesmos tamanhos que "},{"type": "literal","children": [],"string": "x1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "y1"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "z1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"mesh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mesh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço 3d de uma malha"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mesh(Z)", "mesh(X,Y,Z)", "mesh(...,<GlobalProperty>)", "mesh(...,<color>,<GlobalProperty>)", "mesh(<axes_handle>,...)", "hdl = mesh(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de reais definindo a altura da superfície. Não pode ser omitida. O dado "},{"type": "varname","children": [],"string": "Z"},{"type": "text","children": [],"string": " é uma matriz "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " x "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X, Y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "duas matrizes de reais: sempre ajustadas juntas, esses dados definem um novo grid padrão. Estes novos componentes "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " e "},{"type": "varname","children": [],"string": "Y"},{"type": "text","children": [],"string": " do grid devem coincidir com as dimensões de "},{"type": "varname","children": [],"string": "Z"},{"type": "text","children": [],"string": " (ver descrição abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz de reais opcional definindo a cor para cada ponto "},{"type": "literal","children": [],"string": "(X(j),Y(i))"},{"type": "text","children": [],"string": " do grid (ver descrição abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<GlobalProperty>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional representa uma seqüência de pares de declarações "},{"type": "literal","children": [],"string": "{PropertyName,PropertyValue}"},{"type": "text","children": [],"string": " que definem propriedades globais dos objetos aplicadas a todas as curvas criadas neste esboço. Para uma completa visualização das propriedades disponíveis veja "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<axes_handle>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional força o esboço a aparecer dentro dos eixos selecionados por "},{"type": "varname","children": [],"string": "axes_handle"},{"type": "text","children": [],"string": " ao invés dos eixos correntes (ver "},{"type": "link","children": [],"string": "gca"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"nf3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nf3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Facetas retangulares para parâmetros da função plot3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[xx,yy,zz]=nf3d(x,y,z)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,x,xx,yy,zz"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "6 matrizes de reais"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["plot3d", "plot3d2"]},"param3d": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "param3d"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "param3d1"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "plots a single curve in a 3D cartesian frame"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "plots a set of curves in a 3D cartesian frame. 1D mesh plot"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["param3d(x, y, z)", "param3d(x, y, z, [theta, alpha, leg, flag, ebox])", "h = param3d(...)", "param3d   // demo", "param3d1(X, Y, Z)", "param3d1(X, Y, list(Z, styles))", "param3d1(.., [theta, alpha, leg, flag, ebox])", "h = param3d1(...)", "param3d1  // demo"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y, z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 vectors of the same length: cartesian coordinates of the curve's points."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X, Y, Z"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrices of the same size (nl,nc). Each column #i of the matrices provides the coordinates of the points for the ith curve."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "styles"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "vector of nc=size(Z,\"c\") integers specifying the style -- line color or mark style -- of each curve. When it is specified, it must be bundled with "},{"type": "varname","children": [],"string": "Z"},{"type": "text","children": [],"string": " into a list, using "},{"type": "literal","children": [],"string": "list(Z, styles)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "By default, lines are drawn with colors indexed from 1 to nc in the current color map, without mark."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "styles(i)<0"},{"type": "text","children": [],"string": ", the curve #i is plotted only with marks of style #|styles(i)|, without line."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Otherwise ("},{"type": "literal","children": [],"string": "styles(i)>0"},{"type": "text","children": [],"string": "), the curve #i is rendered as a solid line of color #styles(i), without marks."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Azimuth angle of the (OP) observation point, around the (OZ+) axis, in degrees. Default = 45°."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Polar angle of the (OP) observation point to the north pole (Oz+), in degrees, from 0 to 180. Default = 35°."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single string setting the labels for the 3 axes. \"@\" is used as a labels separator. Default = \"X@Y@Z\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag = [type, box]"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "box"},{"type": "text","children": [],"string": " have the same meaning as in "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": ":"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Sets the axes scaling and bounding modes. Default = 2."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an integer controlling the display of the axes frame (default = 4)."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ebox"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Vector "},{"type": "literal","children": [],"string": "[xmin,xmax, ymin,ymax, zmin,zmax]"},{"type": "text","children": [],"string": " of axes bounds, used and assigned to "},{"type": "literal","children": [],"string": "gca().data_bounds"},{"type": "text","children": [],"string": " when the "},{"type": "varname","children": [],"string": "flag"},{"type": "text","children": [],"string": " option is used with the "},{"type": "varname","children": [],"string": "type"},{"type": "text","children": [],"string": "=1|3|5. By default set to [0,1, 0,1, 0,1]."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output contains a handle to a Polyline entity or a Compound Entity whose children are the created Polyline objects. Use "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to modify properties of a specific or all Polyline objects after they are created. For a list of properties, see "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot3d", "plot3d3", "scatter3d", "axes_properties", "polyline_properties"]},"param3d_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "param3d_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the 3D curves entities properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade. Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . Por padrão, as curvas são visíveis, a propriedade é "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " as curvas não são desenhadas na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém as coordenadas de curvas 3d. É a matriz "},{"type": "literal","children": [],"string": "[X,Y,Z]"},{"type": "text","children": [],"string": " tal que "},{"type": "literal","children": [],"string": "X(:,i)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "Y(:,i)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "Z(:,i)"},{"type": "text","children": [],"string": " contém as coordenadas 3d da i-ésima curva. Este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " para objetos segmentos, arcos, retângulos e poligonais."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "line_mode"},{"type": "text","children": [],"string": " para a poligonal. O valor pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " (linha desenhada) ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (nenhuma linha desenhada)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_style:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo seleciona o tipo de linha a ser utilizada para desenhar linhas. O valor deve ser um inteiro em [0 6]. 0 significa linha sólida, o restante seleciona tracejados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polyline_style:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo seleciona o modo como as curvas são desenhadas: modos interpolado (padrão), escada, esboço de barras, em setas e preenchido estão disponíveis por índices inteiros em [1:5]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": ". Deve ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (valor padrão)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": ". A propriedade "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " seleciona o tipo de marca a ser exibida. o valor deve ser um inteiro em [0 9] que significa: ponto, sinal de mais, cruz, estrela, rombo preenchido, rombo, triângulo para cima, triângulo para baixo, trevo e círculo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size_unit:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " for ajustado para "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": ", então o valor de "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " é diretamente dado em pontos. Quando "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " é ajustado para "},{"type": "literal","children": [],"string": "\"tabulated\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " é computado em relação ao array de tamanho de fonte: logo, seu valor deve ser um inteiro em [0 5] que significa 8pt, 10pt, 12pt, 14pt, 18pt e 24pt. Note que "},{"type": "link","children": [],"string": "param3d"},{"type": "text","children": [],"string": " e funções puras do Scilab utilizam o modo "},{"type": "literal","children": [],"string": "tabulated"},{"type": "text","children": [],"string": " como padrão; quando se utiliza a função "},{"type": "link","children": [],"string": "plot"},{"type": "text","children": [],"string": " , o modo "},{"type": "literal","children": [],"string": "point"},{"type": "text","children": [],"string": " é automaticamente habilitado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": ". A propriedade "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " seleciona o tamanho de fonte da marca a ser exibida. Deve ser um valor inteiro em [0 5] que significa 8pt, 10pt, 12pt, 14pt, 18pt e 24pt."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_foreground:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " que é a cor da borda das marcas. O valor deve ser um índice de cor (relativo ao mapa de cores corrente)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_background:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " que é a cor da face das marcas. O valor deve ser um índice de cor (relativo ao mapa de cores corrente)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " (espessura) das linhas utilizadas para desenhar os eixos e curvas. Deve ser um inteiro positivo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém o índice de cor utilizado para desenhar as curvas. O valor deve ser um índice de cor (relativo ao mapa de cores corrente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": ". O valor pode ser:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " significa que todas as curvas criadas posteriormente não serão recortadas(valor padrão)."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " significa que todas as cruvas criadas posteriormente serão recortadas fora do fora das fronteiras da entidade Axes."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " significa que todas as curvas criadas posteriormente serão recortadas fora do retângulo dado pela propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": ". É uma matriz vazia se clip_state é "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Em outros casos, o recorte é dado pelo vetor "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura, altura)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode ser utilizado para armazenar qualquer variável Scilab na estrutura de dados da entidade Param3d e recuperá-la."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador para a raiz. A raiz de uma entidade curvas 3d deve ser do tipo "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "delete", "param3d", "param3d1", "graphics_entities"]},"plot3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboço 3d de uma superfície"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot3d(x,y,z,[theta,alpha,leg,flag,ebox])", "plot3d(x,y,z,<opt_args>)", "plot3d(xf,yf,zf,[theta,alpha,leg,flag,ebox])", "plot3d(xf,yf,zf,<opt_args>)", "plot3d(xf,yf,list(zf,colors),[theta,alpha,leg,flag,ebox])", "plot3d(xf,yf,list(zf,colors),<opt_args>)", "h = plot3d()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas de tamanhos n1 e n2 (coordenadas dos eixos x e y). Estas coordenadas devem ser monótonas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de tamanho (n1,n2). "},{"type": "literal","children": [],"string": "z(i,j)"},{"type": "text","children": [],"string": " é o valor da superfície no ponto (x(i),y(j))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xf,yf,zf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes de tamanho (nf,n). Elas definem as facetas usadas para desenhar a superfície. Há "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " facetas. Cada faceta "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " é definida por um polígono com "},{"type": "literal","children": [],"string": "nf"},{"type": "text","children": [],"string": " pontos. As coordenadas dos eixos x, y e z dos pontos da i-ésima faceta são dados respectivamente por "},{"type": "literal","children": [],"string": "xf(:,i)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "yf(:,i)"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zf(:,i)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colors"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de tamanho n fornecendo as cores de cada faceta ou uma matriz de tamanho (nf,n) fornecendo a cor próxima a cada borda da faceta (a cor da faceta é interpolada)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de sentenças "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " pode ser um dos seguintes: theta, alpha , leg, flag, ebox (ver definições abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta, alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores reais de dados em graus, as coordenadas esféricas de observação do ponto."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string definindo os rótulos para cada eixo com @ como um separador de campos, por exemplo \"X@Y@Z\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um vetor real de tamanho três. "},{"type": "literal","children": [],"string": "flag=[mode,type,box]"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (cor da superfície)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode>0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a superfície é pintada com a cor "},{"type": "literal","children": [],"string": "\"mode\""},{"type": "text","children": [],"string": " ; a borda da faceta é desenhada com o estilo e linha e cor correntes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma malha da superfície é desenhada."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode<0:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a superfície é pintada com a cor "},{"type": "literal","children": [],"string": "\"-mode\""},{"type": "text","children": [],"string": " ; a borda da faceta não é desenhada."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que o tratamento de cor da superfície pode ser feito utilizando-se as opções "},{"type": "literal","children": [],"string": "color_mode"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "color_flag"},{"type": "text","children": [],"string": " através das propriedades da entidade superfície (ver "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (tipo de escala)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=0:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o esboço é feito utilizando-se a escala 3d corrente (definida por uma chamada anterior a "},{"type": "literal","children": [],"string": "param3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "contour"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "plot3d1"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=1:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relção de aspecto extrema, as fronteiras são especificadas pelo valor do argumento opcional "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relção de aspecto extrema, as fronteiras são computadas utilizando-se dados fornecidos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=3:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas com fronteiras da caixa dadas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=4:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=5:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas com fronteiras fornecidas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=6:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que as fronteiras dos eixos podem ser customizadas através das propriedades da entidade de eixos (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (moldura ao redor do esboço)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nada é desenhado ao redor do esboço."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=1:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "não implementado (é como box=0)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "apenas os eixos atrás da superfície são desenhados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=3:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas são adicionadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=4:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas e eixos são adicionados."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que o aspecto dos eixos pode ser customizado através das propriedades da entidade de eixos (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ebox"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "especifica as fronteiras do esboço através do vetor "},{"type": "literal","children": [],"string": "[xmin,xmax,ymin,ymax,zmin,zmax]"},{"type": "text","children": [],"string": ". Este argumento é utilizado junto com "},{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": ", se este for ajustado para "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": " (volte acima para ver o comportamento correspondente). Se "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": " estiver faltando, "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " não é levado em conta."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que, quando especificado, o argumento "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " age no campo "},{"type": "literal","children": [],"string": "data_bounds"},{"type": "text","children": [],"string": " que também pode ser ajustado através das propriedades da entidade de eixos (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["eval3dp", "genfac3d", "geom3d", "param3d", "plot3d1", "clf", "gca", "gcf", "close", "delete", "axes_properties"]},"plot3d1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot3d1"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço 3d em níveis de cinza ou de cores de uma superfície"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot3d1(x,y,z,[theta,alpha,leg,flag,ebox])", "plot3d1(xf,yf,zf,[theta,alpha,leg,flag,ebox])", "plot3d1(x,y,z,<opts_args>)", "plot3d1(xf,yf,zf,<opts_args>)", "hdl = plot3d1(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores linhas de tamanhos n1 e n2 (coordenadas dos eixos x e y). Estas coordenadas devem ser monótonas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de tamanho (n1,n2). "},{"type": "literal","children": [],"string": "z(i,j)"},{"type": "text","children": [],"string": " é o valor da superfície no ponto (x(i),y(j))."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xf,yf,zf"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrizes de tamanho (nf,n). Elas definem as facetas usadas para desenhar a superfície. Há "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " facetas. Cada faceta "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": " é definida por um polígono com "},{"type": "literal","children": [],"string": "nf"},{"type": "text","children": [],"string": " pontos. As coordenadas dos eixos x, y e z dos pontos da i-ésima faceta são dados respectivamente por "},{"type": "literal","children": [],"string": "xf(:,i)"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "yf(:,i)"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "zf(:,i)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " pode ser um dos seguintes: theta, alpha , leg, flag, ebox (ver definições abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta, alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores reais de dados em graus, as coordenadas esféricas do ponto de observação."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string definindo os rótulos para cada eixo com @ como um separador de campos, por exemplo \"X@Y@Z\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um vetor real de tamanho três. "},{"type": "literal","children": [],"string": "flag=[mode,type,box]"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (cor da superfície)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode>0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a superfície é pintada com a cor "},{"type": "literal","children": [],"string": "\"mode\""},{"type": "text","children": [],"string": " ; a borda da faceta é desenhada com o estilo e linha e cor correntes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma malha da superfície é desenhada. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode<0:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a superfície é pintada com a cor "},{"type": "literal","children": [],"string": "\"-mode\""},{"type": "text","children": [],"string": " ; a borda da faceta não é desenhada."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que o tratamento de cor da superfície pode ser feito utilizando-se as opções "},{"type": "literal","children": [],"string": "color_mode"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "color_flag"},{"type": "text","children": [],"string": " através das propriedades da entidade Surface (ver "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (tipo de escala)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=0:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o esboço é feito utilizando-se a escala 3d corrente (definida por uma chamada anterior a "},{"type": "literal","children": [],"string": "param3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "contour"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "plot3d1"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=1:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são especificadas pelo valor do argumento opcional "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são computadas utilizando-se dados fornecidos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=3:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas com fronteiras da caixa dadas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=4:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=5:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas com fronteiras fornecidas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=6:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que as fronteiras dos eixos podem ser customizadas através das propriedades da entidade Axes (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (moldura ao redor do esboço)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nada é desenhado ao redor do esboço. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=1:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "não implementado (é como box=0). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "apenas os eixos atrás da superfície são desenhados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=3:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas são adicionadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=4:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas e eixos são adicionados."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que o aspecto dos eixos pode ser customizado através das propriedades da entidade Axes (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ebox"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "especifica as fronteiras do esboço através do vetor "},{"type": "literal","children": [],"string": "[xmin,xmax,ymin,ymax,zmin,zmax]"},{"type": "text","children": [],"string": ". Este argumento é utilizado junto com "},{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": " : é ajustado para "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": " (volte acima para ver o comportamento correspondente). Se "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": " estiver faltando, "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " não é levado em conta."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que, quando especificado, o argumento "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " age no campo "},{"type": "literal","children": [],"string": "data_bounds"},{"type": "text","children": [],"string": " que também pode ser ajustado através das propriedades da entidade de eixos (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "surfaceproperties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot3d", "gca", "gce", "scf", "clf"]},"plot3d2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot3d2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço de superfície definida por facetas retangulares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot3d2(X,Y,Z [,vect,theta,alpha,leg,flag,ebox])", "plot3d2(X,Y,Z, <opt_args>)", "hdl = plot3d2(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X, Y, Z:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "três matrizes de reais definindo uma estrutura de dados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes: theta, alpha ,leg,flag,ebox (ver definições abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta, alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores reais de dados em graus, as coordenadas esféricas do ponto de observação."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string definindo os rótulos para cada eixo com @ como um separador de campos, por exemplo \"X@Y@Z\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um vetor real de tamanho três. "},{"type": "literal","children": [],"string": "flag=[mode,type,box]"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (cor da superfície)."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode>0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a superfície é pintada com a cor "},{"type": "literal","children": [],"string": "\"mode\""},{"type": "text","children": [],"string": " ; a borda da faceta é desenhada com os estilos correntes de linha e cor."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma malha da superfície é desenhada. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode<0:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a superfície é pintada com a cor "},{"type": "literal","children": [],"string": "\"-mode\""},{"type": "text","children": [],"string": " ; a borda da faceta não é desenhada."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que o tratamento de cor da superfície pode ser feito utilizando-se as opções "},{"type": "literal","children": [],"string": "color_mode"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "color_flag"},{"type": "text","children": [],"string": " através das propriedades da entidade superfície (ver "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (tipo de escala). "},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=0:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o esboço é feito utilizando-se a escala 3d corrente (definida por uma chamada anterior a "},{"type": "literal","children": [],"string": "param3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "contour"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "plot3d1"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=1:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são especificadas pelo valor do argumento opcional "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são computadas utilizando-se dados fornecidos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=3:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas com fronteiras da caixa dadas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=4:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=5:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas com fronteiras fornecidas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=6:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que as fronteiras dos eixos podem ser customizadas através das propriedades da entidade Axes (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (moldura ao redor do esboço)"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nada é desenhado ao redor do esboço. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=1:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "não implementado (é como box=0) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "apenas os eixos atrás da superfície são desenhados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=3:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas são adicionadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=4:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas e eixos são adicionados."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que o aspecto dos eixos pode ser customizado através das propriedades da entidade Axes (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ebox"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "especifica as fronteiras do esboço através do vetor "},{"type": "literal","children": [],"string": "[xmin,xmax,ymin,ymax,zmin,zmax]"},{"type": "text","children": [],"string": ". Este argumento é utilizado junto com "},{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": ", se for ajustado para "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": " (volte acima para ver o comportamento correspondente). Se "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": " estiver faltando, "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " não é levado em conta."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que, quando especificado, o argumento "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " age no campo "},{"type": "literal","children": [],"string": "data_bounds"},{"type": "text","children": [],"string": " que também pode ser ajustado através das propriedades da entidade Axes (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "surfaceproperties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot3d", "genfac3d"]},"plot3d3": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot3d3"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço de malha de uma superfície definida por facetas retangulares"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["plot3d3(X,Y,Z [,vect,theta,alpha,leg,flag,ebox])", "plot3d3(X,Y,Z, <opt_args>)", "[hdl1,hdl2] = plot3d3(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X, Y, Z:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 três matrizes de reais definindo uma estrutura de dados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes: theta, alpha ,leg,flag,ebox (ver definições abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta, alpha"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores reais de dados em graus, as coordenadas esféricas do ponto de observação."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "leg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string definindo os rótulos para cada eixo com @ como um separador de campos, por exemplo \"X@Y@Z\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "um vetor real de tamanho quatro. "},{"type": "literal","children": [],"string": "flag=[vertical_color, horizontal_color,type,box] "},{"type": "text","children": [],"string": " ."}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vertical_color"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (cor da superfície), o padrão é 3."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Índice do mapa de cores definindo a cor a ser utilizada para se desenhar as bordas verticais."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "horizontal_color"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (cor da superfície), o padrão é 4."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Índice do mapa de cores definindo a cor a ser utilizada para se desenhar as bordas horizontais."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (escala) o padrão é 2."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=0:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o esboço é feito utilizando-se a escala 3d corrente (definida por uma chamada anterior a "},{"type": "literal","children": [],"string": "param3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "plot3d"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "contour"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "plot3d1"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=1:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são especificadas pelo valor do argumento opcional "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "re-escala automaticamente caixas 3d com relação de aspecto extrema, as fronteiras são computadas utilizando-se dados fornecidos."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=3:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas com fronteiras da caixa dadas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=4:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=5:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas com fronteiras fornecidas por "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": ", de modo semelhante a "},{"type": "literal","children": [],"string": "type=1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type=6:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "fronteiras 3d isométricas expandidas derivadas dos dados, de modo semelhante a "},{"type": "literal","children": [],"string": "type=2"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que as fronteiras dos eixos podem ser customizadas através das propriedades da entidade de eixos (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um inteiro (moldura ao redor do esboço), o padrão é 4."},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=0:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nada é desenhado ao redor do esboço. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=1:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "não implementado (é como box=0) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=2:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "apenas os eixos atrás da superfície são desenhados."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=3:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas são adicionadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box=4:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "uma caixa cercando a superfície é desenhada e legendas e eixos são adicionados."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que o aspecto dos eixos pode ser customizado através das propriedades da entidade Axes (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ebox"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica as fronteiras do esboço através do vetor "},{"type": "literal","children": [],"string": "[xmin,xmax,ymin,ymax,zmin,zmax]"},{"type": "text","children": [],"string": ". TEste argumento é utilizado junto com "},{"type": "literal","children": [],"string": "type"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": ", se for ajustado para "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "5"},{"type": "text","children": [],"string": " (volte acima para ver o comportamento correspondente). Se "},{"type": "literal","children": [],"string": "flag"},{"type": "text","children": [],"string": " estiver faltando, "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " não é levado em conta. Note que, quando especificado, o argumento "},{"type": "literal","children": [],"string": "ebox"},{"type": "text","children": [],"string": " age no campo "},{"type": "literal","children": [],"string": "data_bounds"},{"type": "text","children": [],"string": " que também pode ser ajustado através das propriedades da entidade Axes (ver "},{"type": "link","children": [],"string": "axes_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl1, hdl2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "These optional outputs are vectors of "},{"type": "literal","children": [],"string": "Polyline"},{"type": "text","children": [],"string": " entities containing the two  sets of entities for each isoparametric curve. Use them to eventually modify their properties For a list of properties, see "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot3d2", "plot3d", "param3d"]},"scatter3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scatter3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "3D scatter plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["scatter3d()      // Example", "scatter3d(x, y, z)", "scatter3d(x, y, z, msizes)", "scatter3d(x, y, z, msizes, mcolors)", "scatter3d(.., \"fill\")", "scatter3d(.., \"fill\", marker)", "scatter3d(..., <marker_property, value>)", "scatter3d(axes, ..)", "polyline = scatter3d(..)"]},"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y, z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "columns or rows vectors of n real numbers specifying the "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "z"},{"type": "text","children": [],"string": " coordinates of the centers of markers."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Handle of the graphical axes in which the scatter plot must be drawn. By default, the current axes is targeted. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polyline"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Handle of the created polyline. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msizes"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Sizes of the markers, as of the area of the circle surrounding the marker, in point-square. Default value = 36. If it is scalar, the same size is used for all markers. Otherwise "},{"type": "varname","children": [],"string": "msizes"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " must have the same number of elements."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mcolors"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Colors of markers. If it is scalar, the same color is used for all markers. Otherwise, "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " must have the same number of elements."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The same color is used for filling the body and drawing the edge of markers."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The values of "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": " are linearly mapped to the colors in the current colormap."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A color can be specified by one of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "Its name, among the predefined names colors (see the "},{"type": "link","children": [],"string": "color_list"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Its standard hexadecimal RGB code as a string, like \"#A532FB\"."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "A matrix of RGB values with 3 columns and n rows, with Red Green and Blue intensities in [0,1]."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Its index in the current color map"},"string": []}],"string": []},{"type": "text","children": [],"string": " The default color is \"blue\"."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"fill\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, only the edge of markers is drawn, unless this keyword or the "},{"type": "varname","children": [],"string": "\"markerFaceColor\""},{"type": "text","children": [],"string": " or "},{"type": "varname","children": [],"string": "\"markerBackgroundColor\""},{"type": "text","children": [],"string": " properties are set."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "marker"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Selects the shape of the markers. The same shape is used for all specified points. The figure below shows the different marker shapes."},"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Each marker shape is specified either by its index (list above) or by its string symbol (table below)."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"marker\", value  or  \"markerStyle\", value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Shape of the marker (index or string keyword). See the table above."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"markerEdgeColor\", value  or  \"markerForeground\", value"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Color of the edge of markers. Colors can be specified as for "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": ". This option supersedes "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"markerFaceColor\",value  or  \"markerBackground\",value"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Color filling the body of markers. Colors can be specified as for "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": ". This option supersedes "},{"type": "varname","children": [],"string": "mcolors"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"linewidth\",value  or  \"thickness\",value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Specify the thickness of the edge for all markers. The unit for the value is one point."},"string": []},"string": []}],"string": []}],"string": []}],"seealso": ["scatter", "param3d", "gca", "gcf", "color_list", "polyline_properties"]},"secto3d": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "secto3d"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Conversão de superfícies 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[m[,x]]=secto3d(seclist,npas)", "[m]=secto3d(seclist ,x)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "seclist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma lista cujos elementos são matrizes (2,.) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "npas"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "plot3d"},"surf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "surf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Esboço de superfície 3d"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["surf()  // sample", "surf(Z)", "surf(X, Y, Z)", "surf(X, Y, fun)", "surf(X, Y, list(fun, params))", "surf(.., colors)", "surf(.., <GlobalProperty>)", "surf(.., colors, <GlobalProperty>)", "surf(axes_handle,...)", "hdl = surf(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "X,Y"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "two vectors of real numbers, of lengths "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": "; or two real matrices of sizes "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " x "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": ": They define the data grid (horizontal coordinates of the grid nodes). All grid cells are quadrangular but not necessarily rectangular."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "X = 1:size(Z,2)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "Y = 1:size(Z,1)"},{"type": "text","children": [],"string": " are used."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Z"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz real definindo as alturas da superfície. Não pode ser omitida. O dado Z é uma matriz "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " x "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "handle of a function, as in "},{"type": "literal","children": [],"string": "surf(x,y, myFun)"},{"type": "text","children": [],"string": " where the expected syntax of "},{"type": "literal","children": [],"string": "myFun"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "Z=myFun(X,Y)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the 2D function "},{"type": "varname","children": [],"string": "fun"},{"type": "text","children": [],"string": " to plot needs some parameters as input arguments, the function and its parameters can be specified through a list, as in "},{"type": "literal","children": [],"string": "surf(x,y, list(delip, -0.4))"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "surf(x,y, list(myfun, a,b))"},{"type": "text","children": [],"string": " with "},{"type": "literal","children": [],"string": "Z = myFun(X,Y, a,b)"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " or/and "},{"type": "varname","children": [],"string": "Y"},{"type": "text","children": [],"string": " are grid-generating vectors while "},{"type": "varname","children": [],"string": "fun(…)"},{"type": "text","children": [],"string": " expects only input matrices, "},{"type": "literal","children": [],"string": "surf(…)"},{"type": "text","children": [],"string": " automatically generates matrices from "},{"type": "varname","children": [],"string": "X"},{"type": "text","children": [],"string": " or/and "},{"type": "varname","children": [],"string": "Y"},{"type": "text","children": [],"string": " and properly calls "},{"type": "literal","children": [],"string": "fun(…)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colors"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um matriz de reais opcional definindo valores de cores para cada ponto "},{"type": "literal","children": [],"string": "(X(j),Y(i))"},{"type": "text","children": [],"string": " do grid (ver descrição abaixo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<GlobalProperty>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade rerpresenta uma seqüência de pares de sentenças "},{"type": "literal","children": [],"string": "{PropertyName,PropertyValue}"},{"type": "text","children": [],"string": " que definem propriedades globais de objetos aplicadas a todas as curvas criadas neste esboço. Para uma completa visualização das propriedades disponíveis veja "},{"type": "link","children": [],"string": "GlobalProperty"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<axes_handle>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este argumento opcional força os eixos a aparecerem dentro dos eixos selecionados dados por "},{"type": "literal","children": [],"string": "axes_handle"},{"type": "text","children": [],"string": " ao invés dos eixos correntes (ver "},{"type": "link","children": [],"string": "gca"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot2d", "clf", "close", "delete", "LineSpec", "GlobalProperty"]},"surface_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "surface properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the 3D entities properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains the handle of the parent. The parent of the surface entity should be of type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains a vector with the "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": " of the handle. However, surface handles currently do not have any "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": {"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default): The surface is displayed, possibly with its mesh and markers."}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " : The surface and its mesh and markers are hidden."}],"string": []}],"string": []},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "surface_mode: "},{"type": "listitem","children": {"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default): facets (body and edges) are drawn."}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " : facets (body and edges) are hidden. But markers -- if any -- are still displayed (provided that "},{"type": "literal","children": [],"string": ".mark_mode = \"on\""},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "color_mode >= 0"},{"type": "text","children": [],"string": ", this field contains the color index used to draw the edges. If not, foreground is not used at all. The foreground value should be an integer color index (relative to the current colormap)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property is a positive real specifying the width of facets contours in pixels. The displayed width is actually determined by rounding the supplied width to the nearest integer. The only exception is vectorial export where the whole "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " value is considered."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property value for the surface. Its value should be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (marks drawn) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (no marks drawn)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_style: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " property value is used to select the type of mark to use when "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". The value should be an integer in [0 20]. The figure below shows the aspects of the marks depending on the "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " properties."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size_unit: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " property value. If "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": ", then the "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " value is directly given in points. When "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"tabulated\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " is computed relative to the font size array: therefore, its value should be an integer in [0 5] which stands for 8pt, 10pt, 12pt, 14pt, 18pt and 24pt. Note that "},{"type": "link","children": [],"string": "plot3d"},{"type": "text","children": [],"string": " and pure scilab functions use "},{"type": "literal","children": [],"string": "tabulated"},{"type": "text","children": [],"string": " mode as default ; when using the "},{"type": "link","children": [],"string": "surf"},{"type": "text","children": [],"string": " (or "},{"type": "link","children": [],"string": "plot"},{"type": "text","children": [],"string": " for 2D lines) function, the "},{"type": "literal","children": [],"string": "point"},{"type": "text","children": [],"string": " mode is automatically enabled."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " property is used to select the type of size of the marks when "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Its value should be an integer between 0 and 5 which stands for 8pt, 10pt, 12pt, 14pt, 18pt and 24pt."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " property value which is the marks' edge color. Its value should be a color index (relative to the current color_map) or 0 for transparent edge."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_background: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " property value which is the marks' face color. Its value should be a color index (relative to the current color_map) or 0 for transparent face."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field defines a "},{"type": "literal","children": [],"string": "tlist"},{"type": "text","children": [],"string": " data structure of type \"3d\" composed of a row and column indices of each element as the x-, y- and z-coordinates contained respectively in "},{"type": "literal","children": [],"string": "data.x"},{"type": "text","children": [],"string": ","},{"type": "literal","children": [],"string": "data.y"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "data.z"},{"type": "text","children": [],"string": ". The complementary field named "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is available in case a real color vector or matrix is specified. If none, "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is not listed. The surface is painted according to "},{"type": "literal","children": [],"string": "color_mode "},{"type": "text","children": [],"string": "and "},{"type": "literal","children": [],"string": "color_flag"},{"type": "text","children": [],"string": " properties."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "color index in "},{"type": "literal","children": [],"string": "[-size(colormap), size(colormap)]"},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "emphasis","children": [],"string": "color_flag == 0"},{"type": "text","children": [],"string": " : The uniform color of the whole upward surface is set to the index "},{"type": "literal","children": [],"string": "abs(color_mode)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "In addition, whatever is "},{"type": "literal","children": [],"string": "color_flag"},{"type": "text","children": [],"string": ", "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "color_mode = 0"},{"type": "text","children": [],"string": " makes facets hollow and displays only the surface's mesh."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "color_mode > 0"},{"type": "text","children": [],"string": " displays facets bodies and edges."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "color_mode < 0"},{"type": "text","children": [],"string": " hides the mesh and displays only facets bodies."}],"string": []}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "When it is displayed, the mesh color is set to "},{"type": "varname","children": [],"string": "foreground"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color_flag: "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Chooses the algorithm used to set the color of the body of the upward face of facets, when it is displayed."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "In addition, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "varname","children": [],"string": "color_mode"},{"type": "text","children": [],"string": " rules the display of the mesh (facets edges) and/or body of facets."}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "foreground"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "thickness"},{"type": "text","children": [],"string": " rules the line color and thickness of the mesh."}],"string": []},{"type": "listitem","children": [{"type": "varname","children": [],"string": "hiddencolor"},{"type": "text","children": [],"string": " rules the color of the backward facets face."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Here below, "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "nf"},{"type": "text","children": [],"string": " stands for the number of facets of the surface."}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "n"},{"type": "text","children": [],"string": " stands for the number of vertices of each facet. All facets have the same number of vertices."}],"string": []}],"string": []},{"type": "text","children": [],"string": " Then we have:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": [{"type": "term","children": [],"string": "color_flag = 0"},{"type": "emphasis","children": [],"string": "(uniform color)"},{"type": "text","children": [],"string": " :"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "All facets are painted using the same color index and method defined by "},{"type": "literal","children": [],"string": "color_mode"},{"type": "text","children": [],"string": " (see above)."}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "term","children": [],"string": "color_flag = 1"},{"type": "emphasis","children": [],"string": "(uniform color on each facet, mapping Z)"},{"type": "text","children": [],"string": " :"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The average Z of each facet is computed according to the Z of its vertices. Then the [Zmin, Zmax] range of facets Z is computed. Each facet gets its uniform color in [1, size(colormap)] according to its Z position in [Zmin, Zmax]."},"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "color_flag== 2,3 or 4"},{"type": "text","children": [],"string": " values are only available with "},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " entities. These algorithms require the "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " input to set facets colors. If "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is empty, the "},{"type": "literal","children": [],"string": "color_flag=1"},{"type": "text","children": [],"string": " fallback algorithm is used."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "para","children": [{"type": "term","children": [],"string": "color_flag = 2"},{"type": "emphasis","children": [],"string": "('flat' shading)"},{"type": "text","children": [],"string": " :"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "All facets are painted using the color index given in the "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " property (one color per facet is needed). Two cases are then possible :"}],"string": []},{"type": "orderedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is a vector of as many "},{"type": "literal","children": [],"string": "color"},{"type": "text","children": [],"string": " indices as there are facets, "},{"type": "literal","children": [],"string": "color(i)"},{"type": "text","children": [],"string": " being the color index for the facet "},{"type": "literal","children": [],"string": "#i"},{"type": "text","children": [],"string": " : "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "color(i)>0"},{"type": "text","children": [],"string": ": the boundary of the facet is drawn with current line style and color."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "color(i)<0"},{"type": "text","children": [],"string": ": the facet's boundary is not drawn, and "},{"type": "literal","children": [],"string": "-color(i)"},{"type": "text","children": [],"string": " is used as facet's color."}],"string": []}],"string": []}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is a matrix of color indices, of size (n,nf). Then, the actual color index of the facet is set to the average color of all its vertices."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "term","children": [],"string": "color_flag = 3"},{"type": "emphasis","children": [],"string": "(interpolated shading on each facet)"},{"type": "text","children": [],"string": " :"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Facets painting is done by interpolating their vertices colors. The indices of vertices color are given in the "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " property (one color per vertex is needed). Two cases are possible :"}],"string": []},{"type": "orderedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is a vector of "},{"type": "literal","children": [],"string": "nf"},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "color"},{"type": "text","children": [],"string": " indices, "},{"type": "literal","children": [],"string": "color(i)"},{"type": "text","children": [],"string": " being the index of the flat uniform color of the facet "},{"type": "literal","children": [],"string": "#i"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is a color matrix of size (n,nf): The facet #i is drawn with some graded colors interpolated between the "},{"type": "literal","children": [],"string": "color(:,i)"},{"type": "text","children": [],"string": " colors of its vertices."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "term","children": [],"string": "color_flag = 4"},{"type": "emphasis","children": [],"string": "(Matlab-like 'flat' shading)"},{"type": "text","children": [],"string": " :"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Same as "},{"type": "literal","children": [],"string": "color_flag==2"},{"type": "text","children": [],"string": ", except that, when "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " is a color matrix, each facet #i is painted with the uniform "},{"type": "literal","children": [],"string": "color(1,i)"},{"type": "text","children": [],"string": " of its first vertex (instead of the average color of all its vertices). Other vertices colors are ignored."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cdata_mapping: "},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "'scaled'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'direct'"},{"type": "text","children": [],"string": ". Used only for "},{"type": "literal","children": [],"string": "color_flag=2|3|4"},{"type": "text","children": [],"string": " ("},{"type": "literal","children": [],"string": "Fac3d"},{"type": "text","children": [],"string": " handles), with some "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " defined. Otherwise ignored. "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "\"direct\""},{"type": "text","children": [],"string": ": "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " values are directly considered as color indices in the current colormap given by "},{"type": "literal","children": [],"string": "gcf().color_map"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "\"scaled\""},{"type": "text","children": [],"string": ": "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " values are mapped to indices in the current colormap depending on the "},{"type": "term","children": [],"string": "cdata_bounds"},{"type": "text","children": [],"string": " and "},{"type": "term","children": [],"string": "color_range"},{"type": "text","children": [],"string": " properties defined below."}],"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cdata_bounds: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This vector of size 2, "},{"type": "literal","children": [],"string": "[cmin,cmax]"},{"type": "text","children": [],"string": ", gives the "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " interval of values mapped to indices  "},{"type": "literal","children": [],"string": "1:size(gcf().color_map,1)"},{"type": "text","children": [],"string": " of the current colormap or to an eventual subset defined by the "},{"type": "term","children": [],"string": "color_range"},{"type": "text","children": [],"string": " property. Values of "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " outside "},{"type": "literal","children": [],"string": "[cmin,cmax]"},{"type": "text","children": [],"string": " are mapped respectively to the first and the last element of the colormap. By default, the "},{"type": "literal","children": [],"string": "cdata_bounds"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "[0,0]"},{"type": "text","children": [],"string": " which means that "},{"type": "literal","children": [],"string": "cmin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "cmax"},{"type": "text","children": [],"string": " are automatically set to the minimum and maximum of "},{"type": "literal","children": [],"string": "data.color"},{"type": "text","children": [],"string": " property."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color_range: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This vector of size 2, "},{"type": "literal","children": [],"string": "[rmin, rmax]"},{"type": "text","children": [],"string": ", where "},{"type": "literal","children": [],"string": "rmin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "rmax"},{"type": "text","children": [],"string": " stand for colormap indices, defines a subset of the current colormap for displaying the surface object. If they are both greater than 1,  then the actual colormap used to display the fac3d entity is "},{"type": "literal","children": [],"string": "gcf().color_map(rmin:rmax,:)"},{"type": "text","children": [],"string": ". By default, the "},{"type": "literal","children": [],"string": "color_range"},{"type": "text","children": [],"string": " property value is "},{"type": "literal","children": [],"string": "[0,0]"},{"type": "text","children": [],"string": " which means that the whole colormap is used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hiddencolor: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Positive index of the color of the uniform backward faces of all facets. If a negative or null value is provided, backward faces are painted with the same respective colors as the upward visible ones."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value for the surface. It should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " this means that the surface is not clipped."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " this means that the surface is clipped outside the Axes box."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " this means that the surface is clipped outside the rectangle given by property clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field is to determinate the "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property. By Default its value should be an empty matrix if clip_state is \"off\". Other cases the vector "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (upper-left point width height) defines the portions of the surface to display, however "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value will be changed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "use_color_material: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field is use to enable the use of the surface color as diffuse color. Its default value is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "material_shininess: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field defines the shininess level of the surface. This parameter controls the shinines color spreading in the surface. Any positive value can be used. Good values to use are in the [0 10] range, where low values generates strong highlight and high values generates barely perceptible highlights. The default value is "},{"type": "literal","children": [],"string": "\"2\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ambient_color: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field defines the ambient color of the surface. The color is defined by a 3 element vector "},{"type": "literal","children": [],"string": "\"[red, green, blue]\""},{"type": "text","children": [],"string": " with each element in the range [0, 1]. The default value is "},{"type": "literal","children": [],"string": "\"[1 1 1]\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "diffuse_color: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field defines the diffuse color of the surface. The color is defined by a 3 element vector "},{"type": "literal","children": [],"string": "\"[red, green, blue]\""},{"type": "text","children": [],"string": " with each element in the range [0, 1]. Notice that this field is only used when use_color_material is disabled. The default value is "},{"type": "literal","children": [],"string": "\"[1 1 1]\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "specular_color: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field defines the specular color of the surface. The color is defined by a 3 element vector "},{"type": "literal","children": [],"string": "\"[red, green, blue]\""},{"type": "text","children": [],"string": " with each element in the range [0, 1]. The default value is "},{"type": "literal","children": [],"string": "\"[1 1 1]\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be use to store any scilab variable in the surface data structure, and to retrieve it."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "delete", "plot3d", "plot3d1", "plot3d2", "surf", "grayplot_properties", "Matplot_properties", "graphics_entities"]},"captions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "captions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Impressão de legendas de gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "hl=captions(h, strings [,location])"},"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de manipuladores de entidades Polyline"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strings"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n-vetor de strings, strings(i) é a legenda da i-ésima poligonal"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um manipulador do tipo \""},{"type": "literal","children": [],"string": "Legend"},{"type": "text","children": [],"string": "\", pontos para a estrutura contendo todas as informações das legendas (ver "},{"type": "link","children": [],"string": "legend_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "location"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string com possíveis valores"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_upper_right\" "},{"type": "text","children": [],"string": ": as legendas são exibidas no canto superior direito da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_upper_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas no canto superior esquerdo da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_lower_right\""},{"type": "text","children": [],"string": ": as legendas são exibidas no canto inferior direito da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_lower_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas no canto inferior esquerdo da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_upper_right\""},{"type": "text","children": [],"string": ": as legendas são exibidas à direita do canto superior direito da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_upper_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas à esquerda do canto superior esquerdo da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_lower_right\""},{"type": "text","children": [],"string": ": as legendas são exibidas à direita do canto inferior direito da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_lower_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas à esquerda do canto inferior esquerdo da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"upper_caption\""},{"type": "text","children": [],"string": ": as legendas são exibidas acima do canto superior esquerdo da caixa de eixos"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"lower_caption\""},{"type": "text","children": [],"string": ": as legendas são exibidas abaixo do canto inferior esquerdo da caixa de eixos. Esta opção corresponde ao argumento "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": " de "},{"type": "link","children": [],"string": "plot2d"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"by_coordinates\""},{"type": "text","children": [],"string": ": o canto superior esquerdo da caixa das legendas é dada pelo campo \"position\" da estrutura de dados associada. As posições "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " são fornecidas como frações dos tamanhos de "},{"type": "literal","children": [],"string": "axes_bounds."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"string": []}],"seealso": []},"label_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "label_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição de propriedades da entidade Label (rótulo)"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador para a raiz. A raiz de uma entidade Label deve ser do tipo "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " ."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note que, por ora, a entidade Label é exclusivamente utilizada na construção de "},{"type": "literal","children": [],"string": "title"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "x_label"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "y_label"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "z_label"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade. Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . Por padrão, o rótulo é visível, o valor da propriedade é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " o rótulo não é impresso na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix of texts of the label. So, a label can have multiple rows or/and columns of text. Leading and trailing blanks are trimmed. In their columns, texts are left-justified. "},{"type": "link","children": [],"string": "LaTeX expressions"},{"type": "text","children": [],"string": " delimited with \"$...$\" are supported."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_foreground:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o índice de cor utilizado para exibir o rótulo "},{"type": "literal","children": [],"string": ".text"},{"type": "text","children": [],"string": ". Seu valor deve ser um índice de cor (relativo ao mapa de cores corrente)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém a cor utilizada para exibir o rótulo e a linha ao redor da caixa, se houver. Deve ser um índice de cor (relativo ao mapa de cores corrente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém a cor a ser usada para preencher a caixa, se houver. Deve ser um índice de cor (relativo ao mapa de cores corrente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This is actually a \"box mode\" property. "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " draws a box around the block of text of the label. Otherwise, no block's edge is drawn. The "},{"type": "literal","children": [],"string": ".foreground"},{"type": "text","children": [],"string": " value is the color's index of the edge. The "},{"type": "literal","children": [],"string": ".background"},{"type": "text","children": [],"string": " value is the index of the filling color."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica a fonte a ser utilizada para exibir o rótulo. É um inteiro positivo fazendo referência uma das fontes carregadas. Seu valor deve estar entre 0, fazendo referência à primeira fonte, e o número de fontes carregadas menos um, fazendo referência à última fonte. Para mais informações, veja "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_size:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é um escalar especificando o tamanho dos caracteres exibidos. Se a propriedade "},{"type": "literal","children": [],"string": ".fractional_font"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", apenas a parte inteira é utilizada. Para mais informações, veja "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fractional_font:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade especifica se o texto será utilizado utilizando-se tamanhos de fonte fracionários. Seu valor deve ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", o valor em ponto flutuante de "},{"type": "literal","children": [],"string": ".font_size"},{"type": "text","children": [],"string": " é utilizado para a exibição e evita-se o serrilhamento da fonte. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", apenas a parte inteira é utilizada e a fonte não é suavizada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_angle:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Clockwise angle of the label's block, in degrees, horizontal = 0°. The lower-left corner of the horizontal box is used as pivot (fixed point). Setting "},{"type": "literal","children": [],"string": ".font_angle"},{"type": "text","children": [],"string": " automatically sets "},{"type": "literal","children": [],"string": ".auto_rotation=\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_rotation:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", o Scilab computa automaticamente o melhor ângulo de rotação para a exibição do rótulo. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", o rótulo pode ser girado manualmente através da propriedade "},{"type": "literal","children": [],"string": ".font_angle"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Vector of coordinates of the label's anchor, in data unit. The anchor is the lower-left corner of the horizontal box of the label. Setting the "},{"type": "literal","children": [],"string": ".position"},{"type": "text","children": [],"string": " automatically sets "},{"type": "literal","children": [],"string": ".auto_position=\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_position:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", o Scilab computa automaticamente a melhor posição para a exibição do rótulo na janela de gráficos. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", o rótulo pode ser posicionado manualmente através da propriedade "},{"type": "literal","children": [],"string": ".position"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xlabel", "xtitle", "title", "xstring", "xlfont", "color", "set", "text_properties", "axes_properties"]},"legend": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "legend"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Imprime uma legenda para o gráfico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["legend([h,] string1,string2, ... [,pos] [,boxed])", "legend([h,] strings [,pos] [,boxed])", "hdl = legend(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador gráfico de uma entidade de eixos ou vetor de manipuladores de entidades poligonais. O valor padrão é o manipulador dos eixos correntes."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string1,string2, ..."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "strings, stringsi é a legenda da i-ésima curva "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strings"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings de dimensão n, strings(i) é a legenda da i-ésima curva"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pos"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(opcional) especifica onde imprimir as legendas; este parâmetro pode ser um flag inteiro (ou, de modo equivalente, um string) ou um vetor [x,y] que fornece as coordenadas da quina superior esquerda da caixa de legenda. No primeiro caso, os valores possíveis são:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto superior direito"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto superior esquerdo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto inferior esquerdo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto inferior direito"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "5"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "localização interativa com o mouse"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas à direita do canto superior direito"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas à esquerda do canto superior esquerdo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas à esquerda do canto inferior esquerdo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-4"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas à direita do canto inferior direito"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-5"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas acima do canto superior esquerdo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "-6"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas abaixo do canto inferior esquerdo"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "boxed"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano (valor padrão %t) que ajusta se a caixa será desenhada ou não"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um manipulador, pontos no Compound contendo todas as legendas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Legend"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "legend_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"legend_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "legend_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das propriedades da entidade Legend (legenda)"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador da raiz. A raiz de uma entidade Legends deve ser do tipo "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": ". Este Compound contém também o restante das entidade gráficas."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém um vetor com os galhos do manipulador. contudo, manipuladores "},{"type": "literal","children": [],"string": "legend"},{"type": "text","children": [],"string": " não possuem galhos correntemente."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade . Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " a legenda é impressa, se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", a legenda não é exibida na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo é um vetor de strings que contém as legendas para cada objeto anotado."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_size:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um escalar especificando o tamanho da fonte. Se a propriedade "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", apenas a parte inteira é utilizada. Para mais informações veja "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica a fonte utilizada para exibir os rótulos da legenda. É um inteiro positivo fazendo referência a uma das fontes carregadas. Seu valor deve estar entre 0, fazendo referência à primeira fonte, e o número de fontes caregadas menos um, fazendo referência à última fonte. Para mais informações veja "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_color"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um índice de cor, esta propriedade determina a cor do texto."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fractional_font:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade especifica se os textos são exibidos utilizando-se tamanhos de fonte fracionários. Seu valor deve ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", o valor em ponto flutuante de "},{"type": "literal","children": [],"string": "font_size"},{"type": "text","children": [],"string": " é utilizado para a exibição e evita-se o serrilhamento da fonte. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", apenas a parte inteira é utilizada e a fonte não é suavizada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "links:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um array linha de manipuladores. Eles se referem às poligonais associadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "legend_location"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um string, especifica a localização da legenda"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_upper_right\" "},{"type": "text","children": [],"string": ": as legendas são exibidas no canto superior direito da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_upper_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas no canto superior esquerdo da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_lower_right\""},{"type": "text","children": [],"string": ": as legendas são exibidas no canto inferior direito da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"in_lower_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas no canto inferior esquerdo da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_upper_right\""},{"type": "text","children": [],"string": ": as legendas são exibidas à direita do canto superior direito da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_upper_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas à esquerda do canto superior esquerdo da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_lower_right\""},{"type": "text","children": [],"string": ": as legendas são exibidas à direita do canto inferior direito da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"out_lower_left\""},{"type": "text","children": [],"string": ": as legendas são exibidas à esquerda do canto inferior esquerdo da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"upper_caption\""},{"type": "text","children": [],"string": ": as legendas são exibidas acima do canto superior esquerdo da caixa de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"lower_caption\""},{"type": "text","children": [],"string": ": as legendas são exibidas abaixo do canto inferior esquerdo da caixa de eixos. Esta opção corresponde ao argumento "},{"type": "literal","children": [],"string": "leg"},{"type": "text","children": [],"string": " de "},{"type": "link","children": [],"string": "plot2d"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"by_coordinates\""},{"type": "text","children": [],"string": ": o canto superior esquerdo da caixa de legendas é fornecido pelo campo \"position\" da estrutura de dados associada. As posições "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " são fornecidas como frações dos "},{"type": "literal","children": [],"string": "axes_bounds"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "as coordenadas do canto superior esquerdo da legenda. As posições "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " são dadas como frações dos tamanhos "},{"type": "literal","children": [],"string": "axes_bounds"},{"type": "text","children": [],"string": ". Este campo pode ser ajustado se "},{"type": "literal","children": [],"string": "legend_location==\"by_coordinates\" ou obtido de outros ajustes de legend_location. "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo especifica se um retângulo é desenhado ao redor da legenda ou não. Deve ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " , o retângulo é desenhado utilizando-se as seguintes propriedades."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo fornece a espessura da linha utilizada para desenhar o retângulo."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém o índice de cor da linha utilizada para desenhar o contorno do retângulo."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill_mode"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo especifica se o plano de fundo da legenda será pintado ou não. Deve ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " , o plano de fundo é pintado utilizando-se a cor definida no campo "},{"type": "literal","children": [],"string": "background"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém o índice de cor da linha utilizada para pintar a área do retângulo."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " para todos os objetos. O valor de clip_state pode ser :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " significa que todos os objetos criados posteriormente não são recortados. (valor padrão)."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " significa que todos os objetos criados posteriormente são recortados fora da caixa dos eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " significa que todos os objetos criados posteriormente são recortados fora do retângulo dado pela propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " para todos os objetos. O seu valor é uma matriz vazia se clip_state é "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Em outros casos, o recorte é dado por "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura, altura)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode ser utilizado para armazenar qualquer variável Scilab na estrutura de dados do texto e recuperá-la."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"legends": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "legends"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Imprime uma legenda para o gráfico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["legends(strings,style,<opt_args>)", "hdl = legends(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strings"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings de dimensão n, strings(i) é a legenda da i-ésima curva "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de inteiros de dimensão n (os estilos de esboço, terceiro parâmetro de plot2d) ou uma matriz 2 x n, style(1,k) contém o estilo de esboço para a k-ésima curva e style(2,k) contém o estilo de linha (se style(1,k)>0) ou cor da marca (se style(1,k)<0)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "representa uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1,key2=value2"},{"type": "text","children": [],"string": ",... onde "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2,..."},{"type": "text","children": [],"string": " podem ser um dos seguintes:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "(opcional) especifica onde imprimir as legendas; este parâmetro pode ser um flag inteiro (ou, de modo equivalente, um string) ou um vetor [x,y] que fornece as coordenadas da quina superior esquerda da caixa de legenda. No primeiro caso, os valores possíveis são:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "1 ou \"ur\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto superior direito. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "2 ou \"ul\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto superior esquerdo. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "3 ou \"ll\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto inferior esquerdo. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "4 ou \"lr\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas no canto inferior direito. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "5 ou \"?\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "localização interativa com o mouse (padrão)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "6 ou \"below\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "as legendas são impressas abaixo do gráfico (que é redimensionado de acordo)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "with_box"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano (valor padrão %t) que ajusta se a caixa será desenhada ou não."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_size"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro (valor padrão 1) que ajusta o tamanho da fonte para os nomes na legenda."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Legend"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "legend_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"title": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "title"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "displays a title above a graphic axes, or updates its properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["title(text)", "title(text, property_name, property_value,...)", "title(property_name, property_value,...)", "title(axes_handle,...)", "h = title(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix of text of the title. A title can have multiple rows or/and columns of text. Leading and trailing blanks are trimmed. In their columns, texts are left-justified. "},{"type": "link","children": [],"string": "LaTeX expressions"},{"type": "text","children": [],"string": " delimited with \"$...$\" are supported."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_handle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Handle of the axes whose title must be set or updated. By default, the current axes is processed. Otherwise, the given axes is set as and remains the current one after returning from "},{"type": "literal","children": [],"string": "title()"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "property_name, property_value,..."},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "unlimited series of pairs of property name (word) and the respective value to assign to it. The available properties are related to "},{"type": "link","children": [],"string": "labels properties"},{"type": "text","children": [],"string": "). Some of them have an alias that can be used as well with "},{"type": "literal","children": [],"string": "title()"},{"type": "text","children": [],"string": ":"}],"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "(*) Any color can be specified by any of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "Its numerical or literal index in the current colormap (like 13 or \"13\"). Special values whatever is the colormap: -1 for black, -2 for white."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Its name as a string, if it is a predefined "},{"type": "link","children": [],"string": "listed color"},{"type": "text","children": [],"string": ". For colors among the short list [\"red\",\"green\",\"blue\",\"cyan\",\"magenta\",\"yellow\",\"black\",\"white\"], shortened names are supported, like \"m\" for magenta or \"k\" for \"black\"."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Its \"#RRGGBB\" hexadecimal code, as a string."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "the [r,g,b] row of its Red/Green/Blue 0 ≤ r,g,b ≤ 1 intensities. This syntax can't be used in console-oriented mode."},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output contains a handle to the created Label entity. Use "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to modify its properties. For a list of properties, see "},{"type": "link","children": [],"string": "label_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["label_properties", "titlepage", "xtitle", "xlabel", "ieditor", "xstring", "color_list", "color", "xlfont", "set"]},"xlabel": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "xlabel"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "ylabel"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "zlabel"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "sets or updates the x-axis label or/and its properties"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "sets or updates the y-axis label or/and its properties"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "sets or updates the z-axis label or/and its properties"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["xlabel(label)", "xlabel(label, property_name, property_value,...)", "xlabel(property_name, property_value,...)", "xlabel(axes_handle,...)", "ylabel(label)", "ylabel(label, property_name, property_value,...)", "ylabel(property_name, property_value,...)", "ylabel(axes_handle,...)", "zlabel(label)", "zlabel(label, property_name, property_value,...)", "zlabel(property_name, property_value,...)", "zlabel(axes_handle,...)", "h = xlabel(...)", "h = ylabel(...)", "h = zlabel(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "label"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix of texts of the label. A label can have multiple rows or/and columns of text. Leading and trailing blanks are trimmed. In their columns, texts are left-justified. "},{"type": "link","children": [],"string": "LaTeX expressions"},{"type": "text","children": [],"string": " delimited with \"$...$\" are supported."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_handle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Handle of the axes whose x|y|z label must be set or updated. By default, the current axes is processed. Otherwise, the given axes is set as and remains the current one after returning from "},{"type": "literal","children": [],"string": "x|y|zlabel()"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "property_name, property_value,..."},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "unlimited series of pairs of property name (word) and the respective value to assign to it. The available properties are related to "},{"type": "link","children": [],"string": "labels properties"},{"type": "text","children": [],"string": "). Some of them have an alias that can be used as well with "},{"type": "literal","children": [],"string": "x|y|zlabel()"},{"type": "text","children": [],"string": ":"}],"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "(*) Any color can be specified by any of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "Its numerical or literal index in the current colormap (like 13 or \"13\"). Special values whatever is the colormap: -1 for black, -2 for white."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Its name as a string, if it is a predefined "},{"type": "link","children": [],"string": "listed color"},{"type": "text","children": [],"string": ". For colors among the short list [\"red\",\"green\",\"blue\",\"cyan\",\"magenta\",\"yellow\",\"black\",\"white\"], shortened names are supported, like \"m\" for magenta or \"k\" for \"black\"."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Its \"#RRGGBB\" hexadecimal code, as a string."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "the [r,g,b] row of its Red/Green/Blue 0 ≤ r,g,b ≤ 1 intensities. This syntax can't be used in console-oriented mode."},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output contains a handle to a Label entity. Use "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " to modify its properties. For a list of properties, see "},{"type": "link","children": [],"string": "label_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["label_properties", "title", "xtitle", "ieditor", "xstring", "color_list", "color", "xlfont", "set"]},"xtitle": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xtitle"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "adidciona títulos a janelas de gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xtitle(title,[x_label,[y_label,[z_label]]],<opts_args>)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title,x_label,y_label, z_label"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de strings "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma seqüência de declarações "},{"type": "literal","children": [],"string": "key1=value1, key2=value2 "},{"type": "text","children": [],"string": " ,... onde keys podem ser "},{"type": "literal","children": [],"string": "boxed"},{"type": "text","children": [],"string": " (ver abaixo). Nesse caso, a ordem não tem valor especial"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "boxed"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um valor inteiro. Se for 1, um retângulo é desenhado ao redor de cada título."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["titlepage", "label_properties"]},"axes_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "axes_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "descrição das propriedades de entidades Axes (de eixos)"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Propriedades dos eixos "},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém o manipulador da figura raiz"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Fvetor FA contendo os manipuladores de todos os objetos gráficos galhos dos eixos. Estes objetos gráficos são do tipo "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Rectangle\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Polyline\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Segs\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Arc\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"Grayplot\""},{"type": "text","children": [],"string": ",.. (ver "},{"type": "link","children": [],"string": "Compound_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "rectangle_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "champ_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "axis_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "segs_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "grayplot_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "surface_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "param3d_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "fec_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "text_properties"},{"type": "text","children": [],"string": ", "},{"type": "link","children": [],"string": "legend_properties"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " (visível) para os eixos. O valor pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " (ligado) ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . (desligado). Por padrão, os eixos são visíveis, "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " , caso todos os galhos visíveis sejam exibidos na tela. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " , os eixos e seus galhos não são esboçados."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor de strings "},{"type": "literal","children": [],"string": "1x3"},{"type": "text","children": [],"string": " string vector. Esta propriedade especifica se o eixo deve ser desenhado ou não. Seu valor pode ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " para um ajuste global. Para agir em um único eixo, a sintaxe é "},{"type": "literal","children": [],"string": "axes_visible(N)"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " é "},{"type": "literal","children": [],"string": "1,2"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " correspondentes aos eixos "},{"type": "literal","children": [],"string": " x,y"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": ".O dado de escala e, se requerido, os grides são desenhados se o valor for "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Note que ao criar uma simples entidade de eixo usando os comandos "},{"type": "literal","children": [],"string": "gca()"},{"type": "text","children": [],"string": " (atalho para "},{"type": "literal","children": [],"string": "get\"current_axes\")"},{"type": "text","children": [],"string": ") ou "},{"type": "literal","children": [],"string": "gcf()"},{"type": "text","children": [],"string": " (atalho para "},{"type": "literal","children": [],"string": "get(current_figure)"},{"type": "text","children": [],"string": "), a visibilidade dos eixos é ajustada para "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_reverse:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor de strings "},{"type": "literal","children": [],"string": "1x3"},{"type": "text","children": [],"string": " correspondentes aos três eixos (X,Y,Z). Para cada eixo, a propriedade especifica a direção dos valores crescentes. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", a direção padrão é usada. Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", a direção é invertida. Também é possível utilizar apenas um string, "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", para ajustar simultaneamente os três dados."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "grid:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o valor do campo é um vetor "},{"type": "literal","children": [],"string": "[x-grid,y-grid,z-grid]"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "x-grid"},{"type": "text","children": [],"string": " controla o esboço para o eixo x, e "},{"type": "literal","children": [],"string": "y-grid, z-grid"},{"type": "text","children": [],"string": " respectivamente para os eixos y e z. O valor padrão é "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": ", os grides não são desenhados, caso contrário, os grides são desenhados utilizando a cor dada indexada pelo valor do grid."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "grid_style: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector "},{"type": "literal","children": [],"string": "[xLineStyle, yLineStyle, zLineStyle]"},{"type": "text","children": [],"string": " of 2 or 3 line styles ids from 1 to 10 (solid, dashes, dots, etc) used to draw the grid along respective directions (in 2D or 3D). Available line styles are described "},{"type": "link","children": [],"string": "there"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "grid_thickness: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector "},{"type": "literal","children": [],"string": "[xLineThick, yLineThick, zLineThick]"},{"type": "text","children": [],"string": " of 2 or 3 positive decimal numbers setting the thickness of the grid lines along respective directions (in 2D or 3D)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "grid_position:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Este string determina a posição do grido comparada às outras entidades gráficas. Seu valor pode ser "},{"type": "literal","children": [],"string": "\"foreground\""},{"type": "text","children": [],"string": " para desenhar o grid à frente das outras entidades ou "},{"type": "literal","children": [],"string": "\"background\""},{"type": "text","children": [],"string": " para desenhar o grid atrás."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_location:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "especifica a localização do eixo y. Os valores possíveis são:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"bottom\""},{"type": "text","children": [],"string": ". Neste caso, o eixo y é desenhado na parte direita do retângulo de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"top\""},{"type": "text","children": [],"string": ". Neste caso, o eixo y é desenhado na parte esquerda do retângulo de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"middle\""},{"type": "text","children": [],"string": " . Neste caso, o eixo y é desenhado na posição mais próxima da coordenada 0 do eixo x."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y_location:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "especifica a localização do eixo y. Os valores possíveis são:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"left\""},{"type": "text","children": [],"string": ". Neste caso, o eixo y é desenhado na parte direita do retângulo de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"right\""},{"type": "text","children": [],"string": ". Neste caso, o eixo y é desenhado na parte esquerda do retângulo de eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"middle\""},{"type": "text","children": [],"string": ". Neste caso, o eixo y é desenhado na posição mais próxima da coordenada 0 do eixo x."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um objeto anexado à entidade de eixos que retorna um manipulador gráfico de uma estrutura label (rótulo) (ver "},{"type": "link","children": [],"string": "label_properties"},{"type": "text","children": [],"string": "). Este campo define um título com opções sobre este label."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_label:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um objeto anexado à entidade de eixos que retorna um manipulador gráfico de uma estrutura label (ver "},{"type": "link","children": [],"string": "label_properties"},{"type": "text","children": [],"string": "). Este campo define um label sobre o eixo x com opções sobre este label."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y_label:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um objeto anexado à entidade de eixos que retorna um manipulador gráfico de uma estrutura label (ver "},{"type": "link","children": [],"string": "label_properties"},{"type": "text","children": [],"string": "). Este campo define um label sobre o eixo y com opções sobre este label."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z_label:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um objeto anexado à entidade de eixos que retorna um manipulador gráfico de uma estrutura label (ver "},{"type": "link","children": [],"string": "label_properties"},{"type": "text","children": [],"string": "). Este campo define um label sobre o eixo z com opções sobre este label."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_ticks:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor de strings "},{"type": "literal","children": [],"string": "1x3"},{"type": "text","children": [],"string": " fornecendo o status auto_ticks para cada eixo. Esta propriedade especifica se cada eixo é graduado utilizando-se um algoritmo computacional ou não (graduações feitas pelo usuário). Os valores podem ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " para ajuste global. Para agir em um único eixo, a sintaxe é "},{"type": "literal","children": [],"string": "auto_ticks(N)"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "N"},{"type": "text","children": [],"string": " é "},{"type": "literal","children": [],"string": "1,2"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " correspondentes aos eixos "},{"type": "literal","children": [],"string": "x,y"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "z"},{"type": "text","children": [],"string": ". Note que a edição de tiques (textos e/ou localizações) via "},{"type": "literal","children": [],"string": "x_ticks, y_ticks"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "z_ticks"},{"type": "text","children": [],"string": " ajusta automaticamente "},{"type": "literal","children": [],"string": "auto_ticks"},{"type": "text","children": [],"string": " para "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " para os eixos correspondentes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_ticks, y_ticks, z_ticks: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Cada uma dessas propriedades é um tlist do tipo \"ticks\" com dois campos chamados \"locations\" e \"labels\": tlist "},{"type": "literal","children": [],"string": " ([\"ticks\" \"locations\", \"labels\"], Locations, Labels)"},{"type": "text","children": [],"string": ", onde "},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Locations"},{"type": "listitem","children": [{"type": "text","children": [],"string": "é um vetor de reais contendo os locais de grandes formaturas junto e de acordo com a escala de dados dos dados x ou eixo y ou z. Quando o número de grandes formaturas não tem que ser mudado, a sua localização pode ser definida ou alterada através a sintaxe (por exemplo, ao longo de x) "},{"type": "literal","children": [],"string": "Haxes.x_ticks.locations = Locations"},{"type": "text","children": [],"string": ", onde "},{"type": "literal","children": [],"string": "Haxes = gca ();"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "Locations"},{"type": "text","children": [],"string": " é o vetor completo de posições atualizados formaturas. Para alterar apenas a localização om, basta usar: "},{"type": "literal","children": [],"string": "Haxes.x_ticks.locations(i) = newLoc"}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Labels"},{"type": "listitem","children": [{"type": "text","children": [],"string": "é um vetor de textos contendo as etiquetas a serem exibidos na frente de cada um dos principais graduação relacionados. Quanto aos locais de formaturas, Locations podem ser tratadas com (por exemplo, ao longo de y) "},{"type": "literal","children": [],"string": "Haxes.y_ticks.labels = Labels"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "Haxes.y_ticks.labels(j) = newLabelJ"},{"type": "text","children": [],"string": " "},{"type": "para","children": [{"type": "text","children": [],"string": "Vertical or tilted ticks labels can be yielded using LaTeX formating with "},{"type": "literal","children": [],"string": "\\rotatebox{angle}{text}"},{"type": "text","children": [],"string": ". See the "},{"type": "link","children": [],"string": "example"},{"type": "text","children": [],"string": " below."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Interpreters"},{"type": "listitem","children": [{"type": "text","children": [],"string": "is a text vector containing the interpreters to be used to render the strings. As for Locations of ticks, Interperters can be addressed with (e.g. along y) "},{"type": "literal","children": [],"string": "Haxes.y_ticks.interpreters = Interpreters"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "Haxes.y_ticks.interpreters(j) = newInterpretersJ"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [{"type": "text","children": [],"string": "Allowed values: "},{"type": "literal","children": [],"string": "\"auto\""},{"type": "text","children": [],"string": " (the default), "},{"type": "literal","children": [],"string": "\"latex\""},{"type": "text","children": [],"string": ",  "},{"type": "literal","children": [],"string": "\"mathml\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": ".  See "},{"type": "link","children": [],"string": "LaTeX expressions"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "warning","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "For an axis, "},{"type": "literal","children": [],"string": "Locations"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "Labels"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "Interpreters"},{"type": "text","children": [],"string": " vectors must have the same number of components."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "When the number of ticks must be changed, their positions, labels and interpreters  must be changed at once, in order to avoid any mismatch: The syntax (e.g. along x) "},{"type": "literal","children": [],"string": "Haxes.x_ticks = tlist([\"ticks\" \"locations\", \"labels\", \"interpreters\"], newLocations, newLabels, newInterpreters)"},{"type": "text","children": [],"string": " must then be used. If \"interpreters\" is not specified in the tlist, the \"interpreters\" field is automatically set to \"auto\"."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Changing by hand the "},{"type": "literal","children": [],"string": "Locations"},{"type": "text","children": [],"string": " or/and "},{"type": "literal","children": [],"string": "Labels"},{"type": "text","children": [],"string": " of an axis automatically sets its "},{"type": "literal","children": [],"string": ".auto_ticks"},{"type": "text","children": [],"string": " status to "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". This cancels its auto-regraduation under resizing of the figure."}],"string": []}],"string": []},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_ticks.locations, y_ticks.locations, z_ticks.locations:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Cada uma destas propriedades é um vector real, com as localizações das graduações nos x relacionados ou eixo y ou z. "},{"type": "varname","children": [],"string": "x_ticks.locations"},{"type": "text","children": [],"string": " deve ter o mesmo número de componentes como "},{"type": "varname","children": [],"string": "x_ticks.labels"},{"type": "text","children": [],"string": ". Veja "},{"type": "varname","children": [],"string": "x_ticks"},{"type": "text","children": [],"string": " aqui acima para mais detalhes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_ticks.labels, y_ticks.labels, z_ticks.labels:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Cada uma destas propriedades é um vector que contém o texto de etiquetas a serem expostos na frente de grandes carrapatos no eixo x relacionada ou y ou z. "},{"type": "varname","children": [],"string": "x_ticks.labels"},{"type": "text","children": [],"string": " deve ter o mesmo número de componentes como "},{"type": "varname","children": [],"string": "x_ticks.locations"},{"type": "text","children": [],"string": ". Veja "},{"type": "varname","children": [],"string": "x_ticks"},{"type": "text","children": [],"string": " aqui acima para mais detalhes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_ticks.interpreters, y_ticks.interpreters, z_ticks.interpreters: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Each of these properties is a text vector containing the interpreters  to be used to render the strings. "},{"type": "varname","children": [],"string": "x_ticks.interpreters"},{"type": "text","children": [],"string": " must have the same number of components as "},{"type": "varname","children": [],"string": "x_ticks.locations"},{"type": "text","children": [],"string": ". See "},{"type": "varname","children": [],"string": "x_ticks"},{"type": "text","children": [],"string": " hereabove for more details."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ticks_format: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This property specifies the format to use for each axes. It is a row vector with at most 3 columns containing strings format (as specified for "},{"type": "link","children": [],"string": "mprintf"},{"type": "text","children": [],"string": "). Each ticks position will be used to format the string used as label."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "So, for example ticks_format=\"%.2e\" will print ticks positions in using scientific notation with two decimals."},"string": []},{"type": "warning","children": [{"type": "text","children": [],"string": "Labels are actually updated according to the newly set "},{"type": "literal","children": [],"string": ".ticks_format(i)"},{"type": "text","children": [],"string": " only if the "},{"type": "literal","children": [],"string": ".auto_ticks(i)"},{"type": "text","children": [],"string": " status of the axis #i is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Otherwise, "},{"type": "literal","children": [],"string": ".ticks_format(i)"},{"type": "text","children": [],"string": " is recorded without being immediately used."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ticks_st: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This property specifies scale-translate factors to apply to each ticks position before to use it in the formatted string used as label. So if the factors are "},{"type": "literal","children": [],"string": "[x_s y_s z_s ; x_t y_t z_t]"},{"type": "text","children": [],"string": " and if a x_tick is positioned at X, the value used to format the label will be "},{"type": "literal","children": [],"string": "x_s*(X-x_t)"},{"type": "text","children": [],"string": ". It could be particularly useful when the axes bounds are too closed. "},{"type": "para","children": {"type": "text","children": [],"string": "It is a matrix with 2 rows and at most 3 columns."},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "So, for example "},{"type": "literal","children": [],"string": "base=B"},{"type": "text","children": [],"string": ", labels could be printed with "},{"type": "literal","children": [],"string": "ticks_format=string(base)+\"%+.2e\""},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "ticks_st=[1 base]"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sub_ticks:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade determina o número de subtiques a serem desenhados entre dois tiques principais. O valor de campo é o vetor "},{"type": "literal","children": [],"string": "[nx,ny]"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "nx"},{"type": "text","children": [],"string": " é o número de subtiques para o eixo x e "},{"type": "literal","children": [],"string": "ny"},{"type": "text","children": [],"string": " é o correspondente para o eixo y."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade especifica se os eixos devem ser encerrados por uma caixa. Seu valor pode ser "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"hidden_axes\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"back_half\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"on\"."},{"type": "text","children": [],"string": " Se o valor for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", a caixa não é desenhada. Se a propriedade for "},{"type": "literal","children": [],"string": "\"hidden_axes\""},{"type": "text","children": [],"string": ", apenas a moldura de trás é desenhada. Se o valor for "},{"type": "literal","children": [],"string": "\"back_half\""},{"type": "text","children": [],"string": ", os eixos X, Y e Z são desenhados também. Se a propriedade for "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " , a caixa toda é desenhada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filled:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta propriedade especifica se o plano de fundo dos eixos devem ser desenhados ou não. Seu valor pode ser "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"on\"."},{"type": "text","children": [],"string": " Se o valor for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", o plano de fundo não é desenhado e a caixa de eixos é transparente. Se a propriedade for "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " , o plano de fundo é desenhado utilizando-se a cor especificada pela propriedade "},{"type": "literal","children": [],"string": "background"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica a fonte a ser utilizada para exibir os rótulos. É um inteiro positivo que faz referência a uma das fontes carregadas. Seu valor deve estar entre 0, referenciando a primeira fonte e o número de fontes carregadas menos um, referenciando a última fonte carregada. Para mais informações, ver "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_size:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um inteiro especificando o tamanho da fonte usada para para os rótulos dos tiques. Se a propriedade "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " , apenas a parte inteira do valor é utilizada. Para mais informações, ver "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_color:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "esta propriedade determina a cor dos rótulos dos tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fractional_font:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade especifica se os rótulos dos tiques serão exibidos com tamanhos de fonte fracionários. Seu valor pode ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " , o valor em ponto flutuante de "},{"type": "literal","children": [],"string": "font_size"},{"type": "text","children": [],"string": " é usado para exibição e a fonte não possui outro nome. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " apenas a parte inteira é utilizada e a fonte não é suavizada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isoview:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade é utilizada para se obter escalas isométricas para os eixos x, y e z (por exemplo, para fazer com que a exibição da curva sin(x) versus cos(x) seja um círculo, não uma elipse). Os valores podem ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se o valor for "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", os "},{"type": "literal","children": [],"string": "data_bounds"},{"type": "text","children": [],"string": " dos eixos mudam automaticamente de acordo com os valores da propriedade de figura correspondente "},{"type": "literal","children": [],"string": "figure_size"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cube_scaling:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade é utilizada no modo "},{"type": "literal","children": [],"string": "3d mode "},{"type": "text","children": [],"string": " para se obter uma nova escala para os eixos x, y e z. De fato, permite que os dados se encaixem em um cubo 1x1x1; o objetivo é uma melhor visualização de gráficos 3d caso as escalas dos eixos se diferenciem muito umas das outras. Os valores podem ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (que é o valor padrão). Na maior parte dos casos, ajuda a gerar uma visualização 3d semelhante a do Matlab."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "view:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo é relacionado ao universo gráfico. Toma "},{"type": "literal","children": [],"string": "\"3d\""},{"type": "text","children": [],"string": " como valor correspondente a visualizações em três dimensões. Em outros casos, pode ser "},{"type": "literal","children": [],"string": "\"2d\""},{"type": "text","children": [],"string": " para esboço inicial 2d (valor padrão). Este flag também depende dos esboços com os quais o usuário entra: um comando "},{"type": "literal","children": [],"string": "plot3d "},{"type": "text","children": [],"string": "por exemplo, vai alternar o flag "},{"type": "literal","children": [],"string": "view"},{"type": "text","children": [],"string": " de "},{"type": "literal","children": [],"string": "\"2d\""},{"type": "text","children": [],"string": " para "},{"type": "literal","children": [],"string": "\"3d\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rotation_angles: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Coordenadas esféricas "},{"type": "literal","children": [],"string": "[alpha, theta]"},{"type": "text","children": [],"string": " = "},{"type": "literal","children": [],"string": "[polAngle, azimuth]"},{"type": "text","children": [],"string": " de obsevação (em graus): "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "theta"},{"type": "text","children": [],"string": ": azimuth angle in the (x,y) plane. Particular angles, for (x,y) seen from (O,z): "}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "alpha"},{"type": "text","children": [],"string": ": polar angle from (Oz), in planes orthogonal to (x,y). Particular values: "}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "log_flags:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string de três caracteres que ajusta a escala (linear ou logarítmica) o longo dos eixos. Cada caractere especifica a escala para os eixos x, y e z respectivamente. Os valores podem ser "},{"type": "literal","children": [],"string": "'n'"},{"type": "text","children": [],"string": " para escala "},{"type": "emphasis","children": [],"string": "n"},{"type": "text","children": [],"string": "ormal, ou "},{"type": "literal","children": [],"string": "'l'"},{"type": "text","children": [],"string": " para escala "},{"type": "emphasis","children": [],"string": "l"},{"type": "text","children": [],"string": "ogarítmica."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tight_limits:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "se está propriedade for "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " os eixos se adaptam para se encaixarem dentro dos valores máximos e mínimos de "},{"type": "literal","children": [],"string": "data_bounds"},{"type": "text","children": [],"string": ". Se o campo for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", os eixos podem aumentar os limites de modo a produzir rótulos de tiques convenientes."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data_bounds:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém os valores de limite para as coordenadas x,y e z. É a matriz ou vector "},{"type": "literal","children": [],"string": "[xmin,ymin; xmax,ymax]"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "[xmin,ymin,zmin; xmax,ymax,zmax]"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "[xmin,xmax,ymin,ymax]"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "[xmin,xmax,ymin,ymax,zmin,zmax]"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "[xmin;xmax;ymin;ymax]"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "[xmin;xmax;ymin;ymax;zmin;zmax]"},{"type": "text","children": [],"string": ". Note que, para ter estritamente os limites de dados especificados, "},{"type": "literal","children": [],"string": "tight_limits"},{"type": "text","children": [],"string": " deve ser ajustado para "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (ver acima)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "zoom_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém a caixa de zoom corrente, se forem fornecidas quaisquer coordenadas. É uma matriz vazia (sem zoom) ou vetor "},{"type": "literal","children": [],"string": "[xmin,ymin,xmax,ymax,zmin,zmax]"},{"type": "text","children": [],"string": " (define um retângulo dado por dois vértices opostos )."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "margins:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um vetor "},{"type": "literal","children": [],"string": "[margin_left,margin_right,margin_top,margin_bottom]"},{"type": "text","children": [],"string": " especificando a porção das margens para estes eixos. Este vetor é composto de números em [0 1] com valores padrões: [0.125 0.125 0.125 0.125] (estes números são razões relativas aos valores correspondentes da propriedade de figura "},{"type": "literal","children": [],"string": "figure_size"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_bounds: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vector "},{"type": "literal","children": [],"string": "[x_left, y_top, width, height]"},{"type": "text","children": [],"string": " of four decimal numbers in [0, 1] specifying the portion of figure or frame used by this axes: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "x_left"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "y_top"},{"type": "text","children": [],"string": " set the position of the top-left corner of the axes area, with respect to the top-left corner of the embedding figure or frame."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "width"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "height"},{"type": "text","children": [],"string": " set the dimensions of the axes area. 1 stands for the full width or height of the embedding figure or frame."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "These numbers are relative to the "},{"type": "literal","children": [],"string": "gca().parent.position(3:4)"},{"type": "text","children": [],"string": " [width, height] dimensions of the figure or of the Uicontrol frame embedding the axes."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hidden_axis_color:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "esta propriedade define a cor do eixo escondido. É um índice relativo ao mapa de cores corrente."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode armazenar qualquer variável Scilab na estrutura de dados de eixos e recuperá-la."},"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Propriedades para funções de alto-nível"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "As funções "},{"type": "literal","children": [],"string": "plot"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "plot2dx"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "grayplot"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "matplot"},{"type": "text","children": [],"string": " utilizam as propriedades seguintes para decidir como misturar esboços consecutivos se isto não for declarado pelo argumento de chamada "},{"type": "literal","children": [],"string": "frameflag"},{"type": "text","children": [],"string": " calling argument. O resultado da mistura é decidido através destas duas propriedades:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_clear:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ": calling any high level graphic function targeting the axes "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "erases all children of the axes,"},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "resets its "},{"type": "literal","children": [],"string": ".log_flags"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": ".data_bounds"},{"type": "text","children": [],"string": " properties to their default value"}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "keeps its other properties"},"string": []}],"string": []},{"type": "text","children": [],"string": " before performing the drawing."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ": the forthcoming drawings are overplotted in the axes according to the "},{"type": "literal","children": [],"string": "\"auto_scale\""},{"type": "text","children": [],"string": " rule and other properties."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_scale:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Property enabling the auto update of "},{"type": "literal","children": [],"string": ".data_bounds"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ": Each new plot enlarges "},{"type": "literal","children": [],"string": ".data_bounds"},{"type": "text","children": [],"string": " values according to boundaries of added data, if required. "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ": Default or explicitly initialized values of "},{"type": "literal","children": [],"string": ".data_bounds"},{"type": "text","children": [],"string": " are not modified."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Valores padrões dos galhos: "},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hiddencolor:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "esta propriedade controla as cores das partes escondidas. Toma como valor um índice relativo ao mapa de cores corrente. Em outro caso, se for um valor negativo, as partes escondidas tomam a mesma cor que a superfície."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade line_mode para objetos Segs, Rectangle, Legend, Axis, Plot3d, Fac3d, e Polyline. Seus valores podem ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " (padrão) ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " para objetos Segs, Arcs, Rectangle e Polyline. "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " seleciona o tipo de linha que será utilizado nos desenhos de linhas. Seu valor deve ser um inteiro no intervalo [0 6]. 0 e 1 significam linhas sólidas, os outros selecionam linhas tracejadas."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " para todos os objetos que utilizam linhas. Seu valor deve ser um inteiro positivo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " para os objetos Segs, Rectangle, Legend, Axis, Plot3d, Fac3d e Polyline. Seu valor pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (padrão)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " para objetos Segs, Rectangle, Legend, Axis, Plot3d, Fac3d e Polyline. "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " seleciona o tipo de marca a ser exibida. Seu valor deve ser um inteiro no intervalo [0 9] que significa: ponto, sinal de mais, cruz, estrela, diamante preenchido, diamante, triângulo para cima, triângulo para baixo, trevo ou círculo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size_unit:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " para objetos Segs, Rectangle, Legend, Axis, Plot3d, Fac3d e Polyline. Se "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " é ajustado para "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": ", então o valor de "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " é diretamente fornecido em pontos. Quando "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " é ajustado para "},{"type": "literal","children": [],"string": "\"tabulated\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " é computado de acordo com o array de tamanho de fonte: logo seu valor deve ser um inteiro no intervalo [0 5] que significa 8pt, 10pt, 12pt, 14pt, 18pt e 24pt. Note que "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " e funções puras do Scilab utilizam o modo "},{"type": "literal","children": [],"string": "tabulated"},{"type": "text","children": [],"string": " como padrão; ao utilizar-se a função "},{"type": "link","children": [],"string": "plot"},{"type": "text","children": [],"string": " o modo "},{"type": "literal","children": [],"string": "point"},{"type": "text","children": [],"string": " é automaticamente habilitado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " para objetos Segs, Rectangle, Legend, Axis, Plot3d, Fac3d, e Polyline. "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " seleciona o tamanho de fonte da marca ser exibida. Deve ser um valor inteiro entre [0 5] que significa 8pt, 10pt, 12pt, 14pt, 18pt e 24pt."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_foreground:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " criados sob os eixos. Objetos Polyline, Rectangle, Legend, Surface, Segment e Axis utilizam esta propriedade para especificar uma cor de primeiro plano (borda) para suas marcas. O valor deve ser um índice de cor relativo ao mapa de cores corrente. Note que o valor padrão é "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " (preto padrão) e, mesmo que você mude o "},{"type": "literal","children": [],"string": "color_map"},{"type": "text","children": [],"string": ", este valor "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " sempre apontará para a cor preta padrão."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_background:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " para todos os objetos criados sob os eixos. objetos Polyline, Rectangle, Legend, Surface, Segment e Axis utilizam esta propriedade para especificar uma cor de plano de fundo (face) para suas marcas. O valor deve ser um índice de cor relativo ao mapa de cores corrente. Note que o valor padrão é "},{"type": "literal","children": [],"string": "-2"},{"type": "text","children": [],"string": " (branco padrão) e, mesmo que você mude o "},{"type": "literal","children": [],"string": "color_map"},{"type": "text","children": [],"string": ", este valor "},{"type": "literal","children": [],"string": "-2"},{"type": "text","children": [],"string": " sempre apontará para a cor branca padrão."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "foreground"},{"type": "text","children": [],"string": " para eixos e para todos os objetos criados sob os eixos. O valor deve ser um índice de cor relativo ao mapa de cores corrente. Note que o valor padrão é "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " (preto padrão) e, mesmo que você mude o "},{"type": "literal","children": [],"string": "color_map"},{"type": "text","children": [],"string": ", este valor "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " sempre apontará para a cor preta padrão."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo controla o valor padrão da propriedade "},{"type": "literal","children": [],"string": "background"},{"type": "text","children": [],"string": " para os eixos e para objetos criados sob os eixos. O valor deve ser um índice de cor relativo ao mapa de cores corrente. Note que o valor padrão é "},{"type": "literal","children": [],"string": "-2"},{"type": "text","children": [],"string": " branco padrão) e mesmo que você mude o "},{"type": "literal","children": [],"string": "color_map"},{"type": "text","children": [],"string": ", este valor "},{"type": "literal","children": [],"string": "-2"},{"type": "text","children": [],"string": " sempre apontará para a cor branca padrão."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arc_drawing_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo controla o valor padrão da propriedade default "},{"type": "literal","children": [],"string": "arc_drawing_mode"},{"type": "text","children": [],"string": " para todos os objetos Arc criados sob este objeto Axes. Seu valor pode ser "},{"type": "literal","children": [],"string": "\"nurbs\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"lines\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " para todos os objetos. Seu valor pode ser:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " isto indica todos os objetos criados depois que não estão recortados (valor padrão)."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " isto indica todos os objetos criados depois que estão recortados fora das fronteiras dos eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " isto indica todos os objetos criados depois que estão recortados fora do retângulo através da propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " para todos os objetos. Deve ser uma matriz vazia se clip_state for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Em outro caso, o recorte é dado por "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura, altura)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Nota sobre valores padrões:"},{"type": "listitem","children": {"type": "variablelist","children": {"type": "varlistentry","children": {"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Todas essas propriedades e campos listados herdam de valores padrões armazenados em um modelo de eixos. Estes valores podem ser visualizados e modificados. Para isto, utilize o comando "},{"type": "literal","children": [],"string": "get(\"default_axes\")"},{"type": "text","children": [],"string": " command : ele retorna o manipulador gráfico do modelo de eixos. Note que nenhuma janela de gráficos é criada por este comando. Note que os próximos eixos criados herdarão deste modelo (ver \"exemplo sobre modelo de eixos\" abaixo)"}],"string": []},"string": []},"string": []},"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"gca": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gca"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o manipulador da entidade Axes corrente "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "a = gca()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador, o manipulador da entidade Axes corrente."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["sca", "gda", "gcf", "gce", "get", "graphics_entities"]},"gda": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gda"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o manipulador dos eixos padrões."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["a = gda()", "a = get(\"default_axes\")"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o manipulador dos eixos padrões."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["gdf", "sda", "sdf", "clf", "gca", "get", "graphics_entities"]},"isoview": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isoview"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tunes isometric rendering of graphical axes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["isoview", "isoview on", "isoview off", "isoview(idGraphics)", "isoview(idGraphics,\"on\"|\"off\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"on\" | \"off\" | <none>"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Enables or disables or switches the isometric rendering for all considered axes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "idGraphics"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vector of graphic handles. All the related axes are processed. By default, the current axes is processed. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["replot", "axes_properties"]},"newaxes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "newaxes"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cria uma nova entidade Axes (de eixos)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["a = newaxes()", "a = newaxes(h)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Optional handle of the graphic parent of the new axes, of type "},{"type": "literal","children": [],"string": "Figure"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "Uicontrol"},{"type": "text","children": [],"string": " of style "},{"type": "literal","children": [],"string": "Frame"},{"type": "text","children": [],"string": ". By default, the current figure is used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o manipulador para a nova entidade Axes criada"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot_multiscaled", "subplot", "xsetech", "gda", "sca"]},"replot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "replot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "reformula a área de exibição de um ou mais gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["replot()", "replot(area)", "replot(idAxes)", "replot(area, idAxes)", "replot(.., tight_limits)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "area"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "matrix "},{"type": "literal","children": [],"string": "[xmin xmax ; ymin ymax]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "[xmin xmax ; ymin ymax ; zmin zmax]"},{"type": "text","children": [],"string": ", or row "},{"type": "literal","children": [],"string": "[xmin ymin xmax ymax]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "[xmin ymin zmin xmax ymax zmax]"},{"type": "text","children": [],"string": ": new bounds of the area to be reframed. "},{"type": "text","children": [],"string": " The default area is [%inf %inf %inf %inf] for a 2D axes, or [%inf %inf %inf %inf %inf %inf] for a 3D one."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If N axes are identified in "},{"type": "literal","children": [],"string": "idAxes"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "area"},{"type": "text","children": [],"string": " may be a matrix with N rows and 4 or 6 columns. The row #i is then related to the axes #i of "},{"type": "literal","children": [],"string": "idAxes"},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "area"},{"type": "text","children": [],"string": " is only a vector of 4 or 6 bounds, these ones are used for all axes to be reframed."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "idAxes"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vector of graphic handles, expected to be of Axes type or to have direct children of type Axes, such as Figures or some frame uicontrols. "},{"type": "literal","children": [],"string": "idAxes"},{"type": "text","children": [],"string": " specifies direct or children Axes to crop. If no axes is found, nothing is done."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "By default, the current Axes is considered."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tight_limits"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single word "},{"type": "literal","children": [],"string": "\"tight\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", or vector of 2 (in 2D) or 3 (in 3D) words "},{"type": "literal","children": [],"string": "\"tight\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". If a single word is provided, it is used for every axis. This option forces the "},{"type": "literal","children": [],"string": ".tight_limits"},{"type": "text","children": [],"string": " attribute of considered axes to the specified "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " values. By default, current limits modes are unchanged."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["zoom_rect", "rubberbox", "axes_properties"]},"rotate_axes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rotate_axes"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Rotação interativa de um manipulador Axes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["rotate_axes()", "rotate_axes(h)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador Axes ou Figure. Especifica sobre qual eixo se efetuará a rotação."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["zoom_rect", "axes_properties"]},"sca": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sca"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ajusta a entidade de eixos corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "a=sca(a)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o manipulador da entidade Axes (de eixos)"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["subplot", "gda", "newaxes"]},"sda": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sda"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Redefine os eixos padrão para seus valores de fábrica"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sda()"},"varlist": [],"seealso": ["sdf", "gda", "gdf", "set", "graphics_entities"]},"subplot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "subplot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "grids the current figure or frame, and sets the current axes to a chosen cell"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["subplot(m,n,p)", "subplot(mnp)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m, n, p"},{"type": "listitem","children": [{"type": "text","children": [],"string": "integers > 0. (m,n) = numbers of rows and columns of the virtual grid. p = index of the targeted cell. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mnp"},{"type": "listitem","children": [{"type": "text","children": [],"string": "an integer with decimal notation "},{"type": "literal","children": [],"string": "mnp"},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["xsetech", "newaxes", "axes_properties"]},"unzoom": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unzoom"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Diminui a ampliação"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["unzoom()", "unzoom(H)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de manipuladores Figure ou Axes"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["zoom_rect", "axes_properties"]},"xgrid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xgrid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "add a grid on a 2D or 3D plot"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xgrid", "xgrid(color)", "xgrid(color, thickness)", "xgrid(color, thickness, style)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer or a row vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or a row vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer or a row vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["axes_properties", "plot2d"]},"xsetech": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xsetech"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ajusta a sub-janela de uma janela de gráficos para esboço"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xsetech(wrect,[frect,logflag])", "xsetech(wrect=[...],frect=[..],logflag=\"..\", arect=[...])", "xsetech()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wrect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho 4 definindo a sub-janela a ser utilizada."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "frect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho 4. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "logflag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string de tamanho 2 \"xy\", onde x e y podem ser \"n\" ou \"l\". \"n\" escala normal e \"l\" significa escala logarítmica. x refere-se ao eixo x e y ao eixo y."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho 4."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"zoom_rect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zoom_rect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Amplia uma seleção da figura gráfica corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["zoom_rect()", "zoom_rect(rect)", "zoom_rect(h)", "zoom_rect(h,rect)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de tamanho 4 "},{"type": "literal","children": [],"string": "[xmin,ymin,xmax,ymax]"},{"type": "text","children": [],"string": " fornece o retângulo a ser ampliado"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador gráfico do tipo Figure ou Axes. Especifica sobre que eixos se realizará a ampliação."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["unzoom", "axes_properties"]},"axis_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "axis_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das propriedades da entidade Axis (eixo)"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Propriedades"},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador da raiz. A raiz de uma entidade Axis deve ser do tipo "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade. Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . Por padrão, o eixo é visível, a propriedade é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", o eixo não é exibido na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tics_direction:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "especifica a direção dos tiques desenhados sob os eixos horizontal e vertical. Os possíveis valores para esta propriedade são:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"top\""},{"type": "text","children": [],"string": ". Neste caso, os tiques são desenhados na parte de cima do eixo horizontal."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"bottom\""},{"type": "text","children": [],"string": ". Neste caso, os tiques são desenhados na parte de baixo do eixo horizontal."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"left\""},{"type": "text","children": [],"string": ". Neste caso, os tiques são desenhados à esquerda do eixo vertical."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"right\""},{"type": "text","children": [],"string": ". Neste caso, os tiques são desenhados à direita do eixo vertical."}],"string": []},"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Os valores padrões são "},{"type": "literal","children": [],"string": "\"top\""},{"type": "text","children": [],"string": " para o eixo horizontal e "},{"type": "literal","children": [],"string": "\"right\""},{"type": "text","children": [],"string": " para o eixo vertical."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xtics_coord:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém as coordenadas x do eixo. É um vetor linha que contém valores crescentes da esquerda para a direita que fornecem as posições dos tiques para um eixo horizontal. Em outro caso, a entidade é um eixo vertical, esta propriedade contém a escala que define a origem x do eixo."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ytics_coord:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém as coordenadas y do eixo. É um vetor linha que contém valores crescentes do fundo para o topo que fornecem as posições dos tiques para um eixo vertical. Em outro caso, a entidade é um eixo horizontal, esta propriedade contém a escala que define a origem y do eixo."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tics_color:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o valor desta propriedade é o índice da cor utilizada para desenhar as linhas dos eixos e tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tics_segment:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém um flag que controla a exibição do segmento base do eixo. O valor padrão é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", senão, sem exibição, a propriedade toma "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " como valor."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tics_style:"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "esta propriedade descreve como os tiques são dados. É um flag string que pode ter um desses valores:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"v\""},{"type": "text","children": [],"string": ". É o valor padrão. Neste caso, as posições dos tiques são dadas pelo vetor linha "},{"type": "literal","children": [],"string": "xtics_coord"},{"type": "text","children": [],"string": " para o eixo horizontal ("},{"type": "literal","children": [],"string": "ytics_coord"},{"type": "text","children": [],"string": " para o vertical)."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ". INeste caso, as posições dos tiques são dadas pelo vetor "},{"type": "literal","children": [],"string": "[min,max,n] "},{"type": "text","children": [],"string": " onde n é o número de intervalos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"i\""},{"type": "text","children": [],"string": ". Neste caso, o vetor fornecendo as posições dos tiques tem tamanho 4, "},{"type": "literal","children": [],"string": "[k1,k2,a,n]"},{"type": "text","children": [],"string": " os valores crescem entre "},{"type": "literal","children": [],"string": "k1*10^a"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "k2*10^a"},{"type": "text","children": [],"string": ", n é o número de intervalos."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sub_tics:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo ajusta o número de tiques a serem desenhados entre dois tiques principais."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tics_labels:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo é uma matriz de strings que contém strings a serem impressos ao longo dos eixos nas posições dos tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labels_font_color:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "esta propriedade determina a cor dos rótulos dos tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labels_font_size:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um inteiro especificando o tamanho da fonte utilizada para imprimir os rótulos dos tiques. Se a propriedade "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " Apenas a parte inteira do valor é utilizada. Para mais informações, veja "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fractional_font:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade especifica se os rótulos dos tiques serão exibidos utilizando-se um tamanho de fonte fracionário. Seu valor deve ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", o valor em ponto flutuante de "},{"type": "literal","children": [],"string": "font_size"},{"type": "text","children": [],"string": " é utilizado para a exibição e retira-se o serrilhamento da fonte. Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", apenas a parte inteira é utilzada e a fonte não é suavizada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " para o eixo. O valor de clip_state pode ser:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " significa que o eixo não é recortado."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " significa que o eixo é recortado fora da caixa dos eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " significa que o eixo é recortado fora do arco dado pela propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo determina a propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": ". Por padrão seu valor é uma matriz vazia se a propriedade clip_state é \"off\". Em outros casos, o vetor "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura, altura) define as porções do eixo a ser exibido, contudo o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " será alterado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode ser utilizado para armazenar qualquer variável Scilab na estrutura de dados da entidade axis e recuperá-la."},"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["drawaxis", "axes_properties", "graphics_entities", "set", "get"]},"drawaxis": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "drawaxis"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Desenha um eixo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["drawaxis([options])", "// opções:  x,y,dir,sub_int,fontsize,format_n,seg,textcolor,ticscolor,tics"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir=string"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "é utilizado para se especificar a direção dos tiques. "},{"type": "literal","children": [],"string": "string"},{"type": "text","children": [],"string": " can pode ser escolhido entre 'u','r','d','l' e 'l' é o valor padrão. Os valores 'u','r','d','l' correspondem respectivamente a \"para cima\", \"para direita\", \"para baixo\" e \"para esquerda\"."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tics=string"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um flag definindo como os tiques são fornecidos. "},{"type": "literal","children": [],"string": "string"},{"type": "text","children": [],"string": " pode ser escolhido entre 'v','r' e 'i', e , 'v' é o valor padrão."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores que fornecem as posições dos tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "val= string matrix"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de strings que, quando dada, fornece os strings a serem impressos ao longo dos eixos nas posições dos tiques."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontsize=int"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica o tamanho de fonte a ser utilizado para se exibir os valores ao longo dos eixos. O valor padrão é "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " que corresponde ao tamanho de fonte atual"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format_n=string"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "formato a ser utilizado para se exibir os números ao longo dos eixos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "seg= 1 ou 0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um flag que controla a exibição do segmento base do eixo (o valor padrão é 1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sub_int=integer"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro que fornece o número de subintervalos entre dois tiques maiores."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "textcolor=integer"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica a cor a ser utilizada para a exibição de valores ao longo dos eixos. O valor padrão é "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": ", que corresponde a cor corrente."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ticscolor=integer"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "especifica a cor a ser utilizada para o desenho dos tiques. O valor padrão é "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": ", que corresponde à cor corrente."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["plot_multiscaled", "axis_properties"]},"graduate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "graduate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "graduação de eixos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[xi,xa,np]=graduate( xmi, xma,n1,n2)", "[xi,xa,np]=graduate( xmi, xma)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmi,xma"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n1, n2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros com valores padrões 3,10 "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi, xa"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "np"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xsetech", "plot2d"]},"xgraduate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xgraduate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Graduação de eixos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[xi,xa,np1,np2,kMinr,kMaxr,ar]=xgraduate(xmi,xma)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xmi,xma"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi, xa, kMinr, kMaxr, ar"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "np1,np2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["graduate", "plot2d"]},"bar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Histograma de barras"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["bar(x, y)", "bar(x, y, width, colors, style)", "bar(x, y [,width] [,colors] [,style])", "bar(h, x, y ..)", "hdl = bar(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador de eixos, (padrão: h=gca() ). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "scalar, vector of size N, or matrix N*M of real numbers or encoded integers, with "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "N : number of groups (each group of bars gathered on/around an x position)"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "M : number of categories in each group"},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou um vetor de tamanho N, (padrão: se y é um vetor, então x is é um vetor e o comprimento de x é igual ao comprimento de y. Se y é uma matriz, então x é um vetor e o comprimento de x é igual ao número de linhas de y)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "width"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional), escalar real, define a largura (uma porcentagem do espaço disponível) para a barra (padrão: 0.8, i.e 80%)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colors"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) Single string or vector of M strings: colors names (among predefined ones) or \"#RRGGBB\" hexadecimal codes of categories colors. Default = default plot() colors series, starting with \"blue\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, 'grouped' ou 'stacked' (padrão: 'grouped')."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta saída opcional é um vetor contendo os identificadores de os objetos Polyline criados. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " para modificar propriedades de um objeto específico ou de todos os objetos polilinha após serem criados. Para uma lista de propriedades, consulte "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["barh", "barhomogenize", "histplot", "plot", "color_list", "polyline_properties", "bar3d"]},"barh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "barh"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Exibição horizontal de um histograma de barras"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["barh(y)", "barh(x,y)", "barh([h],x,y [,width [,color [,style]]])", "hdl = barh(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador de eixos, (padrão: h=gca() ). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real, vetor de tamanho N ou uma matriz NxM. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real ou um vetor de tamanho N, (padrão: se y é um vetor, então x é um vetor e o comprimento de x é igual ao comprimento de y. Se y é uma matriz, então x é um vetor e o comprimento de x é igual ao número de linhas de y)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "width"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional), escalar real, define a largura (uma porcentagem do espaço disponível) para a barra (padrão: 0.8, i.e. 80%)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional), um string (padrão: 'blue'), especificando a cor interior da barra barra."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, 'grouped' ou 'stacked' (padrão: 'grouped')."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta saída opcional é um vetor contendo os identificadores de os objetos Polyline criados. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " para modificar propriedades de um objeto específico ou de todos os objetos polilinha após serem criados. Para uma lista de propriedades, consulte "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["bar", "barhomogenize", "plot", "polyline_properties"]},"barhomogenize": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "barhomogenize"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Homogeniza todas as barras inclusas nos eixos correntes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["barhomogenize()", "barhomogenize(h)", "barhomogenize([h,] style)", "barhomogenize([h,] width)", "barhomogenize([h,] style, width)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador de eixos, (padrão: h=gca() ). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string, "},{"type": "literal","children": [],"string": "'grouped'"},{"type": "text","children": [],"string": " (padrão), ou "},{"type": "literal","children": [],"string": "'stacked'"},{"type": "text","children": [],"string": " ."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "width"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real, define a largura (uma porcentagem do espaço disponível) para a barra (padrão: 0.8)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"addcolor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "addcolor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "adiciona cores novas ao mapa de cores corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "new=addcolor(c)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "new"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "identificadores das cores definidas em c em uma nova tabela de cores"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz com 3 colunas, definição de cores RGB (vermelho, verde e azul)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colormap", "name2rgb"]},"color": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "color"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o identificador de uma cor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["id=color(name)", "id=color(r,g,b)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nome de uma cor. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r,g,b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores RGB inteiros de uma cor. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "id"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "identificador da cor."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colormap", "color_list", "getcolor"]},"color_list": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "color_list"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lista dos nomes das cores"},"string": []},"synopsis": [],"varlist": [],"seealso": ["color", "name2rgb", "rgb2name"]},"colorbar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colorbar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "draws a vertical color bar"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["colorbar", "colorbar(umin, umax)", "colorbar(umin, umax, colminmax)", "colorbar(umin, umax, -1)", "colorbar( , , [fmin fmax])", "colorbar(.., Cformat)", "h = colorbar(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "umin"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "U's lowest data value covered by the colorbar."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Using "},{"type": "literal","children": [],"string": "-%inf"},{"type": "text","children": [],"string": " sets "},{"type": "literal","children": [],"string": "umin = min(U)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When underlaying plotted data exist in the current axes, "},{"type": "literal","children": [],"string": "umin"},{"type": "text","children": [],"string": " may be skipped -- using colorbar(,..) -- in order to extract and implicitly use min(U)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "umax"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "U's biggest data value covered by the colorbar."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Using "},{"type": "literal","children": [],"string": "%inf"},{"type": "text","children": [],"string": " sets "},{"type": "literal","children": [],"string": "umax = max(U)"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When underlaying plotted data exist in the current axes, "},{"type": "literal","children": [],"string": "umax"},{"type": "text","children": [],"string": " may be skipped -- using colorbar(.., ,..) -- in order to extract and implicitly use max(U)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colminmax"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "implicit or explicit vector "},{"type": "literal","children": [],"string": "[colmin, colmax]"},{"type": "text","children": [],"string": " specifying the range of colors that span on the colorbar, corresponding to the "},{"type": "literal","children": [],"string": "[umin, umax]"},{"type": "text","children": [],"string": " chosen data bounds."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "colmin"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "colmax"},{"type": "text","children": [],"string": " are indices of colors in the current colormap, with "},{"type": "literal","children": [],"string": "1 ≤ colmin < colmax ≤ Nc"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Default setting: "},{"type": "literal","children": [],"string": "[1,Nc]"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The dollar $ symbol can be used, standing for Nc. For example, "},{"type": "literal","children": [],"string": "colminmax=[1 $/2]"},{"type": "text","children": [],"string": " will use the first half of the colormap, and "},{"type": "literal","children": [],"string": "colminmax=[$/2+1, $]"},{"type": "text","children": [],"string": " will use the second half."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Fractional bounds "},{"type": "literal","children": [],"string": "[fmin, fmax]"},{"type": "text","children": [],"string": " may also be specified, as well as using the special value "},{"type": "literal","children": [],"string": "colminmax=-1"},{"type": "text","children": [],"string": ". Please see the description section for more details."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Cformat"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "word providing a C-format formatting the display of graduated values along the colorbar. The formatting syntaxes are described in the "},{"type": "link","children": [],"string": "printf_conversion"},{"type": "text","children": [],"string": " page."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This optional output contains a handle to the created colorbar Axes entity."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colormap", "Matplot", "Sgrayplot", "surf", "champ", "printf_conversion"]},"getcolor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getcolor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "abre um diálogo que exibe as cores no mapa de cores atual ou padrão corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["c = getcolor()", "c = getcolor(title)", "c = getcolor(title, cini)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o título do diálogo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cini"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número da cor selecionada inicial. O valor padrão é 1."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número da cor selecionada, ou [] se o usuário tiver clicado no botão \"Cancel\" (cancelar)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uigetcolor", "color_list", "color", "colormap"]},"hsv2rgb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hsv2rgb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Converte cores HSV para RGB"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[r,g,b] = hsv2rgb(h,s,v)", "rgb = hsv2rgb(h,s,v)", "[r,g,b] = hsv2rgb(hsv)", "rgb = hsv2rgb(hsv)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de tamanho n. Os valores \"hue\" (de matiz) "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de tamanho n. Os valores \"saturation\" (de saturação)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de tamanho n. Os valores \"value\" (de valor). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hsv"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz n x 3. Cada linha contém uma tripla [hue saturation value]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor coluna de tamanho n. Os valores \"red\" (de vermelho)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor coluna de tamanho n. Os valores \"green\" (de verde)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor coluna de tamanho n. Os valores \"blue\" (de azul)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rgb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz n x 3. Cada linha contém uma tripla [red green blue]."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"name2rgb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "name2rgb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna valores RGB correspondentes ao nome da cor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "rgb = name2rgb(name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nome da cor (insensível a maiúsculas)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rgb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de valores RGB inteiros de uma cor "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["color", "color_list", "rgb2name"]},"rgb2name": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rgb2name"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o nome de uma cor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["names=rgb2name(r,g,b)", "names=rgb2name(rgb)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r,g,b"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "RGB (vermelho, verde, azul) valores inteiros de uma cor."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rgb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor RGB de valores inteiros de uma cor. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nomes da cor."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["color", "color_list", "name2rgb"]},"uigetcolor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uigetcolor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Opens a dialog for selecting a color."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["uigetcolor()", "RGB = uigetcolor()", "RGB = uigetcolor(defaultRGB)", "RGB = uigetcolor(defaultRed, defaultGreen, defaultBlue)", "RGB = uigetcolor(title, ..)", "[R, G, B] = uigetcolor()", "[R, G, B] = uigetcolor(defaultRGB)", "[R, G, B] = uigetcolor(defaultRed, defaultGreen, defaultBlue)", "[R, G, B] = uigetcolor(title, ..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: Optional argument, the title to display in the dialog. Default value is \"Color Chooser\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "defaultRGB"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1x3 vector [red, green, blue] of default values in [0, 255] for Red, Green and Blue intensities."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "defaultRed, defaultGreen, defaultBlue"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Integers in [0, 255]: Scalar default values for Red, Green, and Blue intensities."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RGB"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1x3 vector [red, green, blue] of values in [0, 255] for Red, Green and Blue intensities, or [] if the user cancels."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "R, G, B"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Integers in [0, 255]: Scalar values for Red, Green and Blue intensities, or [] if the user cancels."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "getcolor"},"colormap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colormap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set and/or get a figure colormap."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["cmap = colormap()", "cmap = colormap(h)", "cmap = colormap(m)", "cmap = colormap(h, m)", "colormap(m)", "colormap(h, m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A figure handle. If not given the current figure is used (See "},{"type": "link","children": [],"string": "gcf"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A string (function name), a function, a Nx3 double matrix or "},{"type": "literal","children": [],"string": "\"default\""},{"type": "text","children": [],"string": " (to reset colormap to the default one). The color map to be used."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colormaps", "jet", "parula", "gcf"]},"colormaps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colormaps"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mapa de cores"},"string": []},"synopsis": [],"varlist": [],"seealso": ["autumn", "bone", "cool", "copper", "gray", "hot", "hsv", "jet", "ocean", "pink", "rainbow", "spring", "summer", "white", "winter", "color", "getcolor", "colordef"]},"predefined_colormaps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Predefined colormaps"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Overview of predefined colormaps."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["cmap = $colormapfunction$() // Replace $colormapfunction$ by the name of a function described below", "cmap = $colormapfunction$(n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer value, the colormap size."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If not provided, the size will the size of the current (See "},{"type": "link","children": [],"string": "gcf()"},{"type": "text","children": [],"string": ") figure colormap, or the size of the default (See "},{"type": "link","children": [],"string": "gdf()"},{"type": "text","children": [],"string": ") figure colormap (if no figure is opened)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cmap"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix with 3 columns "},{"type": "literal","children": [],"string": "[R,G,B]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["colormaps", "colormap"]},"datatip_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "propriedades das datatips"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descição das propriedades para a entidade Datatip."},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "handle of the curve the datatip is plugged on."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "unused."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "\"on\": the datatip is displayable according to the "},{"type": "literal","children": [],"string": "parent.datatip_display_mode"},{"type": "text","children": [],"string": " setting."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "\"off\": the datatip display is canceled anyway."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Cartesian coordinates of the datatip's anchor on its curve, in data scales. For curves in special not-cartesian grids (after polarplot(), sgrid(), etc), "},{"type": "varname","children": [],"string": ".data"},{"type": "text","children": [],"string": " contains the raw equivalent cartesian coordinates."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of texts to be displayed (as a matrix) in the datatip label. Leading and trailing spaces are all trimmed. In each cell, the text is centered."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esse campo controla a interpolação utilizada para posicionar a datatip. Quando este valor é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " é aplicada uma interpolação linear entre a malha de pontos no posicionamento das datatips, quando seu valor é "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " as datatips so podem ser posicionadas sobre os pontos contidos na malha."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esse campo contêm o valor padrão para a propriedade "},{"type": "literal","children": [],"string": "box_mode"},{"type": "text","children": [],"string": " das datatips. Quando este valor é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " a caixa envoltória é desenhada, quando o valor é "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " nenhuma caixa é desenhada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "label_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esse campo contêm o valor padrão para a propriedade "},{"type": "literal","children": [],"string": "label_mode"},{"type": "text","children": [],"string": " das datatips. Quando este valor é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " os rótulos são desenhados, quando o valor é "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " nenhuma rótulo é desenhado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "display_components: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Esse campo controla quais componentes são desenhadas. Quando em 2D, seu valor padrão é "},{"type": "literal","children": [],"string": "\"xy\""},{"type": "text","children": [],"string": ", para 3D seu valor padrão é "},{"type": "literal","children": [],"string": "\"xyz\""},{"type": "text","children": [],"string": ". Possíveis valores para este campo incluem qualquer combinação de "},{"type": "literal","children": [],"string": "\"x\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"y\""},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "\"z\""},{"type": "text","children": [],"string": ". Alguns exemplos para este campo são "},{"type": "literal","children": [],"string": "\"zy\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"xzy\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"xz\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"y\""},{"type": "text","children": [],"string": " e assim por diante."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "As componentes sao desenhadas na mesma ordem em que são encontradas na string."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "display_function: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Este campo controla a posição da caixa de texto em respeito ao ponto de âncora na polyline. Os possíveis valores são 0 (esquerdo superior), 1 (direito superior), 2 (esquerdo inferior), 3 (direito inferior), 4 (esquerda), 5 (direita), 6 (superior) ou 7 (inferior)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_orientation: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esse campo contêm o valor padrão para a propriedade "},{"type": "literal","children": [],"string": "auto_orientation"},{"type": "text","children": [],"string": " das datatips. Quando este valor é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " a orientação é automatica, quando o valor é "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " a orientação é dada pelo campo "},{"type": "literal","children": [],"string": "orientation"},{"type": "text","children": [],"string": ". Veja a propriedade "},{"type": "literal","children": [],"string": "orientation"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "detached_position: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field sets the position "},{"type": "literal","children": [],"string": "[x y z]"},{"type": "text","children": [],"string": " of the bottom left corner of the datatip text box, even when the link to the polyline starts from another corner. When its value is "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": ", the datatip text box is drawn attached to its anchor point in the polyline."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In detached mode, it is not possible to force the starting point of the link on the box frame. It is autoset."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esse campo contêm o valor padrão para a propriedade "},{"type": "literal","children": [],"string": "font_foreground"},{"type": "text","children": [],"string": ". Seu valor deve ser o índice de uma cor relativo ao mapa de cores atual."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esse campo contêm o valor padrão para a propriedade "},{"type": "literal","children": [],"string": "foreground"},{"type": "text","children": [],"string": " usado para desenhar a caixa envoltória. Seu valor deve ser o índice de uma cor relativo ao mapa de cores atual."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_style: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size_unit: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_background: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Veja "},{"type": "literal","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tag: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esse campo contêm uma string normalmente utilizada para identificar o controle. Veja "},{"type": "literal","children": [],"string": "figure_properties"},{"type": "text","children": [],"string": " nas páginas de ajuda."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["polyline_properties", "figure_properties", "graphics_entities"]},"datatipCreate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipCreate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a datatip on a polyline by program"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["datatip_handle = datatipCreate(polyline_handle,index)", "datatip_handle = datatipCreate(polyline_handle,pt)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polyline_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A handle on a polyline"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "index"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The index of a polyline data point where to draw the data tip."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector with 2 or 3 elements, the coordinates of the point where to draw the data tip."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datatip_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The handle on the newly created entity"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["datatips", "datatipMove"]},"datatipGetEntities": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipGetEntities"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get all the entities compatible with datatips in the given axes."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["curve_handles=datatipGetEntities(ax)", "curve_handles=datatipGetEntities()"]},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "ax"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A handle on an axes entity. The default value is "},{"type": "literal","children": [],"string": "gca()"}],"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "curve_handles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An array of handle on entities compatible with datatips."},"string": []},"string": []}],"string": []},"string": []}],"seealso": "datatips"},"datatipManagerMode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipManagerMode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set or toggles the datatips mode. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["datatipManagerMode()", "datatipManagerMode('on')", "datatipManagerMode('off')", "datatipManagerMode(fig)", "datatipManagerMode(fig,'on')", "datatipManagerMode(fig,'off')"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "fig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Graphic window handle or Graphic window id."},"string": []},"string": []}],"string": []},"string": []},"seealso": "datatips"},"datatipMove": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipMove"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Move a specified datatip using the mouse."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "datatipMove(tip_handle)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "tip_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the handle on the tip to be moved"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["datatips", "datatipCreate"]},"datatipRemove": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipRemove"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Removes a selected datatip"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["datatipRemove(polyline_handle,ind)", "datatipRemove(datatip_handle)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polyline_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The handle of the polyline, where the tip is"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datatip_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The handle of the tip to be removed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer, the tip index"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["datatips", "datatipCreate"]},"datatipRemoveAll": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipRemoveAll"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Removes all datatips on a set of polylines. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["datatipRemoveAll(curve_handles)", "datatipRemoveAll()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "curve_handles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A vector of polyline  handles."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["datatips", "datatipCreate", "datatipRemove"]},"datatips": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatips"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Tool for placing and editing tips along the plotted curves"},"string": []},"synopsis": [],"varlist": [],"seealso": ["datatip_properties", "datatipManagerMode", "datatipCreate", "datatipMove", "datatipSetDisplay"]},"datatipSetDisplay": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipSetDisplay"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the function used to compute the datatip string. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["datatipSetDisplay(handle,\"fun\")", "datatipSetDisplay(handle, fun)"]},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A handle on a datatip or its parent."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"fun\""},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "A variable that contains a function (type==11 or type==13) or the name of this function. This function syntax must be "},{"type": "literal","children": [],"string": "str=fun(h)"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " is the handle of the datatip."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This function must return a string or a vector of strings in "},{"type": "literal","children": [],"string": "str"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},"string": []}],"seealso": ["datatips", "datatipSetOrientation"]},"datatipSetInterp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipSetInterp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the interpolation mode for datatip. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "datatipSetInterp(datatip_handle,interp_mode)"},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "datatip_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A handle of the tip."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp_mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean, if false the tips can only be located at the mesh points, if true interpolation is made between mesh points. The default value is true."},"string": []},"string": []}],"string": []},"string": []}],"seealso": ["datatips", "datatipMove"]},"datatipSetOrientation": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipSetOrientation"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the position of the text box associated with the given tip."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "datatipSetOrientation(tip_handle,orient)"},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "tip_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A handle on a datatip."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "orient"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A character string with possible values: "},{"type": "literal","children": [],"string": "\"automatic\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"upper left\" "},{"type": "text","children": [],"string": " ,"},{"type": "literal","children": [],"string": "\"upper right\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"lower left\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"lower right\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"left\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"right\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"upper\""},{"type": "text","children": [],"string": ", or "},{"type": "literal","children": [],"string": "\"lower\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},"string": []}],"seealso": ["datatips", "datatipCreate", "datatipRemove"]},"datatipSetStyle": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datatipSetStyle"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the datatip style."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["datatipSetStyle(polyline_handle)", "datatipSetStyle(polyline_handle,t [,boxed [,labeled]])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polyline_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The handle of the polyline where the tip is."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A number with possible value 1 or 2. If omitted a choose popup will open."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "boxed"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A a boolean, default value is %t."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labeled"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A a boolean, default value is %t."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["datatips", "datatipCreate"]},"anti_aliasing": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "anti_aliasing"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Figure's property smoothing the stair-like aspect when rendering curves"},"string": []},"synopsis": [],"varlist": [],"seealso": ["figure_properties", "usecanvas", "lighting", "pixel_drawing_mode", "system_setproperty"]},"clf": {"refname": [],"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"colordef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colordef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the color look-and-feel of a given or of all forthcoming graphic figures"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["colordef(color_scheme)", "colordef(f, color_scheme)", "colordef(\"new\", color_scheme)", "colordef default"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color_scheme"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string with possible value: "},{"type": "literal","children": [],"string": "'white'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "'black'"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "'none'"},{"type": "text","children": [],"string": ", or "},{"type": "literal","children": [],"string": "'default'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "handle on a graphic figure"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sdf", "gdf", "sda", "gda", "figure_properties", "axes_properties"]},"drawlater": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "drawlater"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Torna galhos dos eixos invisíveis."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "drawlater()"},"varlist": [],"seealso": ["get", "set", "drawnow", "graphics_entities"]},"drawnow": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "drawnow"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Desenha entidades gráficas escondidas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "drawnow()"},"varlist": [],"seealso": ["get", "set", "drawlater", "graphics_entities"]},"figure_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "figure properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the graphics figure entity properties"},"string": []},"synopsis": [],"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Figure properties: "},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This handles represent the vector of the figure's children . Note that all figure children are of type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": ". Also keep in mind that, when creating a figure entity (using "},{"type": "link","children": [],"string": "scf"},{"type": "text","children": [],"string": " command), an "},{"type": "literal","children": [],"string": "Axes"},{"type": "text","children": [],"string": " entity is simultaneously built too."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "figure_position: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field contains the position in pixel of the graphic window on the screen. This is a vector "},{"type": "literal","children": [],"string": "[x,y]"},{"type": "text","children": [],"string": " defining the position of the upper-left corner of the window. The position "},{"type": "literal","children": [],"string": "[0,0]"},{"type": "text","children": [],"string": " is the upper-left corner of the screen."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The initial position of graphic windows is taken from the default figure entity (see "},{"type": "link","children": [],"string": "gdf"},{"type": "text","children": [],"string": "). The only exception is when default figure "},{"type": "literal","children": [],"string": "figure_position"},{"type": "text","children": [],"string": " value is "},{"type": "literal","children": [],"string": "[-1,-1]"},{"type": "text","children": [],"string": ". In this case, the initial position of graphic windows is automatically set by the windowing system."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "figure_size: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vector "},{"type": "literal","children": [],"string": "[width, height]"},{"type": "text","children": [],"string": ", providing the external size of the graphic window, in screen pixels."}],"string": []},{"type": "para","children": [{"type": "warning","children": {"type": "text","children": [],"string": "When the figure is docked (to the Scilab desktop, etc), .figure_size holds for the whole docked block and should not be set."},"string": []},{"type": "warning","children": [{"type": "text","children": [],"string": "The OS window manager defines some minimal sizes. If sizes smaller than minimal ones are provided, the minimal ones are actually set. "},{"type": "para","children": {"type": "text","children": [],"string": "On Windows, minimal sizes can be retrieved with "},"string": []}],"string": []},{"type": "warning","children": {"type": "text","children": [],"string": "When a figure is created in .auto_resize=\"on\" mode, the .axes_size value is set as specified, and .figure_size is set accordingly, not the reverse."},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_size: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Vector "},{"type": "literal","children": [],"string": "[width, height]"},{"type": "text","children": [],"string": " of sizes of the whole graphical area in the window, in pixels."}],"string": []},{"type": "warning","children": {"type": "text","children": [],"string": "This property should not be modified if the figure is docked to the Scilab desktop."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position: "},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": ".position = [x, y, graphics_width, graphics_height]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": ".position = 'x|y|graphics_width|graphics_height'"},{"type": "text","children": [],"string": " (like '100|150|500|300') is a pseudo-property allowing to set or querry both "},{"type": "literal","children": [],"string": ".figure_position"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": ".axes_size"},{"type": "text","children": [],"string": " properties in a once."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_resize: "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Auto-resizing of children axes when the figure is resized."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "When the figure is resized by hand or by setting the .figure_size property, and .auto_resize is "},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "viewport: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Position of the visible part of graphics in the panner."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "figure_name or name:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the name of the figure. This name is a character string displayed at the top of the graphics_window. The name can contain a single substring "},{"type": "literal","children": [],"string": "%d"},{"type": "text","children": [],"string": " which will be replaced by the "},{"type": "literal","children": [],"string": "figure_id"},{"type": "text","children": [],"string": ". No other instance of the "},{"type": "literal","children": [],"string": "%"},{"type": "text","children": [],"string": " character is allowed inside the name."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "figure_id: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field contains the identifier of the figure. This is an integer number which is set at figure creation and cannot be changed after."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color_map: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Property which defines the colormap used by this figure. The colormap is a "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " by "},{"type": "literal","children": [],"string": "3"},{"type": "text","children": [],"string": " matrix. "},{"type": "literal","children": [],"string": "m"},{"type": "text","children": [],"string": " is the number of colors. Color number i is given as a 3-uple "},{"type": "literal","children": [],"string": "R"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "G"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "B"},{"type": "text","children": [],"string": " corresponding respectively to red, green and blue intensity between 0 and 1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pixel_drawing_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field specifies the bitwise operation used for pixel rendering. The default mode is "},{"type": "literal","children": [],"string": "copy"},{"type": "text","children": [],"string": ". For more details see the "},{"type": "link","children": [],"string": "pixel drawing mode reference page"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "immediate_drawing: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property controls the figure display. Its value can be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default mode) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". It is used to delay a huge succession of graphics commands (implying several drawings or redrawings). Note that, when using "},{"type": "literal","children": [],"string": "drawlater"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "drawnow"},{"type": "text","children": [],"string": " commands, it affects the property value of the current figure (which is respectively turned to "},{"type": "literal","children": [],"string": "'off'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'on'"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This property controls the figure window background color. It takes as value an index relative to the current colormap."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "BackgroundColor"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This pseudo-property is a set-only one. It is the same as "},{"type": "literal","children": [],"string": "background"},{"type": "text","children": [],"string": ", but allows to specify the color as a [r g b] vector of real values of Red Green and Blue intensities in [0,1] like "},{"type": "literal","children": [],"string": "[0.1, 0.5, 0.3]"},{"type": "text","children": [],"string": ", or as a unique equivalent 'r|g|b' string like "},{"type": "literal","children": [],"string": "'0.1|0.5|0.3'"},{"type": "text","children": [],"string": ", using \"|\" as a separator."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "event_handler"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A character string. The name of the Scilab function which is intended to handle the events. Note that setting an empty string will disable the event handler. For more information about event handler functions see the "},{"type": "link","children": [],"string": "event handler functions"},{"type": "text","children": [],"string": " help."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "event_handler_enable"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Enable or disable the event handler. Its value must be either \"on\" or \"off\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be use to store any scilab variable in the figure data structure, and to retrieve it."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tag: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be use to store a character string generally used to identify the control. It allows to give it a \"name\". Mainly used in conjunction with findobj()."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "resizefcn: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be used to store the name of a Scilab function or a Scilab expression as a character string. This character string will be evaluated whenever the user resizes the figure and when the figure is created. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "closerequestfcn: "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This field can be used to store the name of a Scilab function or a Scilab expression as a character string. This character string will be evaluated whenever the user tries to close the figure using the top-right cross."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "When this property is set, the \"figure closed\" event (-1000) will no more be trapped by the event handler function."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "resize: "},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default value) allows the user to interactively resize the figure with the mouse. "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " forbids to do it, but still allows using efficiently the "},{"type": "literal","children": [],"string": ".figure_size"},{"type": "text","children": [],"string": " property."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "menubar_visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property controls the figure menubar visibility. Its value can be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default value) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbar_visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property controls the figure toolbar visibility. Its value can be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default value) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "infobar_visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property controls the figure status bar visibility. Its value can be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default value) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "info_message: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Single character string: text displayed in the info bar of the graphic window."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "When the figure "},{"type": "literal","children": [],"string": "\"dockable\""},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", setting the "},{"type": "literal","children": [],"string": "\"Visible\""},{"type": "text","children": [],"string": " property affects the whole figure including its window decorations."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When the figure "},{"type": "literal","children": [],"string": "\"dockable\""},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " and the figure is docked with another one inside the same parent window, this field concerns only the figure children (See dedicated part below). If the figure is not docked with another one, then the "},{"type": "literal","children": [],"string": "\"Visible\""},{"type": "text","children": [],"string": " property behaves as if the figure "},{"type": "literal","children": [],"string": "\"dockable\""},{"type": "text","children": [],"string": " property was set to "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "layout: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property sets the layout used to dispose the figure children. See "},{"type": "link","children": [],"string": "layout"},{"type": "text","children": [],"string": " page for more information about available layouts."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "layout_options: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property sets the options of the layout used to dispose the figure children. See "},{"type": "link","children": [],"string": "layout"},{"type": "text","children": [],"string": " page for more information about available options."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "icon: "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This field can be used to customize the icon of a Scilab figure."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Its value is a character string containing the (absolute or relative to Scilab "},{"type": "link","children": [],"string": "current working directory."},{"type": "text","children": [],"string": " path of the image file containing the icon."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_axes: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (default value) means that the figure has always a default axes: it is automatically set at the figure creation, or automatically reset when the last axes of the figure is intentionally deleted."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " means that "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "the newly created figure has no default axes."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "for an existing figure, it is possible to actually delete all its existing axes."},"string": []}],"string": []},{"type": "text","children": [],"string": " In both cases, "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "without any axes, the figure can't be the default target of any plotting instruction. This feature can be used to protect an interactive interface built in a figure (like the demos and the ATOMS ones) from being the default plotting target when there is no other proper opened graphical figures."},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "It is still possible to force creating an axes using the "},{"type": "link","children": [],"string": "newaxes"},{"type": "text","children": [],"string": " function."}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Children's default values: "},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "para","children": {"type": "text","children": [],"string": "{\"on\"} | \"off\""},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field sets if the contents of the figure (axes and uicontrols) has to be redrawn. Its value should be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rotation_style: "},{"type": "para","children": {"type": "text","children": [],"string": "{\"unary\"} | \"multiple\""},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field is related to the \"3D Rot\" button. It takes "},{"type": "literal","children": [],"string": "unary"},{"type": "text","children": [],"string": " as value (default) in the aim to rotate only selected 3D plot. In the other case its value can be "},{"type": "literal","children": [],"string": "multiple"},{"type": "text","children": [],"string": " : all 3D plots are rotated."}],"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Creation related properties: "},{"type": "para","children": [{"type": "text","children": [],"string": "Some properties can only be set at creation time when using the "},{"type": "link","children": [],"string": "figure"},{"type": "text","children": [],"string": " function (and will then be read-only). When a new figure is created using "},{"type": "link","children": [],"string": "gcf"},{"type": "text","children": [],"string": " or "},{"type": "link","children": [],"string": "scf"},{"type": "text","children": [],"string": ", these properties will be set according to "},{"type": "link","children": [],"string": "gdf"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dockable"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property determines if created window can be docked inside Scilab environment. If its value is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " then the window will have a bar enabling the user to dock/undock it. Else the window will look like a standard OS window. This value can only be set at creation."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "menubar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "{\"figure\"} | \"none\""},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This property determines the type of the menubar of the figure. If its value is "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": " then the window will not have any menubar until a menu is added using "},{"type": "link","children": [],"string": "uimenu function"},{"type": "text","children": [],"string": ". Else the window will be created with default figure menus. This value can only be set at creation."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "{\"figure\"} | \"none\""},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This property determines the type of the toolbar of the figure. If its value is "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": " then the window will not have any menubar. Else the window will be created with a default figure toolbar. This value can only be set at creation."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "anti_aliasing"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"off\" | \"2x\" | \"4x\" | {\"8x\"} | \"16x\""},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "This property controls the anti-aliasing level used to improve graphic quality. If the property is set to \"off\", anti-aliasing is disable. To enable anti-aliasing, the property must set to either \"2x\", \"4x\", \"8x\" or \"16x\". In this case, it stands for the anti-aliasing level. For example, \"16x\" is a higher quality level than \"2x\". Specifying a higher anti-aliasing level improves image quality but also decreases graphic performances. Please visit the "},{"type": "link","children": [],"string": "dedicated page"},{"type": "text","children": [],"string": " to see specific examples."}],"string": []}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Note on default values: "},{"type": "listitem","children": {"type": "variablelist","children": {"type": "varlistentry","children": {"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "All these listed properties and fields inherit from default values stored in a figure model. These default values can be seen and changed. To do so, use the "},{"type": "literal","children": [],"string": "get(\"default_figure\")"},{"type": "text","children": [],"string": " command : it returns a graphic handle on the figure model. Note that no graphic window is created by this command. The next created figures will inherit from this model (see example 2 below)."}],"string": []},"string": []},"string": []},"string": []},"string": []}],"string": []}],"string": []}],"seealso": ["eventhandlerfunctions", "pixel_drawing_mode", "anti_aliasing", "colormap", "scf", "gcf", "gdf", "get", "set", "axes_properties", "getsystemmetrics"]},"gcf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gcf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o manipulador da janela GUI ou de gráficos corrente."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h = gcf()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["gdf", "gca", "gce", "get", "scf", "set", "graphics_entities", "uicontrol"]},"gdf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gdf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o manipulador da figura corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["f = gdf()", "f = get(\"default_figure\")"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da figura corrente"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["gda", "sdf", "sda", "gcf", "get", "scf", "set", "graphics_entities"]},"pixel_drawing_mode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pixel_drawing_mode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Figure's property setting the RGBwise pixels update mode when drawing"},"string": []},"synopsis": [],"varlist": [],"seealso": ["figure_properties", "anti_aliasing", "colordef", "lighting", "Matplot"]},"scf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ajusta a (janela) de figura gráfica corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["f = scf()", "f = scf(h)", "f = scf(num)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o manipulador da figura "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "identificador da figura "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da figura corrente"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "gcf", "clf", "winsid", "graphics_entities"]},"sdf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sdf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ajusta figura padrão"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sdf()", "set(gdf(), \"default_values\",1)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da figura padrão."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["colordef", "gdf", "scf", "sda", "gda", "set", "graphics_entities", "setlookandfeel"]},"show_window": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "show_window"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Restaura uma janela de gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "show_window([figure])"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "figure"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número ou manipulador da figura a ser exibida"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"winsid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "winsid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna a lista de janelas de gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x=winsid()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["close", "who", "file", "dispfiles"]},"arc_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "arc_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição das propriedades da entidade Arc (arco)"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador da raiz. A raiz de uma entidade Arc deve ser do tipo "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "esta propriedade contém um vetor com os galhos do manipulador. Contudo, manipuladores arc não possuem galhos correntemente."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém a propriedade de linha "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " (espessura). Deve ser um inteiro positivo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o valor da propriedade "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " deve ser um inteiro em [1 6]. 1 significa linha sólida e os demais valores significam tipos diferentes de tracejados."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade permite que se exiba ou não a linha representando o arco. O valor pode ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "se o valor da propriedade "},{"type": "literal","children": [],"string": "fill_mode"},{"type": "text","children": [],"string": " é "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": ", o arco é preenchido com a cor "},{"type": "literal","children": [],"string": "background"},{"type": "text","children": [],"string": " (de plano de fundo)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "foreground"},{"type": "text","children": [],"string": " (primeiro plano) para desenhar ou preencher o arco. Deve ser um índice de cor (relativo ao mapa de cores corrente)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém a cor usada para preencher o arco. Deve ser um índice de cor (relativo ao mapa de cores corrente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade retorna as coordenadas do ponto superior esquerdo, a largura e a altura do retângulo envolvente bem como os ângulos de froenteira do setor. É a matriz "},{"type": "literal","children": [],"string": "[xleft,yup,[zup],width,height,a1,a2]"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "a1"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "a2"},{"type": "text","children": [],"string": " são os ângulos de fronteira dados em graus."}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "Aviso:"},{"type": "text","children": [],"string": " nas versões do Scilab até a 4.1.2 "},{"type": "literal","children": [],"string": "a1"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "a2"},{"type": "text","children": [],"string": " são dados em degree/64."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade. Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " o arco é desenhado, se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " o arco não é exibido na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arc_drawing_method:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Este campo controla o tipo de discretização utilizado para renderizar o arco. Seu valor deve ser "},{"type": "literal","children": [],"string": "\"nurbs\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"lines\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"nurbs\""},{"type": "text","children": [],"string": " for selecionado, o arco é renderizado utilizando-se superfícies e curvas nurbs. Isto resulta na exibição de uma superfície perfeita, não importa qual o ponto de vista seja. Se "},{"type": "literal","children": [],"string": "\"lines\""},{"type": "text","children": [],"string": " é selecionado, então o arco é aproximado com um número constante de linhas. Isto reduz o tempo de desenho, mas pontas agudas podem aparecer em uma ampliação. O uso do valor "},{"type": "literal","children": [],"string": "\"lines\""},{"type": "text","children": [],"string": " é desencorajado e só deve ser utilizado se for notada alguma perda na velocidade dos quadros ao se utilizar o valor "},{"type": "literal","children": [],"string": "\"nurbs\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " para o arco. O valor de clip_state pode ser :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " significa que o arco não é recortado"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " significa que o arco é recortado fora da caixa dos eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " significa que o arco é recortado fora do arco dado pela propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo determina a propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property. Por padrão seu valor é uma matriz vazia se a propriedade clip_state é \"off\". Em outros casos, o vetor "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura e altura) define as porções do arco a serem exibidas, contudo o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " será alterado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode ser utilizado para armazenar qualquer variável Scilab na estrutura de dados da entidade arco e recuperá-la."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"rectangle_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rectangle_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição de propriedades da entidade Rectangle (retângulo)"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade contém o manipulador da raiz. A raiz de uma entidade Rectangle deve ser do tipo "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "esta propriedade contém um vetor com os galhos do manipulador. Contudo, manipuladores rectangle não possuem galhos correntemente."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " para a poligonal. Deve ser "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (marcas desenhadas) ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (nenhuma marca desenhada)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a propriedade "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " é utilizada para selecionar o tipo de marca utilizada quando a propriedade "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". O valor é um inteiro em [0 14] que significa: ponto, sinal de mais, cruz, estrela, rombo preenchido, rombo, triângulo para cima, triângulo para baixo, rombo mais, círculo, asterísco, quadrado, triângulo para direita, triângulo para esquerda e pentagrama."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size_unit:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " property value. Se "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " for ajustado para "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": ", então o valor de "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " é diretamente dado em pontos. Quando "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " é ajustado para "},{"type": "literal","children": [],"string": "\"tabulated\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " é computado em relação ao array de tamanho de fonte: logo, seu valor deve ser um inteiro em [0 5] que significa 8pt, 10pt, 12pt, 14pt, 18pt e 24pt. Note que "},{"type": "link","children": [],"string": "xrect"},{"type": "text","children": [],"string": " como padrão; quando se utiliza a função "},{"type": "literal","children": [],"string": "tabulated"},{"type": "text","children": [],"string": " como padrão; quando se utiliza a função "},{"type": "link","children": [],"string": "plot"},{"type": "text","children": [],"string": " o modo "},{"type": "literal","children": [],"string": "point"},{"type": "text","children": [],"string": " é automaticamente habilitado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A propriedade "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " é utilizada para escolher o tamanho das marcas quando a propriedade "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Deve ser um valor inteiro em [0 5] que significa 8pt, 10pt, 12pt, 14pt, 18pt e 24pt."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_foreground:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " que é a cor da borda das marcas. O valor deve ser um índice de cor (relativo ao mapa de cores corrente)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_background:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " que é a cor da face das marcas. O valor deve ser um índice de cor (relativo ao mapa de cores corrente)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "line_mode"},{"type": "text","children": [],"string": " para a poligonal. O valor pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": "(linha desenhada) ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (nenhuma linha desenhada)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Se o valor da propriedade "},{"type": "literal","children": [],"string": "fill_mode"},{"type": "text","children": [],"string": " é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ", o retângulo é preenchido com a cor de primeiro plano, "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " também deve ter valor "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Senão, o valor da propriedade é "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " apenas a forma o contorno do retângulo é desenhado utilizando-se a cor de primeiro plano."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_style:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a propriedade "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " deve ser um inteiro em [1 6]. 1 stands significa linha sólida, o restante seleciona tracejados."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor padrão da propriedade "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " (espessura) da linha. Deve ser um inteiro positivo."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém a cor utilizada para desenhar a linha de contorno do retângulo. Seu valor deve ser um índice de cor (relativo ao mapa de cores corrente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo contém a cor utilizada para preencher a parte interna do retângulo. Seu valor deve ser um índice de cor (relativo ao mapa de cores corrente)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "esta propriedade retorna as coordenadas do ponto superior esquerdo do retângulo, sua altura e largura em unidades de dados dos eixos. O resultado é uma matriz "},{"type": "literal","children": [],"string": "[xleft,yup,[zup],width,height]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " para a entidade. Pode ser "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . Por padrão, o retângulo é visível, a propriedade é "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Se "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " o retângulo não é exibido na tela."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state:"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "este campo contém o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " para o retângulo. o valor de clip_state pode ser :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " ignifica que o retângulo não é recortado."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " significa que o retângulo é recortado fora da caixa dos eixos."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " significa que o retângulo é recortado fora do retângulo dado pela propriedade clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "este campo determina a propriedade "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property. Por padrão seu valor é uma matriz vazia se a propriedade clip_state é \"off\". Em outros casos, o vetor "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (ponto superior esquerdo, largura, altura) define as porções do retângulo a ser exibido, contudo o valor da propriedade "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " será alterado."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "este campo pode ser utilizado para armazenar qualquer variável Scilab na estrutura de dados da entidade retângulo e recuperá-la."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "delete", "xrect", "xfrect", "xrects", "graphics_entities"]},"segs_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Segments properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the Segments entity properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains the handle of the parent. The parent of the segment entity should be of the type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains a vector with the "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": " of the handle. However, "},{"type": "literal","children": [],"string": "segs"},{"type": "text","children": [],"string": " handles currently do not have any "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " property value for the entity. It should be "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". By default, the segments are visible, the value's property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " the segments are not drawn on the screen."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field is two column matrix "},{"type": "literal","children": [],"string": "[x,y, [z]] "},{"type": "text","children": [],"string": " which gives the coordinates of the segments boundary. If "},{"type": "literal","children": [],"string": "xv = matrix(x,2,-1) "},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "yv = matrix(y,2,-1) "},{"type": "text","children": [],"string": " then "},{"type": "literal","children": [],"string": "xv(:,k)"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "yv(:,k)"},{"type": "text","children": [],"string": " are the boundary coordinates of the segment numbered "},{"type": "literal","children": [],"string": "k"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "line_mode"},{"type": "text","children": [],"string": " property value for the "},{"type": "literal","children": [],"string": "segs"},{"type": "text","children": [],"string": ". Its value should be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (line drawn) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (no line drawn)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_style: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " property value should be an integer in "},{"type": "literal","children": [],"string": "[1 8]"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " stands for solid, the other value stands for a selection of dashes (dash, dash dot, longdash dot, bigdash dot, bigdash longdash, dot, double dot)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property is a positive real specifying the arrow width in pixels. The displayed width is actually determined by rounding the supplied width to the nearest integer. The only exception is vectorial export where the whole "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " value is considered."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arrow_size: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The factor that specify the size of arrowheads. With a negative value, the size is also dependent on the arrows length. To draw segment, the value must be set to 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "segs_color: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field contains the vector of colors to use to draw each segment. Each element is a color index relative to the current colormap."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property value for the polyline. Its value should be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (marks drawn) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (no marks drawn)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_style: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " property value is used to select the type of mark to use when "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". The value should be an integer in "},{"type": "literal","children": [],"string": "[0 20]"},{"type": "text","children": [],"string": ". The figure below shows the aspects of the marks depending on the "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " properties."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size_unit: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " property value. If "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": ", then the "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " value is directly given in points. When "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"tabulated\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " is computed relative to the font size array: therefore, its value should be an integer in "},{"type": "literal","children": [],"string": "[0 5]"},{"type": "text","children": [],"string": " which stands for 8pt, 10pt, 12pt, 14pt, 18pt and 24pt. Note that "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " and pure scilab functions use "},{"type": "literal","children": [],"string": "tabulated"},{"type": "text","children": [],"string": " mode as default; when using "},{"type": "link","children": [],"string": "plot"},{"type": "text","children": [],"string": " function, the "},{"type": "literal","children": [],"string": "point"},{"type": "text","children": [],"string": " mode is automatically enabled."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " property is used to select the type of size of the marks when "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". Its value should be an integer between 0 and 5 which stands for 8pt, 10pt, 12pt, 14pt, 18pt and 24pt."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " property value which is the marks' edge color. Its value should be a color index (relative to the current "},{"type": "literal","children": [],"string": "color_map"},{"type": "text","children": [],"string": ") or 0 for transparent edge."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_background: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " property value which is the marks' face color. Its value should be a color index (relative to the current "},{"type": "literal","children": [],"string": "color_map"},{"type": "text","children": [],"string": ") or 0 for transparent face."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value for the segments. It should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " this means that the segments are not clipped."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " this means that the segments are clipped outside the Axes box."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " this means that the segments are clipped outside the rectangle given by the property "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property. By default segments are not clipped, "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ", so the value should be an empty matrix. Other cases the vector "},{"type": "literal","children": [],"string": "[x, y, w, h]"},{"type": "text","children": [],"string": " (upper-left point, width, height) defines the portions of the segments to display, however "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value will be changed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field can be use to store any scilab variable in the "},{"type": "literal","children": [],"string": "segs"},{"type": "text","children": [],"string": " data structure, and to retrieve it."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["set", "get", "delete", "xsegs", "graphics_entities"]},"xarc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xarc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "esboça parte de uma elipse"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xarc(x,y,w,h,a1,a2)", "hdl = xarc(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,w,h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "quatro valores reais definindo um retângulo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1,a2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores reais definindo um setor "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Arc"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "arc_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xarcs", "xfarc", "xfarcs"]},"xarcs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xarcs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha partes de um conjunto de elipses"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xarcs(arcs,[style])", "hdl = xarcs(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arcs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de tamanho (6,n) descrevendo as elipses. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de tamanho n fornecendo o estilo a ser usado."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta saída opcional é um vetor contendo os identificadores de os objetos "},{"type": "literal","children": [],"string": "Arc"},{"type": "text","children": [],"string": " criados. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " para modificar propriedades de um objeto específico ou de todos os objetos polilinha após serem criados. Para uma lista de propriedades, consulte "},{"type": "link","children": [],"string": "arc_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xarc", "xfarc", "xfarcs"]},"xarrows": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xarrows"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha um conjunto de setas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xarrows(nx, ny, [arsize, color])", "h = xarrows(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nx,ny"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores ou matrizes de reais de mesmo tamanho "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arsize"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "escalar real, o tamanho da cabeça da seta. O tamanho padrão pode ser obtido ajustando "},{"type": "varname","children": [],"string": "arsize"},{"type": "text","children": [],"string": " para -1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz ou escalar. Se "},{"type": "varname","children": [],"string": "color"},{"type": "text","children": [],"string": " for um escalar positivo, fornece a cor a ser usada em todas as setas. Se for negativo, a cor corrente é utilizada. Se for um vetor "},{"type": "literal","children": [],"string": "color(i)"},{"type": "text","children": [],"string": " fornece a cor a ser utilizada no vetor "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Segs"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "segs_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xfarc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xfarc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "preenche parte de uma elipse"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xfarc(x,y,w,h,a1,a2)", "hdl = xfarc(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,w,h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "quatro valores reais definindo um retângulo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1,a2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valores reais definindo um vetor"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Arc"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "arc_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xarc", "xarcs", "xfarcs"]},"xfarcs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xfarcs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "preenche partes de um conjunto de elipses"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xfarcs(arcs,[style])", "hdl = xfarcs(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arcs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de tamanho (6,n) descrevendo as elipses. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de tamanho n fornecendo as cores a serem utilizadas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta saída opcional é um vetor contendo os identificadores de os objetos "},{"type": "literal","children": [],"string": "Arc"},{"type": "text","children": [],"string": " criados. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " para modificar propriedades de um objeto específico ou de todos os objetos polilinha após serem criados. Para uma lista de propriedades, consulte "},{"type": "link","children": [],"string": "arc_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xarc", "xfarc", "xfarc"]},"xfrect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xfrect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "preenche um retângulo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xfrect(x,y,w,h)", "xfrect(rect) // rect =[x,y,w,h]", "hdl = xrect(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,w,h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "quatro valores reais definindo um retângulo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Rectangle"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "rectangle_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xrect", "xrects"]},"xrect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xrect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha um retângulo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xrect(x,y,w,h)", "hdl = xrect(rect) // rect =[x,y,w,h]"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,w,h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "quatro valores reais definindo o retângulo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Rectangle"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "rectangle_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xfrect", "xrects"]},"xrects": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xrects"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha ou preenche um conjunto de retângulos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xrects(rects,[fill])", "hdl = xrects(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rects"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrtiz de tamanho (4,n)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho n."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta saída opcional é um vetor contendo os identificadores de os objetos "},{"type": "literal","children": [],"string": "Rectangle"},{"type": "text","children": [],"string": " criados. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " para modificar propriedades de um objeto específico ou de todos os objetos polilinha após serem criados. Para uma lista de propriedades, consulte "},{"type": "link","children": [],"string": "rectangle_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xfrect", "xrect"]},"xsegs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xsegs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha segmentos desconexos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xsegs(xv,yv,[style])", "hdl = xsegs(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xv,yv"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de mesmo tamanho "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor ou escalar. Se "},{"type": "literal","children": [],"string": "style"},{"type": "text","children": [],"string": " is a positive scalar, it gives the color to use for all segments. Se "},{"type": "literal","children": [],"string": "style"},{"type": "text","children": [],"string": " for negativo, então a cor corrente é utilizada. Se "},{"type": "literal","children": [],"string": "style"},{"type": "text","children": [],"string": " for um vetor, então "},{"type": "literal","children": [],"string": "style(i)"},{"type": "text","children": [],"string": " fornece a cor a ser utilizada no segmento "},{"type": "literal","children": [],"string": "i"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Segs"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "segs_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"copy": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "copy"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Copia uma entidade de gráficos "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["copy(h)", "copy(h,h_axes)", "h_copy=copy(h)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da entidade a ser copiada "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h_axes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da entidade raiz para destino. Deve ser uma entidade Axes (de eixos)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h_copy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da entidade copiada."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["get", "set", "delete", "move", "graphics_entities"]},"delete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "delete"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Deleta uma entidade gráfica e seus galhos "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["delete(h)", "delete(h,\"callback\")", "delete()", "delete(\"all\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "manipulador da entidade gráfica a ser deletada. "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " pode ser um vetor de manipuladores, em qual caso todos os objetos identificados por h(i) serão deletados."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"all\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "palavra-chave string (opcional)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["get", "set", "copy", "move", "is_handle_valid", "graphics_entities"]},"gce": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gce"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retorna o manipulador da entidade corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "e = gce()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "e"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da entidade corrente"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["gcf", "gca", "get", "graphics_entities"]},"ged": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ged"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Editor Gráfico do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ged(action, fignum)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "action"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Real: ação a ser executada na janela gráfica dada por "},{"type": "literal","children": [],"string": "fignum"},{"type": "text","children": [],"string": ":"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "1: Ajusta a janela "},{"type": "literal","children": [],"string": "fignum"},{"type": "text","children": [],"string": " como sendo a corrente."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "2: Redesenha a janela "},{"type": "literal","children": [],"string": "fignum"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "3: Limpa a janela "},{"type": "literal","children": [],"string": "fignum"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "4: Pede que o usuário selecione uma entidade gráfica para efetuar cópia."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "5: Cola a última entidade gráfica copiada pela ação "},{"type": "literal","children": [],"string": "4"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "6: Pede ao usuário para que selecione uma entidade gráfica e então a mova."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "7: Pede ao usuário que selecione uma entidade gráfica para efetuar deleção."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "8: Inicia uma GUI para se editar propriedades da janela."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "9: Inicia uma GUI para se editar propriedade dos eixos correntes."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "10: Inicia um selecionador para selecionar um objeto e editá-lo através da GUI do Editor Gráfico."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "11: Para o selecionador de entidades"},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fignum"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real: número da janela de gráficos, a figura a ser editada"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"glue": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "glue"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cola um conjunto de entidades gráficas em um Compound (\"composto\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["glue(H)", "h_agreg=glue(H)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de manipuladores exclusivos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h_agreg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da entidade Compound."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["get", "set", "move", "unglue", "graphics_entities"]},"is_handle_valid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "is_handle_valid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Verifica se um conjunto de manipuladores gráficos ainda é válido"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "isValid = is_handle_valid(h)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de manipuladores gráficos"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isValid"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de booleanos com o mesmo tamanho que "},{"type": "literal","children": [],"string": "h"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["delete", "graphics_entities"]},"swap_handles": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "swap_handles"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Permuta dois manipuladores em uma hierarquia gráfica"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "swap_handle( handle1, handle2 )"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "handle1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "primeiro manipulador da permutação"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "handle2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "segundo manipulador da permutação"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["graphics_entities", "copy", "delete"]},"unglue": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unglue"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descola uma objeto Compound e o substitui por um galho individual"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["unglue(h)", "H=unglue(h)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador de um Compound "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de manipuladores das entidades resultantes após um unCompound."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["get", "set", "copy", "glue", "graphics_entities"]},"dragrect": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dragrect"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Arrasta retângulos com o mouse"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[final_rect,btn]=dragrect(initial_rect)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "initial_rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrtiz 4xn contendo as definições iniciais do retângulo. Cada coluna contém [x_esquerdo; y_topo; largura; altura]. Se apenas um retângulo estiver presente, initial_rect pode ser também um vetor."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "final_rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um retângulo [x_esquerdo, y_topo, largura, altura] "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "btn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro o número do botão do mouse clicado "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xrect", "xrects", "xclick", "xgetmouse"]},"edit_curv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "edit_curv"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive modal (blocking) graphic curve editor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[x, y, ok, gc] = edit_curv()", "[x, y, ok, gc] = edit_curv(y)", "[x, y, ok, gc] = edit_curv(x, y)", "[x, y, ok, gc] = edit_curv(x, y, job)", "[x, y, ok, gc] = edit_curv(x, y, job, titles)", "[x, y, ok, gc] = edit_curv(x, y, job, titles, gc)", "[x, y, ok, gc] = edit_curv(Axes, ..)", "[x, y, ok, gc] = edit_curv(hCurve)", "[x, y, ok, gc] = edit_curv(hCurve, job)", "[x, y, ok, gc] = edit_curv(hCurve, job, titles)", "[x, y, ok, gc] = edit_curv(hCurve, job, titles, gc)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of initial or final x coordinates of the curve. Default value: "},{"type": "literal","children": [],"string": "1:length(y)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of initial or final y coordinates of the curve. Default value: "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hCurve"},{"type": "listitem","children": {"type": "text","children": [],"string": "Graphic handle of Polyline type: the existing curve to be edited."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Axes"},{"type": "listitem","children": {"type": "text","children": [],"string": "Graphic handle of the axes in which the given curve must be displayed and edited. The axes may be in a figure or in a uicontrol frame."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "job"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a character string made of one to four characters in any order among "},{"type": "literal","children": [],"string": "'a','d','x','y'"},{"type": "text","children": [],"string": ", setting authorizations: "},{"type": "text","children": [],"string": " Default value: "},{"type": "literal","children": [],"string": "\"adxy\""},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "titles"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector of three character strings: "},{"type": "literal","children": [],"string": "[axes_title, x_axis_legend, y_axis_legend]"},{"type": "text","children": [],"string": ". By default, the current or default legends and title are unchanged. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gc"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a list of graphic parameters: "},{"type": "literal","children": [],"string": "gc=list(dataBounds, xyTicks, lineStyles)"},{"type": "text","children": [],"string": " "},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "list(,, lineStyles)"},{"type": "text","children": [],"string": " will use default values for "},{"type": "literal","children": [],"string": "dataBounds"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "xyTicks"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Boolean: %t when "},{"type": "literal","children": [],"string": "edit_curv()"},{"type": "text","children": [],"string": " is quit through the 'ok' menu. %F otherwise ('Abort' menu, Figure closed through its X cross..)."}],"string": []}],"string": []}],"string": []},"seealso": ["ieditor", "object_editor"]},"eventhandlerfunctions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "event handler functions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Protótipo de funções que podem se utilizadas como gerenciadoras de eventos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "envent_handler_function(win,x,y,ibut)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número da janela onde o evento ocorreu"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coordenada X em píxeis do ponteiro do mouse no momento onde o evento ocorreu"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coordenada Y em píxeis do ponteiro do mouse no momento onde o evento ocorreu"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ibut"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número correspondente ao tipo de evento"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["figure_properties", "seteventhandler", "xgetmouse", "xclick"]},"locate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "locate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mouse selection of a set of points in a 2D axes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xy = locate()", "xy = locate(n)", "xy = locate(n, cross)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "n > 0"},{"type": "text","children": [],"string": " : number of points to be selected."}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "any n ≤ 0"},{"type": "text","children": [],"string": " : undefined number of points. Stops the selection by right-clicking."}],"string": []}],"string": []},{"type": "text","children": [],"string": " Default value = -1."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cross"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "varname","children": [],"string": "cross"},{"type": "text","children": [],"string": " it set to 1, locate(.) displays a \"X\" mark at each clicked position in the current axes. Default = 0."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xy"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of size (2,n1). n1=n if the parameter n is given. "},{"type": "literal","children": [],"string": "xy(1,:)"},{"type": "text","children": [],"string": " are abscissae. "},{"type": "literal","children": [],"string": "xy(2,:)"},{"type": "text","children": [],"string": " are ordinates. "},{"type": "literal","children": [],"string": "xy(:,i)"},{"type": "text","children": [],"string": " are the [x;y] coordinates of the i"},{"type": "superscript","children": [],"string": "th"},{"type": "text","children": [],"string": " clicked point."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["edit_curv", "ieditor", "rubberbox", "xclick", "ged"]},"rubberbox": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rubberbox"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Caixa tipo liga de borracha para seleção de um retângulo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[final_rect,btn]=rubberbox()", "[final_rect,btn]=rubberbox(initial_rect)", "[final_rect,btn]=rubberbox(edition_mode)", "[final_rect,btn]=rubberbox(initial_rect, edition_mode)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "initial_rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de duas a quatro entradas. Com quatro entradas fornece o retângulo inicial definido por [x_esquerdo, y_topo, largura, altura]. Com duas entradas, largura e altura são supostas 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "edition_mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano, se edition_mode==%t; um aperto de botão seleciona a primeira quina, soltar seleciona a quina oposta. Se edition_mode== %f, aperto de botão ou clique seleciona a primeira quina, um clique é requerido para selecionar a quina oposta. O valor padrão é edition_mode=%f"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "final_rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um retângulo definido por [x_esquerdo, y_topo, largura, altura]"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "btn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro, o número do botão do mouse clicado"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xrect", "xrects", "xclick", "xgetmouse", "dragrect"]},"seteventhandler": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "seteventhandler"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define um gerenciador de eventos para uma janela gráfica"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["seteventhandler(sfun_name)", "seteventhandler('')"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "sfun_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string. O nome da função do Scilab com a qual se pretende gerenciar os eventos"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["addmenu", "xgetmouse", "xclick", "xchange", "eventhandlerfunctions", "figure_properties"]},"twinkle": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "twinkle"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Faz uma entidade gráfica piscar"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["twinkle", "twinkle(n)", "twinkle(h)", "twinkle(h,n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "identificador ou vetor de identificadores de uma ou várias entidades gráficas para piscar. Por padrão, a entidade gráfica atual apontada por "},{"type": "literal","children": [],"string": "gce()"},{"type": "text","children": [],"string": " é considerada."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número de flashes. Por padrão, n = 5"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "graphics_entities"},"xclick": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xclick"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "espera por um clique do mouse"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[ibutton,xcoord,yxcoord,iwin,cbmenu]=xclick([flag])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ibutton"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (valor inteiro): número do botão do mouse, código da tecla... (ver descrição abaixo)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xcoord"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real: coordenada x do ponteiro do mouse quando ocorreu o clique, na escala gráfica corrente."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ycoord"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real: coordenada y do ponteiro do mouse quando ocorreu o clique, na escala gráfica corrente."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "iwin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (valor inteiro): número da janela onde a ação ocorreu."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cbmenu"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string: callback associado a um menu se "},{"type": "literal","children": [],"string": "xclick"},{"type": "text","children": [],"string": " retorna devido a um clique em um menu. Neste caso, "},{"type": "literal","children": [],"string": "ibutton"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "xcoord"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "ycoord"},{"type": "text","children": [],"string": ", e "},{"type": "literal","children": [],"string": "iwin"},{"type": "text","children": [],"string": " tomam valores arbitrários."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real (valor inteiro): se presente, a fila de eventos de clique não é limpa ao se entrar xclick."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xgetmouse": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xgetmouse"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna os eventos de mouse e posição corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[rep [,win]]=xgetmouse([sel])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sel"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de booleanos "},{"type": "literal","children": [],"string": "[getmotion, getrelease]"},{"type": "text","children": [],"string": ". O valor padrão é "},{"type": "literal","children": [],"string": "[%t, %f]"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rep"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho 3, [x,y,ibutton]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número da figura onde o evento ocorreu"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["locate", "xclick", "seteventhandler"]},"xload": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xload"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "displays in a given window some graphical component loaded from a file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xload(file_name)", "xload(file_name, win_num)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string: name of the binary file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer: the id of the targetted graphic window. By default, the current graphics window is used."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["load", "copy", "xsave", "save"]},"xsave": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xsave"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "salva gráficos em um arquivo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xsave(filename)", "xsave(filename, win_num)", "xsave(filename, win_handle)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, o número da janela de gráficos. Se não for forneceido, a janela de gráficos corrente é utilizada."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_handle"},{"type": "listitem","children": [{"type": "text","children": [],"string": "handle of the figure to save. By default, gcf() is used. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["xload", "save", "load"]},"polyline_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "polyline properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the Polyline entity properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the handle of the parent. The parent of the polyline entity should be of the type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains a vector with the "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": " of the handle. However, polyline handles currently do not have any "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " property value for the entity . It should be "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " . By default, the polyline is visible, the value's property is "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " the polyline is not drawn on the screen."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the values for the x and y coordinates. Component Z is to be added in the case of three-dimensional axes. It is a two (three) column matrix "},{"type": "literal","children": [],"string": "[x,y,[z]]"},{"type": "text","children": [],"string": " of points."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "closed: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field determines whether the polyline is closed or not: its value can be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (no default value, it depends on the primitive used to create the polyline)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "line_mode"},{"type": "text","children": [],"string": " property value for the polyline. Its value should be "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": "(line drawn) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (no line drawn)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If the "},{"type": "literal","children": [],"string": "polyline_style"},{"type": "text","children": [],"string": " field is different of 5, fill the background of the curve with color defined by the "},{"type": "literal","children": [],"string": "background"},{"type": "text","children": [],"string": " property."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_style: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " property value for Segs, Arcs, Rectangle and Polyline objects. "},{"type": "literal","children": [],"string": "line_style"},{"type": "text","children": [],"string": " selects the type of line to be used to draw lines . Its value should be an integer in [1 10]. 1 stand for solid, the other values stand for a selection of dashes (dash, dash dot, longdash dot, bigdash dot, bigdash longdash, dot, double dot, longblank dot, bigblank dot). See example below."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property is a positive real specifying the line width in pixels. The displayed width is actually determined by rounding the supplied width to the nearest integer. The only exception is vectorial export where the whole "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " value is considered."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arrow_size_factor: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This integer allows to set the size of arrows drawn on the polyline. The actual size of arrows is the product of the "},{"type": "literal","children": [],"string": "thickness"},{"type": "text","children": [],"string": " and the size factor."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "polyline_style: "},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This property sets several polyline drawing mode:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If the value is 0 or 1 lines are drawn between two consecutives points."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If the value is 2 the polyline produces a staircase plot. Two consecutives points are linked by a horizontal line followed by a vertical line."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If the value is 3 the polyline produces a bar plot. For each given point (x,y) a vertical line is drawn from (x,y) to (x,0)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If the value is 4 arrows are drawn between two consecutives points."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If the value is 5 the polyline is filled (patch)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If the value is 6 the polyline is a Matlab-like bar object. The properties "},{"type": "literal","children": [],"string": "bar_shift"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "bar_width"},{"type": "text","children": [],"string": " command its appearance."}],"string": []},"string": []}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "foreground"},{"type": "text","children": [],"string": " property used to draw the polyline. Its value should be a color index (relative to the current colormap)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field contains the color used to fill the background of the polyline. Its value should be a color index (relative to the current colormap)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp_color_vector: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the vector of color indices used to fill in the polyline when the "},{"type": "literal","children": [],"string": "interp_color_mode"},{"type": "text","children": [],"string": " property is set to "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". It defines the intervals of colormap indices used to fill each segment. For instance, the first segment will be filled by every colors whose index is between the first two elements of the vector. It is only applicable if the polyline is defined by 3 or 4 points. Therefore, the size of the vector must match this dimension."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp_color_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field determines if we are using the interpolated shading mode to fill the polyline : its value can be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". Note that an "},{"type": "literal","children": [],"string": "interp_color_vector"},{"type": "text","children": [],"string": " must be defined before switching to \"on\" value (see above)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_mode: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property value for the polyline. Its value should be "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " (marks drawn) or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (no marks drawn)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_style: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " property value is used to select the type of mark to use when "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". The value should be an integer in "},{"type": "literal","children": [],"string": "[0 20]"},{"type": "text","children": [],"string": " which stands for: dot, plus, cross, star, filled diamond, diamond, triangle up, triangle down, diamond plus, circle, asterisk, square, triangle right, triangle left, pentagram, triangle up/down/right/left centered on the tip, horizontal line (minus), vertical line. The figure below shows the aspects of the marks depending on the "},{"type": "literal","children": [],"string": "mark_style"},{"type": "text","children": [],"string": " and the "},{"type": "literal","children": [],"string": "mark_foreground"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "mark_background"},{"type": "text","children": [],"string": " properties."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size_unit: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the default "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " property value. If "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": ", then the "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " value is directly given in points. When "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "\"tabulated\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "mark_size"},{"type": "text","children": [],"string": " is computed relative to the font size array: therefore, its value should be an integer in [0 5] which stands for 8pt, 10pt, 12pt, 14pt, 18pt and 24pt. Note that "},{"type": "link","children": [],"string": "plot2d"},{"type": "text","children": [],"string": " and pure scilab functions use "},{"type": "literal","children": [],"string": "tabulated"},{"type": "text","children": [],"string": " mode as default ; when using "},{"type": "link","children": [],"string": "plot"},{"type": "text","children": [],"string": " function, the "},{"type": "literal","children": [],"string": "point"},{"type": "text","children": [],"string": " mode is automatically enabled."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_size: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property specifies the size of the marks displayed when the "},{"type": "literal","children": [],"string": "mark_mode"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". If its value is scalar, the same mark size is set for all points of the curve. Otherwise it must be a row with as many elements as there are points in the curve. The type of values depends on the "},{"type": "literal","children": [],"string": "mark_size_unit"},{"type": "text","children": [],"string": " property."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_foreground: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This property specifies the color of the edges or details of marks. Acceptable values are indices of colors in the current figure's colormap, or -2 for white, -1 for black, or 0 for transparent edges. If its value is scalar, the same specified color is used for the marks of all points of the curve. Otherwise it must be a row with as many elements as there are points in the curve."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_background: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This property specifies the color filling the background of marks. Acceptable values are indices of colors in the current figure's colormap, or -2 for white, -1 for black, or 0 for transparent edges. If its value is scalar, the same specified color is used for the marks of all points of the curve. Otherwise it must be a row with as many elements as there are points in the curve."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_offset: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "mark_offset"},{"type": "text","children": [],"string": " property value which is the offset to use to draw the first mark. Its value should be an integer greater or equal to 0 (default value is 0)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mark_stride: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "mark_stride"},{"type": "text","children": [],"string": " property value which is the stride to use to draw the marks (i.e. stride-1 points are skipped between two consecutive marks). Its value should be integer greater or equal to 1 (default value is 1)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x_shift: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the offset computed by a call to the "},{"type": "link","children": [],"string": "bar"},{"type": "text","children": [],"string": " function (or re-computed by a call to "},{"type": "link","children": [],"string": "barhomogenize"},{"type": "text","children": [],"string": ") and is used to perform a nice vertical bar representation. Note that this offset is also taken into account for all the other "},{"type": "literal","children": [],"string": "polyline_style"},{"type": "text","children": [],"string": ". The unit is expressed in user coordinates."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y_shift: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the offset computed by a call to the "},{"type": "link","children": [],"string": "bar"},{"type": "text","children": [],"string": " function (or re-computed by a call to "},{"type": "link","children": [],"string": "barhomogenize"},{"type": "text","children": [],"string": ") and is used to perform a nice horizontal bar representation. Note that this offset is also taken into account for all the other "},{"type": "literal","children": [],"string": "polyline_style"},{"type": "text","children": [],"string": ". The unit is expressed in user coordinates."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "z_shift: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the offset the user may specify. Note that this offset is taken into account for all the "},{"type": "literal","children": [],"string": "polyline_style"},{"type": "text","children": [],"string": ". The unit is expressed in user coordinates."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bar_width: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field determines the width of the selected polyline when its "},{"type": "literal","children": [],"string": "polyline_style"},{"type": "text","children": [],"string": " is set to bar mode (case 6) : the unit is expressed in user coordinates."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value for the polyline. It should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " this means that the polyline is not clipped."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " this means that the polyline is clipped outside the Axes box."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " this means that the polyline is clipped outside the rectangle given by property clip_box."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field is to determinate the "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property. By Default its value should be an empty matrix if clip_state is \"off\". Other cases the vector "},{"type": "literal","children": [],"string": "[x,y,w,h]"},{"type": "text","children": [],"string": " (upper-left point width height) defines the portions of the polyline to display, however "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value will be changed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be use to store any scilab variable in the polyline data structure, and to retrieve it."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datatips: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains a vector of the "},{"type": "literal","children": [],"string": "datatips"},{"type": "text","children": [],"string": " handles related to the polyline. However, polyline handles currently do not have any "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datatip_display_mode:"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The value can be one of the following: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"always\""},{"type": "text","children": [],"string": ": the datatip is always displayed (default mode)."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"mouseclick\""},{"type": "text","children": [],"string": ": clicking on the anchor of the datatip on the line toogles its display. The anchor is always displayed."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"mouseover\""},{"type": "text","children": [],"string": ": setting the mouse pointer over the datatip anchor on the line displays the datatip. When going away, the datatip is masked. Its anchor remains displayed."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "display_function: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "A character string that contains a function name. This function syntax must be "},{"type": "literal","children": [],"string": "str=fun(datatipHandle)"},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "datatipHandle"},{"type": "text","children": [],"string": " is the handle of the datatip to be displayed. This function must return a string or a vector of strings in str."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This function can be overloaded by setting the similar property on a datatip itself."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Some datatips formatting functions are predefined: "},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "display_function_data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Any Scilab data needed by the "},{"type": "literal","children": [],"string": "display_function"},{"type": "text","children": [],"string": " function."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["champ_properties", "param3d_properties", "plot", "set", "get", "xpoly", "xfpoly", "xpolys", "xfpolys", "graphics_entities"]},"xfpoly": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xfpoly"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "preenche um polígono"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xfpoly(xv,yv,[close])", "hdl = xfpoly(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xv,yv"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores de mesmo tamanho (os pontos do polígono). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "close"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro. Se close= 1, a linha poligonal é fechada; o valor padrão é 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Polyline"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xfpolys", "xpoly", "xpolys"]},"xfpolys": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xfpolys"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "preenche um conjunto de polígonos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xfpolys(xpols,ypols,[fill])", "hdl = xfpolys(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xpols,ypols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de mesmo tamanho (p,n) (pontos dos polígonos)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho n ou tamanho (p,n)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta saída opcional é um vetor contendo os identificadores de os objetos Polyline criados. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " para modificar propriedades de um objeto específico ou de todos os objetos polilinha após serem criados. Para uma lista de propriedades, consulte "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xfpoly", "xpoly", "xpolys"]},"xpoly": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xpoly"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha uma poligonal ou um polígono"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xpoly(xv,yv [,dtype [,close]])", "hdl = xpoly(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xv,yv"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de mesmo tamanho (os pontos da poligonal). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dtype"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (estilo de desenho). O valor padrão é \"lines\". "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "close"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro. Se close= 1,a poligonal é fechada; o valor padrão é 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Polyline"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xfpoly", "xfpolys", "xpolys", "polyline_properties"]},"xpolys": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xpolys"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha um conjunto de poligonais ou polígonos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xpolys(xpols,ypols,[draw])", "hdl = xpolys(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xpols,ypols"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrizes de mesmo tamanho (p,n) (pontos das poligonais)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "draw"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho n"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Esta saída opcional é um vetor contendo os identificadores de os objetos Polyline criados. Use "},{"type": "literal","children": [],"string": "hdl"},{"type": "text","children": [],"string": " para modificar propriedades de um objeto específico ou de todos os objetos polilinha após serem criados. Para uma lista de propriedades, consulte "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xfpoly", "xfpolys", "xpoly"]},"xrpoly": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xrpoly"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "desenha um polígono regular"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xrpoly(orig,n,r,[theta])", "hdl = xrpoly(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de tamanho 2. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, número de lados. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real, ângulo em radianos; 0 é o valor padrão."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Polyline"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "polyline_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "xrect"},"get": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "get"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gets the handle of a graphical or User Interface object, or the property's value of objects."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h = get(0)      // console", "h  = get(tag)", "h  = get(tagsPath)", "h  = get(key)", "fids = get(\"figures_id\")", "val = H.prop", "val = H(prop)", "val = get(0, prop)", "val = get(H, prop)", "val = get(tag, prop)", "val = get(tagsPath, prop)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scalar handle of the first found targeted graphical or user Interface object."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Handle or vector of handles of the targeted graphical or user Interface objects. When "},{"type": "literal","children": [],"string": "H"},{"type": "text","children": [],"string": " is a vector of handles, addressed entities may be of different graphical types, but all of them must have the given property, otherwise an error is yielded."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fids"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of indices of all opened figures."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "0 (zero)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Special id addressing the console and "},{"type": "link","children": [],"string": "its properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "case-sensitive tag's value of the targeted object. Values equal to a documented "},{"type": "varname","children": [],"string": "key"},{"type": "text","children": [],"string": " have a special meaning and must not be used as tag (please see below)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tagsPath"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A single case-sensitive character string containing a path pointing to the graphic entity. This path is made of the "},{"type": "literal","children": [],"string": "\"Tag\""},{"type": "text","children": [],"string": " values of the targeted entity and of its ascendants in the graphical hierarchy, under the format "},{"type": "literal","children": [],"string": "\"targetTag\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"figuretag/targetTag\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"figuretag/entity1tag/entity2tag/entitntag/targetTag\""},{"type": "text","children": [],"string": ". Wildcards \"*\" can also be used for multi-paths search. The first entity matching the path will be used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prop"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "text: case-insensitive name of the single property whose value must be retrieved. To get the list of all existing properties, see "},{"type": "link","children": [],"string": "graphics_entities"},{"type": "text","children": [],"string": " or "},{"type": "link","children": [],"string": "uicontrol"},{"type": "text","children": [],"string": " for User Interface objects. An error is yielded if the property does not exist for the targeted object."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A keyword among the following ones: "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "val"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Corresponding value of the targeted property."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["findobj", "set", "console_properties", "root_properties", "graphics_entities", "uicontrol_properties", "gcf", "gdf", "gca", "gda", "gce", "winsid"]},"set": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "set"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ajusta um valor de propriedade de uma objeto entidade gráfica ou de um objeto Interface do Usuário (User Interface)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["set(h, prop,val)            // h(prop) = val,  h.prop = val", "set(h, prop,val, prop2,val2, ..)", "set(tagsPath, prop,val)", "set(tagsPath, prop,val, prop2,val2, ..)", "set('current_figure', fig)  // scf(fig)", "set('current_axes', axes)   // sca(axes)", "set('current_entity', h)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": [{"type": "text","children": [],"string": "manipulador da entidade da qual a propriedade nomeada se deseja ajustar, "},{"type": "literal","children": [],"string": "h"},{"type": "text","children": [],"string": " pode ser um vetor de manipuladores, em tal caso, serão ajustados valores de propriedades para todos os objetos identificados por h "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tagsPath"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Case-sensitive character string providing the tag or the tags-path leading to the graphic component to process. This path is made of the strings recorded in the "},{"type": "literal","children": [],"string": ".Tag"},{"type": "text","children": [],"string": " property of the parent figure and of the chain of its children down to the target, like "},{"type": "literal","children": [],"string": "\"figuretag\""},{"type": "text","children": [],"string": " to target the figure with figure.tag==\"figuretag\", or "},{"type": "literal","children": [],"string": "\"figuretag/entitytag\""},{"type": "text","children": [],"string": " to target one of its children (as for an axes, a main uimenu item, a block of legends,..), or "},{"type": "literal","children": [],"string": "\"figuretag/entity1tag/entity2tag\""},{"type": "text","children": [],"string": ", etc. Wildcards can also be used for multi-paths search. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prop, prop2, ..."},{"type": "listitem","children": [{"type": "text","children": [],"string": "Escalares strings : nome que não diferencia maiúsculas de minúsculas das propriedades a serem ajustadas. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "val, val2, ..."},{"type": "listitem","children": [{"type": "text","children": [],"string": "value to assign to the property. Its type depends on the considered property. If "},{"type": "varname","children": [],"string": "h"},{"type": "text","children": [],"string": " and "},{"type": "varname","children": [],"string": "val"},{"type": "text","children": [],"string": " are vectors or matrices of same size, the multiple settings are done in an element-wise way. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fig"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Handle of a graphical figure. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Handle of an axes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"graphics_fonts": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "graphics_fonts"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Descrição de fontes utilizadas em figuras gráficas"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mudando a fonte"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Fontes utilizadas em figuras gráficas são selecionadas de um conjunto de fontes chamado fontes carregadas. Em outras palavras, as fontes carregadas são aquelas correntemente disponíveis em figuras gráficas. Uma lista destas fontes pode ser obtida utilizando-se a função "},{"type": "literal","children": [],"string": "xlfont"},{"type": "text","children": [],"string": " sem argumento. Por padrão, o Scilab possui um conjunto de 11 fontes carregadas. Este conjunto pode ser modificado e estendido utilizando-se a função "},{"type": "literal","children": [],"string": "xlfont"},{"type": "text","children": [],"string": " com um nome de fonte como argumento. A fonte carregada pode ser de um arquivo ou mesmo uma uma do sistema. Para conhecer a lista de fontes disponíveis no sistema, utilize o comando "},{"type": "literal","children": [],"string": "xlfont('AVAILABLE_FONTS')"},{"type": "text","children": [],"string": ". Para mais informações sobre como manipular fontes, veja "},{"type": "link","children": [],"string": "xlfont"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Aqui está a lista das 11 fontes padrões"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A fonte utilizada por uma entidade gráfica pode ser alterada através da propriedade "},{"type": "literal","children": [],"string": "font_style"},{"type": "text","children": [],"string": ". Esta é um inteiro positivo fazendo referência a uma das fontes. Seu valor deve estar entre 0, fazendo referência à primeira fonte, e o número de fontes carregadas menos um, fazendo referência à última fonte."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A propriedade "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " controla o anti-serrilhamento da fonte. Seu valor pode ser "},{"type": "literal","children": [],"string": "'on'"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "'off'"},{"type": "text","children": [],"string": ". Se for "},{"type": "literal","children": [],"string": "'on'"},{"type": "text","children": [],"string": "a fonte é suavizada, em caso contrário, ela não é."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Mudando o tamanho dos caracteres"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "O tamanho do texto de uma entidade gráfica é modificado através da propriedade "},{"type": "literal","children": [],"string": "font_size"},{"type": "text","children": [],"string": ". É um escalar especificando o tamanho dos caracteres exibidos."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "O tamanho do caractere do Scilab é diferente do tamanho do caractere Java. Aqui está uma equivalência entre as duas escalas."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "O tamanho do caractere pode não ser um inteiro. Neste caso, o resultado depende da propriedade "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " da entidade. Se a propriedade "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "'on'"},{"type": "text","children": [],"string": ", então o tamanho da fonte é interpolado entre os dois inteiros mais próximos. Por exemplo, um tamanho de fonte 2.5 exibe caracteres com tamanho Java 13. Se a propriedade "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " for "},{"type": "literal","children": [],"string": "'off'"},{"type": "text","children": [],"string": ", então a fonte exibida é truncada para a sua parte inteira. Por exemplo, um tamanho de fonte 2.5 exibe caracteres Java de tamanho 12."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["xlfont", "graphics_entities"]},"math_rendering_features_in_graphic": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Math rendering in Scilab graphics"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display mathematical equations in Scilab graphics through the LaTeX or MathML languages."},"string": []},"synopsis": [],"varlist": [],"seealso": ["xtitle", "axes_properties", "label_properties", "legend_properties", "text_properties", "xstringb", "xstringl", "xstring", "uicontrol", "uimenu"]},"stringbox": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "stringbox"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computa o retângulo de fronteira de um texto ou rótulo."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["rect = stringbox( string, x, y, [angle, [fontStyle, [fontSize]]] )", "rect = stringbox( Handle )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz 2x4 contendo as quatro coordenadas dos vértices do retângulo de fronteira."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings a ser encerrada "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais, coordenadas do ponto inferior esquerdo dos strings."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "angle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "ângulo de rotação dos strings em sentido horário e em graus ao redor do ponto "},{"type": "literal","children": [],"string": "(x,y)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fonStyle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro especificando o tipo da fonte. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontSize"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro especificando o tamanho da fonte. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um manipulador gráfico do tipo Text ou Label."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xstring", "xstringl", "xstringb"]},"text_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "text properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the Text entity properties"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains the handle of the parent. The parent of the text entity should be of the type "},{"type": "literal","children": [],"string": "\"Axes\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"Compound\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "children: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property contains a vector with the "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": " of the handle. However, text handles currently do not have any "},{"type": "literal","children": [],"string": "children"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "visible"},{"type": "text","children": [],"string": " property value for the entity . It should be "},{"type": "literal","children": [],"string": "\"on\" "},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". By default, the text is visible, the value's property is "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " the text is not displayed on the screen."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the matrix containing the strings of the object. The rows of the matrix are displayed horizontally, and the columns vertically."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interpreter: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "the interpreter to be used to render the strings, given as a matrix of the same size and dimensions as the "},{"type": "term","children": [],"string": "text"},{"type": "text","children": [],"string": " property, with elements chosen among "},{"type": "literal","children": [],"string": "\"auto\""},{"type": "text","children": [],"string": " (the default), "},{"type": "literal","children": [],"string": "\"latex\""},{"type": "text","children": [],"string": ",  "},{"type": "literal","children": [],"string": "\"mathml\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"none\""},{"type": "text","children": [],"string": ". See "},{"type": "link","children": [],"string": "LaTeX expressions"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Vector "},{"type": "literal","children": [],"string": "[x,y,[z]]"},{"type": "text","children": [],"string": " setting the position of the pivot of the text, in data units of the axes. By default, the pivot is set on the lower left corner of the framing box of the block of text."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_angle: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This property sets the orientation of the block of text around its pivot, in clockwise degrees starting from the (0-right) direction (it is definitely not related to the font slanting)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "alignment: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Specifies how the strings are aligned in their columns. The value must be "},{"type": "literal","children": [],"string": "\"left\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"center\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"right\""},{"type": "text","children": [],"string": ". It applies to all columns."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_style: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Specifies the font used to display the character strings. This is a positive integer referencing one of the loaded fonts. Its value must be between 0, referencing the first font, and the number of loaded fonts minus one, referencing the last font. For more information see "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_foreground: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field contains the color used to display the characters of the text. Its value should be a color index (relative to the current colormap)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font_size: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "It is a scalar specifying the displayed characters size. If "},{"type": "literal","children": [],"string": "fractional_font"},{"type": "text","children": [],"string": " property is "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " only the integer part of the value is used. For more information see "},{"type": "link","children": [],"string": "graphics_fonts"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fractional_font: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This property specify whether text is displayed using fractional font sizes. Its value must be either "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": ". If "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " the floating point value of "},{"type": "literal","children": [],"string": "font_size"},{"type": "text","children": [],"string": " is used for display and the font is anti-aliased. If "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " only the integer part is used and the font is not smoothed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box: "},{"type": "listitem","children": {"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ": a box is drawn around the block of text, made of a boxing frame or/and a filling background."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "\"off\" (default): no box is drawn."},"string": []}],"string": []},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_mode: "},{"type": "listitem","children": {"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " : draws a line as box border, provided that "},{"type": "literal","children": [],"string": ".box=\"on\""},{"type": "text","children": [],"string": " as well. The border's color is then set with "},{"type": "literal","children": [],"string": ".foreground"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " : no line as box border is drawn. The box's filling background is independently enabled/disabled with the "},{"type": "literal","children": [],"string": ".fill_mode"},{"type": "text","children": [],"string": " property."}],"string": []}],"string": []},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "foreground: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Color's index of the line used to draw the edge of the box when "},{"type": "literal","children": [],"string": ".box=\"on\""},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": ".line_mode=\"on\""},{"type": "text","children": [],"string": ". Its value refers to the current colormap. "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " is black (default) and "},{"type": "literal","children": [],"string": "-2"},{"type": "text","children": [],"string": " is white whatever is the colormap."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill_mode: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": ": enables the box background, provided that "},{"type": "literal","children": [],"string": ".box=\"on\""},{"type": "text","children": [],"string": " as well. The background's color can then be set with the "},{"type": "literal","children": [],"string": ".background"},{"type": "text","children": [],"string": " property."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " (default): disables the box background, that becomes transparent."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "background: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Index of the color used to fill the box around of the text, provided that "},{"type": "literal","children": [],"string": ".box=\"on\""},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": ".fill_mode=\"on\""},{"type": "text","children": [],"string": ". The color index is relative to the current colormap. Whatever is the colormap, "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " is black (default) and "},{"type": "literal","children": [],"string": "-2"},{"type": "text","children": [],"string": " is white."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text_box: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A two dimensional vector specifying the size of a rectangle in user coordinates. The rectangle is used when the text_box_mode property is set to "},{"type": "literal","children": [],"string": "\"centered\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"filled\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text_box_mode: "},{"type": "listitem","children": [{"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " : the strings are displayed using the given font, and "},{"type": "literal","children": [],"string": ".data"},{"type": "text","children": [],"string": " specifies the position of the lower-left corner of the frame boxing the whole block of text."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"centered\""},{"type": "text","children": [],"string": " : the text is displayed in the middle of the rectangle whose size is given by "},{"type": "literal","children": [],"string": ".text_box"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"filled\""},{"type": "text","children": [],"string": " : the font size of the strings will be expanded to fill the rectangle. Zooming updates the font size accordingly."}],"string": []}],"string": []},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When using the "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " or the "},{"type": "literal","children": [],"string": "\"centered\""},{"type": "text","children": [],"string": " modes, the text size remains constant upon zooming. They are the best modes to create annotations in a graph."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auto_dimensionning: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "auto_dimensionning set to \"off\" is equivalent to text_box_mode set to \"filled\". If text_box_mode is \"off\" or \"centered\" then it implies that auto_dimensionning is \"on\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_state: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "clip_state"},{"type": "text","children": [],"string": " property value for the text. Its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " this means that the text is not clipped."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"clipgrf\""},{"type": "text","children": [],"string": " this means that the text is clipped outside the Axes box."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " this means that the text is clipped outside the rectangle given by the property "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clip_box: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field contains the "},{"type": "literal","children": [],"string": "clip_box"},{"type": "text","children": [],"string": " property. Its value should be an empty matrix if clip_state is \"off\" or the vector "},{"type": "literal","children": [],"string": "[x,y,w,h"},{"type": "text","children": [],"string": "] (upper-left point width height)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "user_data: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This field can be use to store any scilab variable in the text data structure, and to retrieve it."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xstring", "label_properties", "legend_properties", "xtitle", "graphics_entities", "math_rendering_features_in_graphic"]},"titlepage": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "titlepage"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "adiciona título no meio de uma janela de gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "titlepage(str)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings "},"string": []},"string": []}],"string": []},"string": []},"seealso": "xtitle"},"xlfont": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xlfont"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "carrega uma fonte em um contexto gráfico ou pergunta a fonte carregada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xlfont(font-name)", "xlfont(font-filename)", "xlfont('reset')", "xlfont(font-name,font-id)", "xlfont(font-filename,font-id)", "xlfont(font-name,font-id,bold)", "xlfont(font-name,font-id,bold,italic)", "fonts=xlfont('AVAILABLE_FONTS')", "fonts=xlfont()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font-name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome da família da fonte"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font-filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo de uma fonte true type"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font-id"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro >= 0 ."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fonts"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor coluna de nomes de fontes"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bold"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano, %t para negrito"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "italic"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano, %t para itálico"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xnumb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xnumb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Imprime números"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xnumb(x,y,nums,[box,angle])", "hdl = xnumb(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,nums"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetores de mesmo tamanho "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valor inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "angle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor opcional de mesmo tamanho de "},{"type": "literal","children": [],"string": "x"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Text"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "text_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "xstring"},"xstring": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xstring"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "imprime strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xstring(x, y, str)", "xstring(x, y, str, angle)", "xstring(x, y, str, angle, box)", "hdl = xstring(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais, coordenadas do ponto inferior esquerdo dos strings."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "angle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real, ângulo horário em graus; O valor padrão é 0."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "box"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteio, o valor padrão é 0"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Text"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "text_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["text_properties", "math_rendering_features_in_graphic", "xnumb", "xtitle", "titlepage"]},"xstringb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xstringb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "escreve strings em uma caixa"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xstringb(x,y,str,w,h,[option])", "hdl = xstringb(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y,w,h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de 4 escalares reais definindo a caixa "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "option"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hdl"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "O argumento de classificação na sequência é reenviado para o identificador do objeto gráfico do tipo "},{"type": "literal","children": [],"string": "Text"},{"type": "text","children": [],"string": " criado pela função. Ele pode ser usado para modificador de propriedade (veja "},{"type": "link","children": [],"string": "text_properties"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["titlepage", "xstring", "xstringl", "xtitle"]},"xstringl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xstringl"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "computa uma caixa que cerca strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "rect=xstringl(x,y,str,[fontId,fontSize])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rect"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de reais de 4 entradas definindo a caixa "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalares reais, coordenadas do ponto infeirior esquerdo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontId"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro especificando o tipo de fonte "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontSize"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um inteiro especificando o tamanho da fonte"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["titlepage", "xstring", "xstringl", "xtitle", "stringbox"]},"move": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "move"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Move uma entidade gráfica e seus galhos. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["move(h,xy)", "move(h,xy,\"alone\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "manipulador da entidade a ser movida "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xy"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um array "},{"type": "literal","children": [],"string": "[dx,dy]"},{"type": "text","children": [],"string": " que fornece o vetor translação a ser aplicado"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"alone\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "palavra-chave string (opcional)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["get", "set", "figure_properties", "graphics_entities"]},"orthProj": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "orthProj"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes the orthogonal projection of a point to a polyline in the plane. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[d,ptp,ind,c] = orthProj(data,pt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a n by 2 array. The first column contains the X coordinates of the polyline, while the second one contains the Y coordinates."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an array with 2 entries: the coordinates of the point"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The minimum distance between the given point and a  polyline data point."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ptp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an array with 2 entries: the coordinates of the point that realizes the minimum distance"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The polyline closest point lies on the segment "},{"type": "literal","children": [],"string": "[ind ind+1]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The interpolation coefficient of the orthogonal projection."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["proj", "householder", "scaling"]},"rotate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rotate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "rotação de um conjunto de pontos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xy1=rotate(xy,[theta,orig])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de tamanho (2,.). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xy1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de tamanho (2,.). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "theta"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real, ângulo em radianos; o valor padrão é 0. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "centro de rotação; o valor padrão é [0;0]."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"scaling": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scaling"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "transformação afim de um conjunto de pontos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xy1=scaling(xy,scalingFactor,[orig])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xy1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de tamanho (2,.). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xy"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de tamanho (2,.). "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scalingFactor"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar real, coeficiente da transformação linear. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de deslocamento; o valor padrão é [0;0]."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"light": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "light"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "creates a light object in the given axes"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["light()", "light(<LightProperty>)", "light(axes_handle, <LightProperty>)", "h = light(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "axes_handle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The handle of the axes, if omitted is used the current axes."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<LightProperty>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Optional argument specifying the light properties. The optional arguments are set using syntax: "},{"type": "literal","children": [],"string": "\"light(propname1=propvalue1, propname2=propvalue2, ..., propnameN=propvalueN)\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Following there is the list of optional arguments:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "visible: "},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This field defines if the light is enabled "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or disabled "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field defines the type of light used. There are two types available:"},{"type": "literal","children": [],"string": "\"directional\""},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": ". Directional lights are positioned infinitely far from the surface thus emitting parallel rays."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Point lights are defined as a point in space thus emitting rays in all directions. The default value is "},{"type": "literal","children": [],"string": "\"point\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "direction: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field defines the ray direction for directional light. The direction can be changed using a 3 element vector "},{"type": "literal","children": [],"string": "\"[x, y, z]\""},{"type": "text","children": [],"string": " representing a vector starting from the origin."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The default value is "},{"type": "literal","children": [],"string": "\"[0 0 1]\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field defines the light position for point light. The position can be changed using a 3 element vector "},{"type": "literal","children": [],"string": "\"[x, y, z]\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The default value is "},{"type": "literal","children": [],"string": "\"[0 0 1]\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ambient_color: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field defines the ambient color of the light. The color is defined by a 3 element vector "},{"type": "literal","children": [],"string": "\"[red, green, blue]\""},{"type": "text","children": [],"string": " with each element in the range [0, 1]."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The default value is "},{"type": "literal","children": [],"string": "\"[0.1 0.1 0.1]\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "diffuse_color: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field defines the diffuse color of the light. The color is defined by a 3 element vector "},{"type": "literal","children": [],"string": "\"[red, green, blue]\""},{"type": "text","children": [],"string": " with each element in the range [0, 1]."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The default value is "},{"type": "literal","children": [],"string": "\"[1 1 1]\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "specular_color: "},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This field defines the specular color of the light. The color is defined by a 3 element vector "},{"type": "literal","children": [],"string": "\"[red, green, blue]\""},{"type": "text","children": [],"string": " with each element in the range [0, 1]."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The default value is "},{"type": "literal","children": [],"string": "\"[1 1 1]\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This optional output contains a handle to a Light entity. For a list of properties, see "},{"type": "link","children": [],"string": "light_properties"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["lighting", "light_properties", "surface_properties", "delete"]},"light_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "light properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Light overview"},"string": []},"synopsis": [],"varlist": [],"seealso": ["lighting", "light", "delete"]},"lighting": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lighting"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lighting overview"},"string": []},"synopsis": [],"varlist": [],"seealso": ["light", "light_properties", "surface_properties", "delete"]},"driver": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "driver"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "seleciona um driver gráfico"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["driver(driver_name)", "current_driver=driver()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "driver_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, driver a ser selecionado."},"string": []},"string": []}],"string": []},"string": []},"seealso": "clf"},"xend": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xend"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "termina uma sessão de gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xend()"},"varlist": [],"seealso": "xinit"},"xinit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xinit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inicialização de um driver de gráficos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xinit(FileName)", "xinit()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "FileName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string: nome do arquivo a exportar"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["driver", "xend", "scf"]},"xs2bmp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2bmp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "envia gráficos para um arquivo em sintaxe BMP"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2bmp(win_num,filen)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2emf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2emf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "envia gráficos para um arquivo em sintaxe EMF (apenas para Windows)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2emf(win_num,filen [,orientation])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar inteiro "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o nome do arquivo."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "caractere opcional com valores possíveis 'p' (retrato) ou 'l' (paisagem). O valor padrão é 'p'."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2eps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2eps"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "salva gráficos em um arquivo Postscript"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2eps(win_num,filen [,orientation])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros ou escalar inteiro "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "caractere opcional, com possíveis valores 'p' (retrato) ou 'l' (paisagem). O valor padrão é 'p'."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2gif": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2gif"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "envia gráficos a um arquivo em sintaxe GIF"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2gif(win_num,filen)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar inteiro ou vetor de inteiros. "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2jpg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2jpg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "envia gráficos a um arquivo em sintaxe JPG"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2jpg(win_num,filen)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2pdf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2pdf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "salva gráficos a um arquivo PDF"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2pdf(win_num,filen [,orientation])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "caractere opcional, com possíveis valores 'p' (retrato) ou 'l' (paisagem). O valor padrão é 'p'."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2png": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2png"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "envia gráficos a um arquivo em sintaxe PNG"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2png(win_num,filen)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "escalar inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2ppm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2ppm"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "envia gráficos para um arquivo em sintaxe PPM"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2ppm(win_num,filen)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros ou escalar inteiro "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o nome do arquivo "},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2ps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2ps"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "envia gráficos a um arquivo em sintaxe PS"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2ps(win_num,filen,[orientation])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros ou escalar inteiro "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "caractere opcional, com possíveis valores 'p' (retrato) ou 'l' (paisagem). O valor padrão é 'p'."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xs2svg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xs2svg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Salva gráficos em um arquivo SVG"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xs2svg(win_num,filen [,orientation])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "win_num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros ou escalar inteiro "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filen"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome do arquivo "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "orientation"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "caractere opcional, com possíveis valores 'p' (retrato) ou 'l' (paisagem). O valor padrão é 'p'"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"about": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "about"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "show \"about scilab\" dialog box"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "about()"},"varlist": [],"seealso": []},"clipboard": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clipboard"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Copy and paste strings to and from the system clipboard."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["clipboard(\"copy\",data)", "str=clipboard(\"paste\")", "clipboard(\"do\",\"paste\")", "clipboard(\"do\",\"copy\")", "clipboard(\"do\",\"empty\")", "clipboard(winnum,\"EMF\")", "clipboard(winnum,\"DIB\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scilab variable or data to set as the clipboard contents."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The clipboard contents returned as a Scilab character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "winnum"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Number of the graphic window to set as the clipboard contents."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"close": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "close"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Closes graphic figures, progression or wait bars, the help browser, xcos, the variables browser or editor."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["close", "close(H)", "close doc", "close xcos", "close xcos!", "close editvar", "close browsevar"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vector of graphic figures handles or ids, or of handles of progression bar or wait bar."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["delete", "exit", "mclose", "h5close"]},"console_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Console properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of console object properties."},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ShowHiddenHandles"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A boolean or a string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Manages the display of all children handles in figures including default menus ones."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Default value is "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "UseDeprecatedSkin"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A boolean or a string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Manages the rendering of uicontrols."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Default value is "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " and uicontrols look and feel is managed by operating system."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Setting this value to "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " will make the uicontrols have an old TK look and feel."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ShowHiddenProperties"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A boolean or a string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Manages the display of uicontrols properties."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Default value is "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": " and only the uicontrols properties used on the Java side are displayed."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Setting this value to "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " will make all available properties displayed (for example a "},{"type": "literal","children": [],"string": "ListboxTop"},{"type": "text","children": [],"string": " property will be displayed for "},{"type": "literal","children": [],"string": "pushbutton"},{"type": "text","children": [],"string": " uicontrols."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Userdata"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Any data of any type, that you want to ascribe to the console."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Tag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Single string, that can be used as a console custom text id."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["root_properties", "usecanvas", "system_setproperty", "getsystemmetrics", "setlookandfeel", "uicontrol"]},"createWindow": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "createWindow"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a window"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "f = createWindow();"},"varlist": [],"seealso": "figure"},"exportUI": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "exportUI"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Call the file export graphical interface"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["exportUI(figId)", "exportUI(fig)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "figId"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, Id of the figure to export."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Figure handle, handle of the figure to export."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xs2jpg", "xs2eps", "xs2png", "xs2svg", "xs2pdf"]},"figure": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "figure"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a figure"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["figure(num)", "figure(\"PropertyName1\", Propertyvalue1, ..., ..., \"PropertyNameN\", PropertyvalueN)", "h = figure(...)"]},"varlist": [],"seealso": ["scf", "gcf", "createWindow", "figure_properties", "close"]},"findobj": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findobj"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "find an object with specified property"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h = findobj()", "h = findobj(propertyName, propertyValue)", "h = findobj(propertyName, propertyValue, operator, propertyName, propertyValue, ...)", "h = findobj(\"-property\", propertyName, ...)", "h = findobj(searchHandles, ...)", "h = findobj(..., '-depth', d, ...)", "h = findobj(..., '-flat', ...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "propertyName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string character Name of the property to test (case unsensitive)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "propertyValue"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string specify the value the tested property should be equal to (case sensitive)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "operator"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string belonging to the set {\"-and\", \"-or\", \"-not\"}."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "searchHandles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vector of graphic handles where the search is restricted to."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer, the depth of the search."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "handles of the found objects."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uicontrol", "uimenu", "set", "get"]},"gcbo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gcbo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Handle of the object whose callback is executing."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "gcbo"},"varlist": [],"seealso": "getcallbackobject"},"getcallbackobject": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getcallbackobject"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return the handle of the object whose callback is executing."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h = getcallbackobject(objectUID)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Handle: the handle of the object whose callback is executing."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "objectUID"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: UID of the Java object."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "gcbo"},"getinstalledlookandfeels": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getinstalledlookandfeels"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns a string matrix with all Look and Feels."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "lnf=getinstalledlookandfeels()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "lnf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["setlookandfeel", "getlookandfeel"]},"getlookandfeel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getlookandfeel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gets the current default look and feel."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "lnf=getlookandfeel()"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lnf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string with current look and feel."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["getinstalledlookandfeels", "setlookandfeel"]},"getvalue": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getvalue"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "xwindow dialog for data acquisition"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[ok, x1,..,x14] = getvalue(desc, labels, typ, ini)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "desc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of strings, dialog general comment. Any \"<\" character must be replaced with \"&lt;\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labels"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n column vector of strings, "},{"type": "literal","children": [],"string": "labels(i)"},{"type": "text","children": [],"string": " is the label of the ith required value."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "list(typ_1,dim_1,..,typ_n,dim_n)"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "defines the type of the ith value. By default, inputs are interpreted as decimal numbers. Columns of (rows of) values must be separated with \";\". typ_i may have the following values:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "defines the size of the ith value it must be an integer or a 2-vector of integer, -1 stands for undefined dimension."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ini"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n column vector of strings, "},{"type": "literal","children": [],"string": "ini(i)"},{"type": "text","children": [],"string": " gives the suggested response for the ith required value"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean ,%t if ok button pressed, %f if cancel button pressed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "contains the ith value if ok=%t. If left hand side has one more "},{"type": "literal","children": [],"string": "xi"},{"type": "text","children": [],"string": " than required values the last "},{"type": "literal","children": [],"string": "xi"},{"type": "text","children": [],"string": " contains the vector of answered strings."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["x_mdialog", "x_matrix", "x_dialog"]},"ieditor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Editor Interativo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Interactive plot editor"},"string": []},"synopsis": [],"varlist": [],"seealso": ["object_editor", "ged", "graphics_entities", "set", "get"]},"loadGui": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "loadGui"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Load a graphic user interface from a saved file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "loadGui(filename)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string containing the path of the file"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["saveGui", "load", "save"]},"messagebox": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "messagebox"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open a message box."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[btn] = messagebox(msg)", "[btn] = messagebox(msg, msgboxtitle)", "[btn] = messagebox(msg, msgboxtitle, msgboxicon)", "[btn] = messagebox(msg, msgboxtitle, msgboxicon)", "[btn] = messagebox(msg, msgboxtitle, msgboxicon, buttons)", "[btn] = messagebox(msg, msgboxtitle, msgboxicon, buttons, ismodal)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of strings: the message box displays each entry of this matrix (one entry per line)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msgboxtitle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: the title of the message box (default value is \"Scilab Message\")."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msgboxicon"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String: the name of the icon to be displayed in the message box, its possible values are:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"error\""},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"hourglass\""},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"info\""},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"passwd\""},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"question\""},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"warning\""},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"scilab\": default icon"},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "buttons"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1xn vector of strings: the names of the buttons to be displayed in the message box. By default, only one button is displayed with label \"OK\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modal"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: \"modal\" to create a modal dialog, any other string to create a non-modal dialog. Please note that \"modal\" can replace any of the other input arguments except msg (See examples)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "btn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scalar: number of the button that the user pressed (1 is the leftmost button) for a modal dialog, 0 else."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"printfigure": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "printfigure"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Opens a printing dialog and prints a figure."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["printfigure(figid)", "status = printfigure(figid)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "figid"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real: the id of the figure to be printed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean: "},{"type": "emphasis","children": [],"string": "%T"},{"type": "text","children": [],"string": " if the printing succeeds, "},{"type": "emphasis","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["toprint", "printsetupbox"]},"printsetupbox": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "printsetupbox"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display print dialog box."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["printsetupbox()", "status=printsetupbox()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean: "},{"type": "emphasis","children": [],"string": "%T"},{"type": "text","children": [],"string": " if the user clicked on the "},{"type": "literal","children": [],"string": "OK"},{"type": "text","children": [],"string": " button, "},{"type": "emphasis","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["toprint", "printfigure"]},"progressionbar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "progressionbar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Draw a progression bar"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["winId=progressionbar(mes)", "progressionbar(winId[,mes])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, message to display."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "winId"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer greater than 0, window identificator."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "waitbar"},"root_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "root_properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "description of the root object properties."},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Root properties"},{"type": "listitem","children": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "screensize_px: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The screen size in pixels."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "screensize_pt: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The screen size in points."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "screensize_mm: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The screen size in millimeters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "screensize_cm: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The screen size in centimeters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "screensize_in: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The screen size in inches."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "screensize_norm: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The normalized screen size."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "screendepth: "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The number of bits used to encode colors."},"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["getsystemmetrics", "system_getproperty", "console_properties", "usecanvas", "getlookandfeel", "preferences", "printsetupbox"]},"saveGui": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "saveGui"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Save a graphic user interface in a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "saveGui(fig, filename)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fig"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "handle, the handle of the current figure"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string containing the path of the file"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["loadGui", "load", "save"]},"setlookandfeel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setlookandfeel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sets the current default look and feel."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["bok=setlookandfeel()", "bok=setlookandfeel(lnf)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lnf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string with a look and feel."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["getinstalledlookandfeels", "getlookandfeel"]},"toolbar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "toolbar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "show or hide a toolbar"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["state1=toolbar(winnum,state2)", "state1=toolbar(winnum)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "state1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns toolbar's state 'on' or 'off'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "winum"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "window's number (-1: Scilab console window)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "state2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'on' or 'off' set toolbar's state"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"toprint": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "toprint"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Send text or figure to the printer."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["toprint(filename)", "toprint(linestoprint,pageheader)", "toprint(figid)", "toprint(figid,output)", "status = toprint(filename)", "status = toprint(linestoprint,pageheader)", "status = toprint(figid)", "status = toprint(figid,output)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: path of the text file to be printed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "linestoprint"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String matrix: text to be printed, each entry is a line in printed pages."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pageheader"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: header of printed pages."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "figid"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real: the id of the figure to be printed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "output"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String: printing output type, must be "},{"type": "emphasis","children": [],"string": "\"pos\""},{"type": "text","children": [],"string": " for PostScript or "},{"type": "emphasis","children": [],"string": "\"gdi\""},{"type": "text","children": [],"string": " for Bitmap format ("},{"type": "emphasis","children": [],"string": "\"gdi\""},{"type": "text","children": [],"string": " by default)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean: "},{"type": "emphasis","children": [],"string": "%T"},{"type": "text","children": [],"string": " if the printing succeeds, "},{"type": "emphasis","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["printfigure", "printsetupbox"]},"uicontrol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uicontrol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a Graphic User Interface object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["uicontrol(PropertyName,PropertyValue,...)", "uicontrol(parent,PropertyName,PropertyValue,...)", "uicontrol(uich)", "h = uicontrol(...)"]},"varlist": [],"seealso": ["uicontrol_properties", "figure", "set", "get", "uimenu", "math_rendering_features_in_graphic"]},"uicontrol_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uicontrol properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the uicontrol properties."},"string": []},"synopsis": [],"varlist": [],"seealso": ["uicontrol", "console_properties", "set", "get"]},"uigetdir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uigetdir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "dialog for selecting a directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["directory = uigetdir()", "directory = uigetdir(start_path)", "directory = uigetdir(start_path, title)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "start_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string which gives the initial directory used for search. By default uigetdir uses current working directory."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the title for the uigetdir window."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "directory"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is the user selected directory if user answers \"Ok\" or the \" \" string if user cancels."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uigetfile", "uiputfile"]},"uigetfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uigetfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "dialog window to get a file(s) name(s), path and filter index"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["PathFileName = uigetfile()", "PathFileName = uigetfile(file_mask)", "PathFileName = uigetfile(file_mask, dir)", "PathFileName = uigetfile(file_mask, dir, boxTitle)", "PathFileName = uigetfile(file_mask, dir, boxTitle, multipleSelection)", "[PathFileName, Path] = uigetfile(..)", "[PathFileName, Path, FilterIndex] = uigetfile(..)"]},"varlist": [],"seealso": ["uiputfile", "uigetdir", "x_dialog", "file", "read", "write", "exec"]},"uigetfont": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uigetfont"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Opens a dialog for selecting a font."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[fontname, fontsize, bold, italic] = uigetfont()", "[fontname, fontsize, bold, italic] = uigetfont(defaultfontname)", "[fontname, fontsize, bold, italic] = uigetfont(defaultfontname, defaultfontsize)", "[fontname, fontsize, bold, italic] = uigetfont(defaultfontname, defaultfontsize , defaultbold)", "[fontname, fontsize, bold, italic] = uigetfont(defaultfontname, defaultfontsize , defaultbold, defaultitalic);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "defaultfontname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: the default font name to select in the dialog."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "defaultfontsize"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scalar: the default font size to select in the dialog."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "defaultbold"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Boolean: the default bold attribute in the dialog (%T for bold font, %F otherwise)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "defaultitalic"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Boolean: the default italic attribute in the dialog (%T for bold font, %F otherwise)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The selected font name (\"\" if the user cancels)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontsize"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The selected font size ([] if the user cancels)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bold"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "%T if bold attribute has been selected, %F otherwise ([] if the user cancels)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "italic"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "%T if italic attribute has been selected, %F otherwise ([] if the user cancels)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "xlfont"},"uiputfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiputfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open standard dialog box for selecting and saving file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["PathFileName = uiputfile()", "PathFileName = uiputfile(file_mask)", "PathFileName = uiputfile(file_mask, dir)", "PathFileName = uiputfile(file_mask, dir, boxTitle)", "[PathFileName, Path] = uiputfile(..)", "[PathFileName, Path, FilterIndex] = uiputfile(..)"]},"varlist": [],"seealso": ["uigetfile", "uigetdir"]},"usecanvas": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "usecanvas"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get/Set the main component used for Scilab graphics."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[canvasused] = usecanvas([usecanvasfordisplay]);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "canvasused"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Boolean:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " if a \"GLCanvas\" is used for graphics display (Mixing uicontrols and graphics "},{"type": "emphasis","children": [],"string": "not available"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " if a \"GLJPanel\" is used for graphics display (Mixing uicontrols and graphics available)."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "usecanvasfordisplay"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Boolean:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " to use a \"GLCanvas\" for graphics display (Mixing uicontrols and graphics "},{"type": "emphasis","children": [],"string": "not available"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " to use a \"GLJPanel\" for graphics display (Mixing uicontrols and graphics available)."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"waitbar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "waitbar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Draw a waitbar"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["winH=waitbar(x)", "winH=waitbar(x,mes)", "winH=waitbar(mes)", "waitbar(x,winH)", "waitbar(mes,winH)", "waitbar(x,mes,winH)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real, fraction to display."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, message to display."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "winH"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Handle of the waitbar."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "progressionbar"},"x_choices": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "x_choices"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive Xwindow choices through toggle buttons"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "rep=x_choices(title,items)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of strings, title for the popup window."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "items"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a list of items "},{"type": "literal","children": [],"string": "items=list(item1,...,itemn)"},{"type": "text","children": [],"string": ", where each "},{"type": "literal","children": [],"string": "item"},{"type": "text","children": [],"string": " is also a list of the following type : "},{"type": "literal","children": [],"string": "item=list('label',default_choice,choices)"},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "default_choice"},{"type": "text","children": [],"string": " is an integer which gives the default toggle on entry and "},{"type": "literal","children": [],"string": "choices"},{"type": "text","children": [],"string": " is a row vector of strings which gives the possible choices."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rep"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an integer vector which gives for each item the number of the  selected toggle. If user exits dialog with \"cancel\" button "},{"type": "literal","children": [],"string": "rep"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"x_choose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "x_choose"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive window choice (modal dialog)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[num]=x_choose(items,title [,button])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "items"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of string,  items to choose"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of string, comment for the dialog"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "button"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, text to appear in the button. Default value is 'Cancel'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, chosen item number or 0 if dialog resumed with \"Cancel\" button"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["x_choose_modeless", "x_choices", "x_mdialog", "getvalue", "unix_g"]},"x_choose_modeless": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "x_choose_modeless"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive window choice (not modal dialog)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[num]=x_choose_modeless(items,title [,button])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "items"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of string,  items to choose"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of string, comment for the dialog"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "button"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, text to appear in the button. Default value is 'Cancel'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, chosen item number or 0 if dialog resumed with \"Cancel\" button"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["x_choose", "x_choices", "x_mdialog", "getvalue", "unix_g"]},"x_dialog": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "x_dialog"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Dialog for interactive multi-lines input."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = x_dialog(labels, valueini)", "result = x_dialog(labels, valueini, ispassword)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labels"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of strings, comment for dialog"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "valueini"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n column vector of strings, initial value suggested"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ispassword"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean scalar: when "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": ", this dialog will be used to get a password, the characters typed by the user will be hidden and returned value will contains a single string. Default value is "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "User answer: n column vector of strings if returned with \"Ok\" button or [] if returned with \"Cancel\" button"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["x_mdialog", "x_matrix", "evstr", "execstr"]},"x_matrix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "x_matrix"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Edits a matrix and waits for validation (modal)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "matrixOut = x_matrix(Header, matrixIn)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Header"},{"type": "listitem","children": [{"type": "text","children": [],"string": "column vector of text: Text displayed before the matrix. Extended UTF-8 characters are supported. Any element starting with \"<body>\" can use HTML.4 tags afterward. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "matrixIn"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Initial vector or matrix of booleans, encoded integers, real or complex numbers, or text. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "matrixOut"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Modified matrix, of the same type than "},{"type": "varname","children": [],"string": "matrixIn"},{"type": "text","children": [],"string": ", if "},{"type": "emphasis","children": [],"string": "\"OK\""},{"type": "text","children": [],"string": " is pressed. Or "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " if "},{"type": "emphasis","children": [],"string": "\"Cancel\""},{"type": "text","children": [],"string": " is pressed. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["x_mdialog", "x_dialog", "editvar", "uicontrol", "messagebox", "prettyprint"]},"x_mdialog": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "x_mdialog"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Dialog for interactive vector/matrix input."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result=x_mdialog(title, labels, default_inputs_vector)", "result=x_mdialog(title, labels, default_inputs_vector, ispassword)", "result=x_mdialog(title, labelsv, labelsh, default_input_matrix)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of strings, dialog general comment"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labels"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n column vector of strings, "},{"type": "literal","children": [],"string": "labels(i)"},{"type": "text","children": [],"string": " is the label of the ith required value"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_inputs_vector"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n column vector of strings, "},{"type": "literal","children": [],"string": "default_inputs_vector(i)"},{"type": "text","children": [],"string": " is the initial value of the ith required value"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ispassword"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n column vector of booleans: if "},{"type": "literal","children": [],"string": "ispassword(i)"},{"type": "text","children": [],"string": " value is "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": ", the ith entry/input will be used to get a password, the characters typed by the user will be hidden and returned value will contains a single string. Default value is "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labelsv"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n vector of strings, "},{"type": "literal","children": [],"string": "labelsv(i)"},{"type": "text","children": [],"string": " is the label of the ith line of the required matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labelsh"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "m vector of strings, "},{"type": "literal","children": [],"string": "labelsh(j)"},{"type": "text","children": [],"string": " is the label of the jth column of the required matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_input_matrix"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n x m matrix of strings, "},{"type": "literal","children": [],"string": "default_input_matrix(i,j)"},{"type": "text","children": [],"string": " is the initial value of the (i,j) element of then required matrix"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "n x m matrix of string if returned with \"Ok\" button or [] if returned with \"Cancel\" button"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["editvar", "x_dialog", "x_choose", "messagebox", "getvalue", "evstr", "execstr"]},"bevel_border_properties": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "Bevel border properties"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "Soft bevel border properties"},"string": []}],"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the soft-bevel and bevel borders properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["bevelBorder = createBorder(\"bevel\", type)", "bevelBorder = createBorder(\"bevel\", type, hlouter, shadowouter)", "bevelBorder = createBorder(\"bevel\", type, hlouter, hlinner, shadowouter, shadowinner)", "bevelBorder = createBorder(\"softbevel\", type)", "bevelBorder = createBorder(\"softbevel\", type, hlouter, shadowouter)", "bevelBorder = createBorder(\"softbevel\", type, hlouter, hlinner, shadowouter, shadowinner)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"lowered\" | \"raised\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The type of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hlouter"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": " used for the outer edge highlight."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hlinner"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": " used for the inner edge highlight."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shadowouter"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": " used for the outer shadow area."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shadowinner"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": " used for the inner shadow area."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bevelBorder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorder", "createBorderFont", "uicontrol", "uicontrol_properties"]},"compound_border_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Compound border properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the compound borders properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["compoundBorder = createBorder(\"compound\")", "compoundBorder = createBorder(\"compound\", outer, inner)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outer"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Border object"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A border created by "},{"type": "link","children": [],"string": "createBorder"},{"type": "text","children": [],"string": " used as the outer edge of the compound border."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "inner"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Border object"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A border created by "},{"type": "link","children": [],"string": "createBorder"},{"type": "text","children": [],"string": " used as the inner edge of the compound border."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "compoundBorder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorder", "createBorderFont", "uicontrol", "uicontrol_properties"]},"createBorder": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "createBorder"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a border for a frame uicontrol."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "border = createBorder(borderType, varargin)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "borderType"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The type of the border to be created. Available types of borders are listed below and their specific properties are detailed on dedicated help page:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"none\": No border will be added to the frame (default). No property is available for this type."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"line\": A simple "},{"type": "link","children": [],"string": "line border"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"bevel\": A "},{"type": "link","children": [],"string": "beveled border"},{"type": "text","children": [],"string": " using shades."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"softbevel\": A "},{"type": "link","children": [],"string": "soft beveled border"},{"type": "text","children": [],"string": " using shades with softened corners."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"etched\": A "},{"type": "link","children": [],"string": "etched style border"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"titled\": A "},{"type": "link","children": [],"string": "border with a title"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"empty\": An "},{"type": "link","children": [],"string": "empty border"},{"type": "text","children": [],"string": " that is not drawn but takes space."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"compound\": A "},{"type": "link","children": [],"string": "compound border"},{"type": "text","children": [],"string": " mixing other types of borders."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"matte\": A "},{"type": "link","children": [],"string": "matte-look border"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "All "},{"type": "literal","children": [],"string": "borderType"},{"type": "text","children": [],"string": " specific properties."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "border"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorderFont", "uicontrol", "uicontrol_properties"]},"createBorderFont": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "createBorderFont"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a font for an uicontrol border."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["createBorderFont(fontname, fontsize)", "createBorderFont(fontname, fontsize, fontweight)", "createBorderFont(fontname, fontsize, fontweight, fontangle)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontname"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument sets the name of the font. This name must be valid according to available fonts."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "literal","children": [],"string": "fontname"},{"type": "text","children": [],"string": " is equal to "},{"type": "literal","children": [],"string": "\"\""},{"type": "text","children": [],"string": ", the font used will be the Look and Feel default one."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontsize"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real scalar"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument sets the size of the font in points."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "literal","children": [],"string": "fontsize"},{"type": "text","children": [],"string": " is equal to "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": ", the font size used will be the Look and Feel default one."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontweight"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "{\"normal\"} | \"bold\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument sets the weight of the font."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "literal","children": [],"string": "fontweight"},{"type": "text","children": [],"string": " is not given, the font weight used will be the Look and Feel default one."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fontangle"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "{\"normal\"} | \"italic\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This argument sets the slant of the font."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "literal","children": [],"string": "fontangle"},{"type": "text","children": [],"string": " is not given, the font angle used will be the Look and Feel default one."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"empty_border_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Empty border properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the empty borders properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["emptyBorder = createBorder(\"empty\")", "emptyBorder = createBorder(\"empty\", top, left, bottom, right)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "top"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the top of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "left"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the left of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bottom"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the bottom of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "right"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the right of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "emptyBorder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorder", "createBorderFont", "uicontrol", "uicontrol_properties"]},"etched_border_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Etched border properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the etched borders properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["etchedBorder = createBorder(\"etched\")", "etchedBorder = createBorder(\"etched\", type)", "etchedBorder = createBorder(\"etched\", hl, shadow)", "etchedBorder = createBorder(\"etched\", type, hl, shadow)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"lowered\" | \"raised\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The type of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "hl"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": " used for border highlights."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "shadow"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": " used for the border shadows."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "etchedBorder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorder", "createBorderFont", "uicontrol", "uicontrol_properties"]},"line_border_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Line border properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the line borders properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["lineBorder = createBorder(\"line\", color)", "lineBorder = createBorder(\"line\", color, thickness)", "lineBorder = createBorder(\"line\", color, thickness, rounded)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color of the border or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "thickness"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The thickness (in pixels) of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rounded"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Boolean or String"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This property indicates if the created border angles must be rounded or not."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Available string values are "},{"type": "literal","children": [],"string": "\"on\""},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "\"off\""},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lineBorder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorder", "createBorderFont", "uicontrol", "uicontrol_properties"]},"matte_border_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Matte border properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the matte borders properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "matteBorder = createBorder(\"matte\", top, left, bottom, right, color)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "top"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the top of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "left"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the left of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bottom"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the bottom of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "right"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Real integer value"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The width (in pixels) of the right of the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the color of the border or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "matteBorder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorder", "createBorderFont", "uicontrol", "uicontrol_properties"]},"titled_border_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Titled border properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the titled borders properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["titledBorder = createBorder(\"titled\", title)", "titledBorder = createBorder(\"titled\", border)", "titledBorder = createBorder(\"titled\", border, title)", "titledBorder = createBorder(\"titled\", border, title, justification, position)", "titledBorder = createBorder(\"titled\", border, title, justification, position, font)", "titledBorder = createBorder(\"titled\", border, title, justification, position, font, color)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The title of the border."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the "},{"type": "literal","children": [],"string": "border"},{"type": "text","children": [],"string": " argument is not given, then a default border (based on current look and feel) will be created."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "border"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Border object"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A border created by "},{"type": "link","children": [],"string": "createBorder"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "justification"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"left\" | \"center\" | \"right\" | {\"leading\"} | \"trailing\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The justification of the title."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "\"above_top\" | {\"top\"} | \"below_top\" | \"above_bottom\" | \"bottom\" | \"below_bottom\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The vertical position of the title related to the border."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "font"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Font object"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "A border font created by "},{"type": "link","children": [],"string": "createBorderFont"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "color"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The color name of the title or a string like "},{"type": "literal","children": [],"string": "#FFFFFF"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "titledBorder"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created border."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["createBorder", "createBorderFont", "uicontrol", "uicontrol_properties"]},"border_constraints_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Border Constraints Properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the border constraints set of properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["constraints = createConstraints(\"border\")", "constraints = createConstraints(\"border\", position)", "constraints = createConstraints(\"border\", position, preferredsize)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "\"top\" | \"left\" | {\"center\"} | \"right\" |\"bottom\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The position of the element in the layout"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "preferredsize"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "[width, height]"},{"type": "text","children": [],"string": " a 1-by-2 matrix of doubles, [-1, -1] by default."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The preferred "},{"type": "literal","children": [],"string": "width"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "height"},{"type": "text","children": [],"string": " of the element in the layout in pixels if not constrained."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "constraints"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created constraints."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["layout", "createConstraints", "uicontrol", "uicontrol_properties"]},"border_layout_options_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Border Layout Options Properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the border layout options set of properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["layout_options = createLayoutOptions(\"border\")", "layout_options = createLayoutOptions(\"border\", padding)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "padding"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "[pad_x, pad_y]"},{"type": "text","children": [],"string": " a 1-by-2 matrix of doubles, [0,0] by default."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The padding between elements of the border layout in pixels."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "layout_options"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created layout_options object"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["layout", "createLayoutOptions", "uicontrol", "uicontrol_properties"]},"createConstraints": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "createConstraints"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates the layout constraints structure for a uicontrol."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "constraints = createConstraints(constraintsType, varargin)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "constraintsType"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The type of the layout constraints to be created. Available types of constraints are listed below and their specific properties are detailed on dedicated help page:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"none\" or \"nolayout\": No constraints will be added to the uicontrol layout."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"grid\": A "},{"type": "link","children": [],"string": "grid layout constraint"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"border\": A "},{"type": "link","children": [],"string": "border layout constraint"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"gridbag\": A "},{"type": "link","children": [],"string": "gridbag layout constraint"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "All "},{"type": "literal","children": [],"string": "constraintsType"},{"type": "text","children": [],"string": " specific properties."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "constraints"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created constraints."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uicontrol", "uicontrol_properties"]},"createLayoutOptions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "createLayoutOptions"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "text","children": [],"string": "Creates the layout options for a "},{"type": "literal","children": [],"string": "frame"},{"type": "text","children": [],"string": " uicontrol or a figure"}],"string": []},"synopsis": {"type": "synopsis","children": [],"string": "layout_options = createLayoutOptions(constType, varargin)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "constType"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The type of the layout options to be created. Available types of options are listed below and their specific properties are detailed on dedicated help page:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"none\" or \"nolayout\": No layout options added to the uicontrol. No property is available for this type."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"grid\": the "},{"type": "link","children": [],"string": "grid options"},{"type": "text","children": [],"string": " type."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"border\": the "},{"type": "link","children": [],"string": "border options"},{"type": "text","children": [],"string": " type."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"gridbag\": A "},{"type": "link","children": [],"string": "gridbag options"},{"type": "text","children": [],"string": " type."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "All "},{"type": "literal","children": [],"string": "constType"},{"type": "text","children": [],"string": " specific properties."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "layout_options"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created layout_options."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["layout", "uicontrol", "uicontrol_properties"]},"grid_constraints_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Grid Constraints Properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the grid constraints set of properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "constraints = createConstraints(\"grid\")"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "constraints"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created constraints."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["layout", "createConstraints", "uicontrol", "uicontrol_properties"]},"grid_layout_options_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Grid Layout Options Properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the grid layout options set of properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["layout_options = createLayoutOptions(\"grid\")", "layout_options = createLayoutOptions(\"grid\", size)", "layout_options = createLayoutOptions(\"grid\", size, padding)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "size"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "1×2 vector [nRows, nCols]: The numbers of rows and columns of cells (not of pixels) of the grid. [0,0] by default."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A value of -1 for either nRows or nCols defines an indefinite number of elements in the columns or rows."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "padding"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "[pad_x, pad_y]"},{"type": "text","children": [],"string": " a 1-by-2 matrix of doubles, [0,0] by default."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The padding between elements of the grid in pixels."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "layout_options"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created layout_options."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["layout", "createLayoutOptions", "uicontrol", "uicontrol_properties"]},"gridbag_constraints_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Gridbag Constraints Properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the gridbag constraints set of properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["constraints = createConstraints(\"gridbag\")", "constraints = createConstraints(\"gridbag\", grid)", "constraints = createConstraints(\"gridbag\", grid, weight)", "constraints = createConstraints(\"gridbag\", grid, weight, fill)", "constraints = createConstraints(\"gridbag\", grid, weight, fill, anchor)", "constraints = createConstraints(\"gridbag\", grid, weight, fill, anchor, padding)", "constraints = createConstraints(\"gridbag\", grid, weight, fill, anchor, padding, preferredsize)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "grid"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "[pos_x, pos_y, width, height]"},{"type": "text","children": [],"string": " a 1-by-4 matrix of double, [0, 0, 0, 0] by default."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "pos_x"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "pos_x"},{"type": "text","children": [],"string": " are the coordinates of the element on a virtual grid."}],"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "width"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "height"},{"type": "text","children": [],"string": " are the width and height of the element on the virtual grid."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "weight"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "[weight_x, weight_y]"},{"type": "text","children": [],"string": " a 1-by-2 matrix of doubles, [0, 0] by default."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The weights applied for the resize on either axes."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A larger value means the element will get more space during resize."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fill"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "{\"none\"} | \"horizontal\" | \"vertical\" | \"both\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Indicates how to fill the available space during resize on either direction (or both)."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "anchor"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "{\"center\"} | \"upper\" | \"upper_right\" | \"right\" | \"lower_right\" | \"lower\" | \"lower_left\" | \"left\" | \"upper_left\""},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Tells where to anchor the element when it is smaller than the area it is nested in."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "padding"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "[pad_x, pad_y]"},{"type": "text","children": [],"string": " a 1-by-2 matrix of doubles, [0 0] by default"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Padding between this element and elements around it."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "preferred_size"},{"type": "listitem","children": [{"type": "para","children": [{"type": "literal","children": [],"string": "[p_size_x, p_size_y]"},{"type": "text","children": [],"string": " a 1-by-2 matrix of doubles, [-1 -1] by default"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Preferred size in pixel when not constrained, used to avoid changing the size when resizing the nesting frame."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "constraints"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created constraints."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["layout", "uicontrol", "uicontrol_properties"]},"gridbag_layout_options_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Gridbag Layout Options Properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the gridbag layout options set of properties."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "layout_options = createLayoutOptions(\"gridbag\")"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "layout_options"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The created layout_options"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["layout", "createLayoutOptions", "uicontrol", "uicontrol_properties"]},"layout": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Layout"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of the different layouts and constraints for uicontrols and figures."},"string": []},"synopsis": [],"varlist": [],"seealso": "uicontrol_properties"},"addmenu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "addmenu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive button or menu definition"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["addmenu(button [,submenus] [,action])", "addmenu(gwin,button [,submenus] [,action])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "button"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string. The button name. An & can be placed before the character in the name to be used for keyboard shortcut; this character will be underlined on the GUI. Under MacOSX, a sub-menu with the same name is automatically added (no button can be added to the menu bar)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "submenus"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of character string. The sub_menus items names"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "action"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list with 2 elements action=list(flag,proc_name)"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer (default value is 0)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag==0"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the action is defined by a scilab instruction"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag==1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the action is defined by a C or Fortran procedure"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag==2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the action is defined by a scilab function"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "proc_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string which gives the name of scilab variable containing the instruction or the name of procedure to call."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gwin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer. The number of graphic window where the button is required to be installed"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["setmenu", "unsetmenu", "delmenu"]},"delmenu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "delmenu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive button or menu deletion"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["delmenu(button)", "delmenu(gwin,button)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "button"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string. The button name. On Windows operating systems (not X_window), an & should be placed before the character in the name used for keyboard shortcut; this character is underlined on the GUI."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gwin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer. The number of graphic window where the button is required to be installed"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["setmenu", "unsetmenu", "addmenu"]},"setmenu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setmenu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive button or menu activation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["setmenu(button [,nsub])", "setmenu(gwin,button [,nsub])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "button"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string. The button name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gwin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer. The number of graphic window where the button is  installed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nsub"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer. The number of submenu to activate (if any). If button has no sub-menu, "},{"type": "literal","children": [],"string": "nsub"},{"type": "text","children": [],"string": " is ignored"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["delmenu", "unsetmenu", "addmenu"]},"uicontextmenu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uicontextmenu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a contextual menu"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "h = uicontextmenu()"},"varlist": [],"seealso": ["uimenu", "addmenu", "uicontrol"]},"uimenu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uimenu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a menu or a submenu in a figure"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["h=uimenu([prop1,val1] [,prop2, val2] ...)", "h=uimenu(parent,[prop1, val1] [,prop2, val2] ...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parent"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Handle"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Handle of the parent of the menu."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prop{1, 2 ...}"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "String"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Name of a property to set up."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "All available properties are listed on the "},{"type": "link","children": [],"string": "uimenu properties"},{"type": "text","children": [],"string": " help page."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "val{1, 2 ...}"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Scilab object"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Value to affect to the corresponding property."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Handle"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Handle of the created menu."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["uimenu_properties", "figure", "uicontrol", "uicontextmenu", "set", "get", "math_rendering_features_in_graphic"]},"uimenu_properties": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uimenu properties"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Description of uimenu properties."},"string": []},"synopsis": [],"varlist": [],"seealso": ["uimenu", "uicontextmenu", "uicontrol", "console_properties", "set", "math_rendering_features_in_graphic"]},"unsetmenu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unsetmenu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "interactive button or menu or submenu de-activation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["unsetmenu(button,[nsub])", "unsetmenu(gwin,button,[nsub])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "button"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string. The button name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gwin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer. The number of graphic window where the button is installed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nsub"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "integer. The number of submenu to de-activate (if any). If button has no sub-menu, "},{"type": "literal","children": [],"string": "nsub"},{"type": "text","children": [],"string": " is ignored"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["delmenu", "setmenu", "addmenu"]},"uiConcatTree": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiConcatTree"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Concatenation of trees "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "concatenatedTree = uiConcatTree(tree1, tree2)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree1, tree2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "are of type uitree"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiCreateNode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiCreateNode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creation of node (for Scilab uitree) "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "myNode = uiCreateNode(label[, icon[, callback]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "label"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix which gives the label of the nodes."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "icon (optional)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix which gives the icon image of the nodes."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "callback (optional)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix which gives the callback instruction of the nodes."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiCreateTree": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiCreateTree"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creation of an uitree "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "myTree = uiCreateTree(myParentTree, mySubTree1, mySubTree2,...,mySubTreeN)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "myParentTree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an uitree."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mySubTree(s)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "one or many trees"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateNode", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiDeleteNode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiDeleteNode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Deletion in an uitree "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["delTree = uiDeleteNode(tree, node)", "delTree = uiDeleteNode(tree, position)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uitree where we do the deletion"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "node"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "node we want to delete"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, which is the position of the node we want to delete"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiDisplayTree": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiDisplayTree"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Printing an uitree in GUI mode"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "uiDisplayTree(tree)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an uitree"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiDumpTree": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiDumpTree"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Printing an uitree in the console (text mode)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "uiDumpTree(tree[,b])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an uitree"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b(optional)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "display features of each node of the tree. By default b is '%F'."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiDisplayTree", "tree_show", "xmlDump", "prettyprint", "editvar"]},"uiEqualsTree": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiEqualsTree"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Comparing two trees "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "isEqual = uiEqualsTree(tree1, tree2)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree1, tree2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "are of type uitree"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiFindNode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiFindNode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Find node in an uitree "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["nodeList = uiFindNode(tree, node)", "nodeList = uiFindNode(tree, position)", "nodeList = uiFindNode(tree, property, value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uitree in which we find the node"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "node"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the node we find"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, which is the position of the node we find in the tree "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "property"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, which finds node(s) by properties (label, icon or callback)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, which is the value of the property"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiGetChildrenNode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiGetChildrenNode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get Children of a node "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["children = uiGetChildrenNode(tree, node)", "children = uiGetChildrenNode(tree, position)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uitree in which we look for children node(s)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "node"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the node we look for children"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, which is the position of the node we look for children"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetNodePosition"]},"uiGetNodePosition": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiGetNodePosition"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the position(s) of a node "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "position = uiGetNodePosition(tree, node)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uitree in which we look for position(s) of a node"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "node"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the node we look for position(s)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode"]},"uiGetParentNode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiGetParentNode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get Parent of a node "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["parent = uiGetParentNode(tree, node)", "parent = uiGetParentNode(tree, position)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uitree in which we look for parent of a node"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "node"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the node we look for parent"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, which is the position of the node we look for parent"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiInsertNode", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetChildrenNode", "uiGetNodePosition"]},"uiInsertNode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiInsertNode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Insertion in a uitree "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["insertTree = uiInsertNode(tree, position, node)", "insertTree = uiInsertNode(tree, parentNode, node)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uitree where we do the insertion"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, which is the position where we want to insert the node"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parentNode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "which is the parent node into we want to insert the node"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "node"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "node we want to insert"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["uiCreateNode", "uiCreateTree", "uiDisplayTree", "uiDumpTree", "uiDeleteNode", "uiConcatTree", "uiEqualsTree", "uiFindNode", "uiGetParentNode", "uiGetChildrenNode", "uiGetNodePosition"]},"bool2s": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bool2s"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte uma matriz de valores booleanos para uma matriz de valores 0 ou 1"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "bool2s(x)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor ou matriz de valores booleanos ou uma matriz constante"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["boolean", "find"]},"definedfields": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "definedfields"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o índice dos campos definidos de uma lista"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "k=definedfields(l)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma lista, tlist ou mlist "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de índices ."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["list", "tlist", "mlist", "insertion", "extraction"]},"fieldnames": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fieldnames"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get a tlist, mlist or struct fields names"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "f = fieldnames(lst)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lst"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A tlist, mlist or struct variable."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Strings column vector of fields names."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["extraction", "getfield", "tlist", "mlist", "struct"]},"getfield": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getfield"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "extração de campos de listas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x,...] = getfield(i,l)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de qualquer tipo possível "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "l"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista, tlist ou mlist "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "índice de campo, ver \"extraction\" para mais detalhes."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "extraction"},"isfield": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isfield"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checks if the given fieldname exists in a structure or mlist or tlist"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "bool = isfield(s, fieldname)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a struct array, a tlist or a mlist."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fieldname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of strings: names of fields to be detected"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bool"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a matrix of boolean (same format as "},{"type": "varname","children": [],"string": "fieldname>"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["struct", "tlist", "mlist", "getfield", "definedfields"]},"isstruct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isstruct"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checa se uma variável é um struct array (estrutura)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "bool = isstruct(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variável Scilab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bool"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"list": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "list"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objeto do Scilab e definição de lists (\"listas\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "list(a1,....an)"},"varlist": [],"seealso": ["null", "lstcat", "list2vec", "vec2list", "tlist", "mlist", "insertion", "extraction", "size", "length"]},"list2vec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "list2vec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Concatenates list entries in a matrix."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[bigVector,varsizes] = list2vec(li)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "li"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list with n entries. The list entries must be 2D matrices with compatible types."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bigVector"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A column vector. Formed by the elements of the corresponding list entry."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varsizes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An n by 3 matrix. Each row contains the dimensions of the corresponding list entry."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "vec2list"},"lstcat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lstcat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "concatenação de listas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "lc=lstcat(l1,..ln)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "li"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "lista ou qualquer outro tipo de variável "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma lista "},"string": []},"string": []}],"string": []}],"string": []},"seealso": "list"},"mlist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mlist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objeto Scilab, definição de listas com tipos orientadas matricialmente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mlist(typ,a1,....an )"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of character strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ai"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "any Scilab object ("},{"type": "literal","children": [],"string": "matrix, list,string... "},{"type": "text","children": [],"string": " )."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tlist", "list", "overloading", "getfield", "setfield"]},"null": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "null"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "deletes a list component or a field of a structure, Mlist, or Tlist"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["List(i) = null()", "Struct.field = null()"]},"varlist": [],"seealso": ["clear", "clearglobal", "empty", "delete", "xmlDelete", "jremove", "jnull", "jvoid", "list", "mlist", "tlist", "struct"]},"rlist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rlist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "definição de função racional do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "rlist(a1,....an)"},"varlist": [],"seealso": ["tlist", "syslin"]},"setfield": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setfield"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "altera o valor de um elemento de uma mlist, tlist ou list"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "uL = setfield(a, v, L)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "L"},{"type": "listitem","children": [{"type": "text","children": [],"string": "lista do tipo "},{"type": "literal","children": [],"string": "list"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "tlist"},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "mlist"},{"type": "text","children": [],"string": " : a lista cujo componente deve ser alterado. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Endereço do componente a ser alterado. Pode ser o nome do campo especificado como uma sequência, ou o índice especificado como um número inteiro positivo. Veja "},{"type": "link","children": [],"string": "insertion"},{"type": "text","children": [],"string": " para mais detalhes. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Qualquer objeto Scilab : o valor a ser atribuído. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "uL"},{"type": "listitem","children": [{"type": "text","children": [],"string": "A lista atualizada. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["insertion", "getfield"]},"struct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "struct"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Builds a structure or an array of structures"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "st = struct(field1, value1, field2, value2, ...)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "field1, field2, ..."},{"type": "listitem","children": [{"type": "text","children": [],"string": "strings: Case-sensitive names of the fields of the structure. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value1, value2, ..."},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Data assigned to the respective fields. All data types are supported.  "},"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If several values are non-scalar cells arrays, then they must have the same size. For any scalar cell, the cell's container is stripped off, and its content is considered and assigned to the field as a whole. The processing of non-scalar cells is described here-below."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "st"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scalar structure, or array of structures if at least one value is a non-scalar cells array. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["fieldnames", "tree_show", "makecell", "mlist", "tlist"]},"tlist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tlist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objeto do Scilab e definição de listas com tipos (\"typed lists\")"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tlist(typ,a1,....an )"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou vetor de strings "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ai"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "qualquer objeto Scilab ("},{"type": "literal","children": [],"string": "matrix, list,string... "},{"type": "text","children": [],"string": " )."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["null", "percent", "syslin", "list", "mlist"]},"tree_show": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tree_show"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Displays a tree view of a list, tlist, mlist, cell or structure array, Xcos block"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tree_show(x)", "tree_show(x, rootTitle)", "tree_show(x, rootTitle, styles)", "tree_show(x, rootTitle, styles, arrayByFields)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Container to display. Supported containers: list, mlist, tlist, array of cells, array of structures, identifier of an Xcos block. Other containers may be nested in "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rootTitle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single string: explicit label of the tree's root, for instance the name of the "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " variable in the calling environment. Default = \"\"."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "styles"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Single string = HTML.4 styling tag, including the \"$\" character that will be replaced with the address (fields names, lists indices..) of each data."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "varname","children": [],"string": "styles"},{"type": "text","children": [],"string": " option can be used to customize the style either of addresses, or of related contents, or both. Examples: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"<b>$</b>\""},{"type": "text","children": [],"string": " : address in bold, content in normal black."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"$<i>\""},{"type": "text","children": [],"string": " : address in normal black, content in italic."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"<i>$\""},{"type": "text","children": [],"string": " : both address and content in italic."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"<font color=''grey''>$</font><i>\""},{"type": "text","children": [],"string": " : address in grey, content in italic."}],"string": []}],"string": []}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Default = "},{"type": "literal","children": [],"string": "\"<font color=\"\"blue\"\">$</font>\""},{"type": "text","children": [],"string": " (address in blue, content in black)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Setting "},{"type": "literal","children": [],"string": "\"\""},{"type": "text","children": [],"string": " removes styling."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arrayByFields"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Single boolean, used only for arrays of structures: "},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The chosen display mode is used as well for every nested array of structures, at any depths."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["uiDisplayTree", "uiDumpTree", "prettyprint", "editvar", "browsevar"]},"vec2list": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "vec2list"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse function of list2vec."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "li=vec2list(bigVector,varsizes,ind)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bigVector"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An m by n matrix. Each column is used to generate the corresponding list entry."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varsizes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An n by 2 matrix. Each row give the dimensions of the matrix to be built with the corresponding column of bigVector."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list with n entries. Each entry is a vector of positive integers which gives the hierarchical path where the corresponding matrix has to be put."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "li"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a list or a recursive list with n leaves. The list entries (or leaves) are 2D matrices built with the corresponding column of bigVector and size given by the corresponding row of varsizes."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "list2vec"},"cell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cria um cell (célula) de matrizes vazias"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["c = cell()", "c = cell(m1)", "c = cell(m1, m2)", "c = cell(m1, m2, ..., mn)", "c = cell(x)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor contendo as dimensões do cell a ser criado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m1, m2,.."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dimensões do cell a ser criado"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"cell2mat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cell2mat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte um cell array (array de células) em uma matriz"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "x=cell2mat(c)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "cell, os componentes de c devem ter o mesmo tipo e podem ser escalares ou matrizes"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "cell"},"iscell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iscell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica se um array é um cell (célula)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "bool = iscell(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variável Scilab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bool"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"makecell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "makecell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a cell array. "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s = makecell(dims,a1,a2,...an)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector with positive integer elements, the cell array dimension"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1,a2,...,an"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Sequence of Scilab variables, "},{"type": "literal","children": [],"string": "n"},{"type": "text","children": [],"string": " must be equal to "},{"type": "literal","children": [],"string": "prod(dims)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "resulting cell array"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cell", "matrix", "size", "brackets", "cat"]},"num2cell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "num2cell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converts an array into a cell array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "y=num2cell(x [,dims])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real, an integer, a boolean or a string matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar or a vector of positive integers"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a cell"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["cell", "cell2mat"]},"add_param": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "add_param"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add a parameter to a list of parameters "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "param_list = add_param(list_name,param_name,param_value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of parameters. This list must have been initialize by a call to init_param."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The name of the parameter to be added in the list of parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the value associated to the parameter param_name. This parameter is optional. You can set the value of this parameter via a call to set_param."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the updated list of parameters."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["init_param", "set_param", "get_param", "remove_param", "is_param"]},"get_param": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "get_param"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the value of a parameter in a parameter list"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[res,err] = get_param(list_name,param_name,default_value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of parameters. This list must have been initialized by a call to init_param."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The name of the parameter to be add in the list of parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the default value to be stored in the parameter if param_name has not been found."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the value of the parameter. If the parameter does not exist, res = []."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an error flag which is set to %T if list_name is not of type plist (this list has not been initialized by a call to init_param)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["init_param", "set_param", "add_param", "remove_param", "is_param"]},"init_param": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "init_param"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Initialize the structure which will handles the parameters list"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "param_list = init_param(['param_name1',param_value1,...])"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an initialized list of parameters (if no input parameters are shipped, this list is empty and is of type plist)."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["add_param", "set_param", "get_param", "remove_param", "is_param"]},"is_param": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "is_param"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if a parameter is present in a parameter list"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[res,err] = is_param(list_name,param_name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of parameters. This list must have been initialize by a call to init_param."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The name of the parameter to be add in the list of parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the result: %T is the parameter is present, %F otherwise."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an error flag which is set to %T if list_name is not of type plist (this list has not been initialized by a call to init_param)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["init_param", "set_param", "get_param", "remove_param", "add_param"]},"list_param": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "list_param"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "List all the parameters name in a list of parameters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[string_list,err] = list_param(list_name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of parameters. This list must have been initialize by a call to init_param."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of parameters name."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an error flag which is set to %T if list_name is not of type plist (this list has not been initialized by a call to init_param)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["init_param", "set_param", "get_param", "remove_param", "is_param"]},"remove_param": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "remove_param"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove a parameter and its associated value from a list of parameters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[param_list,err] = remove_param(list_name,param_name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of parameters. This list must have been initialize by a call to init_param."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The name of the parameter to be removed from the list of parameters. If the parameter does not exist, nothing happens."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the updated list of parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an error flag which is set to %T if list_name is not of type plist (this list has not been initialized by a call to init_param)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["init_param", "set_param", "get_param", "add_param", "is_param"]},"set_param": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "set_param"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the value of a parameter in a parameter list"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[param_list,err] = set_param(list_name,param_name,param_value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the list of parameters. This list must have been initialize by a call to init_param."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The name of the parameter to be added in the list of parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the value to be associated to the parameter param_name."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "param_list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the updated list of parameters."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "err"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an error flag which is set to %T if list_name is not of type plist (this list has not been initialized by a call to init_param)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["init_param", "add_param", "get_param", "remove_param", "is_param"]},"ascii": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ascii"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão ASCII de strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["a=ascii(txt)", "txt=ascii(a)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor de códigos ASCII inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"blanks": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "blanks"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cria strings de caracteres em branco"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "txt=blanks(n)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um único string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número de caracteres em branco"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"char": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "char"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "função char"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=char( x)", "y=char(st1,st2,st3,....)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um cell de arrays de strings, ou um array de códigos ASCII"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "st1,st2,st3"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "arrays de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor (coluna) de strings "},"string": []},"string": []}],"string": []}],"string": []},"seealso": "asciimat"},"convstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "convstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão maiúsculas-minúsculas, minúsculas-maiúsculas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y = convstr(str)", "y = convstr(str, flag)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str, y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "um caractere de opção com dois possíveis valores"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "'u'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "para maiúsculas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "'l'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "para minúsculas"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"emptystr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "emptystr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "string de comprimento zero"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["s=emptystr()", "s=emptystr(a)", "s=emptystr(m,n)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "qualquer tipo de matriz"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m,n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["part", "length", "string"]},"evstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "evstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "avaliação de expressões"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["H = evstr(M)", "H = evstr(list(M, subExpr))", "[H, ierr] = evstr(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "subExpr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "H"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ierr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, indicador de erro"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"grep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "grep"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "acha correspondências de um string em um vetor de strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[row, which] = grep(haystack, needle )", "[row, which] = grep(haystack, needle, \"regexp\" )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "haystack"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor linha de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "needle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ou vetor linha de strings . O(s) string(s) a serem procurados em "},{"type": "literal","children": [],"string": "haystack."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "row"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de índices: linha onde uma correspondência foi encontrada, ou matriz vazia se nenhuma ocorrência tiver sido encontrada"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "which"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de índices: índice do string needle encontrado, ou uma matriz vazia, se nenhuma correspondência tiver sido encontrada"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"regexp\" | \"r\" flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "caractere único: Em seguida, os elementos "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": " são usados como expressões "},{"type": "emphasis","children": [],"string": "r"},{"type": "text","children": [],"string": "egulares."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strindex", "regexp", "find", "vectorfind"]},"isalphanum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isalphanum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica se os caracteres de um string são alfanuméricos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = isalphanum(str)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de valores booleanos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isletter", "isdigit"]},"isascii": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isascii"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Testa se cada caractere de strings fornecidas é do tipo 7-bit US-ASCII"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = isascii(str)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de booleanos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ascii", "isalphanum", "isdigit", "isletter", "isnum"]},"isdigit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isdigit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "checa se os caracteres de um string são números entre 0 e 9"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = isdigit(str)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de valores booleanos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isalphanum", "isletter"]},"isletter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isletter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica se os caracteres de um string são letras do alfabeto"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = isletter(str)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de booleanos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isalphanum", "isdigit"]},"isnum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isnum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "testa se um string representa um número"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = isnum(str)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de booleanos"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isletter", "isdigit", "isalphanum"]},"justify": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "justify"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Alinha o texto em cada coluna completada com espaços, à esquerda, ao centro ou à direita"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "TJ = justify(T, position)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T, TJ"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vectores, matrizes ou hipermatrices de strings, das mesmas dimensões."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "position"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Possíveis valores : "},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["stripblanks", "blanks", "length", "part"]},"length": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "length"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Número de caracteres de um texto. Número de elementos de uma matriz ou lista."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "n=length(M)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz (usual ou de polinômios ou de strings) ou lista"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro ou matriz de inteiros"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"part": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "part"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "extração de strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "strings_out = part(strings_in, v)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "strings_in, strings_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor linha de inteiros. "},{"type": "literal","children": [],"string": "$"},{"type": "text","children": [],"string": " is accepted and means length(strings_in)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"prettyprint": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "prettyprint"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Converts a Scilab object into some corresponding LaTeX, TeX, MathML or HTML strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["str = prettyprint(a)", "str = prettyprint(a, exportFormat)", "str = prettyprint(a, exportFormat, delimiter)", "str = prettyprint(a, exportFormat, delimiter, processByElement)", "str = prettyprint(a, exportFormat, delimiter, processByElement, isWrapped)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a Scilab object. "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "Supported types: booleans, encoded integers, real or complex numbers, polynomials and rationals with real or complex coefficients, strings, cells, linear dynamical systems (as generated with syslin()), other Tlists."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "Supported sizes: scalar, vector, matrix. Hypermatrices are not supported (only the first page is processed.)"},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "exportFormat"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "is the output format. Possible case-insensitive values are 'latex' (default), 'tex', 'mathml', 'html', or 'html4'."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "delimiter"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "is a string indicating the delimiter type to bracket the whole resulting matrix. It is only used if "},{"type": "varname","children": [],"string": "processByElement"},{"type": "text","children": [],"string": " is false. It can be '(' (default), '{', '[', '|', '||', or '' if no bracketing is required."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "In HTML, the '_' delimiter value can be used to format the input matrix without delimiter but with cells borders."},"string": []},{"type": "para","children": {"type": "warning","children": [{"type": "text","children": [],"string": "Delimiters used for the components defining a linear dynamical system are always \"(\" and \")\", even with "},{"type": "varname","children": [],"string": "delimiter"},{"type": "text","children": [],"string": "=\"\", unless "},{"type": "varname","children": [],"string": "exportFormat"},{"type": "text","children": [],"string": "=\"html4\" is used: Then, \"|\" is imposed as inner syslin delimiter. This is useful when the result must be rendered in a Scilab GUI like "},{"type": "literal","children": [],"string": "messagebox()"},{"type": "text","children": [],"string": ", that supports only a restricted version of HTML.4"}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "processByElement"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a boolean: If set to "},{"type": "literal","children": [],"string": "%f"},{"type": "text","children": [],"string": " (default), the result "},{"type": "varname","children": [],"string": "str"},{"type": "text","children": [],"string": " is a single string representing the whole input matrix. Otherwise, "},{"type": "varname","children": [],"string": "str"},{"type": "text","children": [],"string": " has as many elements as the input matrix "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isWrapped"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "is a boolean to indicate if the result must be wrapped inside technical delimiters. The default value is %T (true). The delimiters depend on the export format. It is "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "'$' for latex and tex"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "nothing for mathml"},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "for HTML: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "nothing if "},{"type": "varname","children": [],"string": "processByElement"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " ;"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "or the opening tag "},{"type": "literal","children": [],"string": "<table valign=\"middle\" cellspacing=\"0\" cellpadding=\"3\" ..>"},{"type": "text","children": [],"string": " otherwise. Note that the \"</table>\" closure is then always included, even if "},{"type": "varname","children": [],"string": "isWrapped"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": ". This allows to fully customize the table style and attributes, instead of using the default ones."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a single string (if "},{"type": "varname","children": [],"string": "processByElement"},{"type": "text","children": [],"string": " is %F), or a matrix of strings otherwise (with size(str)==size(a)): the representation of the input object "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["math_rendering_features_in_graphic", "format", "xnumb", "string", "pol2str", "msprintf", "uicontrol", "sci2exp"]},"regexp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "regexp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "em uma string, localize (e extraia) substrings correspondentes a uma expressão regular"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[start, final, match, foundString] = regexp(input, pattern)", "[start, final, match, foundString] = regexp(input, pattern, \"once\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "input"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pattern"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (sob regras de expressão regular)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "start"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o índice de início de cada substring de str que corresponde ao padrão do string de expressão regular"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "end"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o índice de fim de cada substring de str que corresponde ao padrão do string de expressão regular"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "match"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "o texto de cada substring de que corresponde a "},{"type": "literal","children": [],"string": "pattern"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"once | \"o\" flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'o' para correspondência com padrão apenas uma vez"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"sci2exp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sci2exp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns a string able to generate a given Scilab object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = sci2exp(a)", "t = sci2exp(a, LHSname)", "t = sci2exp(a, LHSname, lmax)", "t = sci2exp(a, lmax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a scilab object. The supported types are:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "booleans"},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "encoded integers of any "},{"type": "link","children": [],"string": "inttype"}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "real or complex numbers"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "sparse matrices"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "polynomials"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "strings, that may include some NewLine (ascii(10)) sequences"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a structures array or cells array with any number of dimensions"},"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "a simple list whose components types are supported by "},{"type": "literal","children": [],"string": "sci2exp"}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a typed list tlist() and mlist()"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "a single graphic handle (only of figure or uicontrol)."},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "For booleans, encoded integers, real or complex numbers, polynomials and strings, any of a single element or a vector or a matrix or an hypermatrix is accepted."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "LHSname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Optional string: The name of the variable building the assignment prefix "},{"type": "literal","children": [],"string": "LHSname+\" = \""},{"type": "text","children": [],"string": ". When it is provided, "},{"type": "literal","children": [],"string": "LHSname+\" = \""},{"type": "text","children": [],"string": " is prepended to the raw expression yielded from the "},{"type": "varname","children": [],"string": "a"},{"type": "text","children": [],"string": " object. Then, the result string "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": " can no longer be evaluated with "},{"type": "literal","children": [],"string": "evstr()"},{"type": "text","children": [],"string": " but with "},{"type": "literal","children": [],"string": "execstr()"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Column of strings. A single whole string is returned when "},{"type": "varname","children": [],"string": "lmax"},{"type": "text","children": [],"string": " is not used or is set to 0: The Scilab literal expression, with possibly the left-hand affectation part on the first line when "},{"type": "varname","children": [],"string": "LHSname"},{"type": "text","children": [],"string": " is provided."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lmax"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Positive integer setting the maximal length of the "},{"type": "varname","children": [],"string": "t"},{"type": "text","children": [],"string": " components. The default value "},{"type": "literal","children": [],"string": "0"},{"type": "text","children": [],"string": " ignores such a constrain and returns "},{"type": "varname","children": [],"string": "t"},{"type": "text","children": [],"string": " as a single (long) string. Otherwise, some continuation marks "},{"type": "literal","children": [],"string": ".."},{"type": "text","children": [],"string": " are used to break too long rows."}],"string": []},{"type": "warning","children": [{"type": "text","children": [],"string": "Since continuation marks "},{"type": "literal","children": [],"string": ".."},{"type": "text","children": [],"string": " prevent using "},{"type": "literal","children": [],"string": "evstr()"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "execstr()"},{"type": "text","children": [],"string": ", using this "},{"type": "varname","children": [],"string": "lmax"},{"type": "text","children": [],"string": " option mostly cancels the main "},{"type": "literal","children": [],"string": "sci2exp()"},{"type": "text","children": [],"string": " purpose."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["string", "prettyprint", "format", "pol2str", "evstr", "execstr"]},"strcat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strcat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "concatena strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["txt = strcat(strings)", "txt = strcat(strings, string_added)", "txt = strcat(strings, string_added, \"r\")", "txt = strcat(strings, string_added, \"c\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vector_of_strings"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string_added"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string adicionado, o valor padrão é emptystr "},{"type": "literal","children": [],"string": "\"\""}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"r\" | \"c\" flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " cola todas as linhas de cada coluna, no array "},{"type": "varname","children": [],"string": " strings "},{"type": "text","children": [],"string": ". "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": " cola todas as colunas em cada linha."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"strchr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strchr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "acha a primeira ocorrência de um caractere em um string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = strchr(haystack,char)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "haystack"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "char"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "caractere"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strrchr", "strstr"]},"strcmp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strcmp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "compara strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["res = strcmp(string_one, string_two)", "res = strcmp(string_one, string_two, \"i\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string_one"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string_two"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "'i'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "parâmetro para realização de stricmp (caso independente), o valor padrão é 's'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["convstr", "comparison"]},"strcspn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strcspn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "comprimentos do início dos textos até que um caractere entre aqueles proibidos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = strcspn(Strings, forbiddenChars)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Strings"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "forbiddenChars"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix of positive real integers, of the size of "},{"type": "varname","children": [],"string": "Strings"},{"type": "text","children": [],"string": ": lengths of the selected "},{"type": "varname","children": [],"string": "Strings"},{"type": "text","children": [],"string": " heads."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "strspn"},"strindex": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strindex"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "procura posição de um string em outro"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[ind, which] = strindex(haystack, needle)", "[ind, which] = strindex(haystack, needle, \"regexp\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "haystack"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string. O string onde se procurará por ocorrências de "},{"type": "literal","children": [],"string": "needle "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "needle"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ou vetor de strings . O(s) string(s) a serem procurados em "},{"type": "literal","children": [],"string": "haystack"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ind"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de índices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "which"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de índices"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"regexp\" | \"r\" flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Em seguida, os elementos "},{"type": "varname","children": [],"string": "needle"},{"type": "text","children": [],"string": " são usados como expressões regulares."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"string": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "string"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "conversão para string (cadeia de caracteres)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["text = string(x)", "[out, in, text] = string(SciFun)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Any Scilab variable type."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "SciFun"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a function in Scilab language (handle of type 13, not its name as a string)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["format", "sci2exp", "msprintf", "tree2code", "pol2str", "execstr", "evstr", "strtod", "csvTextScan"]},"stripblanks": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "stripblanks"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retira espaços em branco (e tabulações) no início ou no fim de strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "txt=stripblanks(txt[,tabs])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string ou uma matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tabs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "se TRUE, retira também tabulações (o valor padrão é FALSE)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"strncpy": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strncpy"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Obtém e fornece os N primeiros caracteres dos textos fornecidos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = strncpy(str1, num)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz. Números máximos de caracteres a serem copiados da fonte"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strcat", "strcmp"]},"strrchr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strrchr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "acha a última ocorrência de um caractere em um string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = strrchr(str1,char)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "char"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "caractere"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strchr", "strstr"]},"strrev": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strrev"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna um string invertido"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = strrev(str1)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string ou uma matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string ou uma matriz de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"strsplit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strsplit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "split a single string at some given positions or patterns"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["chunks = strsplit(string)", "chunks = strsplit(string, indices)", "[chunks, matched_separators] = strsplit(string, separators)", "[chunks, matched_separators] = strsplit(string, separators, limit)", "[chunks, matched_separators] = strsplit(string, regexp)", "[chunks, matched_separators] = strsplit(string, regexp, limit)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a single character string to split. UTF8 extended characters supported. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indices"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of increasing indices, in the interval "},{"type": "literal","children": [],"string": "[1, length(string)-1]"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "separators"},{"type": "listitem","children": [{"type": "text","children": [],"string": "matrix of strings searched in the "},{"type": "varname","children": [],"string": "string"},{"type": "text","children": [],"string": " and used as scissors. UTF8 extended characters are supported. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "regexp"},{"type": "listitem","children": [{"type": "text","children": [],"string": "single string starting and ending with \"/\" and specifying a case-sensitive regular expression pattern used as splitting separator. No regexp option can be used after the trailing \"/\" delimiter. The regular expression may include UTF8 extended characters. The \"/\" and \"\\\" characters used in the body of the regexp must be protected as \"\\/\" and \"\\\\\". Example: "},{"type": "literal","children": [],"string": "\"/k.{2}o/\""},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "chunks"},{"type": "listitem","children": [{"type": "text","children": [],"string": "column of strings, with "},{"type": "literal","children": [],"string": "length(indices)+1"},{"type": "text","children": [],"string": " elements = split chunks. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "matched_separators"},{"type": "listitem","children": [{"type": "text","children": [],"string": "column of strings, of size "},{"type": "literal","children": [],"string": "size(chunks,1)-1"},{"type": "text","children": [],"string": " : matched separators or expression patterns. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "limit"},{"type": "listitem","children": [{"type": "text","children": [],"string": "integer > 0: Maximum number of times that separators are searched and used along the "},{"type": "varname","children": [],"string": "string"},{"type": "text","children": [],"string": ". If this one includes more separators occurrences, its unsplit tail is returned as last chunk in "},{"type": "literal","children": [],"string": "chunks($)"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["tokens", "strindex", "part", "regexp", "strcat"]},"strspn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strspn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "comprimentos do início dos textos, desde que os caracteres estejam entre os permitidos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "headsLengths = strspn(Strings, allowedChars)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Strings, allowedChars"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrices of strings, of identical dimensions. "},{"type": "varname","children": [],"string": "allowedChars"},{"type": "text","children": [],"string": " can be a scalar string. It is then used for all "},{"type": "varname","children": [],"string": "Strings"},{"type": "text","children": [],"string": " components."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headsLengths"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix of positive real integers, of the size of "},{"type": "varname","children": [],"string": "Strings"},{"type": "text","children": [],"string": ": lengths of the selected "},{"type": "varname","children": [],"string": "Strings"},{"type": "text","children": [],"string": " heads."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strcspn", "strncpy", "part"]},"strstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "localiza sub-strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = strstr(haystack,needle)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "haystack"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "needle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string ou matriz de strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strrchr", "strchr"]},"strsubst": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strsubst"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "substitui um string por outro dentro de um string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["string_out = strsubst(string_in, searchStr, replaceStr)", "string_out = strsubst(string_in, searchStr, replaceStr, \"regexp\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string_in"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de strings. Os strings nos quais serão procuradas ocorrências de "},{"type": "literal","children": [],"string": "searchStr"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "searchStr"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string a se procurar em "},{"type": "literal","children": [],"string": "string"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "replaceStr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string. O string de reposição"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str_out"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de strings. O resultado da substituição em "},{"type": "literal","children": [],"string": "searchStr"},{"type": "text","children": [],"string": " por "},{"type": "literal","children": [],"string": "replaceStr"},{"type": "text","children": [],"string": " em "},{"type": "literal","children": [],"string": "string"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"regexp\" | \"r\" flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Em seguida, "},{"type": "varname","children": [],"string": "searchStr"},{"type": "text","children": [],"string": " é usado como uma expressão regular."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"strtod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strtod"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "parse and convert literal numbers STRings TO Decimal numbers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[d, tails] = strtod(str)", "[d, tails] = strtod(str, decimalseparator)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single component, vector, or matrix of strings."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "decimalseparator"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the decimal separator chosen: \".\" (by default) or \",\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar, vector, or matrix of decimal numbers."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tails"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string or matrix of strings: remaining parts of "},{"type": "varname","children": [],"string": "str"},{"type": "text","children": [],"string": " after the numerical heads (if any)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["evstr", "isnum", "isdigit", "bin2dec", "oct2dec", "hex2dec"]},"strtok": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strtok"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "divide um string em fichas (tokens)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = strtok(str,delimiters)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "delimiters"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strrchr", "strchr"]},"tokenpos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tokenpos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna as posições das fichas (token) em um string"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["kdf = tokenpos(str)", "kdf = tokenpos(str, delimiter)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string. O string onde se deve procurar fichas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "delimiter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "(opcional) um caractere ou vetor de caracteres. Os delimitadores de fichas."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "kdf"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matriz de duas colunas, a primeira coluna fornece os índices dos primeiros caracteres das fichas, a segunda fornece os índices dos últimos caracteres das fichas."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["strindex", "tokens"]},"tokens": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tokens"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Divide um texto usando separadores e fornece seus pedaços"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Chunks = tokens(text)", "Chunks = tokens(text, separators)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Um único texto a ser dividido. Pode incluir caracteres internacionais UTF-8 estendidos. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "separators"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vetor de caracteres. Valor padrão = "},{"type": "literal","children": [],"string": "[\" \",ascii(9)]"},{"type": "text","children": [],"string": ", ascii(9) sendo a tabulação horizontal. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Chunks"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vetor da coluna: partes do texto dividido. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["strsplit", "regexp", "strindex", "tokenpos"]},"analyze": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "analyze"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "frequency plot of a sound signal"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "fmin,fmax,rate,points"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalars. default values fmin=100,fmax=1500,rate=22050,points=8192;"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"auread": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "auread"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "load .au sound file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["y=auread(aufile)", "y=auread(aufile,ext)", "[y,Fs,bits]=auread(aufile)", "[y,Fs,bits]=auread(aufile,ext)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "aufile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (The .au extension is appended if no extension is given)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "..."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "[]"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, frequency sampling in Hz."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ext"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string ("},{"type": "literal","children": [],"string": "'size'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'snd'"},{"type": "text","children": [],"string": ") or integer (to read n samples) or 1 x 2 integer vector [n1,n2] (to read from n1 to n2)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["savewave", "analyze", "mapsound"]},"auwrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "auwrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "writes .au sound file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["auwrite(y,aufile)", "auwrite(y,Fs,aufile)", "auwrite(y,Fs,bits,aufile)", "auwrite(y,Fs,bits,method,aufile)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector or matrix with entries in [-1,1]."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "aufile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (The .au extension is appended if no extension is given)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, frequency sampling in Hz."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bits"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer, number of bits in the encoding."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string , "},{"type": "literal","children": [],"string": "'mu'"},{"type": "text","children": [],"string": " (default) or "},{"type": "literal","children": [],"string": "'linear'"},{"type": "text","children": [],"string": ", encoding method."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["auread", "wavread", "savewave", "analyze", "mapsound"]},"beep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "beep"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Produce a beep sound"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["beep();", "beep('on')", "beep('off')", "s=beep()"]},"varlist": [],"seealso": []},"lin2mu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lin2mu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "linear signal to mu-law encoding"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mu=lin2mu(y)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mu"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "mu2lin"},"loadwave": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "loadwave"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "load a sound wav file into scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x=loadwave(filename);", "[x,y]=loadwave(filename);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The path of the wav file to be loaded"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix one line for each channel"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector as [data format, number of channels, samples per second per channel, estimate of bytes per second needed, byte alignment of a basic sample block, bits per sample, length of sound data in bytes, bytes per sample (per channel)]."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["savewave", "analyze", "mapsound"]},"mapsound": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mapsound"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Computes and displays an Amplitude(time, frequency) spectrogram of a sound record"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mapsound(signal)", "mapsound(signal, Dt)", "mapsound(signal, Dt, freqRange)", "mapsound(signal, Dt, freqRange, samplingRate)", "mapsound(signal, Dt, freqRange, samplingRate, Colormap)", "data = mapsound(…)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "signal"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vector or matrix of signed real numbers representing the sound signal. If it's a matrix, its smallest size is considered as the number of channels. Then, only the first channel is considered and mapped. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "samplingRate"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Positive decimal number: Value of the sampling rate of the input "},{"type": "varname","children": [],"string": "signal"},{"type": "text","children": [],"string": ", in Hz. 22050 Hz is the default rate. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "freqRange"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Specifies the interval [fmin, fmax] of positive sound frequencies to be analyzed and mapped: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If it's a scalar: It specifies the upper bound "},{"type": "varname","children": [],"string": "fmax"},{"type": "text","children": [],"string": ". Then "},{"type": "literal","children": [],"string": "fmin=0"},{"type": "text","children": [],"string": " is used."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "If it's a vector: It specifies [fmin, fmax]."},"string": []}],"string": []},{"type": "text","children": [],"string": " If a bound is > 0, it is specified in Hz. If it's negative, its absolute value represents a fraction of the sampling rate. For instance, fmax=-0.2 actually specifies fmax = 0.2 * samplingRate. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " The default bounds are "},{"type": "literal","children": [],"string": "[0, 0.2*samplingRate]"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Dt"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Specifies the time step of the map. The time step is also the duration of each sound chunk considered at every time step, since the "},{"type": "varname","children": [],"string": "signal"},{"type": "text","children": [],"string": " is sliced into contiguous chunks without overlap. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Structure with 3 fields returning values of computed and plotted data: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "times"},{"type": "text","children": [],"string": ": Vector of mapped times, in seconds."}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "frequencies"},{"type": "text","children": [],"string": ": Vector of mapped frequencies, in Hz."}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "amplitudes"},{"type": "text","children": [],"string": ": Matrix of mapped absolute spectral amplitudes, of size length(.frequencies)×length(.times)."}],"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Colormap"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Identifier of the colormap function to use: "},{"type": "literal","children": [],"string": "autumn"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "bone"},{"type": "text","children": [],"string": ", etc. The actual colormap is based on and built with it, but is not equal to it. It can be inverted in order to get light colors for low amplitudes, and be extrapolated to white if it does not natively include light colors. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["fft", "analyze", "intdec"]},"mu2lin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mu2lin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "mu-law encoding to linear signal"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "mu=lin2mu(y)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mu"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real vector"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "mu2lin"},"playsnd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "playsnd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "command-line sound player facility"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["playsnd(filename)", "playsnd(filename, speed)", "playsnd(filename, speed, nbiter)", "playsnd(filename, speed, nbiter, playerCmd)", "playsnd(filename, speed, playerCmd)", "playsnd(y)", "playsnd(y, rate)", "playsnd(y, rate, nbiter)", "playsnd(y, rate, nbiter, playerCmd)", "playsnd(y, rate, playerCmd)", "playsnd([])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": [{"type": "text","children": [],"string": "single string: the path and name of the sound file to play. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "speed"},{"type": "listitem","children": [{"type": "text","children": [],"string": "real positive number: relative playing speed. "},{"type": "varname","children": [],"string": "speed"},{"type": "text","children": [],"string": " < 1 plays slower, while "},{"type": "varname","children": [],"string": "speed"},{"type": "text","children": [],"string": " > 1 plays faster. (1.0 by default). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": [{"type": "text","children": [],"string": "matrix of normalized linear sound data, in [-1,1]. Each row feeds a channel. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rate"},{"type": "listitem","children": [{"type": "text","children": [],"string": "real positive number: sampling frequency in Hz (default value is 22050). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb_iter"},{"type": "listitem","children": [{"type": "text","children": [],"string": "positive decimal integer: number of consecutive times (iterations) that the sound must be played. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "playerCmd"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Only used on Unix and MacOS systems. Single string giving the OS command to use for playing sound (wav) files. The default value is "},{"type": "literal","children": [],"string": "\"aplay\""},{"type": "text","children": [],"string": " on Linux and "},{"type": "literal","children": [],"string": "\"afplay\""},{"type": "text","children": [],"string": " on MacOS. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " If "},{"type": "varname","children": [],"string": "playerCmd"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "/dev/audio"},{"type": "text","children": [],"string": ", then a 8 bits mu-law raw sound file is created and send to "},{"type": "literal","children": [],"string": "/dev/audio"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["beep", "realtime", "lin2mu", "wavread", "auread", "mcisendstring", "winopen"]},"savewave": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "savewave"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "save data into a sound wav file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "savewave(filename,x [, rate , nbits]);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The path of the output wav file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a mxn matrix where m is the number of channels and n the number of samples for each channel"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rate"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar giving the sampling rate (number of sample per second) 22050 is the default value."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["loadwave", "analyze", "mapsound"]},"wavread": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "wavread"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "reads sound data or querries data info from a .wav audio file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Info = wavread(wavfile, 'info')", "s = wavread(wavfile, 'size')", "y = wavread(wavfile)", "y = wavread(wavfile, n)", "y = wavread(wavfile, [i1 i2])", "[y, Fs, bits] = wavread(..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wavfile"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string: path and file name pointing to the audio file. Included heading constant strings "},{"type": "literal","children": [],"string": "SCI"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "TMPDIR"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "SCIHOME"},{"type": "text","children": [],"string": ", or "},{"type": "literal","children": [],"string": "home"},{"type": "text","children": [],"string": " are automatically expanded. The .wav extension is appended if no extension is given."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer: number of first samples to get, per channel."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "[i1 i2]"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integers, to select and return from each channel the samples #i1 to #i2."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix: values of sound amplitudes in [-1,+1], with one row per channel."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer: sampling frequency in Hz = number of samples per second per channel."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bits"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Positive integer: number of bits for "},{"type": "literal","children": [],"string": "y"},{"type": "text","children": [],"string": " values."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Info"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Row vector of 8 decimal integers describing the recorded signal. See the description section for details."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["auread", "wavwrite", "analyze", "mapsound"]},"wavwrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "wavwrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "writes .wav sound file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["wavwrite(y, wavfile)", "wavwrite(y, Fs, wavfile)", "wavwrite(y, Fs, nbits, wavfile)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "row vector or matrix: Sound amplitudes = real values in [-1,1]. One row per channel. Values out of [-1,+1] are ignored."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "wavfile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (The .wav extension is appended if no extension is given)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Fs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer: Sampling frequency, in Hz. 22500 is the default value."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbits"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "bit-depth 8, 16, 24, 32 bits. it describes the number of bits of information recorded for each sample. 16 is the default value."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["auread", "wavread", "savewave", "analyze", "mapsound"]},"caldays": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "caldays"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "calmonths"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "calyears"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "create a calendarDuration in days"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "create a calendarDuration in months"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "create a calendarDuration in years"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["c = caldays(x)", "c = calmonths(x)", "c = calyears(x)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "real scalar or matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": " object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["calendarDuration", "duration", "datetime"]},"calendar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "calendar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Calendar of a given month and year (Gregorian dates)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["calendar", "calendar(y, m)", "c = calendar()", "c = calendar(y,m)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer in [1800 3000]: The Gregorian year."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "integer in [1, 12]: The month."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "list, with "},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The title and days names are translated according to the current language."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["weekday", "datevec", "datenum"]},"calendarDuration": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "calendarDuration"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a calendarDuration - duration in days, months and years"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["c = calendarDuration(Y, M, D)", "c = calendarDuration(Y, M, D, T)", "c = calendarDuration(x)", "c = calendarDuration(..., \"OutputFormat\", outputFormat)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y, M, D"},{"type": "listitem","children": [{"type": "para","children": {"type": "emphasis","children": [],"string": "year, month, day"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "real scalar or matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "T"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "scalar or matrix of "},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "m-by-3 matrix [Y, M, D] or m-by-6 matrix [Y, M, D, H, MI, S]"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outputFormat"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "display format, string: "},{"type": "emphasis","children": [],"string": "\"ymdt\""},{"type": "text","children": [],"string": " (default format)  or "},{"type": "emphasis","children": [],"string": "\"mdt\""}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "calendarDuration object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["caldays", "calmonths", "calyears", "duration", "datetime"]},"clock": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clock"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return the current Gregorian datetime and international time zone of the computer's clock"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[datetime, timezone, Dst] = clock()"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datetime"},{"type": "listitem","children": [{"type": "text","children": [],"string": "[year, month, day, hour, minute, second] vector. The first five elements are integers. The "},{"type": "literal","children": [],"string": "second"},{"type": "text","children": [],"string": " element is accurate up to the millisecond. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timezone"},{"type": "listitem","children": [{"type": "text","children": [],"string": "A scalar multiple of 0.25 in [-12, 12]. Most of geographical areas have an integer time zone. A few are on a half-an-hour or even a quarter time zone. "},{"type": "varname","children": [],"string": "timezone"},{"type": "text","children": [],"string": " < 0 for Brasil, and > 0 for France, Russia, and Japan, etc. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Dst"},{"type": "listitem","children": [{"type": "text","children": [],"string": "0 or 1: Daylight saving time. 1 if the time area of the computer is registered to apply a Daylight saving time offset, and currently applies it ; 0 otherwise. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["getdate", "datevec", "datenum", "calendar"]},"date": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "date"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna string contendo a data corrente"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "dt=date()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["getdate", "toc", "tic", "timer", "etime"]},"datenum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datenum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert to serial date number"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["N = datenum()", "N = datenum(DT)", "N = datenum(Y, M, D)", "N = datenum(Y, M, D, H, MI, S)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "DT"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "m-by-3 matrix, [Y, M, D] or m-by-6 matrix, [Y, M, D, H, MI, S] or "},{"type": "link","children": [],"string": "datetime"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y, M, D, H, MI, S"},{"type": "listitem","children": [{"type": "para","children": {"type": "emphasis","children": [],"string": "year, month, day, hour, minute, second"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "those arguments can be real scalars or matrices of the same size."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["datevec", "calendar"]},"datetime": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datetime"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create points in time"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["dt = datetime()", "dt = datetime(keyword)", "dt = datetime(datestr)", "dt = datetime(datestr, \"InputFormat\", infmt)", "dt = datetime(Y, M, D)", "dt = datetime(Y, M, D, H, m, S)", "dt = datetime(Y, M, D, H, m, S, MS)", "dt = datetime(x)", "dt = datetime(x, \"ConvertFrom\", depfmt)", "dt = datetime(..., \"OutputFormat\", outfmt)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "keyword"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "string with possible values:"},{"type": "emphasis","children": [],"string": "\"now\", \"today\", \"yesterday\""},{"type": "text","children": [],"string": " and "},{"type": "emphasis","children": [],"string": "\"tomorrow\""}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "datestr"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "matrix of strings representing date and time (i.e: \"2022-12-08 16:14:42\")."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "m-by-3 matrix, [Y, M, D] or m-by-6 matrix, [Y, M, D, H, m, S]"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y, M, D, H, m, S, MS"},{"type": "listitem","children": [{"type": "para","children": {"type": "emphasis","children": [],"string": "year, month, day, hour, minute, second, millisecond"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "those arguments can be real scalars or matrices of the same size."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "infmt"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "string, format of "},{"type": "literal","children": [],"string": "datestr"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "depfmt"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "string, format of "},{"type": "literal","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Possible values: "},{"type": "emphasis","children": [],"string": "'datenum', 'excel', 'posixtime', 'yyyymmdd'"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outfmt"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string, display format."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "datetime object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["duration", "calendarDuration", "NaT", "isnat"]},"datevec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "datevec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Date components"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["V=datevec(DT)", "[Y,M,D,H,MI,S]=datevec(DT)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "DT"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a serial date number or "},{"type": "link","children": [],"string": "datetime"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y, M, D, H, MI, S"},{"type": "listitem","children": [{"type": "para","children": {"type": "emphasis","children": [],"string": "year, month, day, hour, minute, second"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "those arguments can be real scalars or matrices of the same size."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["datenum", "calendar", "datetime"]},"duration": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "duration"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a duration - duration in hours, minutes and seconds"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["d = duration(h, m, s)", "d = duration(h, m, s, ms)", "d = duration(x)", "d = duration(str)", "d = duration(str, \"InputFormat\", inputFormat)", "d = duration(..., \"OutputFormat\", outputFormat)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "h, m, s, ms"},{"type": "listitem","children": [{"type": "para","children": {"type": "emphasis","children": [],"string": "hour, minute, second, millisecond"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "real scalar or matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "m-by-3 matrix, [h, m, s]"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "string, vector or matrix of strings"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "inputFormat"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "format of str available: "},{"type": "emphasis","children": [],"string": "'dd:hh:mm:ss', 'hh:mm:ss', 'hh:mm', 'mm:ss', 'dd:hh:mm:ss.SSS', 'hh:mm:ss.SSS', 'mm:ss.SSS'"}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "'hh:mm:ss'"},{"type": "text","children": [],"string": " and "},{"type": "emphasis","children": [],"string": "\"dd:hh:mm:ss\""},{"type": "text","children": [],"string": " are the default input formats"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "outputFormat"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "display format, string. "},{"type": "emphasis","children": [],"string": "'hh:mm:ss'"},{"type": "text","children": [],"string": " is the default output format."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "duration object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["hours", "minutes", "seconds", "milliseconds", "days", "years", "datetime"]},"eomday": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eomday"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return last day of month"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "E = eomday(Y, M)"},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector/matrix containing integers values."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector/matrix containing integers values."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "E"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector/matrix containing integers values."},"string": []},"string": []}],"string": []},"string": []}],"seealso": ["datenum", "datevec", "weekday"]},"etime": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "etime"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tempo decorrido"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "e = etime(t2,t1)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor com 6 ou 10 valores "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um vetor com 6 ou 10 valores "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "e"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "número de segundos entre "},{"type": "literal","children": [],"string": "t2"},{"type": "text","children": [],"string": " e "},{"type": "literal","children": [],"string": "t1"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tic", "toc", "getdate", "datenum", "datevec"]},"getdate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getdate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Current datetime or POSIX timestamp from computer's clock. Datetimes from given timestamps"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["curDatetime = getdate()", "timeStamp = getdate(\"s\")", "dateTimes = getdate(timeStamps)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "curDatetime"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of integers with "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeStamp"},{"type": "listitem","children": [{"type": "text","children": [],"string": "integer number of seconds elapsed since 1970-01-01 00:00:00 UTC, excluding leap seconds, as defined by the POSIX standard (see description). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeStamps"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of positive decimal numbers representing POSIX timestamps. Negative timestamps are not accepted. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dateTimes"},{"type": "listitem","children": [{"type": "text","children": [],"string": "length(timeStamps)-by-10 Matrix: The row #i elements are datetime data corresponding to timeStamps(i), as documented for "},{"type": "varname","children": [],"string": "curDatetime"},{"type": "text","children": [],"string": ", except that "},{"type": "literal","children": [],"string": "dateTimes(:,10)"},{"type": "text","children": [],"string": " are fractions of second in [0,1) instead of milliseconds. dateTimes are expressed in the current computer's time zone. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["calendar", "date", "clock", "timer", "datenum"]},"hours": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "hours"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "minutes"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "seconds"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "milliseconds"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "days"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "years"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert reals in hours (duration)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert hours in reals"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert reals in minutes (duration)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert minutes in reals"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert reals in seconds (duration)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert seconds in reals"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert reals in milliseconds (duration)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert milliseconds in reals"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert reals in days (duration)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert days in reals"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert reals in years (duration)"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "convert years in reals"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["res = hours(x)", "res = hours(d)", "res = minutes(x)", "res = minutes(d)", "res = seconds(x)", "res = seconds(d)", "res = milliseconds(x)", "res = milliseconds(d)", "res = days(x)", "res = days(d)", "res = years(x)", "res = years(d)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "real scalar or matrix representing a time unit"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": " object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": " object or real matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["duration", "datetime"]},"isnat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isnat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if a variable contains \"Not a Time\" values"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = isnat(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "datetime matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "boolean matrix of the same size as x"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["NaT", "datetime"]},"NaT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "NaT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Not a Time function used to create empty datetime"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["dt = NaT()", "dt = NaT(x)", "dt = NaT(m, n)", "dt = NaT(..., \"OutputFormat\", str)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "scalar, vector, matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m, n"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "scalars"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "date format for display, string"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dt"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "datetime"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["datetime", "isnat"]},"now": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "now"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return current date under the form of a Unix hour (timestamp)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = now()"},"varlist": [],"seealso": ["clock", "datenum", "datevec"]},"realtime": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "realtimeinit"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "realtime"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "sets the time unit"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "sets the initial datetime and starts the chronometer, or waits until a given datetime"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["realtimeinit(time_unit)", "realtime(t0)", "realtime(t)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "time_unit"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive decimal number: time unit duration, in seconds."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "decimal number: initial datetime, in "},{"type": "literal","children": [],"string": "time_unit"},{"type": "text","children": [],"string": ". This meaning holds when "},{"type": "literal","children": [],"string": "realtime(…)"},{"type": "text","children": [],"string": " is called for the first time after the last "},{"type": "literal","children": [],"string": "realtimeinit(…)"},{"type": "text","children": [],"string": ". This first call sets the datetime origin and restarts the real timer."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "decimal number: datetime up to which Scilab must wait before performing the next instruction, expressed in time unit."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["sleep", "getdate", "waitbar", "progressionbar"]},"sleep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sleep"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "suspend all code executions (console, scripts, callbacks,..)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sleep(milliseconds)", "sleep(seconds, \"s\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "milliseconds"},{"type": "listitem","children": {"type": "text","children": [],"string": "duration of the sleep, in milliseconds (decimal number)"},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "seconds"},{"type": "listitem","children": {"type": "text","children": [],"string": "duration of the sleep, in seconds (decimal number)"},"string": []}],"string": []}],"string": []},"seealso": ["pause", "halt"]},"tic": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tic"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "inicia um cronômetro"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tic()"},"varlist": [],"seealso": ["toc", "timer", "etime"]},"timer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "timer"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "cpu time"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "timer()"},"varlist": [],"seealso": ["getdate", "toc", "tic", "etime"]},"toc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "toc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lê o cronômetro"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["toc()", "t = toc()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "número de segundos desde a última chamada a "},{"type": "literal","children": [],"string": "tic()"},{"type": "text","children": [],"string": " (precisão em ordem de milissegundos)"}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["tic", "timer", "etime"]},"weekday": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "weekday"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Day's index and name in its week for given dates"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[I, Names] = weekday()", "[I, Names] = weekday(N)", "[I, Names] = weekday(YMD)", "[I, Names] = weekday(Y, M, D)", "[I, Names] = weekday(dateStrings)", "[I, Names] = weekday(.., \"long\")", "[I, Names] = weekday(.., la_NG)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of decimal date numbers as returned by "},{"type": "literal","children": [],"string": "datenum(..)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "YMD"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Matrix of decimal integers with n rows and 3 columns. Each row defines a date: Year numbers are in column "},{"type": "literal","children": [],"string": "YMD(:,1)"},{"type": "text","children": [],"string": ". Month indices in [1,12] are in column "},{"type": "literal","children": [],"string": "YMD(:,2)"},{"type": "text","children": [],"string": ". Day indices in [1,31] are in column "},{"type": "literal","children": [],"string": "YMD(:,3)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Y, M, D"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "3 element-wise arrays of decimal integers with the same sizes. The date #i is defined by "},{"type": "literal","children": [],"string": "D(i)/M(i)/Y(i)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dateStrings"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of strings specifying dates according to 5 possible formats described here-below. In the array, all the dates must follow the same format: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"YYYY-MM-DD\""},{"type": "text","children": [],"string": " : "},{"type": "literal","children": [],"string": "DD < 10"},{"type": "text","children": [],"string": " or/and "},{"type": "literal","children": [],"string": "MM < 10"},{"type": "text","children": [],"string": " must have a leading zero. Example: "},{"type": "literal","children": [],"string": "\"2017-09-07\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"YYYY-MM-DD HH:MN:SS.ss\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"YYYY-MM-DD whatever you want\""},{"type": "text","children": [],"string": " : same as above. Only the part before the first space is considered."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"D/M/Y\""},{"type": "text","children": [],"string": " : Days "},{"type": "literal","children": [],"string": "D < 10"},{"type": "text","children": [],"string": " or/and Months "},{"type": "literal","children": [],"string": "M < 10"},{"type": "text","children": [],"string": " may or not have a leading zero. Example: "},{"type": "literal","children": [],"string": "\"7/09/2017\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"enD/M/Y\""},{"type": "text","children": [],"string": " : Same as above, with the prefix \"en\" (for \"english\") and M/D instead of D/M. Example: "},{"type": "literal","children": [],"string": "\"en7/24/2017\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"D-Mmm-YYYY\""},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "Mmm"},{"type": "text","children": [],"string": " is the short name of the Month in english: "},{"type": "literal","children": [],"string": "Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec"},{"type": "text","children": [],"string": ". Days "},{"type": "literal","children": [],"string": "D < 10"},{"type": "text","children": [],"string": " may or not have a leading zero."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"long\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Optional keyword to get days names in long full form: \"Wednesday\" instead of \"Wed\", etc. Can be used anywhere after the Days input argument(s)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "la_NG"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Optional keyword = unique string specifying the language in which days names are requested, in the standard format like \"en_US\", \"fr_FR\", etc. Can be used anywhere after the Days input argument(s)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "I"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of decimal integers in [1,7], having the sizes of "},{"type": "varname","children": [],"string": "N"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "YMD(:,1)"},{"type": "text","children": [],"string": ", "},{"type": "varname","children": [],"string": "Y, M and D"},{"type": "text","children": [],"string": ", or "},{"type": "literal","children": [],"string": "dateStrings"},{"type": "text","children": [],"string": ": 1 is for Sunday, 2 for Monday, .., 7 for Saturday."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Names"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Array of text words having "},{"type": "varname","children": [],"string": "I"},{"type": "text","children": [],"string": " sizes: Names of days in their weeks, for the given dates. Names are returned in short form like \"Wed\" standing for \"Wednesday\", unless the "},{"type": "varname","children": [],"string": "\"long\""},{"type": "text","children": [],"string": " option is used."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["eomday", "datenum", "datevec"]},"disp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "disp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "exibição de variáveis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "disp(x1,[x2,...xn])"},"varlist": [],"seealso": ["lines", "write", "read", "print", "string", "tlist"]},"mprintf": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "mprintf"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "printf"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "converts, formats, and writes data to the main scilab window"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "converts, formats, and writes data to the main scilab window"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "mprintf(format,a1,...,an);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string providing the format to use to write all next arguments. The "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " follows -- as close as possible -- the C printf format operand syntax, as described in the "},{"type": "link","children": [],"string": "printf_conversion"},{"type": "text","children": [],"string": " page. UTF-8 extended characters and numbered placeholders \"%n$..\" are supported."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1,...,an"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Data to be converted and printed according to the "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " argument. Supported types: all numbers, booleans, strings. Only the real part of complex numbers is considered (current Scilab limitation)."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["printf_conversion", "disp", "write", "percentio", "percentchars"]},"msprintf": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "msprintf"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "sprintf"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "converts, formats, and writes data in a string"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "converts, formats, and writes data in a string"},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": "str = msprintf(format, a1,...,an)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a string providing the format to use to write all next arguments. The "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " follows -- as close as possible -- the C printf format operand syntax, as described in the "},{"type": "link","children": [],"string": "printf_conversion"},{"type": "text","children": [],"string": " page. UTF-8 extended characters and numbered placeholders \"%n$..\" are supported."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1,...,an"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Data to be converted and written according to the "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " argument. Supported types: all numbers, booleans, strings. Only the real part of complex numbers is considered (current Scilab limitation)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, or a column of strings."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["printf_conversion", "mprintf", "percentchars"]},"print": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "print"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "imprime variáveis em um arquivo"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "print('file-name',x1,[x2,...xn])"},"varlist": [],"seealso": ["write", "read", "format", "mprintf", "disp"]},"printf_conversion": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "printf_conversion"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Especificações de conversão de mprintf, msprintf, mfprintf"},"string": []},"synopsis": [],"varlist": [],"seealso": ["mprintf", "mfprintf", "msprintf"]},"xcos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Block diagram editor and GUI for the hybrid simulator"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xcos()", "xcos(filename)", "xcos(scs_m_list)"]},"varlist": [],"seealso": ["scicosim", "scicos_simulate", "xcos_menu_entries", "supported_compilers"]},"xcos_debug_gui": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcos_debug_gui"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Interactive debugging function to be used in the Debug Xcos block"},"string": []},"synopsis": [],"varlist": [],"seealso": ["DEBUG", "scicos_debug", "scicos_log"]},"xcos_menu_entries": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Menu_Entries"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Xcos editor menu entries"},"string": []},"synopsis": [],"varlist": [],"seealso": ["scicos_debug", "ode", "dae"]},"lincos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lincos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Constructs by linearization a linear state-space model from a general dynamical system described by a Xcos diagram"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sys = lincos(scs_m [,x0,u0 [,param] ])"},"varlist": [],"seealso": ["steadycos", "scicos_simulate"]},"scicos_simulate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_simulate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Function for running xcos simulation in batch mode"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["Info=scicos_simulate(scs_m)", "Info=scicos_simulate(scs_m,Info)", "Info=scicos_simulate(scs_m,context)", "Info=scicos_simulate(scs_m,flag)", "Info=scicos_simulate(scs_m ,Info [, context] [,flag])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scs_m"},{"type": "text","children": [],"string": ": A diagram data structure (see "},{"type": "link","children": [],"string": "scs_m structure"},{"type": "text","children": [],"string": "). "},{"type": "para","children": [],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Info"},{"type": "text","children": [],"string": ": A list. It must be set to "},{"type": "literal","children": [],"string": "list()"},{"type": "text","children": [],"string": " at the first call, then use output "},{"type": "literal","children": [],"string": "Info"},{"type": "text","children": [],"string": " as input "},{"type": "literal","children": [],"string": "Info"},{"type": "text","children": [],"string": " for the next calls. "},{"type": "literal","children": [],"string": "Info"},{"type": "text","children": [],"string": " contains compilation and simulation information and is used to avoid recompilation when not needed. "},{"type": "para","children": [],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ContextValues"},{"type": "text","children": [],"string": ": A Scilab struct containing values of symbolic variables used in the context and xcos blocks. "},{"type": "para","children": [],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "text","children": [],"string": ": A string. If it equals 'nw' (no window), then blocks using graphical windows are not executed. Note that the list of such blocks must be updated as new blocks are added."}],"string": []}],"string": []},"seealso": ["scicos_diagram", "importXcosDiagram", "loadXcosLibs", "scicosim", "xcos", "steadycos", "lincos"]},"scicosim": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicosim"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "xcos (batch) simulation function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[state,t] = scicosim(state,tcur,tf,sim,str,tol)"},"varlist": [],"seealso": ["scicos_simulate", "xcos"]},"steadycos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "steadycos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Finds an equilibrium state of a general dynamical system described by a xcos diagram"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[X,U,Y,XP]=steadycos(scs_m,X,U,Y,Indx,Indu,Indy [,Indxp [,param ] ])"},"varlist": [],"seealso": ["lincos", "scicos_simulate", "xcos"]},"xcos_simulate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcos_simulate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Function for running xcos simulation in batch mode"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Info, status]=xcos_simulate(scs_m, needcompile)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scs_m"},{"type": "text","children": [],"string": ": A diagram data structure (see "},{"type": "link","children": [],"string": "scs_m structure"},{"type": "text","children": [],"string": "). "},{"type": "para","children": [],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "needcompile"},{"type": "text","children": [],"string": ": An integer. If it equals 4, then the simulator will perform a complete compilation of the diagram. If not, it will use cached value of %cpr. DEPRECATED"}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "text","children": [],"string": ": A boolean. %T if simulation is successful, %f if simulation fails."}],"string": []}],"string": []},"seealso": ["scicos_diagram", "importXcosDiagram", "scicosim", "xcos", "steadycos", "lincos"]},"xcosValidateBlockSet": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosValidateBlockSet"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Function to validate Xcos Block interface function."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[status, message] = xcosValidateBlockSet(interfFunctionName)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "interfFunctionName"},{"type": "text","children": [],"string": ": A Xcos block interface function name. "},{"type": "para","children": [],"string": []}],"string": []},"string": []},"seealso": ["scicos_diagram", "xcos"]},"xcosValidateCompareBlock": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosValidateCompareBlock"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Function to compare two Xcos Blocks."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[status, message] = xcosValidateCompareBlock(block1, block2)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block1"},{"type": "text","children": [],"string": ": A Xcos block."}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block2"},{"type": "text","children": [],"string": ": A Xcos block."}],"string": []}],"string": []},"seealso": ["scicos_diagram", "xcos"]},"Annotations_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Annotations_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Annotations palette"},"string": []},"synopsis": [],"varlist": [],"seealso": "TEXT_f"},"TEXT_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TEXT_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Free annotation"},"string": []},"synopsis": [],"varlist": [],"seealso": "math_rendering_features_in_graphic"},"Commonlyusedblocks_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Commonlyusedblocks_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Commonly used blocks palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["ANDBLK", "BIGSOM_f", "CMSCOPE", "CONST_m", "CONVERT", "CSCOPXY", "DEMUX", "DOLLAR_f", "INTEGRAL_f", "IN_f", "LOGICAL_OP", "MUX", "NRMSOM_f", "OUT_f", "PRODUCT", "RELATIONALOP", "SATURATION", "SWITCH2_m", "TEXT_f"]},"LOGICAL_OP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "LOGICAL_OP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Logical operation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"RELATIONALOP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "RELATIONALOP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Relational operation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Continuous_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Continuous_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous time systems palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CLINDUMMY_f", "CLR", "CLSS", "DERIV", "INTEGRAL_f", "INTEGRAL_m", "PID", "TCLSS", "TIME_DELAY", "VARIABLE_DELAY"]},"CLINDUMMY_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLINDUMMY_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Dummy"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CLR": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLR"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous transfer function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CLSS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLSS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous state-space system"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DERIV": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DERIV"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Derivative"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"INTEGRAL_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "INTEGRAL_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Integration"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"INTEGRAL_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "INTEGRAL_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Integration"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"PID": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PID"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "PID regulator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"TCLSS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCLSS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Continuous linear system with jump"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"TIME_DELAY": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TIME_DELAY"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Time delay"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"VARIABLE_DELAY": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "VARIABLE_DELAY"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Variable delay"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Demonstrationsblocks_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Demonstrationsblocks_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Demonstrations blocks palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["AUTOMAT", "BOUNCE", "BOUNCEXY", "BPLATFORM", "PDE"]},"AUTOMAT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "AUTOMAT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "automata (finite state machine)"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"BOUNCE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BOUNCE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Balls coordinates generator"},"string": []},"synopsis": [],"varlist": [],"seealso": "BOUNCEXY"},"BOUNCEXY": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BOUNCEXY"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Balls viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": "BOUNCE"},"BPLATFORM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BPLATFORM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Balls under a platform viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"PDE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PDE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "1D PDE block"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"discontinuities_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "discontinuities_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "discontinuities palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BACKLASH", "DEADBAND", "DELAYV_f", "HYSTHERESIS", "RATELIMITER", "QUANT_f", "SATURATION"]},"BACKLASH": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BACKLASH"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Backlash"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DEADBAND": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DEADBAND"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Deadband"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"HYSTHERESIS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "HYSTHERESIS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Hystheresis"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"RATELIMITER": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "RATELIMITER"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Rate limiter"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SATURATION": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SATURATION"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Saturation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Discrete_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Discrete_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete time systems palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["AUTOMAT", "DELAY_f", "DELAYV_f", "DLR", "DLRADAPT_f", "DLSS", "DOLLAR_f", "REGISTER", "SAMPHOLD_m", "TCLSS"]},"DELAY_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DELAY_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete time delay"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DELAYV_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DELAYV_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Variable delay"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DLR": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DLR"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete transfer function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DLRADAPT_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DLRADAPT_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete Zero-Pole"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DLSS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DLSS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete state-space system"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DOLLAR_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DOLLAR_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Delay operator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"REGISTER": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "REGISTER"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Shift Register"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Electrical_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Electrical_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["Capacitor", "CCS", "ConstantVoltage", "CurrentSensor", "CVS", "Diode", "Ground", "Gyrator", "IdealTransformer", "Inductor", "NMOS", "NPN", "OpAmp", "PMOS", "PNP", "PotentialSensor", "Resistor", "SineVoltage", "Switch", "VariableResistor", "VoltageSensor", "VsourceAC", "VVsourceAC"]},"Capacitor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Capacitor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical capacitor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CCS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CCS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Controllable Modelica current source"},"string": []},"synopsis": [],"varlist": [],"seealso": "CVS"},"ConstantVoltage": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ConstantVoltage"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical DC voltage source"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CurrentSensor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CurrentSensor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical current sensor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CVS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CVS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Controllable Modelica voltage source"},"string": []},"synopsis": [],"varlist": [],"seealso": "CCS"},"Diode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Diode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical diode"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Ground": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Ground"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ground (zero potential reference)"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Gyrator": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Gyrator"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Modelica Gyrator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"IdealTransformer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "IdealTransformer"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ideal Transformer"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Inductor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Inductor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical inductor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"NMOS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "NMOS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Simple NMOS Transistor"},"string": []},"synopsis": [],"varlist": [],"seealso": "PMOS"},"NPN": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "NPN"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "NPN transistor"},"string": []},"synopsis": [],"varlist": [],"seealso": "PNP"},"OpAmp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "OpAmp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ideal opamp (norator-nullator pair)"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"PMOS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PMOS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Simple PMOS Transistor"},"string": []},"synopsis": [],"varlist": [],"seealso": "NMOS"},"PNP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PNP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "PNP transistor"},"string": []},"synopsis": [],"varlist": [],"seealso": "NPN"},"PotentialSensor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PotentialSensor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Potential sensor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Resistor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Resistor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical resistor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SineVoltage": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SineVoltage"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sine voltage source"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Switch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Switch"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Non-ideal electrical switch"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"VariableResistor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "VariableResistor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical variable resistor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"VoltageSensor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "VoltageSensor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical voltage sensor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"VsourceAC": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "VsourceAC"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Electrical AC voltage source"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"VVsourceAC": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "VVsourceAC"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Variable AC voltage source"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Events_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Events_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Event handling palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["ANDBLK", "ANDLOG_f", "CEVENTSCOPE", "CLKFROM", "CLKGOTO", "CLKGotoTagVisibility", "CLKOUTV_f", "CLKSOMV_f", "CLOCK_c", "EDGE_TRIGGER", "ENDBLK", "END_c", "ESELECT_f", "EVTDLY_c", "EVTGEN_f", "EVTVARDLY", "Extract_Activation", "HALT_f", "IFTHEL_f", "M_freq", "MCLOCK_f", "MFCLCK_f", "SampleCLK", "freq_div"]},"ANDBLK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ANDBLK"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Activation and"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"ANDLOG_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ANDLOG_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Logical AND"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CEVENTSCOPE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CEVENTSCOPE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Activation scope"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CLKFROM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLKFROM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Receives data from a corresponding CLKGOTO"},"string": []},"synopsis": [],"varlist": [],"seealso": "FROM"},"CLKGOTO": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLKGOTO"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Send input events to the corresponding CLKFROM block"},"string": []},"synopsis": [],"varlist": [],"seealso": "GOTO"},"CLKGotoTagVisibility": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLKGotoTagVisibility"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define Scope of CLKGOTO tag visibility"},"string": []},"synopsis": [],"varlist": [],"seealso": "GotoTagVisibility"},"CLKSOMV_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLKSOMV_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Activation union"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"EDGE_TRIGGER": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EDGE_TRIGGER"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "generate an event when the input signal sign changes"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"ESELECT_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ESELECT_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Synchronous block Event-Select"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"EVTDLY_c": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EVTDLY_c"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Event delay"},"string": []},"synopsis": [],"varlist": [],"seealso": "CLOCK_c"},"EVTGEN_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EVTGEN_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Event generator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"EVTVARDLY": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EVTVARDLY"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Event variable delay"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Extract_Activation": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Extract_Activation"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Extract_Activation block"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"freq_div": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "freq_div"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Frequency division"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"HALT_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "HALT_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Pause the simulation at an input event"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"IFTHEL_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "IFTHEL_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Synchronous block If-Then-Else"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"M_freq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "M_freq"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Multiple Frequencies"},"string": []},"synopsis": [],"varlist": [],"seealso": "MFCLCK_f"},"MCLOCK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MCLOCK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "double clock at two multiple output frequencies"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"MFCLCK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MFCLCK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "triggered double clock with two output frequencies"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"VirtualCLK0": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "VirtualCLK0"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Triggers always active blocks in a superblock"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Implicit_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Implicit_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Implicit palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CONSTRAINT_c", "DIFF_f"]},"CONSTRAINT_c": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CONSTRAINT_c"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Constraint"},"string": []},"synopsis": [],"varlist": [],"seealso": "DIFF_f"},"DIFF_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DIFF_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Derivative"},"string": []},"synopsis": [],"varlist": [],"seealso": "CONSTRAINT_c"},"Integer_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Integer_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Integer palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BITCLEAR", "BITSET", "CONVERT", "DFLIPFLOP", "DLATCH", "EXTRACTBITS", "INTMUL", "JKFLIPFLOP", "LOGIC", "SHIFT", "SRFLIPFLOP"]},"BITCLEAR": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BITCLEAR"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Clear a Bit"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BITSET", "EXTRACTBITS", "LOGICAL_OP"]},"BITSET": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BITSET"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set a Bit"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BITCLEAR", "EXTRACTBITS", "LOGICAL_OP"]},"CONVERT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CONVERT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Data Type Conversion"},"string": []},"synopsis": [],"varlist": [],"seealso": "EXTRACTBITS"},"DFLIPFLOP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DFLIPFLOP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "D flip-flop"},"string": []},"synopsis": [],"varlist": [],"seealso": ["DLATCH", "SRFLIPFLOP", "JKFLIPFLOP"]},"DLATCH": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DLATCH"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "D latch flip-flop"},"string": []},"synopsis": [],"varlist": [],"seealso": ["DFLIPFLOP", "SRFLIPFLOP", "JKFLIPFLOP"]},"EXTRACTBITS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EXTRACTBITS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Bits Extraction"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BITSET", "BITCLEAR", "LOGICAL_OP"]},"INTMUL": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "INTMUL"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Integer matrix multiplication"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATMUL", "EXTRACTBITS"]},"JKFLIPFLOP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "JKFLIPFLOP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "JK flip-flop"},"string": []},"synopsis": [],"varlist": [],"seealso": ["DLATCH", "DFLIPFLOP", "SRFLIPFLOP"]},"LOGIC": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "LOGIC"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Combinatorial Logic"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BITSET", "BITCLEAR", "LOGICAL_OP", "EXTRACTBITS"]},"SHIFT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SHIFT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Shift/Rotates Bits"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BITSET", "BITCLEAR"]},"SRFLIPFLOP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SRFLIPFLOP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SR flip-flop"},"string": []},"synopsis": [],"varlist": [],"seealso": ["DLATCH", "DFLIPFLOP", "JKFLIPFLOP"]},"Lookuptables_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Lookuptables_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lookup tables palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["INTRP2BLK_f", "INTRPLBLK_f", "LOOKUP_f"]},"INTRP2BLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "INTRP2BLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "2D interpolation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"INTRPLBLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "INTRPLBLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Linear interpolation"},"string": []},"synopsis": [],"varlist": [],"seealso": "INTRP2BLK_f"},"LOOKUP_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "LOOKUP_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lookup table"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Mathoperations_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Mathoperations_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Math operations palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["ABS_VALUE", "BIGSOM_f", "COSBLK_f", "EXPBLK_m", "EXPRESSION", "GAINBLK_f", "INVBLK", "LOGBLK_f", "MATMAGPHI", "MATZREIM", "MAX_f", "MAXMIN", "MIN_f", "POWBLK_f", "PROD_f", "PRODUCT", "SIGNUM", "SINBLK_f", "SQRT", "SUM_f", "SUMMATION", "TANBLK_f", "TrigFun"]},"ABS_VALUE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ABS_VALUE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Absolute value"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"BIGSOM_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BIGSOM_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scalar or vector Addition/Soustraction"},"string": []},"synopsis": [],"varlist": [],"seealso": ["SUMMATION", "SUM_f"]},"COSBLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "COSBLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cosine"},"string": []},"synopsis": [],"varlist": [],"seealso": ["TrigFun", "SINBLK_f", "TANBLK_f"]},"EXPBLK_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EXPBLK_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Exponential of a scalar"},"string": []},"synopsis": [],"varlist": [],"seealso": ["POWBLK_f", "LOGBLK_f", "SQRT"]},"EXPRESSION": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EXPRESSION"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Mathematical expression"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"GAINBLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GAINBLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gain"},"string": []},"synopsis": [],"varlist": [],"seealso": ["PROD_f", "INVBLK", "PRODUCT"]},"INVBLK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "INVBLK"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GAINBLK_f", "PROD_f", "PRODUCT"]},"LOGBLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "LOGBLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Logarithm"},"string": []},"synopsis": [],"varlist": [],"seealso": ["POWBLK_f", "EXPBLK_m", "SQRT"]},"MATMAGPHI": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATMAGPHI"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Conversions Z <=> (magnitude,angle) of complex numbers"},"string": []},"synopsis": [],"varlist": [],"seealso": "MATZREIM"},"MATZREIM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATZREIM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Complex decomposition/composition"},"string": []},"synopsis": [],"varlist": [],"seealso": "MATMAGPHI"},"MAX_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MAX_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Maximum  value of a vector's elements"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MIN_f", "MAXMIN"]},"MAXMIN": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MAXMIN"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Max or min value of a vector, or element-wise for N vectors"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MIN_f", "MAX_f"]},"MIN_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MIN_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Minimum value of a vector's elements"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MAX_f", "MAXMIN"]},"POWBLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "POWBLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Array power"},"string": []},"synopsis": [],"varlist": [],"seealso": ["LOGBLK_f", "EXPBLK_m", "SQRT"]},"PROD_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PROD_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Element-wise product"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GAINBLK_f", "INVBLK", "PRODUCT"]},"PRODUCT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PRODUCT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Element-wise vector multiplication/division"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GAINBLK_f", "INVBLK", "PROD_f"]},"SIGNUM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SIGNUM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sign"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SINBLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SINBLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sine"},"string": []},"synopsis": [],"varlist": [],"seealso": ["TrigFun", "COSBLK_f", "TANBLK_f"]},"SQRT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SQRT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Square root"},"string": []},"synopsis": [],"varlist": [],"seealso": ["POWBLK_f", "EXPBLK_m", "LOGBLK_f"]},"SUM_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SUM_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Addition"},"string": []},"synopsis": [],"varlist": [],"seealso": ["SUMMATION", "BIGSOM_f"]},"SUMMATION": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SUMMATION"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Addition/Subtraction"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BIGSOM_f", "SUM_f"]},"TANBLK_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TANBLK_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Tangent"},"string": []},"synopsis": [],"varlist": [],"seealso": ["TrigFun", "COSBLK_f", "SINBLK_f"]},"TrigFun": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TrigFun"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Trigonometric function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["COSBLK_f", "SINBLK_f", "TANBLK_f"]},"Matrix_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Matrix_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix operation palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CUMSUM", "EXTRACT", "EXTTRI", "MATBKSL", "MATCATH", "MATCATV", "MATDET", "MATDIAG", "MATDIV", "MATEIG", "MATEXPM", "MATINV", "MATLU", "MATMAGPHI", "MATMUL", "MATPINV", "MATRESH", "MATSING", "MATSUM", "MATTRAN", "MATZCONJ", "MATZREIM", "RICC", "ROOTCOEF", "SQRT", "SUBMAT"]},"CUMSUM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CUMSUM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cumulative Sum"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATSUM", "cumsum"]},"EXTRACT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EXTRACT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix extractor"},"string": []},"synopsis": [],"varlist": [],"seealso": "EXTTRI"},"EXTTRI": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EXTTRI"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Triangular or Diagonal Extraction"},"string": []},"synopsis": [],"varlist": [],"seealso": ["EXTRACT", "triu", "tril", "diag"]},"MATBKSL": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATBKSL"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Left matrix division"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATDIV", "MATMUL"]},"MATCATH": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATCATH"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Horizontal Concatenation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"MATCATV": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATCATV"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Vertical Concatenation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"MATDET": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATDET"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Determinant"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATINV", "det"]},"MATDIAG": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATDIAG"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create Diagonal Matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": ["EXTTRI", "diag"]},"MATDIV": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATDIV"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix division"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATBKSL", "MATMUL"]},"MATEIG": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATEIG"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Eigenvalues"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATSING", "spec"]},"MATEXPM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATEXPM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Exponential"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATMUL", "expm"]},"MATINV": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATINV"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Inverse"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATLU", "MATPINV", "inv"]},"MATLU": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATLU"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "LU Factorization"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATINV", "lu"]},"MATMUL": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATMUL"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Multiplication"},"string": []},"synopsis": [],"varlist": [],"seealso": ["INTMUL", "MATDIV", "MATBKSL", "MATEXPM", "SUMMATION"]},"MATPINV": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATPINV"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix PseudoInverse"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATINV", "MATSING", "pinv"]},"MATRESH": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATRESH"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Reshape"},"string": []},"synopsis": [],"varlist": [],"seealso": ["EXTRACT", "matrix"]},"MATSING": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATSING"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SVD Decomposition"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATEIG", "MATLU", "svd"]},"MATSUM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATSUM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sum of Matrix's Elements"},"string": []},"synopsis": [],"varlist": [],"seealso": ["SUBMAT", "SUMMATION", "sum"]},"MATTRAN": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATTRAN"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Transpose"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATZCONJ", "quote"]},"MATZCONJ": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MATZCONJ"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Conjugate of Matrix's Elements"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MATTRAN", "conj"]},"RICC": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "RICC"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Riccati Equation"},"string": []},"synopsis": [],"varlist": [],"seealso": ["ricc", "riccati"]},"ROOTCOEF": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ROOTCOEF"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Polynomial Coefficient Computation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SUBMAT": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SUBMAT"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sub-matrix Extraction"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Portaction_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Portaction_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Port & Subsystem palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CLKINV_f", "CLKOUTV_f", "IN_f", "INIMPL_f", "OUTIMPL_f", "OUT_f", "SUPER_f"]},"CLKINV_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLKINV_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Input activation port"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CLKOUTV_f", "SUPER_f"]},"CLKOUTV_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLKOUTV_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Output activation port"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CLKINV_f", "SUPER_f"]},"IN_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "IN_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Regular Input Port"},"string": []},"synopsis": [],"varlist": [],"seealso": ["OUT_f", "SUPER_f"]},"INIMPL_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "INIMPL_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Implicit Input port"},"string": []},"synopsis": [],"varlist": [],"seealso": ["OUTIMPL_f", "SUPER_f"]},"OUT_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "OUT_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Regular Output Port"},"string": []},"synopsis": [],"varlist": [],"seealso": ["IN_f", "SUPER_f"]},"OUTIMPL_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "OUTIMPL_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Output implicit port"},"string": []},"synopsis": [],"varlist": [],"seealso": ["INIMPL_f", "SUPER_f"]},"Signalprocessing_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Signalprocessing_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Signal processing palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MCLOCK_f", "MFCLCK_f", "CLKGotoTagVisibility", "SAMPHOLD_m"]},"QUANT_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "QUANT_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Quantization"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SAMPHOLD_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SAMPHOLD_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sample and hold"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Signalrouting_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Signalrouting_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Signal routing palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["DEMUX", "EXTRACTOR", "FROM", "FROMMO", "GOTO", "GOTOMO", "CLKFROM", "CLKGOTO", "GotoTagVisibility", "GotoTagVisibilityMO", "ISELECT_m", "MUX", "M_SWITCH", "NRMSOM_f", "RELAY_f", "SELECT_m", "SWITCH2_m", "SWITCH_f"]},"DEMUX": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DEMUX"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Demultiplexer"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"EXTRACTOR": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "EXTRACTOR"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Extractor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"FROM": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "FROM"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "receives data from a corresponding GOTO"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GOTO", "GotoTagVisibility"]},"FROMMO": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "FROMMO"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Receives data from a corresponding GOTOMO"},"string": []},"synopsis": [],"varlist": [],"seealso": "FROM"},"GOTO": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GOTO"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Send input data to the corresponding FROM block"},"string": []},"synopsis": [],"varlist": [],"seealso": ["FROM", "GotoTagVisibility"]},"GOTOMO": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GOTOMO"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Pass block input to FROMMO block"},"string": []},"synopsis": [],"varlist": [],"seealso": "GOTO"},"GotoTagVisibility": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GotoTagVisibility"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define Scope of GOTO tag visibility"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GOTO", "FROM"]},"GotoTagVisibilityMO": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GotoTagVisibilityMO"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define Scope of GOTOMO tag visibility"},"string": []},"synopsis": [],"varlist": [],"seealso": "GotoTagVisibility"},"ISELECT_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ISELECT_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Iselect"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"M_SWITCH": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "M_SWITCH"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Multi-port switch"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"MUX": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MUX"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Multiplexer"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"NRMSOM_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "NRMSOM_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Merge data"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"RELAY_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "RELAY_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Relay"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SELECT_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SELECT_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Select"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SELF_SWITCH": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SELF_SWITCH"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Switch"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SWITCH2_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SWITCH2_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Switch2"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SWITCH_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SWITCH_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Switch"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Sinks_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Sinks_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sinks palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["AFFICH_m", "BARXY", "CANIMXY", "CANIMXY3D", "CEVENTSCOPE", "CFSCOPE", "CLKOUTV_f", "CMAT3D", "CMATVIEW", "CMSCOPE", "CSCOPE", "CSCOPXY", "CSCOPXY3D", "ENDBLK", "END_c", "HALT_f", "OUTIMPL_f", "OUT_f", "TOWS_c", "TRASH_f", "WRITEAU_f", "WRITEC_f"]},"AFFICH_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "AFFICH_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display input numbers on the block's icon"},"string": []},"synopsis": [],"varlist": [],"seealso": ["TOWS_c", "WRITEC_f"]},"BARXY": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "BARXY"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "y=f(x) animated viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CANIMXY", "CSCOPXY"]},"CANIMXY": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CANIMXY"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "y=f(x) animated viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": ["BARXY", "CANIMXY3D"]},"CANIMXY3D": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CANIMXY3D"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "z=f(x,y) animated viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CANIMXY", "CSCOPXY3D", "CMAT3D"]},"CFSCOPE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CFSCOPE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Floating point scope"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CSCOPE", "CMSCOPE", "CSCOPXY", "CSCOPXY3D"]},"CMAT3D": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CMAT3D"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix z values 3D viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CMATVIEW", "CSCOPXY3D", "CANIMXY3D"]},"CMATVIEW": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CMATVIEW"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matrix Colormapped viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CMAT3D", "CSCOPE", "CMSCOPE"]},"CMSCOPE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CMSCOPE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Multi display scope in subplot(N,1)"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CSCOPE", "CFSCOPE", "CSCOPXY", "CSCOPXY3D", "SCALE_CMSCOPE"]},"CSCOPE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CSCOPE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scope displaying a unique simple or multiplexed input in a single axes"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CMSCOPE", "CFSCOPE", "CSCOPXY", "CSCOPXY3D"]},"CSCOPXY": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CSCOPXY"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "y = f(x) permanent viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CSCOPXY3D", "CSCOPE", "CMSCOPE", "CFSCOPE"]},"CSCOPXY3D": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CSCOPXY3D"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "z = f(x,y) permanent viewer"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CSCOPXY", "CSCOPE", "CMSCOPE", "CFSCOPE"]},"END_c": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "END_c"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "END_c block"},"string": []},"synopsis": [],"varlist": [],"seealso": "ENDBLK"},"ENDBLK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ENDBLK"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "END block"},"string": []},"synopsis": [],"varlist": [],"seealso": ["END_c", "TRASH_f"]},"SCALE_CMSCOPE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SCALE_CMSCOPE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Multi display scope with autoscale feature of graph"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SCALE_CSCOPE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SCALE_CSCOPE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Single Display Scope with autoscale feature of graph"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"TOWS_c": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TOWS_c"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Data to Scilab workspace"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"TRASH_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TRASH_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Trash block"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"WRITEAU_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "WRITEAU_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write AU sound file"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"WRITEC_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "WRITEC_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write to C binary file"},"string": []},"synopsis": [],"varlist": [],"seealso": ["READC_f", "RFILE_f"]},"Sources_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Sources_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sources palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CLKINV_f", "CLOCK_c", "CONST_m", "Counter", "CURV_f", "FROMWSB", "GENSIN_f", "GENSQR_f", "IN_f", "INIMPL_f", "Modulo_Count", "RAMP", "RAND_m", "READAU_f", "READC_f", "RFILE_f", "SampleCLK", "SAWTOOTH_f", "Sigbuilder", "STEP_FUNCTION", "TIME_f", "TKSCALE"]},"CLOCK_c": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CLOCK_c"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Activation clock"},"string": []},"synopsis": [],"varlist": [],"seealso": "SampleCLK"},"CONST_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CONST_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Constant"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Counter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Counter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Counter"},"string": []},"synopsis": [],"varlist": [],"seealso": "Modulo_Count"},"CURV_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CURV_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Curve"},"string": []},"synopsis": [],"varlist": [],"seealso": "Sigbuilder"},"FROMWSB": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "FROMWSB"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Data from Scilab workspace to Xcos"},"string": []},"synopsis": [],"varlist": [],"seealso": "TOWS_c"},"GENSIN_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GENSIN_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sine wave generator"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GENSQR_f", "SAWTOOTH_f", "Sigbuilder"]},"GENSQR_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GENSQR_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Square wave generator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Modulo_Count": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Modulo_Count"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Modulo counter (0 to N counter)"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GENSQR_f", "SAWTOOTH_f", "Sigbuilder"]},"PULSE_SC": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PULSE_SC"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Pulse Generator"},"string": []},"synopsis": [],"varlist": [],"seealso": ["STEP_FUNCTION", "RAMP", "CURV_f", "Sigbuilder"]},"RAMP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "RAMP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ramp"},"string": []},"synopsis": [],"varlist": [],"seealso": ["STEP_FUNCTION", "CURV_f", "Sigbuilder"]},"RAND_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "RAND_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Random generator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"READAU_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "READAU_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read AU sound file"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"READC_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "READC_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read binary data"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"RFILE_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "RFILE_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read from input file"},"string": []},"synopsis": [],"varlist": [],"seealso": ["READC_f", "WRITEC_f"]},"SampleCLK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SampleCLK"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sample Time Clock"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CLOCK_c", "Counter", "ESELECT_f", "M_freq"]},"SAWTOOTH_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SAWTOOTH_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sawtooth generator"},"string": []},"synopsis": [],"varlist": [],"seealso": ["GENSQR_f", "GENSIN_f", "Sigbuilder", "Sigbuilder"]},"Sigbuilder": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Sigbuilder"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Signal creator/generator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"STEP_FUNCTION": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "STEP_FUNCTION"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Step Function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["RAMP", "CURV_f", "Sigbuilder"]},"TIME_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TIME_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Time"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"TKSCALE": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TKSCALE"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Adjust value with a graphical widget."},"string": []},"synopsis": [],"varlist": [],"seealso": []},"ThermoHydraulics_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ThermoHydraulics_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Thermal-Hydraulics toolbox"},"string": []},"synopsis": [],"varlist": [],"seealso": ["Bache", "PerteDP", "PuitsP", "SourceP", "VanneReglante", "Flowmeter"]},"Bache": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Bache"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Thermal-hydraulic tank (reservoir)"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Flowmeter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Flowmeter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Thermal-hydraulic Flow sensor"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"PerteDP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PerteDP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Thermal-hydraulic pipe"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"PuitsP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "PuitsP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Thermal-hydraulic drain (well)"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SourceP": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SourceP"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Thermal-hydraulic constant pressure source"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"VanneReglante": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "VanneReglante"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Thermal-hydraulic control valve"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Userdefinedfunctions_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Userdefinedfunctions_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "User defined functions palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["c_block", "CBLOCK", "fortran_block", "generic_block3", "MBLOCK", "PDE", "scifunc_block_m", "SUPER_f", "TEXT_f"]},"c_block": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "c_block"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "C language"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"CBLOCK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CBLOCK"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "New C"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"DEBUG": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DEBUG"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Debug the simulation"},"string": []},"synopsis": [],"varlist": [],"seealso": ["xcos_debug_gui", "scicos_debug", "scicos_log"]},"DSUPER": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DSUPER"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Masked super block"},"string": []},"synopsis": [],"varlist": [],"seealso": "SUPER_f"},"fortran_block": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fortran_block"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Fortran"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"generic_block3": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "generic_block3"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generic block"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"MBLOCK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "MBLOCK"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Modelica generic block"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scifunc_block_m": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scifunc_block_m"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scilab function block"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"SUPER_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SUPER_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Super block"},"string": []},"synopsis": [],"varlist": [],"seealso": "DSUPER"},"Zerocrossingdetection_pal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Zerocrossingdetection_pal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Zero crossing detection palette"},"string": []},"synopsis": [],"varlist": [],"seealso": ["CLINDUMMY_f", "GENERAL_f", "NEGTOPOS_f", "POSTONEG_f", "ZCROSS_f"]},"GENERAL_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GENERAL_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "GENERAL_f title"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"NEGTOPOS_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "NEGTOPOS_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Threshold negative to positive"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"POSTONEG_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "POSTONEG_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Threshold positive to negative"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"ZCROSS_f": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ZCROSS_f"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Threshold detection at zero"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"C_macros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "C_macros"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Utilities C macros"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"C_struct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "C_struct"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "C Block structure of a computational function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"C_utils": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "C_utils"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Utilities C functions"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"sci_struct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sci_struct"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scicos block structure of a scilab computational function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"curblock": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "curblock"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the current called xcos block during the simulation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "blk = curblock()"},"varlist": [],"seealso": []},"getblocklabel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getblocklabel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the label of a scicos block"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "label = getblocklabel(blk)"},"varlist": [],"seealso": []},"getscicosvars": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getscicosvars"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Supervisor utility function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["myvar = getscicosvars(str)", "myvar =getscicosvars([str1;str2;...])"]},"varlist": [],"seealso": "scicos_debug"},"phase_simulation": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "phase_simulation"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the current simulation phase"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "psim = phase_simulation()"},"varlist": [],"seealso": []},"pointer_xproperty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pointer_xproperty"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the type of a continuous time state variable"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xprop = pointer_xproperty()"},"varlist": [],"seealso": "set_xproperty"},"scicos_time": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_time"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the current time during simulation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"set_blockerror": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "set_blockerror"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set the block error number"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "set_blockerror(n)"},"varlist": [],"seealso": []},"set_xproperty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "set_xproperty"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the type of a continuous time state variable"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "set_xproperty(xprop)"},"varlist": [],"seealso": "pointer_xproperty"},"block_parameter_error": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "block_parameter_error"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Displays a parameter input error box for a Xcos block"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "block_parameter_error(inform, expected)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "inform:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, type of error"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expected:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the expected value or the range of expected values."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "x_mdialog"},"buildouttb": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "buildouttb"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Build of the sublist %cpr.state.outtb"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[outtb]=buildouttb(lnksz,lnktyp)"},"varlist": [],"seealso": []},"getModelicaPath": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getModelicaPath"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the Modelica directory path needed by Xcos diagram containing Modelica blocks"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[modelica_path, modelica_directory] = getModelicaPath()"},"varlist": [],"seealso": "MODELICA_USER_LIBS"},"importXcosDiagram": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "importXcosDiagram"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Import a Xcos diagram on Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[result]=importXcosDiagram(filename)"},"varlist": [],"seealso": []},"loadScicos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "loadScicos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Load the Xcos simulation native library."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "loadScicos()"},"varlist": [],"seealso": ["xcos", "loadXcosLibs"]},"loadXcosLibs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "loadXcosLibs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Loads all native Xcos blocks interfaces functions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "loadXcosLibs()"},"varlist": [],"seealso": ["xcos", "loadScicos"]},"MODELICA_USER_LIBS": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%MODELICA_USER_LIBS"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Specify the paths of the directories containing the Modelica class definition files"},"string": []},"synopsis": [],"varlist": [],"seealso": "getModelicaPath"},"scicos_debug": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_debug"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the level of the Scicos debugging"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["scicos_debug(level)", "level = scicos_debug()"]},"varlist": [],"seealso": ["DEBUG", "xcos_debug_gui", "scicos_log"]},"scicos_getvalue": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_getvalue"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "xwindow dialog for Xcos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[ok,x1,..,x14]=scicos_getvalue(desc,labels,typ,ini)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "desc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column vector of strings, dialog general comment"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "labels"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n column vector of strings, "},{"type": "literal","children": [],"string": "labels(i)"},{"type": "text","children": [],"string": " is the label of the ith required value"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": [{"type": "para","children": {"type": "literal","children": [],"string": "list(typ_1,dim_1,..,typ_n,dim_n)"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ_i"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "defines the type of the ith value, may have the following values:"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"mat\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for constant matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"col\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for constant column vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"row\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for constant row vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"vec\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for constant vector"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"intvec\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for  constant vector with integer values i.e int(x) == x"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"str\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"lis\"  "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "for list"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "defines the size of the ith value it must be an integer or a 2-vector of integer, -1 stands for undefined dimension"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ini"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "n column vector of strings, "},{"type": "literal","children": [],"string": "ini(i)"},{"type": "text","children": [],"string": " gives the suggested response for the ith required value"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean ,%t if ok button pressed, %f if cancel button pressed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "contains the ith value if ok=%t. If left hand side has one more "},{"type": "literal","children": [],"string": "xi"},{"type": "text","children": [],"string": " than required values the last "},{"type": "literal","children": [],"string": "xi"},{"type": "text","children": [],"string": " contains the vector of answered strings."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["x_mdialog", "x_matrix", "x_dialog"]},"scicos_log": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_log"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Logger utility for scicos"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["log = scicos_log(log);", "log = scicos_log(log, msg);", "refCounters = scicos_log(\"refCounters\");"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "log"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String, logger value. The supported log modifiers are : \"FATAL\", \"ERROR\", \"WARNING\", \"INFO\", \"DEBUG\", \"TRACE\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String, the message to log."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "refCounters"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a double vector, with a [uid, kind, reference counter] line per object."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["DEBUG", "xcos_debug_gui", "scicos_debug", "scicos_block", "loadXcosLibs"]},"scicosDiagramToScilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicosDiagramToScilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Load or Save an Xcos diagram"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["scs_m = scicosDiagramToScilab(filename)", "[scs_m1, scs_m2, ...] = scicosDiagramToScilab([filename1, filename2, ...])", "scicosDiagramToScilab(filename, scs_m)", "scicosDiagramToScilab([filename1, filename2, ...], scs_m1, scs_m2)"]},"varlist": [],"seealso": []},"set_io": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "set_io"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set or update Xcos block inputs and outputs"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[model, graphics, ok] = set_io(model, graphics, list(in, it), list(out, ot))", "[model, graphics, ok] = set_io(model, graphics, list(in, it), list(out, ot), clkin, clkout)", "[model, graphics, ok] = set_io(model, graphics, list(in, it), list(out, ot), clkin, clkout, in_implicit, out_implicit)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "model"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Block "},{"type": "link","children": [],"string": "scicos_model"},{"type": "text","children": [],"string": " representing information passed to the simulation."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "graphics"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Block "},{"type": "link","children": [],"string": "scicos_graphics"},{"type": "text","children": [],"string": " with graphical information used to display it."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list(in, it)"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "define input port properties, where N is the input port count:"},"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "in:"},{"type": "text","children": [],"string": " N-by-2 matrix, dimensions of the N-th input port."}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "it:"},{"type": "text","children": [],"string": " N vector, Scilab type of the N-th input port."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list(out, ot)"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "define output port properties, where N is the output port count:"},"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "out:"},{"type": "text","children": [],"string": " N-by-2 matrix, dimensions of the N-th output port."}],"string": []},{"type": "para","children": [{"type": "emphasis","children": [],"string": "ot:"},{"type": "text","children": [],"string": " N vector, type of the N-th output port."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clkin"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "N vector where N is the clock input port count, index of each clock"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clkout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "N vector where N is the clock output port count, index of each clock"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "in_implicit"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "N vector where N is the input port count, "},{"type": "text","children": [],"string": " for implicit port, "},{"type": "text","children": [],"string": " for explicit port."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out_implicit"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "N vector where N is the output port count, "},{"type": "text","children": [],"string": " for implicit port, "},{"type": "text","children": [],"string": " for explicit port."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"standard_define": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "standard_define"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a block from its interface as in Xcos editor."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[block] = standard_define(sz, model, exprs)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xcos block."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sz"},{"type": "listitem","children": {"type": "para","children": [{"type": "varname","children": [],"string": "[height, width]"},{"type": "text","children": [],"string": " size of the block."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "model"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "link","children": [],"string": "part of the block"},{"type": "text","children": [],"string": " that define its simulation interface."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "exprs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "link","children": [],"string": "graphics.exprs"},{"type": "text","children": [],"string": " default parameters expressions."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["scicos_block", "standard_outputs", "standard_outputs", "standard_origin"]},"standard_inputs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "standard_inputs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the position of the input ports of a block in Xcos editor."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x,y,typ] = standard_inputs(block)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xcos block."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "x position of the port. When multiple ports are described, "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " is a float vector of x positions."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "y position of the port. When multiple ports are described, "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a float vector of y positions."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "determine the type of ports. It can take the following values: "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " if this is a clock port; "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " if this is an explicit port; "},{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " if this is an implicit port. When multiple ports are described, "},{"type": "varname","children": [],"string": "typ"},{"type": "text","children": [],"string": " is a vector."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["standard_outputs", "standard_origin"]},"standard_origin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "standard_origin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the position of a block in the Xcos editor."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x,y] = standard_origin(block)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xcos block."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "x position of the block."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "y position of the block."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["standard_inputs", "standard_outputs"]},"standard_outputs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "standard_outputs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the position of the output ports of a block in Xcos editor."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[x,y,typ] = standard_outputs(block)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "xcos block."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "x position of the port. When multiple ports are described, "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": " is a float vector of x positions."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "y"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "y position of the port. When multiple ports are described, "},{"type": "varname","children": [],"string": "y"},{"type": "text","children": [],"string": " is a float vector of y positions."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "typ"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "determine the type of ports. It can take the following values: "},{"type": "literal","children": [],"string": "-1"},{"type": "text","children": [],"string": " if this is a clock port; "},{"type": "literal","children": [],"string": "1"},{"type": "text","children": [],"string": " if this is an explicit port; "},{"type": "literal","children": [],"string": "2"},{"type": "text","children": [],"string": " if this is an implicit port. When multiple ports are described, "},{"type": "varname","children": [],"string": "typ"},{"type": "text","children": [],"string": " is a vector."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["standard_inputs", "standard_origin"]},"var2vec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "var2vec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Transform a scilab variable into a vector of double"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "vec = var2vec(var)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Can be a Double, Integer, Boolean, String or List "},{"type": "link","children": [],"string": "Scilab object"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vec"},{"type": "listitem","children": [{"type": "text","children": [],"string": "A vector of real numbers. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": "vec2var"},"vec2var": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "vec2var"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Transform a vector of double into a scilab variable"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "var = vec2var(vec)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vec"},{"type": "listitem","children": [{"type": "text","children": [],"string": "A vector of real numbers. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Can be a Double, Integer, Boolean, String or List "},{"type": "link","children": [],"string": "Scilab object"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": "var2vec"},"xcosAddToolsMenu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosAddToolsMenu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add a menu item into the Xcos \"Tools\" menu."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xcosAddToolsMenu(label, command)"},"varlist": [],"seealso": []},"xcosDiagramToScilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosDiagramToScilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Load or Save an Xcos diagram"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["scs_m = xcosDiagramToScilab(filename)", "[scs_m1, scs_m2, ...] = xcosDiagramToScilab([filename1, filename2, ...])", "xcosDiagramToScilab(filename, scs_m)", "xcosDiagramToScilab([filename1, filename2, ...], scs_m1, scs_m2)"]},"varlist": [],"seealso": []},"xcosPal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosPal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Instantiate a new Xcos palette on Scilab."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["pal = xcosPal();", "pal = xcosPal(name);", "pal = xcosPal(scs_m);", "pal = xcosPal([], scs_m);", "pal = xcosPal(name, scs_m);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string; the optional palette name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scs_m:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "diagram mlist; the optional source diagram"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pal:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "palette tlist; the palette instance"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcosPal", "xcosPalAddBlock"]},"xcosPalAdd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosPalAdd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add a palette to the Scilab/Xcos palette manager. Optional property can be added to set the category of the palette."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xcosPalAdd(pal);", "xcosPalAdd(pal, category);", "status = xcosPalAdd(pal);", "status = xcosPalAdd(pal, category);", "[status, msg] = xcosPalAdd(pal);", "[status, msg] = xcosPalAdd(pal, category);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pal:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "palette tlist or path string; the palette to add"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "category:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string array; the optional category path to use"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean; the status of the operation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string; the error message"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcosPal", "xcosPalAddBlock"]},"xcosPalAddBlock": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosPalAddBlock"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add a block to a Scilab/Xcos palette instance. Some optional properties can be added to customize the palette icon and the style of the block."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["pal = xcosPalAddBlock(pal, block)", "pal = xcosPalAddBlock(pal, block, pal_block_img)", "pal = xcosPalAddBlock(pal, block, [], style)", "pal = xcosPalAddBlock(pal, block, pal_block_img, style)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pal:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the palette to update"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the block to add to the palette"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pal_block_img:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the block icon to use on the palette manager (png, jpg, gif)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "style:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the style to apply to the block"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcosPal", "xcosPalAdd"]},"xcosPalDelete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosPalDelete"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove an Xcos palette."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xcosPalDelete(category);"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "category:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string array; the category path to delete"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["xcosPal", "xcosPalAdd"]},"xcosPalExport": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosPalExport"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Export a palette instance to a path."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["xcosPalExport(pal, path);", "status = xcosPalExport(pal, path);", "[status, message] = xcosPalExport(pal, path);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pal:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "palette tlist; the palette to export"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string path; where to export the palette (HDF5 formatted file)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean; status of the export"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string; error message"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcosPal", "xcosPalAdd"]},"xcosPalGenerateAllIcons": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosPalGenerateAllIcons"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Update the palette icons (gif files) from a Scilab instance"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "lst = xcosPalGenerateAllIcons(path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the palette path"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lst"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list (names) of the generated block"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcosPalAdd", "xcosPalAddBlock"]},"xcosPalMove": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosPalMove"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Move a palette from a category to another one."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xcosPalMove(source, target);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "source:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string array; the source category path"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "target:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string array; the target category path"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xcosPal", "xcosPalAdd", "xcosPalDelete"]},"xcosUpdateBlock": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xcosUpdateBlock"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Update a block instance"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xcosUpdateBlock(blk)"},"varlist": [],"seealso": ["xcos", "xcosAddToolsMenu", "scicos_block", "scicos_diagram"]},"scicos_block": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_block"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a block structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_cpr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_cpr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compiled Scicos structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_diagram": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_diagram"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a scs_m structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_graphics": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_graphics"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define an Xcos block graphics structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_link": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_link"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a link structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_model": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_model"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a model structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_params": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_params"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a param structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_sim": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_sim"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a sim structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"scicos_state": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scicos_state"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Define a state structure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"LSodar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "LSodar"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "emphasis","children": [],"string": "LSodar"},{"type": "text","children": [],"string": " (short for Livermore Solver for Ordinary Differential equations, with Automatic method switching for stiff and nonstiff problems, and with Root-finding) is a numerical solver providing an efficient and stable method to solve Ordinary Differential Equations (ODEs) Initial Value Problems."}],"string": []},"synopsis": [],"varlist": [],"seealso": ["CVode", "IDA", "RK", "DoPri", "ImpRK", "CRANI", "DDaskr", "Comparisons", "ode", "ode_discrete", "ode_root", "odedc", "dae"]},"CVode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "CVode"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "emphasis","children": [],"string": "CVode"},{"type": "text","children": [],"string": " (short for C-language Variable-coefficients ODE solver) is a numerical solver providing an efficient and stable method to solve Ordinary Differential Equations (ODEs) Initial Value Problems. It uses either "},{"type": "emphasis","children": [],"string": "BDF"},{"type": "text","children": [],"string": " or "},{"type": "emphasis","children": [],"string": "Adams"},{"type": "text","children": [],"string": " as implicit integration method, and "},{"type": "emphasis","children": [],"string": "Newton"},{"type": "text","children": [],"string": " or "},{"type": "emphasis","children": [],"string": "Functional"},{"type": "text","children": [],"string": " iterations."}],"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "RK", "DoPri", "ImpRK", "CRANI", "IDA", "DDaskr", "Comparisons", "ode", "ode_discrete", "ode_root", "odedc", "dae"]},"RK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Runge-Kutta 4(5)"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "emphasis","children": [],"string": "Runge-Kutta"},{"type": "text","children": [],"string": " is a numerical solver providing an efficient explicit method to solve Ordinary Differential Equations (ODEs) Initial Value Problems."}],"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "IDA", "DoPri", "ImpRK", "CRANI", "DDaskr", "Comparisons", "ode", "ode_discrete", "ode_root", "odedc", "dae"]},"DoPri": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Dormand-Prince 4(5)"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "emphasis","children": [],"string": "Dormand-Prince"},{"type": "text","children": [],"string": " is a numerical solver providing an efficient explicit method to solve Ordinary Differential Equations (ODEs) Initial Value Problems."}],"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "IDA", "RK", "ImpRK", "CRANI", "DDaskr", "Comparisons", "ode", "ode_discrete", "ode_root", "odedc", "dae"]},"ImpRK": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Implicit Runge-Kutta 4(5)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Numerical solver providing an efficient and stable implicit method to solve Ordinary Differential Equations (ODEs) Initial Value Problems."},"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "IDA", "RK", "DoPri", "CRANI", "DDaskr", "Comparisons", "ode_discrete", "ode_root", "odedc", "dae"]},"CRANI": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Crank-Nicolson 2(3)"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "emphasis","children": [],"string": "Crank-Nicolson"},{"type": "text","children": [],"string": " is a numerical solver based on the "},{"type": "emphasis","children": [],"string": "Runge-Kutta"},{"type": "text","children": [],"string": " scheme providing an efficient and stable implicit method to solve Ordinary Differential Equations (ODEs) Initial Value Problems. Called by "},{"type": "link","children": [],"string": "xcos"},{"type": "text","children": [],"string": "."}],"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "IDA", "RK", "DoPri", "ImpRK", "DDaskr", "Comparisons", "ode_discrete", "ode_root", "odedc", "dae"]},"IDA": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "IDA"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Implicit Differential Algebraic equations system solver, providing an efficient and stable method to solve Differential Algebraic Equations system (DAEs) Initial Value Problems."},"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "RK", "DoPri", "ImpRK", "CRANI", "DDaskr", "Comparisons", "ode", "ode_discrete", "ode_root", "odedc", "dae"]},"DDaskr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DDaskr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Double-precision Differential Algebraic equations system Solver with Krylov method and Rootfinding: numerical solver providing an efficient and stable method to solve Differential Algebraic Equations systems (DAEs) Initial Value Problems"},"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "IDA", "RK", "DoPri", "ImpRK", "CRANI", "Comparisons", "dae", "ode", "ode_discrete", "ode_root", "odedc"]},"RootFinding": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Rootfinding"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Finds roots of continuous functions for Zero-crossing Blocks"},"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "IDA", "RK", "DoPri", "ImpRK", "CRANI", "DDaskr", "Comparisons", "ode", "ode_discrete", "ode_root", "odedc", "dae"]},"Comparisons": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Comparisons"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "This page compares solvers to determine which one is best fitted for the studied problem."},"string": []},"synopsis": [],"varlist": [],"seealso": ["LSodar", "CVode", "IDA", "RK", "DoPri", "ImpRK", "CRANI", "DDaskr", "ode", "ode_discrete", "ode_root", "odedc", "dae"]},"csvDefault": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csvDefault"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get or set defaults behavior for csv files."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["allvalues = csvDefault()", "value = csvDefault(field)", "bRes = csvDefault(field, value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "allvalues"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 6-by-2 matrix of strings, the values of all the fields. The first column contains the available fields, while the second column contains the current values."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "field"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the name of the field to get or set. The available values of "},{"type": "literal","children": [],"string": "field"},{"type": "text","children": [],"string": " are \"separator\", \"decimal\", \"conversion\", \"precision\", \"regexp\", \"eol\", \"encoding\", \"blank\"."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the value of the field to get or set."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bRes"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of booleans, bRes is true if the value was correctly set, bRes is wrong is the value was not correct."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["csvRead", "csvWrite"]},"csvRead": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csvRead"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read comma-separated value file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["M = csvRead(filename)", "M = csvRead(filename, separator)", "M = csvRead(filename, separator, decimal)", "M = csvRead(filename, separator, decimal, conversion)", "M = csvRead(filename, separator, decimal, conversion, substitute)", "M = csvRead(filename, separator, decimal, conversion, substitute, regexpcomments, range)", "M = csvRead(filename, separator, decimal, conversion, substitute, regexpcomments, range, header)", "[M, comments] = csvRead(filename, separator, decimal, conversion, substitute, regexpcomments, range, header)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single string: the file path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "separator"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single string: the field separator used."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "decimal"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a character: the decimal symbol used in numbers (dot or comma)."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "decimal"},{"type": "text","children": [],"string": " is different of "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "conversion"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "string"},{"type": "text","children": [],"string": ", the decimal conversion will be done."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "conversion"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "\"string\" or \"double\" (by default): Specifies the type of the output "},{"type": "varname","children": [],"string": "M"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Note that "},{"type": "link","children": [],"string": "read_csv"},{"type": "text","children": [],"string": " has \"string\" as default."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "substitute"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a m-by-2 matrix of strings, a replacing map (default = [], meaning no replacements). The first column "},{"type": "literal","children": [],"string": "substitute(:,1)"},{"type": "text","children": [],"string": " contains the searched strings and the second column "},{"type": "literal","children": [],"string": "substitute(:,2)"},{"type": "text","children": [],"string": " contains the replace strings. Every occurrence of a searched string in the file is replaced."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "regexpcomments"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a string specifying a regular expression (default:  []). Lines of the file matching the expression are considered as comments."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The same character is expected as delimiter at the beginning and at the end of the string. If it is needed in the expression's body, it must be escaped with \"\\\" (Here is a "},{"type": "ulink","children": [],"string": " good online page"},{"type": "text","children": [],"string": " explaining the syntax of regular expressions)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "range"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "[firstRow firstColumn lastRow lastColumn]"},{"type": "text","children": [],"string": " row vector of floating point integers, with lastRow ≤ 2e9 and lastColumn ≤ 2e9: the range of rows and columns selecting the block of data to be returned. Default [], meaning all data. The block is selected on "},{"type": "emphasis","children": [],"string": "actual data"},{"type": "text","children": [],"string": ", after removing the header and/or commented rows (when requested)."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "header"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a floating point integer: the number of lines to be skipped at the beginning of the file, before reading actual data."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m-by-n matrix of strings or numbers. Complex numbers are supported."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comments"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a column vector of strings: Lines of text matching "},{"type": "varname","children": [],"string": "regexpcomments"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["csvTextScan", "csvWrite", "csvDefault", "mgetl", "read", "fscanfMat"]},"csvTextScan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csvTextScan"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Converts into a matrix texts representing separated values"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["A = csvTextScan(M)", "A = csvTextScan(M, separator)", "A = csvTextScan(M, separator, decimal)", "A = csvTextScan(M, separator, decimal, conversion)", "A = csvTextScan(M, separator, decimal, conversion, range)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vector of strings. UTF-8 strings are supported."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "separator"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the column separator mark."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "decimal"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a string: the decimal mark. The available values are \".\" or \",\"."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "decimal"},{"type": "text","children": [],"string": " is not "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "conversion"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "string"},{"type": "text","children": [],"string": ", the decimal conversion will be done."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "conversion"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "\"string\" or \"double\": type of the expected output "},{"type": "literal","children": [],"string": "A"},{"type": "text","children": [],"string": ". With \"double\", "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "any input that can't be parsed as a literal number is converted to "},{"type": "literal","children": [],"string": "%nan"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "literal complex numbers are supported."},"string": []}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "range"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of 4 decimal integers: the range of rows and columns which must be read (default range=[], meaning that all the rows and columns). Specify range using the format "},{"type": "literal","children": [],"string": "[R1 C1 R2 C2]"},{"type": "text","children": [],"string": " where (R1,C1) is the upper left corner of the data to be read and (R2,C2) is the lower right corner."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matrix of strings or double, with as many rows as "},{"type": "literal","children": [],"string": "M"},{"type": "text","children": [],"string": " has components: "},{"type": "literal","children": [],"string": "A(i,:)"},{"type": "text","children": [],"string": " is the conversion result of "},{"type": "literal","children": [],"string": "M(i)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "csvRead"},"csvWrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "csvWrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write comma-separated value file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["csvWrite(M, filename)", "csvWrite(M, filename, separator)", "csvWrite(M, filename, separator, decimal)", "csvWrite(M, filename, separator, decimal, precision)", "csvWrite(M, filename, separator, decimal, precision, header)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the file path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a m-by-n matrix of strings or double (complex supported)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "separator"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the column separator mark."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "decimal"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the decimal mark, either \".\" or \",\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "precision"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the C format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "header"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of text: the header written as a column of text at the beginning of the file, before actual data."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["csvRead", "csvTextScan", "csvDefault"]},"read_csv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "read_csv"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "text","children": [],"string": "reads comma-separated value file. Outclassed by "},{"type": "link","children": [],"string": "csvRead"}],"string": []},"synopsis": [],"varlist": [],"seealso": []},"readxls": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "readxls"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lê um arquivo Excel"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "sheets = readxls(file_path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string: o endereço do arquivo Excel"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sheets"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um "},{"type": "literal","children": [],"string": "mlist"},{"type": "text","children": [],"string": " de tipo "},{"type": "literal","children": [],"string": "xls"},{"type": "text","children": [],"string": ", com um campo chamado "},{"type": "literal","children": [],"string": "sheets"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xls_open", "xls_read"]},"write_csv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "write_csv"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "text","children": [],"string": "writes comma-separated value fileOutclassed by "},{"type": "link","children": [],"string": "csvWrite"}],"string": []},"synopsis": [],"varlist": [],"seealso": []},"xls_open": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xls_open"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "abre um arquivo Excel para leitura"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[fd,SST,Sheetnames,Sheetpos] = xls_open(file_path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string: o endereço do arquivo Excel."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "número, a unidade lógica do fluxo de dados do Excel"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "SST"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de todos os strings que aparecem na folha do Excel"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sheetnames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings, os nomes das folhas"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sheetpos"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de números,as posições dos inícios das folhas no fluxo de dados do Excel"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xls_read", "readxls"]},"xls_read": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xls_read"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lê uma folha em um arquivo Excel"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[Value,TextInd] = xls_read(fd,Sheetpos)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um número, a unidade lógica do fluxo de dados do Excel retornado por "},{"type": "link","children": [],"string": "xls_open"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Sheetpos"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "um número: a posição do início da folha no fluxo de dados Excel. Esta posição é uma daquelas retornadas por "},{"type": "link","children": [],"string": "xls_open"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Value"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "matriz de números, os dados numéricos encontrados na folha. A célula sem valores numéricos é representada por valores "},{"type": "literal","children": [],"string": "NaN"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TextInd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma matriz de índices com o mesmo tamanho que "},{"type": "literal","children": [],"string": "Value"},{"type": "text","children": [],"string": ". Os índices zeros indicam que não existem strings na celula Excel correspondente. Um índice positivo "},{"type": "literal","children": [],"string": "i "},{"type": "text","children": [],"string": " aponta para o string "},{"type": "literal","children": [],"string": "SST(i)"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "SST"},{"type": "text","children": [],"string": " é dado por "},{"type": "link","children": [],"string": "xls_open"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["xls_open", "readxls"]},"cell2table": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cell2table"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a cell into a table"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = cell2table(c)", "t = cell2table(c, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "c"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "cell matrix, the elements of c can be heterogeneous type."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Type allowed: double, boolean, string, datetime, duration."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'VariableNames', Value: vector of strings"},{"type": "text","children": [],"string": ":  the variable name of each column of t. The variable names must be unique and their  number must be equal to size(m, 2).  Default value: [\"Var1\", ..., \"VarN\"]."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'RowNames', Value: vector of string"},{"type": "text","children": [],"string": ":  the row names for t. The names must be unique and their number must be equal to size(m, 1).  Default value: []."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "table2cell"]},"detectImportOptions": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "detectImportOptions"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "structure containing all useful information to import the file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["opts = detectImportOptions(filename)", "opts = detectImportOptions(filename, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "path or name of file to read"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "format accepted: .txt, .dat and .csv"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Name: "},{"type": "emphasis","children": [],"string": "'Delimiter'"},{"type": "text","children": [],"string": ", Value: "},{"type": "emphasis","children": [],"string": "string"},{"type": "text","children": [],"string": ":  the column separator mark."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Name: "},{"type": "emphasis","children": [],"string": "'Decimal'"},{"type": "text","children": [],"string": ", Value: "},{"type": "emphasis","children": [],"string": "string"},{"type": "text","children": [],"string": ":  the decimal mark, '.' or ','."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Name: "},{"type": "emphasis","children": [],"string": "'NumHeaderLines'"},{"type": "text","children": [],"string": ", Value: "},{"type": "emphasis","children": [],"string": "double"},{"type": "text","children": [],"string": ":  the number of header lines."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "structure containing the following information:"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["readtable", "readtimeseries"]},"groupcounts": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "groupcounts"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns the number of elements for each group"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["g = groupcounts(t, groupvars)", "g = groupcounts(t, groupvars, groupbins)", "g = groupcounts(t, groupvars, Name, Value)", "g = groupcounts(t, groupvars, groupbins, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table or timeseries object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "groupvars"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "specifies the variable used to form the groups."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of strings containing the variable names  or vector of indices corresponding to the positions of the variable names in the table/timeseries."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "groupbins"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "indicates how the data is grouped, by data interval or time interval."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of doubles containing the data interval, datetime, duration, calendarDuration  or available string values: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"monthname\" and \"dayname\". Default value: \"none\"."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Depending on the type of the variables contained in groupvars, groupbins will be a cell of the same size as groupvars, where each element will be applied to each variable."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value (optional)"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'IncludeEmptyGroups', Value: boolean (default value: %f) "},{"type": "text","children": [],"string": ":  returns only the combinations of groups present in the table t. When %t, the result contains also empty group."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'IncludePercentGroups', Value: boolean (default value: %f)"},{"type": "text","children": [],"string": ": when %t, returns  the percentage of data from each group whose sum is 100."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'IncludedEdge', Value: 'left' or 'right'"},{"type": "text","children": [],"string": " (default value: 'left'): this option must  use only if groupbins is specified (i.e groupbins = [0 2 4]). When IncludedEdge is equal to 'left', data will be contained in the groups [groupbins(1), groupbins(2)), [groupbins(2), groupbins(3)), ..., [groupbins(n-1), groupbins(n)]. The last groupbins(n) is included.  If IncludedEdge is equal to 'right', the intervals will be: [groupbins(1), groupbins(2)], (groupbins(2), groupbins(3)], ... (groupbins(n-1), groupbins(n)].  In this case, the first groupbins(1) is included. The values in groupbins must be in strictly increasing order."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "timeseries", "varfun", "rowfun", "groupsummary", "pivot"]},"groupsummary": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "groupsummary"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create groups in table or timeseries and apply functions to variables within groups"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["g = groupsummary(t, groupvars)", "g = groupsummary(t, groupvars, method)", "g = groupsummary(t, groupvars, method, inputvar)", "g = groupsummary(t, groupvars, groupbins)", "g = groupsummary(t, groupvars, groupbins, method)", "g = groupsummary(t, groupvars, groupbins, method, inputvar)", "g = groupsummary(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table or timeseries object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "groupvars"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "specifies the variable used to form the groups."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of strings containing the variable names  or vector of indices corresponding to the positions of the variable names in the table/timeseries."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "groupbins"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "indicates how the data is grouped, by data interval or time interval."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of doubles containing the data interval, datetime, duration, calendarDuration  or available string among: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"monthname\" and \"dayname\"."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Depending on the type of the variables contained in groupvars, groupbins will be a cell of the same size as groupvars, where each element will be applied to each variable."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "function to apply with prototype: y = f(x), z = f(x, ..., y)"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "String, method name. Available values: \"sum\", \"mean\", \"median\", \"mode\", \"var\" (variance), \"std\" (standard deviation), \"min\", \"max\", \"range\", \"nummissing\", \"numunique, \"nnz\", \"all\" (all previous computations) and user function."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "inputvar"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "variable names or variable indices, the method will be apply only on this specified variables."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If the method has multiple inputs, the variable names or indices will be contained in a cell:  {[x1, .., xN], [y1, ..., yN]} if the method expects two input arguments"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'IncludeEmptyGroups', Value: boolean (default value: %f) "},{"type": "text","children": [],"string": ":  returns only the combinations of groups present in the table t. When %t, the result contains also empty group."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'IncludedEdge', Value: 'left' or 'right'"},{"type": "text","children": [],"string": " (default value: 'left'): this option must  use only if groupbins is specified (i.e groupbins = [0 2 4]). When IncludedEdge is equal to 'left', data will be contained in the groups [groupbins(1), groupbins(2)), [groupbins(2), groupbins(3)), ..., [groupbins(n-1), groupbins(n)]. The last groupbins(n) is included.  If IncludedEdge is equal to 'right', the intervals will be: [groupbins(1), groupbins(2)], (groupbins(2), groupbins(3)], ... (groupbins(n-1), groupbins(n)].  In this case, the first groupbins(1) is included. The values in groupbins must be in strictly increasing order."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "g"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "timeseries", "groupcounts", "varfun", "rowfun", "pivot"]},"isregular": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isregular"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if the time vector is regular"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = isregular(x)", "t = isregular(x, timeUnit)", "[t, step] = isregular(x)", "[t, step] = isregular(x, timeUnit)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": ", "},{"type": "text","children": [],"string": " or "}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeUnit"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "string with possible values "},{"type": "emphasis","children": [],"string": "\"years\", \"months\", \"days\" or \"time\""},{"type": "text","children": [],"string": " (default value)"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "boolean"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "step"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "time step regular (%nan if x is not regular)"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["duration", "datetime", "timeseries"]},"matrix2table": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matrix2table"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a matrix into a table"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = matrix2table(m)", "t = matrix2table(m, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "double, boolean, string, datetime or duration matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'VariableNames', Value: vector of strings"},{"type": "text","children": [],"string": ":  the variable name of each column of t. The variable names must be unique and their  number must be equal to size(m, 2).  Default value: [\"Var1\", ..., \"VarN\"]."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'RowNames', Value: vector of string"},{"type": "text","children": [],"string": ":  the row names for t. The names must be unique and their number must be equal to size(m, 1).  Default value: []."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "table2matrix"]},"pivot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pivot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a pivoted table providing a summary of data."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["p = pivot(t, Columns=colvarnames, Rows=rowvarnmes)", "p = pivot(t, Columns=colvarnames)", "p = pivot(t, Rows=rowvarnmes)", "p = pivot(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table or timeseries object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "colvarnames"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "variables to group by on the pivot table columns."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of strings containing the variable names  or vector of indices corresponding to the positions of the variable names in the table/timeseries."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rowvarnames"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "variables to group by on the pivot table rows."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of strings containing the variable names  or vector of indices corresponding to the positions of the variable names in the table/timeseries."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: Method, Value: function"},{"type": "text","children": [],"string": ":  function to apply on defined DataVariable, with prototype: y = f(x), z = f(x, ..., y)"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Available methods: \"count\", \"percentage\", \"sum\", \"mean\", \"median\", \"mode\", \"var\" (variance), \"std\" (standard deviation),  \"min\", \"max\", \"range\", \"nummissing\", \"numunique, \"nnz\", and user function."},"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: DataVariable, Value: variable names or variable indices"},{"type": "text","children": [],"string": ":  variable to which the computation method wil be applied."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: ColumnsBinMethod, Value: data interval or time interval"},{"type": "text","children": [],"string": ":  indicates how the colvarnames is grouped."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of doubles vector containing the data interval or available string among: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"monthname\" and \"dayname\". Default value: \"none\"."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Depending on the type of the variables contained in groupvars, groupbins will be a cell of the same size as groupvars, where each element will be applied to each variable."},"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: RowsBinMethod, Value: data interval or time interval"},{"type": "text","children": [],"string": ":  indicates how the rowvarnames is grouped."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "data type expected: vector of doubles vector containing the data interval or available string among: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"monthname\" and \"dayname\". Default value: \"none\"."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Depending on the type of the variables contained in groupvars, groupbins will be a cell of the same size as groupvars, where each element will be applied to each variable."},"string": []},{"type": "para","children": [],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: IncludeTotals, Value: boolean (default value: %f)"},{"type": "text","children": [],"string": ":  when %t, the pivot table will have an additional row containing the totals for each column and an  additional variable containing the totals for each row"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: IncludedEdge, Value: \"left\" or \"right\""},{"type": "text","children": [],"string": ":  (default value: 'left'): this option must use only if RowsBinMethod or/and ColumnsBinMethod are specified (i.e RowsBinMethod = [0 2 4]).  When IncludedEdge is equal to 'left', data will be contained in the groups [bins(1), bins(2)), [bins(2), bins(3)), ..., [bins(n-1), bins(n)]. The last bins(n) is included.  If IncludedEdge is equal to 'right', the intervals will be: [bins(1), bins(2)], (bins(2), bins(3)], ... (bins(n-1), bins(n)].  In this case, the first bins(1) is included. The values in RowsBinMethod or/and ColumnsBinMethod must be in strictly increasing order."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "the pivot table"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "timeseries", "groupcounts", "varfun", "rowfun", "groupsummary"]},"readtable": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "readtable"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a table from a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = readtable(filename)", "t = readtable(filename, opts)", "t = readtable(filename, Name, Value)", "t = readtable(filename, opts, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "path or name of file to read"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "format accepted: .txt, .dat and .csv"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "file import options obtained by detectImportOptions"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'VariableNames', Value: vector of strings"},{"type": "text","children": [],"string": ": extracts from the file only the data  corresponding to the entered variable names."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'ReadRowNames', Value: boolean (default value: %f)"},{"type": "text","children": [],"string": ":  the first column of the file will be stored in the RowNames property of the table t."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["writetable", "table"]},"readtimeseries": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "readtimeseries"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a timeseries from a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ts = readtimeseries(filename)", "ts = readtimeseries(filename, opts)", "ts = readtimeseries(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "name of file to read"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "file import options obtained by "},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'VariableNames', Value: vector of strings"},{"type": "text","children": [],"string": ": extracts from the file only the data  corresponding to the entered variable names."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'RowTimes', Value:  or  column vector"},{"type": "text","children": [],"string": ":  if the filename has no time, use this property to add a time index in the timeseries."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'StartTime', duration or datetime value"},{"type": "text","children": [],"string": ":  pecifies the start time of the timeseries."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'TimeStep', Value: duration or calendarDuration value"},{"type": "text","children": [],"string": ":  time step."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'SampleRate', Value: real scalar"},{"type": "text","children": [],"string": ":  number of samples per second (Hz)."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["writetimeseries", "timeseries", "detectImportOptions"]},"retime": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "retime"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a new timeserie on a new time basis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tsout = retime(tsin, newTimeStep)", "tsout = retime(tsin, newTimeStep, method)", "tsout = retime(tsin, newTimes)", "tsout = retime(tsin, newTimes, method)", "tsout = retime(tsin, \"regular\", \"TimeStep\", timeStep)", "tsout = retime(tsin, \"regular\", \"SampleRate\", sampleRate)", "tsout = retime(tsin, \"regular\", method, \"TimeStep\", timeStep)", "tsout = retime(tsin, \"regular\", method, \"SampleRate\", sampleRate)", "tsout = retime(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tsin"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries object in input"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newTimeStep"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "time step defined by "},{"type": "emphasis","children": [],"string": "'yearly', 'monthly', 'daily', 'hourly', 'minutely', 'secondly'"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newTimes"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "new time, duration or datetime column vector."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeStep"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "time step, duration or calendarDuration value"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sampleRate"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "number of samples per second (Hz), real scalar"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "method used to fill the missing values or to compute informations for each new row time"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "methods available to fill the missing value: "},{"type": "emphasis","children": [],"string": "'default', 'fillwithmissing', 'fillwihconstant',  'linear', 'spline'"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "computation methods available: "},{"type": "emphasis","children": [],"string": "'count', 'firstvalue', 'lastvalue', 'mode', a Scilab function, or an user function"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'Constant', Value: a cell"},{"type": "text","children": [],"string": ": option available only with fillwihconstant method"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'IncludedEdge', Value: 'left' or 'right'"},{"type": "text","children": [],"string": ". This option is only available with 'count', 'firstvalue', 'lastvalue', 'mode', Scilab function, user function methods."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tsout"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "new timeseries."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["timeseries", "synchronize", "isregular"]},"rowfun": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rowfun"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "apply a function to each row of the table/timeseries"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["r = rowfun(f, t)", "r = rowfun(f, t, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "function to apply with prototype [r1, ..., rN] = f(x1, ..., xN)."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table or timeseries object in input"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'InputVariables', Value: variable names or variable indices"},{"type": "text","children": [],"string": ": the  function will be apply only on this specified variables."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'GroupingVariables', Value: variable names or variable indices"},{"type": "text","children": [],"string": ":  variables values are used to create unique groups."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'OutputVariableNames', Value: strings"},{"type": "text","children": [],"string": ":  variable names for output table corresponding to the wanted output arguments of the function f. If omitted, the value is generated using 'NumOutputs' (\"Var1\", ...)."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'NumOutputs', Value: real"},{"type": "text","children": [],"string": ":  number of wanted output arguments of the function f. If omitted, the default value is 1 or size of 'OutputVariableNames'"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table or timeseries object (same object as t)."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "timeseries", "varfun", "groupcounts", "groupsummary", "pivot"]},"struct2table": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "struct2table"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a struct into a table"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = struct2table(st)", "t = struct2table(st, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "st"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "scalar structure or array of structures"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'VariableNames', Value: vector of strings"},{"type": "text","children": [],"string": ":  the variable name of each column of t. The variable names must be unique and their  number must be equal to size(m, 2).  Default value: [\"Var1\", ..., \"VarN\"]."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'RowNames', Value: vector of string"},{"type": "text","children": [],"string": ":  the row names for t. The names must be unique and their number must be equal to size(m, 1).  Default value: []."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "table2struct"]},"synchronize": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "synchronize"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "synchronize several timeseries on the same time basis"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tsout = synchronize(tsin1, ..., tsinN)", "tsout = synchronize(tsin1, ..., tsinN, howtosynchronize)", "tsout = synchronize(tsin1, ..., tsinN, howtosynchronize, method)", "tsout = synchronize(tsin1, ..., tsinN, newTimeStep)", "tsout = synchronize(tsin1, ..., tsinN, newTimeStep, method)", "tsout = synchronize(tsin1, ..., tsinN, newTimes)", "tsout = synchronize(tsin1, ..., tsinN, newTimes, method)", "tsout = synchronize(tsin1, ..., tsinN, \"regular\", \"TimeStep\", timeStep)", "tsout = synchronize(tsin1, ..., tsinN, \"regular\", \"SampleRate\", sampleRate)", "tsout = synchronize(tsin1, ..., tsinN, \"regular\", method, \"TimeStep\", timeStep)", "tsout = synchronize(tsin1, ..., tsinN, \"regular\", method, \"SampleRate\", sampleRate)", "tsout = synchronize(..., Name, Value)", "[tsout1, ..., tsoutN] = synchronize(tsin1, ..., tsinN, ....)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tsin1, ..., tsinN"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries object in input"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "howtosynchronize"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "method to create the new row times of tsout:"},{"type": "emphasis","children": [],"string": "'union', 'intersection'"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newTimeStep"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "time step defined by "},{"type": "emphasis","children": [],"string": "'yearly', 'monthly', 'daily', 'hourly', 'minutely', 'secondly'"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newTimes"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "new time, duration or datetime column vector."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeStep"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "time step, duration or calendarDuration value"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sampleRate"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "number of samples per second (Hz), double value"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "method used to fill the missing values or to compute informations for each new row time"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "methods available to fill the missing value: "},{"type": "emphasis","children": [],"string": "'default', 'fillwithmissing', 'fillwihconstant',  'linear', 'spline'"}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "computation methods available: "},{"type": "emphasis","children": [],"string": "'count', 'firstvalue', 'lastvalue', 'mode', Scilab function, user function"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'Constant'"},{"type": "text","children": [],"string": ": option available only with fillwihconstant method"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'IncludedEdge': 'left' or 'right' value"},{"type": "text","children": [],"string": ". This option is only available with 'count', 'firstvalue', 'lastvalue', 'mode', Scilab function, user function methods."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tsout1, ..., tsoutN"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "new timeseries."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["timeseries", "retime", "isregular"]},"table": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "table"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a table from variables"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["t = table(var1, ..., varN)", "t = table(m)", "t = table(st)", "t = table(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var1, ..., varN"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "vector or matrix with the same number of rows."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Each var can be different type: double, boolean, string, datetime or duration"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "double, boolean, string, datetime or duration matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "st"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "structure"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'VariableNames'"},{"type": "text","children": [],"string": ": matrix of strings that contains the name of each column of "},{"type": "literal","children": [],"string": "t"},{"type": "text","children": [],"string": ". Default value: [\"Var1\", ..., \"VarN\"]"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'RowNames'"},{"type": "text","children": [],"string": ": indicator for reading the first column as row names"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["readtable", "writetable", "timeseries"]},"table2cell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "table2cell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a table into a cell"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "m = table2cell(t)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "cell of the same size as t"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "cell2table"]},"table2matrix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "table2matrix"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a table into a matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "m = table2matrix(t)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "double, boolean, string, datetime or duration matrix"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "matrix2table"]},"table2struct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "table2struct"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a table into a struct"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["st = table2struct(t)", "st = table2struct(t, \"ToScalar\", %t)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "st"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "structure"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "matrix2table"]},"table2timeseries": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "table2timeseries"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a table into a timeseries"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ts = table2timeseries(t)", "ts = table2timeseries(t, \"RowTimes\", time)", "ts = table2timeseries(t, \"SampleRate\", sampleRate)", "ts = table2timeseries(t, \"TimeStep\", timeStep)", "ts = table2timeseries(t, \"SampleRate\", sampleRate, \"StartTime\", t0)", "ts = table2timeseries(t, \"TimeStep\", timeStep, \"StartTime\", t0)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "time"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "time vector or variable name of table"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "duration or datetime column vector or string"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeStep"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "time step, duration or calendarDuration value"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sampleRate"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "number of samples per second (Hz), real scalar"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t0"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "start time, duration or datetime value"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "timeseries2table", "timeseries"]},"timeseries": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "timeseries"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a timeseries - table with time as index"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ts = timeseries(time, var1, ..., varN)", "ts = timeseries(var1, ..., varN, 'RowTimes', time)", "ts = timeseries(var1, ..., varN, 'TimeStep', timeStep)", "ts = timeseries(var1, ..., varN, 'SampleRate', sampleRate)", "ts = timeseries(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "time"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "duration or datetime column vector used as time index in the timeseries"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var1, ..., varN"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "vector with the same number of rows."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Each var can be different type."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeStep"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "time step, duration or calendarDuration value"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sampleRate"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "number of samples per second (Hz), real scalar"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'VariableNames'"},{"type": "text","children": [],"string": ": matrix of strings that contains the name of each ts'column. Default value: [\"Time\", \"Var1\", ..., \"VarN\"]"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'VariableUnits'"},{"type": "text","children": [],"string": ": matrix of strings that contains the unit of each column. Default value: [\"\", ..., \"\"]"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'VariableContinuity'"},{"type": "text","children": [],"string": ": specifies how each variable is filled when calling the "},{"type": "text","children": [],"string": " and "},{"type": "text","children": [],"string": " functions:  "},{"type": "emphasis","children": [],"string": "\"unset\", \"continuous\", \"step\", \"event\""},{"type": "text","children": [],"string": ". Default value : [\"\", ..., \"\"]"}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "'StartTime'"},{"type": "text","children": [],"string": ": specifies the start time of the timeseries. duration or datetime value. Default value: first element of time vector."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries object."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["duration", "datetime", "retime", "synchronize", "stackedplot"]},"timeseries2table": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "timeseries2table"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a timeseries into a table"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "t = timeseries2table(ts)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table object"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "table2timeseries"]},"varfun": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "varfun"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "apply a function to each column of the table/timeseries"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["v = varfun(f, t)", "v = varfun(f, t, Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "function to apply with prototype: y = f(x)"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table or timeseries object in input"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'GroupingVariables', Value: variable names or variable indices"},{"type": "text","children": [],"string": ":  variables values are used to create unique groups."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'InputVariables', Value: variable names or variable indices"},{"type": "text","children": [],"string": ": the  function will be apply only on this specified variables."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "v"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table or timeseries object (same object as t)."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["table", "timeseries", "rowfun", "groupcounts", "groupsummary", "pivot"]},"writetable": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "writetable"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "write a table to file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["writetable(t)", "writetable(t, filename)", "writetable(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "t"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "table"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "name or path of file"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'Delimiter', Value: string "},{"type": "text","children": [],"string": ":  the column separator."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'WriteRowNames', Value: boolean (default value: %f)"},{"type": "text","children": [],"string": ":  when %t, writes row names in the file (first column)."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'WriteVariableNames', Value: boolean (default value: %t)"},{"type": "text","children": [],"string": ":  when %t, writes variables names in the file (column names)."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["readtable", "table"]},"writetimeseries": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "writetimeseries"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "write a timeseries to file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["writetimeseries(ts)", "writetimeseries(ts, filename)", "writetimeseries(..., Name, Value)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ts"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "timeseries"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "file path"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Name, Value"},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'Delimiter', Value: string (default value: ',')"},{"type": "text","children": [],"string": ":  the column separator."}],"string": []},{"type": "para","children": [],"string": []}],"string": []},{"type": "listitem","children": [{"type": "para","children": [{"type": "emphasis","children": [],"string": "Name: 'WriteVariableNames', Value: boolean (default value: %t)"},{"type": "text","children": [],"string": ":  when %t, writes variables names in the file (column names)."}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["readtimeseries", "timeseries"]},"ans": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ans"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "resposta"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"clc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Clear Command Window"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["clc", "clc(nblines)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "nblines"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a double value"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["tohome", "clf", "consolebox"]},"completion": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "completion"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns files or variables names or reserved keywords starting as a given text"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["r = completion(beginning_of_a_word)", "r = completion(beginning_of_a_word, dictionary)", "[functions, commands] = completion(beginning_of_a_word)", "[functions, commands, variables] = completion(beginning_of_a_word)", "[functions, commands, variables, macros] = completion(beginning_of_a_word)", "[functions, commands, variables, macros, graphic_properties] = completion(beginning_of_a_word)", "[functions, commands, variables, macros, graphic_properties, files] = completion(beginning_of_a_word)"]},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "beginning_of_a_word"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "dictionary"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string (\"functions\", \"commands\", \"variables\", \"macros\", \"graphic_properties\", \"files\")"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "functions, commands, variables, macros, graphic_properties, files "},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix"},"string": []},"string": []}],"string": []},"string": []}],"seealso": ["getscilabkeywords", "who", "what", "libraryinfo", "librarieslist"]},"console": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "console"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Keyboard shortcuts predefined in the console window"},"string": []},"synopsis": [],"varlist": [],"seealso": ["scinotes_menus_shortcuts", "preferences", "consolebox", "completion", "browsehistory", "getscilabmode", "scilab"]},"diary": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "diary"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "diary of session"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["diary(filename)", "[id,filename] = diary(filename, ['new'|'append'])", "[ids, filenames] = diary()", "[ids, filenames] = diary([], 'list')", "diary([], 'close')", "diary(0)", "diary(filename, 'close')", "diary(id, 'close')", "diary([], 'pause'|'off')", "diary(filename, 'pause'|'off')", "diary(id, 'pause'|'off')", "diary([], 'resume'|'on')", "diary(filename, 'resume'|'on')", "diary(id, 'resume'|'on')", "diary(filenames, 'exists')", "diary(ids, 'exists')", "diary(filename, 'new'|'append', 'prefix=YYYY-MM-DD hh:mm:ss')", "diary(filename, 'new'|'append', 'prefix=U')", "diary(filename, 'new'|'append', [ 'prefix=YYYY-MM-DD hh:mm:ss' ; 'prefix-only-commands' ] );"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, give the full file name path."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "id"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar to identify a diary."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"input": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "input"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "prompts the user for keyboard input"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = input(message)", "x = input(message, \"string\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "message"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string: the inline prompting message. Extended UTF-8 characters are supported."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"string\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional flag, to return the input as is, as a literal string in "},{"type": "varname","children": [],"string": "x"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "without \"string\""},{"type": "text","children": [],"string": ": "},{"type": "literal","children": [],"string": "x = evstr(keyboard_input)"}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "With "},{"type": "emphasis","children": [],"string": "\"string\""},{"type": "text","children": [],"string": ": "},{"type": "literal","children": [],"string": "x = keyboard_input"}],"string": []}],"string": []},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["x_dialog", "x_mdialog", "x_choose", "x_choices", "x_matrix", "evstr"]},"lines": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lines"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sets and queries the display width and pagination for the console"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["lines(nl)", "lines(nl, nc)", "lines(ncl)", "ncl = lines()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nl"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "An integer, the number of lines for vertical paging control."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If 0: no vertical paging control is done."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If -1: reset vertical paging control to current size of the window."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the number of column of output. Used for formatting output"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ncl"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A 1x2 vector [nc, nl]"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["mode", "format", "disp", "print", "clc"]},"mode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sets or queries the mode echoing Scilab instructions in the console"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mode(k)", "k = mode()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "k"},{"type": "para","children": {"type": "text","children": [],"string": "integer from -1 to 6: chosen or current execution / echoing mode."},"string": []}],"string": []},"string": []},"seealso": ["exec", "execstr", "semicolon", "debug", "pause", "getscilabmode", "warning", "funcprot", "ieee"]},"percentonprompt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%onprompt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "special custom function called after each line execution in console"},"string": []},"synopsis": [],"varlist": [],"seealso": ["prompt", "ans", "gethistory", "startup"]},"prompt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "prompt"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get/Set current prompt"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["currentprompt = prompt()", "[currentprompt,pauselevel] = prompt()", "prompt(userprompt)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "currentprompt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: current prompt returned as a character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pauselevel"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer: current pause level."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "userprompt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: prompt to display for next user input. Then current prompt will be used again."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["pause", "input"]},"tohome": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tohome"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Clears the command window by masking its former content above the top"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tohome"},"varlist": [],"seealso": "clc"},"addhistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "addhistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "add lines to current history."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["addhistory(string)", "addhistory(string_matrix)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "string_matrix"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"browsehistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "browsehistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open the Scilab history browser"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "browsehistory()"},"varlist": [],"seealso": []},"displayhistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "displayhistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "displays current scilab history"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "displayhistory()"},"varlist": [],"seealso": "gethistory"},"gethistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gethistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns current scilab history in a string matrix"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["matstr=gethistory()", "line=gethistory(N)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "matstr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Nth line in scilab's history"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "line"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["savehistory", "loadhistory", "resethistory"]},"gethistoryfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gethistoryfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get filename used for scilab's history"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "filename = gethistoryfile()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "file name used for history"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"historymanager": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "historymanager"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "enable or disable history manager"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["state1=historymanager(state2)", "state1=historymanager()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "state1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns history manager state 'on' or 'off'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "state2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "'on' or 'off' set history manager's state"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["getscilabmode", "call_scilab"]},"historysize": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "historysize"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get number of lines in history"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["nb = historysize()", "nbMax = historysize(\"max\")", "nbMax = historysize(newMax)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of lines in current history."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbMax"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of lines maximum in history file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "newMax"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "set number of lines maximum in history file."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "by default this value is 20000 lines max."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"loadhistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "loadhistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "load a history file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["loadhistory()", "loadhistory(f)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "file pathname"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["savehistory", "resethistory", "historysize", "gethistory"]},"removelinehistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "removelinehistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "remove the Nth line in history."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "removelinehistory(N)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "N"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a line number"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"resethistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "resethistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Deletes all entries in the Scilab history."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "resethistory()"},"varlist": [],"seealso": ["savehistory", "loadhistory"]},"saveconsecutivecommands": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "saveconsecutivecommands"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Save consecutive duplicate commands."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["saveconsecutivecommands(boolean_in)", "boolean_out = saveconsecutivecommands()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "boolean_in"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean (%t or %f)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "boolean_out"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "current value"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"savehistory": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "savehistory"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "save the current history in a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["savehistory()", "savehistory(f)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "file pathname"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["loadhistory", "resethistory", "gethistory"]},"sethistoryfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sethistoryfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set filename for scilab history"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["sethistoryfile(filename)", "sethistoryfile()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "filename for history"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"loadmatfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "loadmatfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "loads some variables from an Octave or a Matlab MAT binary or ASCII data file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["loadmatfile(filename)", "loadmatfile(filename, var1, var2, ...)", "loadmatfile(format, filename, ...)", "loadmatfile(filename, format, ...)", "loadmatfile(filename, var1, var2, .., format)", "struc = loadmatfile(.., \"-toStruct\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string containing the path of the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Explicit file format. If it is not given, loadmatfile() tries to determine the format from the file header, etc. If the data format is still unknown and the file name has the \".mat\" extension, the file is considered to be a Matlab binary data file. Available explicit formats are:"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The "},{"type": "varname","children": [],"string": "format"},{"type": "text","children": [],"string": " can be provided anywhere in the list of inputs."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var1, var2"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings. Names of the variables that must be loaded from the file. If no name is provided, all the variables stored in the file are loaded. Ignored if "},{"type": "literal","children": [],"string": "-ascii"},{"type": "text","children": [],"string": " is used."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"-toStruct"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Input keyword used if the read variables must be returned as fields of an output structure, instead of directly into the calling environment."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "struc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Structure whos fields are the names of variables read from the file, with their respective values."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["load", "savematfile", "save", "mfile2sci", "matfile2sci"]},"matfile2sci": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matfile2sci"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converts  a Matlab 5 MAT-file into a Scilab binary file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "matfile2sci(mat_file_path,sci_file_path[, overwrite])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mat_file_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string containing the path of the Matlab input file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sci_file_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string containing the path of the Scilab output file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "overwrite"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a boolean: wipes the "},{"type": "literal","children": [],"string": "sci_file_path"},{"type": "text","children": [],"string": " file if set to true. False by default."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["loadmatfile", "load", "save", "mfile2sci"]},"matfile_close": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matfile_close"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Closes a Matlab binary MAT-file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "status = matfile_close(fd)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Real: file descriptor (returned by "},{"type": "link","children": [],"string": "matfile_open"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean: "},{"type": "emphasis","children": [],"string": "%T"},{"type": "text","children": [],"string": " if closure succeeds, "},{"type": "emphasis","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["matfile_open", "matfile_varreadnext", "matfile_varwrite", "matfile_listvar"]},"matfile_listvar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matfile_listvar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lists variables of a Matlab binary MAT-file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[names, classes, types] = matfile_listvar(fd)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "file identifier (integer) as returned by "},{"type": "link","children": [],"string": "matfile_open"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column of strings: names of the variables stored in the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "types"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "column of integers: Matlab data type of the variables."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "classes"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "column of integers: Matlab class of the variables."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["matfile_open", "matfile_close", "matfile_varwrite", "matfile_varreadnext"]},"matfile_open": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matfile_open"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Opens a Matlab binary MAT-file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fd = matfile_open(filename[, mode[, version]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: the path of the file. Must contain only ANSI character."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "String: file access type ("},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": " by default)."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ": opens the file for reading."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "\"w\""},{"type": "text","children": [],"string": ": creates an empty file or opens it for writing."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "version"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Scalar string: file version format ("},{"type": "literal","children": [],"string": "\"5\""},{"type": "text","children": [],"string": " by default)."}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "\"5\""},{"type": "text","children": [],"string": ": Matlab 5 file."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "emphasis","children": [],"string": "\"7.3\""},{"type": "text","children": [],"string": ": Matlab 7.3 file."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Real: file descriptor (-1 if opening failed)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["matfile_close", "matfile_varreadnext", "matfile_varwrite", "matfile_listvar"]},"matfile_varreadnext": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matfile_varreadnext"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Reads next variable in a Matlab binary MAT-file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[name, value, vartype] = matfile_varreadnext(fd)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "file identifier (integer) as returned by "},{"type": "link","children": [],"string": "matfile_open"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string: name of the returned variable, or "},{"type": "literal","children": [],"string": "\"\""},{"type": "text","children": [],"string": " if reading failed."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "value of the variable read, or [] if reading failed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vartype"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "integer: Matlab type of the variable if reading succeeds, or"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "0"},{"type": "text","children": [],"string": ": if the variable type is unknown."}],"string": []},{"type": "listitem","children": [{"type": "emphasis","children": [],"string": "-1"},{"type": "text","children": [],"string": ": if end of file has been reached."}],"string": []}],"string": []},{"type": "text","children": [],"string": " Please see "},{"type": "link","children": [],"string": "matfile_listvar"},{"type": "text","children": [],"string": " for the list of Matlab types."}],"string": []}],"string": []}],"string": []},"seealso": ["matfile_open", "matfile_close", "matfile_varwrite", "matfile_listvar"]},"matfile_varwrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "matfile_varwrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write a variable in a Matlab binary MAT-file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "status = matfile_varwrite(fd, name, value, compressionflag)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fd"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Real: file descriptor (returned by "},{"type": "link","children": [],"string": "matfile_open"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: name of the variable to write in the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Any Scilab type: value of the variable to write in the file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "compressionflag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean: indicate if data compression has to be used (flag equaled to "},{"type": "emphasis","children": [],"string": "%T"},{"type": "text","children": [],"string": ") or not."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean: "},{"type": "emphasis","children": [],"string": "%T"},{"type": "text","children": [],"string": " if writing succeeds, "},{"type": "emphasis","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["matfile_open", "matfile_close", "matfile_varreadnext", "matfile_listvar"]},"savematfile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "savematfile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "saves some Scilab variables in a Matlab MAT-file (binary or ASCII)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["savematfile('filename')", "savematfile('filename', varnames, ...)", "savematfile('filename', 'var1', 'var2', ...)", "savematfile filename var1 var2 ...", "savematfile('filename', '-struct', 's')", "savematfile('filename', '-struct', 's', 'f1', 'f2', ...)", "savematfile(..., format)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string containing the path+name of the file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varnames"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of the names (character string) of variables to save, like "},{"type": "literal","children": [],"string": "[\"var1\" \"var2\"..]"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"var1\", \"var2\"..."},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character strings being the names of the variables to save."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "data format to use"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"-struct\" \"s\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "saves all fields of the scalar structure s as individual variables within the file filename."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"-struct\" \"s\" \"f1\" \"f2\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "saves as individual variables only those structure fields specified (s.f1, s.f2, ...)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["loadmatfile", "matfile2sci", "mfile2sci", "save", "load"]},"About_M2SCI_tools": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "About M2SCI tools"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generally speaking about tools to convert Matlab files to Scilab"},"string": []},"synopsis": [],"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dims"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list of dimensions"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "type"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"type\" tlist"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "contents"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "\"contents\" tlist if a Cell or a Struct"},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vtype"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "data type"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "property"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "property"},"string": []},"string": []}],"string": []}],"string": []}],"seealso": ["mfile2sci", "translatepaths", "overloading", "sci_files", "Funcall", "Operation", "Variable", "Cste", "Infer", "Type", "Equal", "m2scideclare"]},"m2scideclare": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "m2scideclare"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Giving tips to help M2SCI..."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "%m2scideclare variable_name|sizes|data_type|property"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "variable_name"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Name of the declared variable. It can be a Struct field (e.g. "},{"type": "literal","children": [],"string": "x(1,2).name"},{"type": "text","children": [],"string": ") or describe the contents of a Cell using syntax "},{"type": "literal","children": [],"string": "x(1,2).entries"},{"type": "text","children": [],"string": ". "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sizes"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Sizes of the variable declared, separated by blanks. Any unknown size can be specified with "},{"type": "literal","children": [],"string": "?"},{"type": "text","children": [],"string": ". "},{"type": "warning","children": [{"type": "text","children": [],"string": "NOTE that a Matlab character string as defined between single quotes is considered as a vector of characters. Therefore, for instance the size of 'string' is "},{"type": "literal","children": [],"string": "|1 6|"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data_type & property"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "data type and property (sub-type) of the variable. Possible values are documented in the "},{"type": "link","children": [],"string": "Type"},{"type": "text","children": [],"string": " page."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "Type"},"mfile2sci": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mfile2sci"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab M-file to Scilab conversion function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mfile2sci()  // interactive GUI", "mfile2sci(M_file_path)", "mfile2sci(M_file_path, result_path )", "mfile2sci(M_file_path, result_path, Recmode)", "mfile2sci(M_file_path, result_path, Recmode, only_double)", "mfile2sci(M_file_path, result_path, Recmode, only_double, verbose_mode)", "mfile2sci(M_file_path, result_path, Recmode, only_double, verbose_mode, prettyprintoutput)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "M_file_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string which gives the path of Matlab M-file to convert"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string which gives the directory where the result has to be written. Default value is current directory."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Recmode"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean flag, used by "},{"type": "literal","children": [],"string": "translatepaths()"},{"type": "text","children": [],"string": " function for recursive conversion. Must be %F to convert a single mfile. Default value: %F"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "only_double"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Boolean: If %T, mfile2sci() considers that numerical functions and operators (like \"+\") are used only with numerical data. This excludes for instance instructions like "},{"type": "literal","children": [],"string": "\"ab\" + \"cd\""},{"type": "text","children": [],"string": " (that then will be kept as is instead of being converted into "},{"type": "literal","children": [],"string": "asciimat(\"ab\") + asciimat(\"cd\")"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default value: %F: All possible conversions are done."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose_mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "display information mode"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prettyprintoutput"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Boolean flag, if %T generated code is beautified. Default value: %F"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "translatepaths"},"translatepaths": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "translatepaths"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "convert a set of Matlab M-files directories to Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["translatepaths()  // GUI", "translatepaths(dirs_path)", "translatepaths(dirs_path, res_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirs_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string vector which gives the paths of Matlab M-file directories to convert."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string which gives the path of the directory where the Scilab functions are written to. Default value is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "mfile2sci"},"asciimat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asciimat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Converts an array of text into ASCII/UTF8 codes, and reciprocally"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["unicodes = asciimat(text)", "text = asciimat(unicodes)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "text"},{"type": "listitem","children": [{"type": "text","children": [],"string": "single text, or vector, matrix or hypermatrix of texts. Text elements may have various lengths, and may include UTF-8 extended characters. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "asciimat(…)"},{"type": "text","children": [],"string": " always concatenates the columns of "},{"type": "varname","children": [],"string": "text"},{"type": "text","children": [],"string": " along rows, as input or output argument. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "unicodes"},{"type": "listitem","children": [{"type": "text","children": [],"string": "single integer ASCII code, or vector, matrix or hypermatrix of ASCII or unicode 1-byte numbers. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["ascii", "char"]},"cellstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cellstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte um vetor (ou matriz) de strings em um cell de strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "c=cellstr(s)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings ou matriz de strings "},"string": []},"string": []}],"string": []},"string": []},"seealso": ["cell", "string"]},"firstnonsingleton": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "firstnonsingleton"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Finds first dimension which is not 1"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[dim]=firstnonsingleton(A[,opt])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "first dimension of A which is not 1"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "A"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a variable of any Scilab data type"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "opt"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a character string giving the type of output we want"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"num\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returned value is a numerical value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"str\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returned value is a character string if possible (\"r\" instead of 1 and \"c\" instead of 2)"},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"iscellstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iscellstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "verifica se uma variável é um cell array de strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "bool = iscellstr(x)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variável Scilab"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bool"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um booleano"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"mstr2sci": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mstr2sci"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "character string matrix to character matrix conversion"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "a=mstr2sci(txt)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string or string matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character vector or matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "MatlabScilab_character_strings"},"mtlb_0": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_0"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab non-conjugate transposition emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "MatlabScilab_character_strings"},"mtlb_a": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_a"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab addition emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mtlb_s"},"mtlb_all": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_all"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab all emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_any": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_any"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab any emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_axis": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_axis"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab axis emulation function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mtlb_axis(X)", "mtlb_axis(st)", "mtlb_axis(axeshandle, ...)", "[mode,visibility,direction]=mtlb_axis('state')"]},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of reals ([xmin xmax ymin ymax] or [xmin xmax ymin ymax zmin zmax])"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "st"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string ('auto', 'manual', 'tight', 'ij', 'xy', 'equal', 'square', 'vis3d', 'off', 'on')"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "axeshandle"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "handle of the current axes entity"},"string": []},"string": []}],"string": []},"string": []}],"seealso": []},"mtlb_beta": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_beta"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab beta emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_box": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_box"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab box emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "axes_properties"},"mtlb_close": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_close"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab close emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["delete", "winsid", "close"]},"mtlb_colordef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_colordef"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab colordef emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "figure_properties"},"mtlb_cumprod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_cumprod"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab cumprod emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_cumsum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_cumsum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab cumsum emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_dec2hex": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_dec2hex"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab dec2hex emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_delete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_delete"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab delete emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mdelete"},"mtlb_diag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_diag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab diag emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "MatlabScilab_character_strings"},"mtlb_diff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_diff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab diff emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_dir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_dir"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab dir emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_double": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_double"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab double emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["asciimat", "bool2s"]},"mtlb_e": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_e"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab extraction emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MatlabScilab_character_strings", "part"]},"mtlb_echo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_echo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab echo emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mode"},"mtlb_eval": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_eval"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab eval emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["evstr", "execstr"]},"mtlb_exist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_exist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab exist emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "exists"},"mtlb_eye": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_eye"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab eye emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_false": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_false"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab false emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_fft": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fft"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fft emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_fftshift": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fftshift"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fftshift emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_find": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_find"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab find emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_findstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_findstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab findstr emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_fliplr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fliplr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fliplr emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_fopen": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fopen"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fopen emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_format": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_format"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab format emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_fprintf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fprintf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fprintf emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mfprintf"},"mtlb_fread": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fread"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fread emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mget"},"mtlb_fscanf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fscanf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fscanf emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mfscanf"},"mtlb_full": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_full"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab full emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_fwrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_fwrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab fwrite emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mput"},"mtlb_grid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_grid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab grid emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "axes_properties"},"mtlb_hold": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_hold"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab hold emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "axes_properties"},"mtlb_i": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_i"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab insertion emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MatlabScilab_character_strings", "mtlb_is"]},"mtlb_ifft": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_ifft"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab ifft emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_imp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_imp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab colon emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_int16": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_int16"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab int16 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_int32": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_int32"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab int32 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_int64": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_int64"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab int64 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_int8": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_int8"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab int8 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_is": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_is"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab string insertion emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["MatlabScilab_character_strings", "mtlb_i"]},"mtlb_isa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_isa"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab isa emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["type", "typeof"]},"mtlb_isfield": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_isfield"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab isfield emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "getfield"},"mtlb_isletter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_isletter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab isletter emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_isspace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_isspace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab isspace emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "asciimat"},"mtlb_l": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_l"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab left division emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_legendre": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_legendre"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab legendre emulation function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["P = mtlb_legendre(n,X)", "P = mtlb_legendre(n,X[,normflag])"]},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar, vector, matrix or hypermatrix with elements in [-1,1]"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "n"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar integer"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "normflag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string ('sch' or 'norm')"},"string": []},"string": []}],"string": []},"string": []}],"seealso": []},"mtlb_linspace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_linspace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab linspace emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "ascii"},"mtlb_logic": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_logic"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab logical operators emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_logical": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_logical"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab logical emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_lower": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_lower"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab lower emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "convstr"},"mtlb_max": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_max"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab max emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_min": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_min"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab min emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_more": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_more"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab more emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_num2str": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_num2str"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab num2str emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": ["string", "msprintf"]},"mtlb_ones": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_ones"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab ones emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_plot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_plot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab plot emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "plot2d"},"mtlb_prod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_prod"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab prod emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_rand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_rand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab rand emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_randn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_randn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab randn emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_realmax": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_realmax"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab realmax emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "number_properties"},"mtlb_realmin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_realmin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab realmin emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "number_properties"},"mtlb_s": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_s"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab subtraction emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "mtlb_a"},"mtlb_setstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_setstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab setstr emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_size": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_size"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab size emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_sort": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_sort"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab sort emulation function"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["P = mtlb_sort(X)", "P = mtlb_sort(X,dim[,mode])"]},"varlist": [{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "X"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a scalar, vector, matrix of reals, booleans or a string"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a positive scalar integer"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string (\"ascend\" or \"descend\")"},"string": []},"string": []}],"string": []}],"string": []}],"seealso": []},"mtlb_strcmp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_strcmp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab strcmp emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_strcmpi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_strcmpi"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab strcmpi emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_strfind": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_strfind"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab strfind emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_strrep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_strrep"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab strrep emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_sum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_sum"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab sum emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "firstnonsingleton"},"mtlb_t": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_t"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab transposition emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "MatlabScilab_character_strings"},"mtlb_toeplitz": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_toeplitz"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab toeplitz emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_tril": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_tril"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab tril emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "MatlabScilab_character_strings"},"mtlb_triu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_triu"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab triu emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "MatlabScilab_character_strings"},"mtlb_true": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_true"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab true emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_uint16": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_uint16"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab uint16 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_uint32": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_uint32"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab uint32 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_uint64": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_uint64"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab uint64 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_uint8": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_uint8"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab uint8 emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"mtlb_upper": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_upper"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab upper emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": "convstr"},"mtlb_var": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_var"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab var emulation function"},"string": []},"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a real or a complex vector or matrix."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a real scalar or real vector."},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If x is a vector, s is the variance of x."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If x is a matrix, s is a row vector containing the variance of each column of x."},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "w"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "type of normalization to use. Valid values are, depending on the number of columns m of x :"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "w = 0 : normalizes with m-1, provides the best unbiased estimator of the variance (this is the default)."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "w = 1: normalizes with m, this provides the second moment around the mean. "},"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dim"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the dimension along which the variance is computed (default is 1, i.e. column by column). If dim is 2, the variance is computed row by row."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "variance"},"mtlb_zeros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mtlb_zeros"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Matlab zeros emulation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"Contents": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Contents"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a tree containing contents inference data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "contents=Contents(list_of_index,list_of_infer)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_of_index"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "list of indexes similar to indexes returned by "},{"type": "link","children": [],"string": "macr2tree"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list_of_infer"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list of \"infer\" tlists containing inference data for matching index."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "contents"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a \"contents\" tlist"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["get_contents_infer", "Funcall", "Operation", "Variable", "Cste", "Infer", "Type", "Equal"]},"Cste": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Cste"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a tree representing a constant"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "const=Cste(value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "constant value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "const"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a \"cste\" tlist"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["Funcall", "Operation", "Variable", "Infer", "Contents", "Type", "Equal"]},"Equal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Equal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generates the Scilab internal code representing an instruction \"LHS = RHS\""},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "eq = Equal(lhslist, RHS)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lhslist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list of Left Hand Side parameters (list of \"M2SCI tlists\")"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "RHS"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a tlist built with \"M2SCI\" functions, representing the Right Hand Side member of the instruction."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "eq"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "tlist of type \"equal\""},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["Funcall", "Operation", "Variable", "Cste", "Infer", "Contents", "Type"]},"Funcall": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Funcall"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create the converted pseudo-code representing a function call"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fc = Funcall(name, lhsnb, rhslist, lhslist)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "function name (character string)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lhsnb"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of outputs of the function call."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rhslist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list of inputs (list of \"M2SCI tlists\")"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lhslist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list of outputs (list of \"M2SCI tlists\"). Default value: list()."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a \"funcall\" tlist"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["Operation", "Variable", "Cste", "Infer", "Contents", "Type", "Equal"]},"Infer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Infer"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a tree containing inference data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "infer=Infer(varargin)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "data for inference"},"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin(1)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "list of dimensions default value is list(Unknown,Unknown)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin(2)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "type (\"type\" tlist, see Type help page) default value is Type(Unknown,Unknown)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varargin(3)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "contents (\"contents\" tlist, see Contents help page) default value is Contents(list(),list()). This field is only used if represented data is a Cell or a Struct."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "infer"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an \"infer\" tlist"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["Funcall", "Operation", "Variable", "Cste", "Contents", "Type", "Equal"]},"Operation": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Operation"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generates the Scilab pseudo-code representing an operation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "op = Operation(operator, operands, out)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "op"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Tlist of type \"operation\", with fields "},{"type": "literal","children": [],"string": "operator"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "operands"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "out"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "operator"},{"type": "listitem","children": [{"type": "text","children": [],"string": "operator symbol (character string). Supported codes are: "},{"type": "literal","children": [],"string": "\"''\", \".''\", \"~\", \":\", \"+\", \"-\", \"*\", \".*\", \".*.\", \".^\", \"/\", \"./\", \"\\\", \"==\", \"<>\", \"<\", \"<=\", \">\", \">=\", \"|\", \"||\", \"&\", \"&&\", \"cc\""},{"type": "text","children": [],"string": " (Columns horizontal Concatenation [,]), "},{"type": "literal","children": [],"string": "\"rc\""},{"type": "text","children": [],"string": " (Rows vertical concatenation [;]), "},{"type": "literal","children": [],"string": "\"ccc\""},{"type": "text","children": [],"string": " (Cells horizontal concatenation {,}), "},{"type": "literal","children": [],"string": "\"crc\""},{"type": "text","children": [],"string": " (Cells vertical concatenation {;}), "},{"type": "literal","children": [],"string": "\"ins\""},{"type": "text","children": [],"string": " (insertion), "},{"type": "literal","children": [],"string": "\"ext\""},{"type": "text","children": [],"string": " (extraction). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "operands"},{"type": "listitem","children": [{"type": "text","children": [],"string": "List of Tlists representing operands, of type \"cste\" (ex: 1.23), \"variable\" (ex: A), \"funcall\" (ex: gcf()), or \"operation\" (ex: (1+3)). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out"},{"type": "listitem","children": [{"type": "text","children": [],"string": "List of TLists representing the operation result(s) (most often unique). Each result is represented as a M2SCI tlist. Default value: list(). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["Funcall", "Variable", "Cste", "Infer", "Contents", "Type", "Equal"]},"Type": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Type"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a tree containing type inference data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tp = Type(vtype, property)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vtype"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "data type"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "property"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "property of data"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a \"type\" tlist"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"Variable": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Variable"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generates the Scilab internal code representing a variable (without its content)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "var = Variable(name, infer)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "variable name (character string)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "infer"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inference data (a tlist of type \"infer\", see Infer help page)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a \"variable\" tlist"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["Funcall", "Operation", "Cste", "Infer", "Contents", "Type", "Equal"]},"get_contents_infer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "get_contents_infer"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Search for information in a \"M2SCi tlist\" contents"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[infer,pos]=get_contents_infer(m2scitlist,index)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "m2scitlist"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a \"M2SCI tlist\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "index"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an index similar to indexes returned by "},{"type": "literal","children": [],"string": "macr2tree"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "infer"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an \"infer\" tlist"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pos"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "position of information in list"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["Infer", "Contents"]},"sci_files": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sci_files"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to write conversion functions"},"string": []},"synopsis": [],"varlist": [],"seealso": ["m2scideclare", "Funcall", "Operation", "Variable", "Cste", "Infer", "Type", "Equal"]},"MatlabScilab_character_strings": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Matlab-Scilab_character_strings"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generally speaking about..."},"string": []},"synopsis": [],"varlist": [],"seealso": "mstr2sci"},"m2sci_abs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "abs (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Absolute value and complex magnitude"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_acoth": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "acoth (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse hyperbolic cotangent"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_all": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "all (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Test to determine if all elements are nonzero"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_angle": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "angle (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Phase angle"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_any": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "any (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Test to determine if any nonzeros elements"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_asin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "asin (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse sine"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_atan": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atan (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Two-quadrant inverse tangent"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_atan2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atan2 (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Four-quadrant inverse tangent"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_atanh": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atanh (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse hyperbolic tangent"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_balance": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "balance (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Diagonal scaling to improve eigenvalue accuracy"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_beep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "beep (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Produce a beep sound"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_besseli": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "besseli (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Modified Bessel functions of the first kind "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_besselj": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "besselj (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Bessel functions of the first kind "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_besselk": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "besselk (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Modified Bessel functions of the second kind "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_bessely": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bessely (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Bessel functions of the second kind "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_beta": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "beta (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Beta function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_blkdiag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "blkdiag (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Construct block diagonal matrix from input arguments"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_box": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "box (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display axes border"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_case": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "case (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Case switch"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_cell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cell (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create cell array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_chol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "chol (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cholesky factorization"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_cla": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cla (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Clear current axes"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_clc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clc (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Clear Command Window"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_clear": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clear (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove items from workspace, freeing up system memory"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_clf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clf (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Clear current figure window"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_clock": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clock (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Current time as a date vector"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_close": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "close (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Delete specified figure"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_closereq": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "closereq (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Default figure close request function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_colordef": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "colordef (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set default property values to display different color schemes"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_cot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cot (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cotangent"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_cputime": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cputime (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Elapsed CPU time"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_cumprod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cumprod (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cumulative product"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_cumsum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "cumsum (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cumulative sum"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_dec2hex": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dec2hex (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Decimal to hexadecimal number conversion"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_delete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "delete (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Delete files or graphics objects"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_diag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "diag (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Diagonal including or extracting "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_diary": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "diary (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Save session to a file"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_diff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "diff (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Differences and approximate derivatives"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_dir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dir (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display directory listing"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_display": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "display (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display the content of an object and some its metadata"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_doc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "doc (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display online documentation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_docopt": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "docopt (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Web browser for UNIX platforms"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_dos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dos (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Execute a UNIX command and return result"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_double": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "double (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Conversion to double precision"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_drawnow": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "drawnow (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Complete pending drawing events"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_echo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "echo (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Echo lines during execution"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_eig": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eig (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Find eigenvalues and eigenvectors"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_eigs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eigs (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Subset of eigenvalues and eigenvectors"},"string": []},"synopsis": [],"varlist": [],"seealso": ["m2sci_eig", "spec", "bdiag"]},"m2sci_error": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "error (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display error messages"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_etime": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "etime (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Elapsed time"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_eval": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eval (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Execute a string containing an instruction/expression"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_exist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "exist (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if a variable or file exists"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_eye": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eye (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Identity matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_false": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "false (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "False array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fclose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fclose (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Close one or more open files"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_feof": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "feof (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Test for end-of-file"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ferror": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ferror (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Query about errors in file input or output"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_feval": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "feval (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Function evaluation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fft": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fft (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Discrete Fourier transform"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fftshift": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fftshift (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Shift zero-frequency component of discrete Fourier transform to center of spectrum"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fgetl": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fgetl (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read line(s) from file, discard newline character "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fgets": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fgets (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read line from file, keep newline character"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fileparts": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fileparts (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return filename parts "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_find": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "find (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Find indices and values of nonzero elements"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_findstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findstr (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Find one string within another"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fliplr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fliplr (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Flip matrix in left/right direction"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_flipud": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "flipud (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Flip matrix in up/down direction"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fopen": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fopen (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open a file or obtain information about open files"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_for": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "for (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Repeat statements a specific number of times"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_format": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "format (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Control display format for output"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fprintf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fprintf (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write formatted data to file "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fread": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fread (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read binary data to a file "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_frewind": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "frewind (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Move the file position indicator to the beginning of an open file"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fscanf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fscanf (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Read formatted data to file "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fseek": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fseek (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set file position indicator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ftell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ftell (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get file position indicator"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_fwrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fwrite (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Write binary data to a file "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_getenv": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getenv (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get environment variable"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_graymon": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "graymon (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set graphics defaults for gray-scale monitors"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_grid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "grid (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Grid lines for two- and three-dimensional plots"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_hankel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hankel (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Hankel matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_help": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "help (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display help"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_helpdesk": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "helpdesk (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display Help browser"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_helpwin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "helpwin (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Provide access to and display help for all functions"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_hold": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "hold (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Hold current graph"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_home": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "home (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Move the cursor to the upper left corner of the Command Window"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_horzcat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "horzcat (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Horizontal concatenation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_if": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "if (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Conditionally execute statements"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ifft": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ifft (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Inverse discrete Fourier transform"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_interp1": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "interp1 (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "One_dimension interpolation function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isa": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isa (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Detect an object of a given type"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_iscell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "iscell (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if input is a cell array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ischar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ischar (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if item is a character array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isequal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isequal (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if arrays are numerically equal"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isfield": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isfield (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if input is a structure array field"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isfinite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isfinite (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "True for finite elements"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ishandle": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ishandle (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determines if values are valid graphics object handles"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ishold": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ishold (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return hold state"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isinteger": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isinteger (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Detect whether an array has integer data type"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_islogical": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "islogical (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if item is a logical array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ismember": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ismember (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Data sets membership comparison"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isnumeric": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isnumeric (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if input is a numeric array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ispc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ispc (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if PC (Windows) version"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isreal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isreal (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if all array elements are real numbers"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isspace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isspace (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Detect elements that are ASCII white spaces"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isstr (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if item is a character array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isstruct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isstruct (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if input is a structure array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isunix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isunix (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if Unix version"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_isvector": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "isvector (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine if input is a vector"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_keyboard": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "keyboard (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Invoke the keyboard in a file"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_kron": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "kron (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Kronecker tensor product"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_length": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "length (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Length of largest array dimension"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_load": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "load (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Load workspace variables from disk"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_logical": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "logical (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert numeric values to logical"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_lookfor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lookfor (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Search for specified keyword in all help entries"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_lower": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lower (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert string to lower case"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_lu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lu (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "LU matrix factorization"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_max": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "max (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Maximum"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_min": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "min (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Minimum"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_mkdir": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mkdir (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Make new folder"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_mod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mod (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Modulus after division"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_more": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "more (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display Command Window output one screenful at a time"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_nargin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nargin (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Number of function input arguments "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_nargout": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "nargout (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Number of function output arguments "},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_null": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "null (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Null space of a matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_num2str": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "num2str (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Number to string conversion"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_ones": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ones (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create an array of all ones"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_otherwise": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "otherwise (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Default part of switch/select statement"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_addition": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "+ (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Plus"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_and": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "& (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Logical AND"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_colon": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": ": (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Colon"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_elementwise_left_division": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": ".\\ (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Elementwise left division"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_elementwise_multiplication": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": ".* (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Elementwise multiplication"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_elementwise_right_division": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "./ (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Elementwise right division"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_elementwise_transpose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": ".' (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Elementwise transpose"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_great": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "> (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Greater than"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_great_equal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": ">= (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Greater or equal to"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_left_division": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "\\ (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Left division"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_less": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "< (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Smaller than"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_less_equal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "<= (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Smaller or equal to"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_not": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "~ (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Negation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_or": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "| (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Logical OR"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_power": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "^ (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Exponent"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_transpose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "' (Matlab operator)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Transpose"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_pause": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pause (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Halt execution temporarily"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_plot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "plot (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Linear 2-D plot"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_pow2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pow2 (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Base 2 power and scale floating-point numbers"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_prod": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "prod (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Product of array elements"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_qr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "qr (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Orthogonal-triangular decomposition"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_rand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rand (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Uniformly distributed random numbers and arrays"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_randn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "randn (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Normally distributed random numbers and arrays"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_randperm": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "randperm (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Uniformly distributed random numbers and arrays"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_realmax": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "realmax (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Largest positive floating-point number"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_realmin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "realmin (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Smallest positive floating-point number"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_rem": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "rem (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remainder after division"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_reshape": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "reshape (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Reshape array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_save": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "save (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Save workspace variables from disk"},"string": []},"synopsis": [],"varlist": [],"seealso": "savematfile"},"m2sci_setstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setstr (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set string flag"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_size": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "size (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Array dimension"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_sort": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sort (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sort elements in ascending order"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_sparse": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sparse (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create sparse matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_strcmp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strcmp (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compare strings"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_strcmpi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strcmpi (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compare strings ignoring case"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_strfind": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strfind (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Find one string within another"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_strrep": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "strrep (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "String search and replace"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_sum": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "sum (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sum of array elements"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_surf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "surf (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "3-D surface plot"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_switch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "switch (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Switch among several cases based on expression"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_toeplitz": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "toeplitz (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Toeplitz matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_tril": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tril (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Lower triangular part of a matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_triu": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "triu (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Upper triangular part of a matrix"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_true": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "true (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "True array"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_type": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "type (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display contents of file"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_unix": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "unix (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Execute a UNIX command and return result"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_upper": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "upper (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert string to upper case"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_varargin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "varargin (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Pass variable numbers of arguments"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_varargout": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "varargout (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return variable numbers of arguments"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_vertcat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "vertcat (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Vertical concatenation"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_end": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "end (Matlab variable)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Last index"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_eps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "eps (Matlab variable)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Floating-point relative accuracy"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_i": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "i (Matlab variable)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Imaginary unit"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_j": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "j (Matlab variable)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Imaginary unit"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_pi": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "pi (Matlab variable)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Ratio of a circle's circumference to its diameter"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_waitforbuttonpress": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "waitforbuttonpress (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Wait for key or mouse button press"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_warning": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "warning (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Display warning messages"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_who": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "who (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "List variables in the workspace"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_whos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "whos (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "List variables in the workspace"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_winqueryreg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "winqueryreg (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get item from Microsoft Windows registry"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"m2sci_zeros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "zeros (Matlab function)"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create an array of all zeros"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"argn": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "argn"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "número de argumentos na chamada de uma função"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[lhs, rhs] = argn()", "lhs = argn(1)", "rhs = argn(2)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lhs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Number of expected Left-Hand-Side output arguments. Is set to 1 when no output argument is expected."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rhs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Number of Right-Hand-Side input arguments provided in the function call."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["isdef", "varargin", "varargout", "macrovar", "function"]},"deff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "deff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "in-line definition of a (anonymous) function in Scilab language"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["deff(funcHeadline, funcBody)", "deff(definition)", "deff(\"[r1, r2, ...] = myFunc(in1, in2, ...)\", funcBody)", "deff \"r = myFunc(x,y) r = x^2 - y\"", "deff \"r = myFunc(x,y) x^2 - y\"", "deff(\"r = @(x,y) x^2 - y\")      // as anonymous container's element", "myFunc = deff(funcHeadline, funcBody)", "myFunc = deff(definition)", "myFunc = deff(\"[r1, r2, ...] = fakeName(in1, in2, ...)\", funcBody)", "myFunc = deff(\"r = fakeName(x,y) r = x^2 - y\")", "myFunc = deff(\"r = fakeName(x,y) x^2 - y\")", "myFunc = deff(\"r = @(x,y) x^2 - y\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x, y, in1, in2, ..."},{"type": "listitem","children": [{"type": "text","children": [],"string": "input arguments of the defined function. This one can have any number of input arguments, from 0 to any N. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "r, r1, r2, ..."},{"type": "listitem","children": [{"type": "text","children": [],"string": "Output results of the defined function. This one can have any number of output results, from 0 to any M. If any, all output arguments must be explicit = written on the left-hand-side of the function name. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funcHeadline"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Single string: Function's headline = its first line giving the local function's name and the lists of its right-hand-side input arguments and left-hand-side output arguments. Examples: "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"myFunction(x,y)\""},{"type": "text","children": [],"string": " : no output"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"r = myFunction(x,y)\""},{"type": "text","children": [],"string": " : single output"}],"string": []},{"type": "listitem","children": [{"type": "literal","children": [],"string": "\"[a,b] = myFunction(x,y)\""},{"type": "text","children": [],"string": " : two outputs. Etc.."}],"string": []}],"string": []},{"type": "text","children": [],"string": " Please note that a) the "},{"type": "literal","children": [],"string": "function"},{"type": "text","children": [],"string": " keyword must not be provided. b) If any, writting output arguments in the left-hand-side part of the headline is mandatory. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funcBody"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a vector of texts = Scilab instructions of the function's body, in the order they must be executed. These instructions must define and assign the value of all output arguments. No trailing \"endfunction\" keyword is expected. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " This vector is expected when deff(…) is called with two input arguments. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "warning","children": {"type": "text","children": [],"string": "Single or double quotes included in instructions must be doubled to be protected."},"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "definition"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Single text or vector of texts, including both the function's headline and body. "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "If it's a vector, it is equivalent to "},{"type": "literal","children": [],"string": "definition = [funcHeadline ; funcBody]"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Otherwise, the one-string definition is equivalent to "},{"type": "literal","children": [],"string": "funcHeadline + \" \" + strcat(funcBody,\"; \")"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "text","children": [],"string": " Please see the Description and Examples sections. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "myFunc"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Public name and identifier of the defined function, as implicitly returned in the current environment, or explicitly assigned to the deff(…)'s output variable. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["function", "exec", "getd", "genlib", "jdeff", "jcompile"]},"exec": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "exec"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "script file execution"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["exec(path [,mode])", "exec(fun [,mode])", "ierr = exec(path, 'errcatch' [,mode])", "ierr = exec(fun, 'errcatch' [,mode])", "[ierr, errormsg] = exec(..., 'errcatch' [,mode])", "[ierr, errormsg, callstack] = exec(..., 'errcatch' [,mode])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the path of the script file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer scalar, the execution mode (see below)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a Scilab function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ierr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer, 0 or error number."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errormsg"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "error message in case of error and with "},{"type": "literal","children": [],"string": "'errcatch'"},{"type": "text","children": [],"string": " flag."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "callstack"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "callstack in case of error and with "},{"type": "literal","children": [],"string": "'errcatch'"},{"type": "text","children": [],"string": " flag."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["execstr", "evstr", "mode", "chdir", "pwd"]},"execstr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "execstr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "execute Scilab code in strings"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["execstr(instr)", "ierr = execstr(instr,'errcatch' [,msg])", "[ierr, errormsg] = execstr(instr,'errcatch' [,msg])", "[ierr, errormsg, callstack] = execstr(instr,'errcatch' [,msg])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "instr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of character strings, Scilab instruction to be executed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ierr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "an integer, 0 or error number."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msg"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string with values "},{"type": "literal","children": [],"string": "'m'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'n'"},{"type": "text","children": [],"string": ". Default value is "},{"type": "literal","children": [],"string": "'n'"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errormsg"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "error message in case of error and with "},{"type": "literal","children": [],"string": "'errcatch'"},{"type": "text","children": [],"string": " flag."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "callstack"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "callstack in case of error and with "},{"type": "literal","children": [],"string": "'errcatch'"},{"type": "text","children": [],"string": " flag."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["evstr", "lasterror", "error", "try"]},"feval": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "feval"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "múltipla avaliação"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[z]=feval(x,y,f)", "[z]=feval(x,f)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x,y"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "dois vetores"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "f"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "função ou string (para chamada FORTRAN ou C)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["evstr", "horner", "execstr", "external", "link"]},"funcprot": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "funcprot"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "alterna o modo de proteção de funções Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["funcprot(prot)", "previousprot = funcprot(prot)", "prot = funcprot()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "prot"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro com valores possíveis 0,1 ou 2"},"string": []},"string": []}],"string": []},"string": []},"seealso": "predef"},"function": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "function"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "endfunction"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "abre definição de função"},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "encerra definição de função"},"string": []}],"synopsis": [],"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<function_name>"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "é o nome da função"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<rhs_arguments>"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "é a lista de argumentos de entrada. Pode ser:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma seqüência separada por vírgula de nomes de variáveis encerrada por parênteses, como "},{"type": "literal","children": [],"string": "(x1,...,xm)"},{"type": "text","children": [],"string": ". O último nome de variável pode ser a palavra-chave "},{"type": "literal","children": [],"string": "varargin"},{"type": "text","children": [],"string": " (ver "},{"type": "link","children": [],"string": "varargin"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a seqüência "},{"type": "literal","children": [],"string": "()"},{"type": "text","children": [],"string": " ou nada, se a função não possui argumentos de entrada."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<lhs_arguments>"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "é a lista de argumentos de saída. Pode ser:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma seqüência separada por vírgula de nomes de variáveis encerrada por colchetes, como "},{"type": "literal","children": [],"string": "[y1,...,yn]"},{"type": "text","children": [],"string": ". O último nome de variável pode ser a palavra-chave "},{"type": "literal","children": [],"string": "varargout"},{"type": "text","children": [],"string": " (ver "},{"type": "link","children": [],"string": "varargout"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a seqüência "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": ", se a função não possui argumentos de saída. neste caso, a sintaxe também, pode ser: "},{"type": "literal","children": [],"string": "function <function_name><rhs_arguments> "}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<statements>"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "conjunto de instruções Scilab (declarações). Esta sintaxe pode ser usada para definir funções (ver "},{"type": "link","children": [],"string": "functions"},{"type": "text","children": [],"string": ") inline ou em arquivo script (ver "},{"type": "link","children": [],"string": "exec"},{"type": "text","children": [],"string": "). Para compatibilidade com versões Scilab antigas, as funções podem ser definidas em um arquivo script contendo apenas definições de funções podem ser \"carregadas\" no Scilab através da função "},{"type": "function","children": [],"string": "exec"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["functions", "exec", "names"]},"getd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna todas as funções definidas em um diretório"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "getd(path)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string Scilab. O endereço do diretório"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["exec", "lib", "pwd", "chdir"]},"macr2tree": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "macr2tree"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "fornece o código interno de uma função Scilab compilada"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "p = macr2tree(macro)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "macro"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "handle of a Scilab macro (NOT its name as a string)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "List of type "},{"type": "literal","children": [],"string": "program"},{"type": "text","children": [],"string": " with the fields "},{"type": "literal","children": [],"string": "p.name"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "p.nblines"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "p.inputs"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "p.outputs"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "p.statements"},{"type": "text","children": [],"string": ". The 3 last ones are nested lists describing the internal code of the "},{"type": "literal","children": [],"string": "macro"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tree2code", "macrovar", "functions"]},"macro": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "macro"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Procedimento Scilab e objeto Scilab"},"string": []},"synopsis": [],"varlist": [],"seealso": ["deff", "lib"]},"macrovar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "macrovar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variáveis de uma função"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "vars = macrovar(function)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "vars"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "list "},{"type": "literal","children": [],"string": "list(in,out,globals,called,locals)"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "function"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nome de uma função"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "string"},"overloading": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "overloading"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "capacidades de overloading (\"sobrecarga\") de exibições, funções e operadores"},"string": []},"synopsis": [],"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Exibição (Display)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a exibição de objetos definidos por uma estrutura "},{"type": "literal","children": [],"string": "tlist"},{"type": "text","children": [],"string": " pode ser sobrecarregada (a exibição padrão é semelhante a de "},{"type": "literal","children": [],"string": "list"},{"type": "text","children": [],"string": "'s). A função de sobrecarga não deve ter argumentos de saída e deve ter um único argumento de entrada. Seu nome é formado como segue: "},{"type": "literal","children": [],"string": "%<tlist_type>_p"},{"type": "text","children": [],"string": " onde "},{"type": "literal","children": [],"string": "%<tlist_type>"},{"type": "text","children": [],"string": " significa a primeira entrada do componente do tipo "},{"type": "literal","children": [],"string": "tlist"},{"type": "text","children": [],"string": " truncado aos 9 primeiros caracteres."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Operadores (Operators)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "cada operador que não está definido para dados tipos de operandos pode ser definido. A função de sobrecarga deve ter um único argumento de saída e um ou dois de entrada de acordo com o número de operandos. O nome da função é definido como segue:"},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "Funções (Functions)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "algumas funções primitivas básicas também podem ser sobrecarregadas para novos tipo de dados. Quando tal função não é definida para tipos de dados particulares, a função "},{"type": "literal","children": [],"string": " %<tipo_de_um_argumento>_<nome_da_função> "},{"type": "text","children": [],"string": " é chamada. O usuário pode adicionar a esta função chamada a definição associada aos tipos de dados de entrada."}],"string": []},"string": []}],"string": []},"string": []}],"seealso": []},"tree2code": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tree2code"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gera a definição ASCII de uma função Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "txt = tree2code(tree, prettyprint)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tree"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "uma árvore macro (vinda de "},{"type": "function","children": [],"string": "macr2tree"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prettyprint"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "valor opcional booleano :"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "coluna de strings, o texto fornecendo as instruções Scilab"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["macr2tree", "macrovar", "string"]},"varargin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "varargin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variável do número de argumentos de saída em uma lista de argumentos de entrada"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"varargout": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "varargout"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variável do número de argumentos de saída em uma lista de argumentos de saída"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"whereis": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "whereis"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the name of the loaded library/module a given function belongs to"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "libmod = whereis(function)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "function"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Name (text) or handle of a Scilab \"macro\" or builtin function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libmod"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "function"},{"type": "text","children": [],"string": " points to "},{"type": "itemizedlist","children": [{"type": "listitem","children": [{"type": "text","children": [],"string": "a function written in Scilab language and registered with "},{"type": "link","children": [],"string": "genlib"},{"type": "text","children": [],"string": " in some loaded library: "},{"type": "literal","children": [],"string": "libmod"},{"type": "text","children": [],"string": " returns the name of the library."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "an unregistered user-defined function written in Scilab language: "},{"type": "literal","children": [],"string": "libmod"},{"type": "text","children": [],"string": " returns "},{"type": "literal","children": [],"string": "\"script\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "a builtin function (so-called Scilab primitive): the name of the module the "},{"type": "literal","children": [],"string": "function"},{"type": "text","children": [],"string": " belongs to is returned."}],"string": []},{"type": "listitem","children": [{"type": "text","children": [],"string": "Otherwise: "},{"type": "literal","children": [],"string": "libmod"},{"type": "text","children": [],"string": " returns "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["genlib", "libraryinfo", "lib", "getmodules"]},"clearfun": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "clearfun"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "remove função primitiva"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ret=clearfun('name')"},"varlist": [],"seealso": ["newfun", "funptr"]},"external": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "external"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "objeto Scilab, função ou rotina externa"},"string": []},"synopsis": [],"varlist": [],"seealso": ["ode", "optim", "dae", "intg", "schur"]},"funptr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "funptr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "codificação de primitivas "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[numptr] = funptr(name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome de uma primitiva "},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "numptr"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o número de rotina interno da primitiva"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"intppty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "intppty"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ajusta propriedades de passagem de argumentos de interface"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["funs=intppty()", "intppty(fun)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro, um número de interface (ver funptr)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de inteiros, vetor de números de interface (ver funptr)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["funptr", "addinter"]},"newfun": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "newfun"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "adiciona um nome à tabela de funções"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "newfun(\"function-name\",nameptr)"},"varlist": [],"seealso": "clearfun"},"what": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "what"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "lista de primitivas do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["what()", "[primitives,commands]=what();"]},"varlist": [],"seealso": ["whereami", "pause"]},"genlib": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "genlib"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "builds a library from a set of *.sci files defining functions in a given directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["genlib(lib_name)", "genlib(lib_name, dir_name)", "genlib(lib_name, dir_name, Force)", "genlib(lib_name, dir_name, Force, verb)", "genlib(lib_name [,path=dir_name] [,verbose=verb] [,force=Force])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lib_name"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scilab string:  The identifying name ascribed to the library to build. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir_name"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Scilab string:  The pathname of the directory containing "},{"type": "literal","children": [],"string": ".sci"},{"type": "text","children": [],"string": " functions files, and where the "},{"type": "literal","children": [],"string": "lib"},{"type": "text","children": [],"string": " file generated and defining the library will be stored. By default, the current working directory is considered. "},{"type": "warning","children": [{"type": "text","children": [],"string": "The "},{"type": "varname","children": [],"string": "dir_name"},{"type": "text","children": [],"string": " directory and its "},{"type": "literal","children": [],"string": "lib"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": ".bin"},{"type": "text","children": [],"string": " files must be writable."}],"string": []},{"type": "text","children": [],"string": " "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Force"},{"type": "listitem","children": [{"type": "text","children": [],"string": "boolean value (default value is "},{"type": "literal","children": [],"string": "%f"},{"type": "text","children": [],"string": "). Set it to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": " to force the sci-files recompilation. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verb"},{"type": "listitem","children": [{"type": "text","children": [],"string": "boolean value (default value is "},{"type": "literal","children": [],"string": "%f"},{"type": "text","children": [],"string": "). Set it to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": " to display more information during the build. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["library", "load", "getd", "lib"]},"get_function_path": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "get_function_path"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna o endereço do arquivo fonte de uma função de biblioteca"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "path=get_function_path(fun_name)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fun_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o nome da função"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o nome absoluto do endereço do arquivo fonte da função (.sci) ou []."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lib", "string"]},"lib": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "lib"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "loads a library of Scilab functions and variables, and sets its name"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "namelib = lib(lib_dir)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lib_dir"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "single path of the directory containing the lib file of the library to load. The "},{"type": "literal","children": [],"string": "TMPDIR"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "SCIHOME"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "SCI"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "home"},{"type": "text","children": [],"string": " possible prefixes may be used and are expanded according to the value of corresponding predefined variables. Example: "},{"type": "literal","children": [],"string": "lib(\"SCI/modules/atoms/atoms_internals\")"},{"type": "text","children": [],"string": " will work."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "namelib"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Scilab variable (of "},{"type": "link","children": [],"string": "type 14"},{"type": "text","children": [],"string": " and "},{"type": "link","children": [],"string": "typeof \"library\""},{"type": "text","children": [],"string": ") addressing the loaded library (its handle). This output argument is mandatory. Otherwise, lib() sets "},{"type": "literal","children": [],"string": "ans"},{"type": "text","children": [],"string": " as library's identifier, whose value will be overwritten and lost shortly after."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["load", "librarieslist", "libraryinfo", "library", "genlib", "whereis", "getd"]},"librarieslist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "librarieslist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna as bibliotecas do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "s=librarieslist()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "s"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de strings"},"string": []},"string": []}],"string": []},"string": []},"seealso": "libraryinfo"},"libraryinfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "libraryinfo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "retorna macros e endereço de uma biblioteca Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["macros = libraryinfo(libraryname)", "[macros,path] = libraryinfo(libraryname)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libraryname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (nome da biblioteca)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "macros"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "uma matriz de strings (todas as funções principais da biblioteca)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "um string (endereço da biblioteca)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["string", "load", "librarieslist", "whereis"]},"bench_run": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "bench_run"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Launches benchmark tests"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[modutests_names, elapsed_time, nb_iterations] = bench_run()", "[modutests_names, elapsed_time, nb_iterations] = bench_run(module[, test_name[, options, [exportToFile]])", "[modutests_names, elapsed_time, nb_iterations] = bench_run(path_to_module[, test_name[, options, [exportToFile]])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "module"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of string. Contains the names of a Scilab modules to benchmark."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path_to_module"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a vector of string. Contains the paths to directories of modules to test. If "},{"type": "literal","children": [],"string": "\"/path/to/directory\""},{"type": "text","children": [],"string": " is given as input parameter, tests are retrieved in the subdirectory "},{"type": "literal","children": [],"string": " /path/to/directory/tests/benchmarks "},{"type": "text","children": [],"string": " .Used for homemade benchmarks."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "test_name"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector of string. Contains the names of the tests to perform."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of a test is its filename without "},{"type": "literal","children": [],"string": ".tst"},{"type": "text","children": [],"string": ". If several modules or directory are given as first input parameter, scans for tests in each of these modules or directory."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector of string"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"list\""},{"type": "text","children": [],"string": ": list of the benchmark tests ("},{"type": "literal","children": [],"string": "test_name"},{"type": "text","children": [],"string": ") available in a module"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"help\""},{"type": "text","children": [],"string": ": displays some examples of use in the Scilab console"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"nb_run=value\""},{"type": "text","children": [],"string": ": runs each benchmark "},{"type": "literal","children": [],"string": "value"},{"type": "text","children": [],"string": " times ; by default "},{"type": "function","children": [],"string": "bench_run"},{"type": "text","children": [],"string": " runs 10000 times the code between BENCH START and BENCH END tags (see below). Overrides any "},{"type": "literal","children": [],"string": "BENCH NB RUN"},{"type": "text","children": [],"string": " specified in the benchmark test files."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "exportToFile"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a single string"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "File path to the result of the "},{"type": "function","children": [],"string": "bench_run"},{"type": "text","children": [],"string": " in xml format. By default, or if "},{"type": "literal","children": [],"string": "\"\", \"[]\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " is given, the output directory is "},{"type": "literal","children": [],"string": "TMPDIR/benchmarks/"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "exportToFile"},{"type": "text","children": [],"string": " is a directory, creates a timestamped output file is the directory, otherwise creates the file "},{"type": "literal","children": [],"string": "exportToFile"},{"type": "text","children": [],"string": ". If the file could not be created a warning is issued and the file is created under "},{"type": "literal","children": [],"string": "TMPDIR/benchmarks/"},{"type": "text","children": [],"string": " instead."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modutests_names"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a N-by-2 matrix of strings"},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "the first column lists the modules tested by "},{"type": "function","children": [],"string": "bench_run"},{"type": "text","children": [],"string": ", the second column lists the names of the benchmarks"}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "elapsed_time"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector of doubles"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "the execution time for each benchmark"},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nb_iterations"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a vector of doubles of size N"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "the number of iterations of respective test"},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["test_run", "covStart", "slint", "debug"]},"example_run": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "example_run"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Launch the examples found in help pages."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["example_run()", "example_run(moduleNames)", "example_run(moduleNames, functionNames)", "example_run(moduleNames, functionNames, language)", "example_run(moduleNames, functionNames, language, testrunOptions, testrunExportToFile)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "moduleNames"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a string or a vector of strings: references of the modules to test. Each reference can be either of "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "the technical name of a Scilab internal module, that is the name of the root directory of the module."},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "the relative or absolute path of the root directory of the module. This must be used for installed ATOMS modules or other external modules."},"string": []}],"string": []},{"type": "text","children": [],"string": " By default, all Scilab internal modules are considered, as returned by "},{"type": "link","children": [],"string": "getmodules()"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The root directory of each targeted module must have a "},{"type": "literal","children": [],"string": "./help"},{"type": "text","children": [],"string": " subdirectory containing the XML source files of help pages where examples to test are provided, gathered by languages as in the source package of any standard module. Example of the template toolbox_skeleton module: "}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "functionNames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string or a string vector: the name(s) of the functions to test. If not given, all help pages of the module(s) will be tested."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: the language of the help pages to test. Default value is \"en_US\"."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "testrunOptions"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Used as third input argument for "},{"type": "link","children": [],"string": "test_run"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "testrunExportToFile"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Used as forth input argument for "},{"type": "link","children": [],"string": "test_run"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["test_run", "bench_run", "atomsAutoloadAdd", "startup"]},"test_run": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "test_run"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "runs unit and non-regression tests of a Scilab or external module, or in a directory"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["status = test_run()", "status = test_run(module)", "status = test_run(module, test_name)", "status = test_run(module, test_name, options, exportToFile)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "module"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A String array providing the name of the modules whose tests must be run, or directory path where test files are stored:"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "name of an internal Scilab module (\"core\", \"time\", ...), a sub-module (e.g. \"optimization|neldermead\")."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "name of an ATOMS module (\"module_lycee\", \"nisp\", ...). To be taken into account, the module must be loaded when test_run() is called. See "},{"type": "literal","children": [],"string": "atomsGetLoaded()(:,1)"},{"type": "text","children": [],"string": " and "},{"type": "link","children": [],"string": "atomsLoad(…)"},{"type": "text","children": [],"string": "."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "absolute or relative path to the root directory of an external module containing test/unit_tests or test/nonreg_tests."},"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"[]\""},{"type": "text","children": [],"string": " to run tests of all internal Scilab modules."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "test_name"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "A string array or "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"[]\""},{"type": "text","children": [],"string": ": The names of the tests to execute during this run. If "},{"type": "varname","children": [],"string": "test_name"},{"type": "text","children": [],"string": " is "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": ", all tests found in the module or in the directory are executed."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The wildcard * can be used, like in "},{"type": "literal","children": [],"string": "*sin"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "*sin"},{"type": "text","children": [],"string": ", or "},{"type": "literal","children": [],"string": "*sin*"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "options"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "A string array or "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"[]\""},{"type": "text","children": [],"string": ". The options for the tests during this run, default options if "},{"type": "literal","children": [],"string": "[]"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"[]\""},{"type": "text","children": [],"string": "."}],"string": []},{"type": "variablelist","children": [{"type": "text","children": [],"string": "or "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"no_check_ref\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "does not check if the .dia and .dia.ref are equal"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"no_check_error_output\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The error output stream is not checked. This option can be used when Scilab complains about the localization being not available."},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"create_ref\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "creates the .dia.ref file (for tests not having the "},{"type": "literal","children": [],"string": "<-- NO CHECK REF -->"},{"type": "text","children": [],"string": " flag) and does not check if the .dia and .dia.ref are equal."}],"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"show_error\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If an error occurs, shows the last 10 lines of the execution"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"show_diff\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "If a difference is found, shows the result of the command "},{"type": "literal","children": [],"string": "diff -u"}],"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"list\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Does not perform the tests but displays a list of available tests."},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"help\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "display some examples about how to use this command"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"mode_nw\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Add the \"-nw\" option to the launch"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"mode_nwni\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Add the \"-nwni\" option to the launch"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"mode_nwni_profiling\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Add the \"-nwni -profiling\" option to the launch for detect valgrind error (Linux only)."},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"nonreg_tests\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "runs only the non-regression tests, skipping unit tests"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"unit_tests\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Runs only the unit tests, skipping non-regression tests"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"skip_tests\""},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Skip the tests specified in "},{"type": "term","children": [],"string": "test_name"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"enable_lt\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Enable long-time execution tests"},"string": []},"string": []}],"string": []},{"type": "text","children": [],"string": " "},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"short_summary\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Does not display statistics nor execution time after execution (only number of executed, passed, failed and skipped tests will be displayed on a single line)."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "exportToFile"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Export to a XML file the result of the test. This file follows the specification of the XUnit format. Note that the usage of this option enables "},{"type": "literal","children": [],"string": "show_diff"},{"type": "text","children": [],"string": " and "},{"type": "literal","children": [],"string": "show_error"},{"type": "text","children": [],"string": "."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If the file pointed by "},{"type": "varname","children": [],"string": "exportToFile"},{"type": "text","children": [],"string": " already exists, the new results are appended to the existing file."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Boolean value Returns %t if no error has been detected Returns %f if any error has been detected"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsTest", "debug", "covStart", "profile", "slint"]},"assert_overview": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Assert Overview"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "An overview of the Assert module."},"string": []},"synopsis": [],"varlist": [],"seealso": []},"assert_checkalmostequal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_checkalmostequal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check that computed and expected are numerically close."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["flag = assert_checkalmostequal ( computed , expected )", "flag = assert_checkalmostequal ( computed , expected , reltol )", "flag = assert_checkalmostequal ( computed , expected , reltol , abstol )", "flag = assert_checkalmostequal ( computed , expected , reltol , abstol , comptype )", "[flag,errmsg] = assert_checkalmostequal ( ... )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "computed:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix or hypermatrix or sparse matrix of decimal real or complex numbers; or matrix or hypermatrix of polynomials with real or complex coefficients: the computed result."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expected :"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "matrix or hypermatrix or sparse matrix of decimal real or complex numbers; or matrix or hypermatrix of polynomials with real or complex coefficients: the expected result."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "If "},{"type": "literal","children": [],"string": "computed"},{"type": "text","children": [],"string": " are polynomials, "},{"type": "literal","children": [],"string": "expected"},{"type": "text","children": [],"string": " must be polynomials as well."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "reltol :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number: the relative tolerance (default reltol=sqrt(%eps))."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "abstol :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real number: the absolute tolerance (default abstol=0)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "comptype :"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "keyword "},{"type": "literal","children": [],"string": "\"matrix\""},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "\"element\""},{"type": "text","children": [],"string": " (default "},{"type": "literal","children": [],"string": "\"element\""},{"type": "text","children": [],"string": "). The comparison type."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag :"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": " if computed is close to expected; else "},{"type": "literal","children": [],"string": "%f"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Unique string: the error message. If flag==%t, then errormsg==\"\". If flag==%f, then errmsg contains the error message."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_checkequal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_checkequal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check that computed and expected are equal."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["assert_checkequal ( computed , expected )", "flag = assert_checkequal ( computed , expected )", "[flag,errmsg] = assert_checkequal ( computed , expected )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "computed:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the computed result"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expected :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "the expected result"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean, %t if computed is equal to expected, %f if not"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the error message. If flag==%t, then errormsg==\"\". If flag==%f, then errmsg contains the error message."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_checkerror": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_checkerror"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check that an instruction produces the expected error."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["flag = assert_checkerror ( instr , expectedmsg )", "flag = assert_checkerror ( instr , expectedmsg , expectederrnb )", "flag = assert_checkerror ( instr , expectedmsg , expectederrnb , a1, ... )", "[flag,errmsg] = assert_checkerror ( ... )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "instr:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, an expression to evaluate"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expectedmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string or a string vector, the error message to be produced"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expectederrnb :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, integer values, the error number (default expectederrnb=[])."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a1 :"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an extra localization argument, passed to the "},{"type": "literal","children": [],"string": "msprintf"},{"type": "text","children": [],"string": " function."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of boolean, %t if the correct error message was produced, %f if not"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the error message. If flag==%t, then errormsg==\"\". If flag==%f, then errmsg contains the error message."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_checkfalse": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_checkfalse"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check that condition is false."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["flag = assert_checkfalse ( condition )", "flag = assert_checkfalse ( condition )", "[flag,errmsg] = assert_checkfalse ( condition )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "condition:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of booleans"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of boolean, %t if condition is false, %f if not"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the error message. If flag==%t, then errormsg==\"\". If flag==%f, then errmsg contains the error message."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_checkfilesequal": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_checkfilesequal"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check that two files are equal."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["flag = assert_checkfilesequal ( filecomp , fileref )", "flag = assert_checkfilesequal ( filecomp , fileref , compfun )", "[flag,errmsg] = assert_checkfilesequal ( ... )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filecomp :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the computed file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fileref :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the reference file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "compfun :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a function or a list, the comparison function (default compfun = []). If no comparison function is used, the equality operator \"==\" is used. See below for details."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of boolean, %t if computed is close to expected, %f if not"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the error message. If flag==%t, then errormsg==\"\". If flag==%f, then errmsg contains the error message."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_checktrue": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_checktrue"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check that condition is true."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["flag = assert_checktrue ( condition )", "flag = assert_checktrue ( condition )", "[flag,errmsg] = assert_checktrue ( condition )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "condition:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of booleans"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of boolean, %t if condition is true, %f if not"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "errmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the error message. If flag==%t, then errormsg==\"\". If flag==%f, then errmsg contains the error message."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_comparecomplex": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_comparecomplex"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compare complex numbers with a tolerance."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["order = assert_comparecomplex ( a , b )", "order = assert_comparecomplex ( a , b , reltol )", "order = assert_comparecomplex ( a , b , reltol , abstol )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "a :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, the first value to be compared"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, the second value to be compared"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "reltol :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, the relative tolerance (default reltol=sqrt(%eps))."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "abstol :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, the absolute tolerance (default abstol=0)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "order :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, integer values,  the order. Returns order=0 is a is almost equal to b, order=-1 if a < b, order=+1 if a > b."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_computedigits": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_computedigits"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the number of significant digits in computed result."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["d = assert_computedigits ( computed , expected )", "d = assert_computedigits ( computed , expected , basis )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "computed :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, the computed value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expected :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, the expected value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "basis :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, integer values,  the basis (default basis=10)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, the number of significant digits."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_cond2reltol": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_cond2reltol"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Suggests a relative error, computed from the condition number."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["rtol = assert_cond2reltol ( condition )", "rtol = assert_cond2reltol ( condition , offset )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "condition :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, the condition number. The condition number must be strictly positive."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "offset :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, a shift for the number of required decimal digits (default offset=0). For example, offset=1 increases the accuracy requirement (decreases the relative tolerance by a factor 10^-1), offset=-1 decreases the accuracy requirement (increases the relative tolerance by a factor 10^1)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rtol :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, the relative tolerance. The relative tolerance is strictly positive, lower than 1."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_cond2reqdigits": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_cond2reqdigits"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Suggests the number of required digits, given the condition number."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["d = assert_cond2reqdigits ( condition )", "d = assert_cond2reqdigits ( condition , offset )", "d = assert_cond2reqdigits ( condition , offset , b )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "condition :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, the condition number. The condition number must be strictly positive."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "offset :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, a shift for the number of required base-b digits (default offset=0). For example, offset=-1 produces a smaller number of required digits (reduces the required accuracy), offset=1 produces a larger number of required digits (increases the required accuracy)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "b :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, integer values,  the b (default b = 10)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "d :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of doubles, the number of required digits. This is a positive real, between 0 and 15.95, if b=10 or between 0 and 53, if b=2."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"assert_generror": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "assert_generror"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generates an error."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["assert_generror ( errormsg )", "assert_generror ( errormsg , errornb )"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expectedmsg :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of strings, the error message to be produced"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "expectederrnb :"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of doubles, integer values,  the error number (default expectederrnb=[])."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"add_demo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "add_demo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "adiciona uma entrada na lista de demonstrações"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "add_demo(title,path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o título da demonstração"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o endereço do script scilab associado à demonstração"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "add_help_chapter"},"demo_begin": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "demo_begin"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "begin a demonstration "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "demo_begin()"},"varlist": [],"seealso": []},"demo_choose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "demo_choose"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "create a dialog box for the choice of options "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "num = demo_choose(fil)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fil"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String containing the path of the binary file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a number of the selected line."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "x_choose"},"demo_compiler": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "demo_compiler"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "test the presence of a compiler "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "status = demo_compiler()"},"varlist": [],"seealso": "findmsvccompiler"},"demo_end": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "demo_end"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "completes a demonstration "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "demo_end()"},"varlist": [],"seealso": []},"demo_file_choice": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "demo_file_choice"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "choose and executes an item within a list "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "demo_file_choice(path,ch)"},"varlist": [],"seealso": "demo_function_choice"},"demo_function_choice": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "demo_function_choice"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "choose and execute an item within a list "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "demo_function_choice()"},"varlist": [],"seealso": "demo_file_choice"},"demo_run": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "demo_run"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "script file execution "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "demo_run(fil)"},"varlist": [],"seealso": ["exec", "demo_begin", "demo_end"]},"addinter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "addinter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "new functions interface dynamic link at run time."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "addinter(files, spname, fcts)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or a vector of character string contain object files used to define the new Scilab interface routine (interface code, user routines or libraries, system libraries)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "spname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string. Name of interface routine entry point"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fcts"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of character strings. The name of new Scilab function implemented in the new interface (in "},{"type": "literal","children": [],"string": " fin"},{"type": "text","children": [],"string": " the order )."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["link", "newfun", "clearfun", "api_scilab"]},"c_link": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "c_link"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "check if symbol loaded with dynamic link"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["c_link(routine_name)", "[test, ilib] = c_link(routine_name)", "test = c_link(routine_name, num)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "routine_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "num"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "number of the shared library where routine_name is searched (-1: default, last used)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "test"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "boolean, indicates if there is a shared library which contains "},{"type": "literal","children": [],"string": "routine_name"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ilib"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a scalar, the number of the shared library which contains "},{"type": "literal","children": [],"string": "routine_name"}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "link"},"call": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "call"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "chamada a rotinas de usuário FORTRAN ou C"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["// forma longa: 'out' está presente", "[y1,...,yk] = call(\"ident\",x1,px1,\"tx1\",...,xn,pxn,\"txn\",\"out\",[ny1,my1],py1,\"ty1\",...,[nyl,myl],pyl,\"tyl\")", "// forma curta : nenhum parâmetro 'out'", "[y1,....,yk] = call(\"ident\",x1,...,xn)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"ident\""},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "xi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "real matrix or string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pxi, pyi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "inteiro"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txi, tyi"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "string "},{"type": "literal","children": [],"string": "\"d\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"r\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"i\""},{"type": "text","children": [],"string": " ou "},{"type": "literal","children": [],"string": "\"c\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["link", "c_link", "addinter"]},"dllinfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dllinfo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "provides information about the format and symbols provided in executable and DLL files (Windows)."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "infolist = dllinfo(filename,option)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string : a filename .dll or .exe file"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "option"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string : 'machine' , 'exports' , 'imports'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "infolist"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a list :"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "infolist(1) : a string : name of dll or executable."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "infolist(2) : a string matrix : symbols (imported or exported) or machine type (x86 or x64)."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_compile", "ilib_gen_Make", "ilib_gen_gateway", "ilib_gen_loader", "ilib_for_link"]},"findmsifortcompiler": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findmsifortcompiler"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "detects Intel fortran Compiler"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ifortv = findmsifortcompiler()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "ifortv"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns a string to identify Intel fortran version."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"findmsvccompiler": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findmsvccompiler"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "detects Microsoft C Compiler"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "msvc = findmsvccompiler()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "msvc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns a string to identify Visual studio version."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"G_make": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "G_make"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "call make or nmake"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Rfiles=G_make(files,dllname)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or a vector of character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dllname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Rfiles"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vector of character string. "},{"type": "literal","children": [],"string": "Rfiles"},{"type": "text","children": [],"string": " can be used as a first argument when calling "},{"type": "literal","children": [],"string": "addinter"},{"type": "text","children": [],"string": " function."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": "addinter"},"getdynlibext": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getdynlibext"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get the extension of dynamic libraries on your operating system."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ret=getdynlibext()"},"varlist": [],"seealso": []},"haveacompiler": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "haveacompiler"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "detect if you have a C compiler."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "bOK=haveacompiler()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "bOK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns %T a C compiler has been found."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["supported_compilers", "findmsvccompiler"]},"ilib_build": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_build"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility for shared library management"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ilib_build(lib_name,table,files,libs [,makename,ldflags,cflags,fflags,ismex, cc])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lib_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the generic name of the library without path and extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "table"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 column string matrix giving the table of pairs 'scilab-name', 'interface name'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving source files needed for shared library creation. Since Scilab 5.3.1, object files are deprecated."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving extra libraries needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "character string. The path of the Makefile file without extension."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is useless since Scilab 5.0. Default value to use: []."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A warning will be displayed in Scilab 5.3 if you use another value that the default."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldflags,cflags,fflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character strings to provide options for the loader, the C compiler and the Fortran compiler."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ismex"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Internal variable to specify if we are working with mex or not."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Provide the name of the C compiler."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_compile", "ilib_gen_Make", "ilib_gen_gateway", "ilib_gen_loader", "ilib_for_link", "api_scilab"]},"ilib_build_jar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_build_jar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Build Java packages from sources into a JAR file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ilib_build_jar(jarFilePath, packageNames[, sourcePath[, classPath, [, manifestFilePath]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jarFilePath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string, sets the destination file path of the JAR."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "packageNames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string matrix, contains the names of packages that will be built and stored the JAR."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sourcePaths"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string matrix, sets the paths to the packages Java source directories."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "classPaths"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string matrix (optional), sets the class paths of the dependencies needed for the build."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "manifestFilePath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string (optional), sets the file path of the manifest data to include in the JAR."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jcompile", "jcreatejar", "javaclasspath"]},"ilib_compile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_compile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "ilib_build utility: executes the Makefile produced by ilib_gen_Make"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "libn=ilib_compile(lib_name,makename [,files,ldflags,cflags,fflags,cc])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lib_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the generic name of the library without path and extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. The path of the Makefile file without extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional vector of character strings. If files is given the make is performed on each target contained in files then a whole make is performed"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. The path of the actual generated shared library file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldflags,cflags,fflags,cc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character strings to provide options/flags for the loader, the C compiler, the Fortran compiler. cc provides the name of the compiler."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_build", "ilib_gen_Make", "ilib_gen_gateway", "ilib_gen_loader", "ilib_for_link"]},"ilib_for_link": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_for_link"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility for shared library management with link"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "libn=ilib_for_link(names,files,libs,flag [,makename [,loadername [,libname [,ldflags [,cflags [,fflags [,cc]]]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix giving the entry names which are to be linked."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving source files needed for shared library creation."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving extra libraries needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string flag (\"c\" or \"f\") for C or Fortran entry points."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "character string. The pathname of the Makefile file without extension (default value "},{"type": "literal","children": [],"string": "''"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is useless since Scilab 5.0."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A warning will be displayed in Scilab 5.3 if you use another value that the default."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "loadername"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string. The pathname of the loader file (default value is "},{"type": "literal","children": [],"string": "loader.sce"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional character string. The name of the generated shared library (default value is \"\", and in this case the name is derived from "},{"type": "literal","children": [],"string": "names(1)"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string. It can be used to add specific linker options in the generated Makefile. Default value is \"\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string. It can be used to add specific C compiler options in the generated Makefile. Default value is \"\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string. It can be used to add specific Fortran compiler options in the generated Makefile. Default value is \"\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string. It can be used to specify a C compiler. Default value is \"\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libn"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. The path of the really generated shared library file."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_compile", "ilib_gen_Make", "ilib_gen_gateway", "ilib_gen_loader", "ilib_build"]},"ilib_gen_cleaner": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_gen_cleaner"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility for ilib_build: generates a cleaner file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ilib_gen_cleaner(makename,[loadername],[files])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "character string. The pathname of the Makefile file without extension (default value "},{"type": "literal","children": [],"string": "''"},{"type": "text","children": [],"string": ")."}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is useless since Scilab 5.0."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A warning will be displayed in Scilab 5.3 if you use another value that the default."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "loadername"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string. The pathname of the loader file (default value is "},{"type": "literal","children": [],"string": "loader.sce"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of character string. files to delete."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ilib_gen_loader", "ilib_build", "ilib_for_link"]},"ilib_gen_gateway": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_gen_gateway"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility for ilib_build, generates a gateway file."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ilib_gen_gateway(name,table)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the generic name of the library without path and extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "table"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 column string matrix giving the table of pairs 'scilab-name' 'interface name'"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_build", "ilib_compile", "ilib_gen_Make", "ilib_gen_loader", "ilib_for_link"]},"ilib_gen_loader": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_gen_loader"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility for ilib_build: generates a loader file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ilib_gen_loader(name,table,[libs])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the generic name of the library without path and extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "table"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "2 column string matrix giving the table of pairs 'scilab-name' 'interface name'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix, externals dynamic libraries filenames to load by loader file (optional)."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_build", "ilib_compile", "ilib_gen_Make", "ilib_gen_loader", "ilib_for_link"]},"ilib_gen_Make": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_gen_Make"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility for ilib_build: produces a Makefile for building shared libraries"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "Makename=ilib_gen_Make(name,files,libs,makename [,with_gateway,ldflags,cflags,fflags,cc])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lib_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the generic name of the library without path and extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of character string. The names of the C or Fortran files without the extension and the path part."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a vector of character string. additional libraries paths or []."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "character string. The path of the Makefile file."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is useless since Scilab 5.0."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A warning will be displayed in Scilab 5.3 if you use another value that the default."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "with_gateway"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean. If true a file with name <lib_name>_gateway is added. Default value is %t"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. It can be used to add specific linker options in the generated Makefile. Default value is \"\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. It can be used to add specific C compiler options in the generated Makefile. Default value is \"\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. It can be used to add specific Fortran compiler options in the generated Makefile. Default value is \"\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string. The name of the C compiler. Default value is the C compiler detected on the host."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_build", "ilib_compile", "ilib_gen_gateway", "ilib_gen_loader", "ilib_for_link"]},"ilib_include_flag": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_include_flag"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return a formatted includes related string to pass to system compiler"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "compiler_flag = ilib_include_flag(path_strings)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path_strings"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Vector of relative or absolute path as string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "compiler_flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Compiler flag as string"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tbx_build_gateway", "ilib_build"]},"ilib_mex_build": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_mex_build"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "utility for mex library management"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ilib_mex_build(lib_name,table,files,libs [,makename,ldflags,cflags,fflags,cc])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lib_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the generic name of the library without path and extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "table"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "3 column string matrix giving the table of 'scilab-name', 'interface name', 'cmex' or 'fmex'"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving objects files needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving extra libraries needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "character string. The path of the Makefile file without extension."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is useless since Scilab 5.0. Default value to use: []."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A warning will be displayed in Scilab 5.3 if you use another value that the default."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldflags,cflags,fflags,cc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character strings to provide options/flags for the loader, the C compiler, the Fortran compiler. cc provides the name of the compiler."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["addinter", "link", "ilib_compile", "ilib_gen_Make", "ilib_gen_gateway", "ilib_gen_loader", "ilib_for_link"]},"ilib_verbose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ilib_verbose"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set level of display used by dynamic link functions."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["level = ilib_verbose()", "ilib_verbose(level)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "level :"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "level of verbose for dynamic link functions."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "0 : no message"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "1 : default level (as previous version of scilab)"},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "2 : maximum verbose level (configure , makefile, debug information, ...)"},"string": []}],"string": []}],"string": []},"string": []},"seealso": ["mode", "link", "ilib_compile", "ilib_gen_Make", "ilib_for_link"]},"link": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "link"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "dynamic linker"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["x = link(files [, sub-names,flag]);", "link(x , sub-names [, flag]);", "lstID = link(\"show\")", "lst = link()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string or a vector of character strings, the files names used to define the new entry point (compiled routines, user libraries, system libraries,..)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sub-names"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a character string or a vector of character strings . Name of the entry points in "},{"type": "literal","children": [],"string": "files"},{"type": "text","children": [],"string": " to be linked."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "an integer which gives the id of a shared library linked into Scilab with a previous call to "},{"type": "literal","children": [],"string": "link"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string "},{"type": "literal","children": [],"string": "'f'"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "'c'"},{"type": "text","children": [],"string": " for Fortran (default) or C code."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "listID"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns the current linked ID routines."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "list"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns names of functions linked."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ulink", "call", "external", "c_link", "addinter", "ilib_for_link", "ilib_build"]},"supported_compilers": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Supported and compatible compilers"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "supported and compatible compilers by Scilab"},"string": []},"synopsis": [],"varlist": [],"seealso": ["haveacompiler", "atomsInstall"]},"ulink": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ulink"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "unlink/unload a dynamically linked shared object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ulink(x)", "ulink()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "x"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a ID returned by "},{"type": "literal","children": [],"string": "link"}],"string": []},"string": []}],"string": []},"string": []},"seealso": "link"},"_atomsGettingStarted": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Getting started"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "A short introduction to install and load ATOMS modules in Scilab."},"string": []},"synopsis": [],"varlist": [],"seealso": ["atomsAutoloadList", "atomsAutoloadAdd", "atomsAutoloadDel"]},"atoms": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Functions Summary"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"atomsAutoload": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsAutoload"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Load the modules marked as \"autoload\""},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "modules = atomsAutoload()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "4xn character string matrix:"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["atomsAutoloadAdd", "atomsAutoloadDel"]},"atomsAutoloadAdd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsAutoloadAdd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add one or several modules to autoload"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["nbAdd = atomsAutoloadAdd(modules)", "nbAdd = atomsAutoloadAdd(modules, section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1, mx2 or mx3 Matrix of strings:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls which autoload list is changed."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": modules are added to the \"allusers\" autoload list and all users of scilab are affected."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": modules are added to the \"user\" autoload list and only the current user is affected."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If SCI/contrib is write accessible, \"allusers\" is the default value. Otherwise, the default value is \"user\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbAdd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer : the number of modules successfully added."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsAutoloadDel", "atomsAutoloadList"]},"atomsAutoloadDel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsAutoloadDel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove one or several modules from the autoload system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["nbDel = atomsAutoloadDel(modules)", "nbDel = atomsAutoloadDel(modules, section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1, mx2 or mx3 character string matrix:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls the list of sections where search modules(s) to remove from autoload system."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": module(s) to remove from autotoload list are searched in both \"user\" and \"allusers\" sections."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": module(s) to remove from autotoload system are only searched in the \"allusers\" autoload list."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": module(s) to remove from autotoload system are only searched in the \"user\" autoload list."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If SCI is write accessible, \"all\" is the default value. Otherwise, the default value is \"user\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbDel"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer : the number of modules successfully removed from the autoload system."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsAutoloadAdd", "atomsAutoloadList"]},"atomsAutoloadList": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsAutoloadList"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the list of modules registered to autoload"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["modules = atomsAutoloadList()", "modules = atomsAutoloadList(section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls the list of section where search URL(s)."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": module(s) present on both \"user\" and \"allusers\" autoload lists are returned."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": only module(s) present on the \"allusers\" autoload lists are returned."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": only module(s) present on the \"user\" autoload lists are returned."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The default value is \"all\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "4xn character string matrix:"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsAutoloadAdd", "atomsAutoloadDel"]},"atomsCategoryList": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsCategoryList"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "List available categories"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["atomsCategoryList()", "atomsCategoryList(filter)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "filter"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls if all categories or only main categories have to be displayed."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "filter"},{"type": "text","children": [],"string": " is a single-string and its value should be:"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": All categories (main categories and sub-categories) are displayed."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"main\""},{"type": "text","children": [],"string": ": Only main categories are displayed."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"string": []},"seealso": "atomsList"},"atomsCheckModule": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsCheckModule"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check the given list of ATOMS modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["isok = atomsCheckModule(modulenames)", "isok = atomsCheckModule(modulenames, bVerbose)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modulenames"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mxn matrix of strings: the names of the modules to check"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bVerbose"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a 1-by-1 matrix of booleans, set to true to display messages"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsTest", "test_run", "assert_overview"]},"atomsDepTreeShow": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsDepTreeShow"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Show the dependency tree of a module"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "atomsDepTreeShow(module)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "module"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1x1 or 1x2 Matrix of strings:"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["atomsShow", "atomsList"]},"atomsGetConfig": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsGetConfig"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get ATOMS system parameters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "result = atomsGetConfig(parameter)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parameter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single-string matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "text","children": [],"string": "Value of the parameter"},"string": []}],"string": []}],"string": []},"seealso": "atomsSetConfig"},"atomsGetInstalled": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsGetInstalled"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the list of installed external modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "installed = atomsGetInstalled(section)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "installed"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "5xn String matrix :"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "1st column"},{"type": "text","children": [],"string": " : External module's technical name"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "2nd column"},{"type": "text","children": [],"string": " : External module's version"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "3rd column"},{"type": "text","children": [],"string": " : allusers/user, this parameter tell if the external module has been installed for all users or only for the current user."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "4th column"},{"type": "text","children": [],"string": " : External module's installation path"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "5th column"},{"type": "text","children": [],"string": " : I/A, this parameter tell if the external module has been automatically or intentionally installed."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument filter the output list."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": atomsGetInstalled() lists external modules installed in both \"user\" and \"allusers\" sections."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": atomsGetInstalled() only lists external modules installed in the \"allusers\" section."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": atomsGetInstalled() only lists external modules installed in the \"user\" section."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The default value is \"all\"."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["atomsInstall", "atomsIsInstalled"]},"atomsGetInstalledPath": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsGetInstalledPath"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Gets the install path of some installed external modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["paths = atomsGetInstalledPath(modules)", "paths = atomsGetInstalledPath(modules, section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "m x 1, m x 2, or m x 3 Matrix of strings:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "para","children": [{"type": "text","children": [],"string": "single string among \"user\", \"allusers\", \"all\". It is used ony if "},{"type": "varname","children": [],"string": "modules"},{"type": "text","children": [],"string": " has less than 3 columns. It is equivalent to "},{"type": "literal","children": [],"string": "modules(:,3)=section"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "paths"},{"type": "para","children": {"type": "text","children": [],"string": "the paths of the given modules (starting with SCI or SCIHOME), or \"\" for any unfound module, such that always size(paths,1)==size(modules,1)."},"string": []}],"string": []}],"string": []},"seealso": ["atomsGetLoadedPath", "atomsGetLoaded", "atomsGetInstalled", "atomsAutoloadList"]},"atomsGetLoaded": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsGetLoaded"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the list of loaded external modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "loaded = atomsGetLoaded()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "loaded"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "mx5 String matrix :"},"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "1st column"},{"type": "text","children": [],"string": " : External module's technical name"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "2nd column"},{"type": "text","children": [],"string": " : External module's version"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "3rd column"},{"type": "text","children": [],"string": " : allusers/user, this parameter tell if the external module has been installed for all users or only for the current user."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "4th column"},{"type": "text","children": [],"string": " : External module's installation path"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "5th column"},{"type": "text","children": [],"string": " : I/A, this parameter tell if the external module has been automatically or intentionally installed."}],"string": []},"string": []}],"string": []}],"string": []}],"string": []},"string": []},"seealso": ["atomsLoad", "atomsIsLoaded"]},"atomsGetLoadedPath": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsGetLoadedPath"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the path of the installation directory of loaded external modules."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "path = atomsGetLoadedPath(module)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "module"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1, mx2, mx3 Matrix of strings :"},"string": []},"string": []},{"type": "term","children": [],"string": "path"},{"type": "para","children": {"type": "text","children": [],"string": "The path of the given module"},"string": []}],"string": []},"string": []},"seealso": ["atomsLoad", "atomsLoad", "atomsIsLoaded"]},"atomsInstall": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsInstall"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Install one or several external modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = atomsInstall(modules)", "result = atomsInstall(modules, section)", "result = atomsInstall(file)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1, mx2 Matrix of strings:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1 Matrix of strings:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls where the external module is installed."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": the external module is installed for all users of the computer and is located in SCI/contrib (\"allusers zone\")."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": the external module is only installed for the current user and is located in SCIHOME/atoms (\"user zone\")."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If SCI/contrib is write accessible, \"allusers\" is the default value. Otherwise, the default value is \"user\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "5xn character string matrix:"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsIsInstalled", "atomsGetInstalled", "atomsRemove"]},"atomsIsInstalled": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsIsInstalled"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determines whether the module is installed. Returns true if the module is installed, false otherwise."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["res = atomsIsInstalled(modules)", "res = atomsIsInstalled(modules, section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1, mx2 Matrix of strings:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls the list of searched modules."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": atomsIsInstalled() searches external modules installed in both \"user\" and \"allusers\" sections."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": atomsIsInstalled() searches external modules installed in the \"allusers\" section."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": atomsIsInstalled() searches external modules installed in the \"user\" section."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The default value is \"all\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsInstall", "atomsGetInstalled"]},"atomsIsLoaded": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsIsLoaded"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "determines whether a module is loaded or not"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "result = atomsIsLoaded(modules)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1, mx2 Matrix of strings:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1 boolean matrix"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsLoad", "atomsGetLoaded"]},"atomsList": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsList"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "List available external modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["atomsList()", "atomsList(category)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "category"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument limits the list of modules to a category."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "category"},{"type": "text","children": [],"string": " is a single-string and its value should be a valid category (See "},{"type": "link","children": [],"string": "atomsCategoryList"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []}],"string": []},"string": []},"seealso": ["atomsShow", "atomsDepTreeShow", "atomsCategoryList"]},"atomsLoad": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsLoad"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Load one or several external modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = atomsLoad(name)", "result = atomsLoad(name, version)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of strings: External module name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "version"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of strings: External module version. This is an optional parameter. If it's not defined, the most recent version of the module is used."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "4xn character string matrix:"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsIsLoaded", "atomsGetLoaded", "atomsGetLoaded"]},"atomsQuit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsQuit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Unload (call .quit file of) external modules previously loaded by ATOMS"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "result = atomsQuit()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "scalar boolean %T or %F"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["atomsIsLoaded", "atomsGetLoaded", "atomsGetLoaded"]},"atomsRemove": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsRemove"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove one or several modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = atomsRemove(modules)", "result = atomsRemove(modules, section)", "result = atomsRemove(.., delete)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "modules"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "mx1 or mx2 character string matrix:"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls the list of sections where search modules to remove."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": Modules to remove are searched in both \"user\" and \"allusers\" sections."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": Modules to remove are only searched in the \"allusers\" section."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": Modules to remove are only searched in the \"user\" section."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If SCI is write accessible, \"all\" is the default value. Otherwise, the default value is \"user\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "delete"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "delete"},{"type": "text","children": [],"string": " is a boolean. If set to %T (True), the .zip or .tar.gz file containing the sources will also be deleted. This includes the dependencies' archives files that were installed with the module, if any."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "5xn character string matrix:"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsInstall", "atomsIsInstalled", "atomsGetInstalled"]},"atomsRepositoryAdd": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsRepositoryAdd"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add one or several URLs to the list of managed repositories"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["nbAdd = atomsRepositoryAdd(url)", "nbAdd = atomsRepositoryAdd(url, section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of strings : list of the URLs to add"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls where the repository is added."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": the repository is added to the \"allusers\" list and all user of scilab are affected."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": the repository is added to the \"user\" list and only the current user is affected."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If SCI/contrib is write accessible, \"allusers\" is the default value. Otherwise, the default value is \"user\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbAdd"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer : the number of repositories successfully added."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsRepositoryDel", "atomsRepositoryList"]},"atomsRepositoryDel": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsRepositoryDel"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove one or several URLs from the list of managed repositories"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["nbDel = atomsRepositoryDel(url)", "nbDel = atomsRepositoryDel(url, section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string matrix: list of the URLs to remove"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls the list of sections where search URL(s) to remove."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": URL(s) to remove are searched in both \"user\" and \"allusers\" sections."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": URL(s) to remove are only searched in the \"allusers\" section."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": URL(s) to remove are only searched in the \"user\" section."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If SCI is write accessible, \"all\" is the default value. Otherwise, the default value is \"user\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "nbDel"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer : the number of repositories successfully removed."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsRepositoryAdd", "atomsRepositoryList"]},"atomsRepositoryList": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsRepositoryList"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the list of managed repositories"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["repositories = atomsRepositoryList()", "repositories = atomsRepositoryList(section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls the list of section where search URL(s)."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": URL(s) present in the \"user\", \"allusers\" and \"official\" section are listed."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": only URL(s) present in the \"allusers\" section are listed."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": only URL(s) present in the \"user\" section are listed."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"official\""},{"type": "text","children": [],"string": ": only URL(s) present in the \"official\" section are listed."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The default value is \"all\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "repositories"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Matrix of strings : the first column give the list of repositories managed by ATOMS and the second column indicate if the repository is an official repository, if the repository has been added for all users or only for the current user."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsRepositoryAdd", "atomsRepositoryDel"]},"atomsRestoreConfig": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsRestoreConfig"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Restore the configuration from the backup file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "atomsRestoreConfig()"},"varlist": [],"seealso": ["atomsSaveConfig", "atomsSetConfig", "atomsGetConfig"]},"atomsSaveConfig": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsSaveConfig"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Make a backup of the configuration file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["atomsSaveConfig()", "atomsSaveConfig(force)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "force"},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "force"},{"type": "text","children": [],"string": " is a boolean. If set to %T (True), previously existing config.bak file in SCIHOME/.atoms will be erased. Default value is %F (False);"}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["atomsRestoreConfig", "atomsSetConfig", "atomsGetConfig"]},"atomsSearch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsSearch"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Searches for external modules."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "result = atomsSearch(pattern)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pattern"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String : The pattern to search for."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []}],"string": []},"seealso": "atomsList"},"atomsSetConfig": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsSetConfig"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Manage ATOMS system parameters"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "result = atomsSetConfig(parameter, value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "parameter"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single-string matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single-string matrix"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "text","children": [],"string": "Number of changed parameters"},"string": []}],"string": []}],"string": []},"seealso": "atomsGetConfig"},"atomsShow": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsShow"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Show the characteristics of a module"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "atomsShow(module)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "module"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1x1 or 1x2 Matrix of strings:"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["atomsList", "atomsDepTreeShow"]},"atomsSystemInit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsSystemInit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Sets the rightful write access for the ATOMS system"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "atomsSystemInit()"},"varlist": [],"seealso": []},"atomsSystemUpdate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsSystemUpdate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Update the list of available modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "atomsSystemUpdate()"},"varlist": [],"seealso": []},"atomsTest": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsTest"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "run all or part of tests of an installed ATOMS module"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["success = atomsTest(module)", "success = atomsTest(module, tests_name)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "module"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Column of strings: id = technical name of modules whose tests must be run."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tests_name"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A string array: name of tests to be run. By default all tests of the module are run. The name may include some wildcard "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": ", like in "},{"type": "literal","children": [],"string": "\"sin*\""},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "\"*sin\""},{"type": "text","children": [],"string": ", or "},{"type": "literal","children": [],"string": "\"*sin*\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "success"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "boolean value: "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " if no error has been detected, or "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["test_run", "assert_overview", "atomsIsInstalled"]},"atomsUpdate": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsUpdate"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Update one or several external modules"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = atomsUpdate()", "result = atomsUpdate(name)", "result = atomsUpdate(name, section)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "1xn character string matrix  : module's technical name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "section"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "This argument controls the list of sections where search modules to update."},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "section"},{"type": "text","children": [],"string": " is a single-string and its value should be :"}],"string": []},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"all\""},{"type": "text","children": [],"string": ": Modules to remove are searched in both \"user\" and \"allusers\" sections."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"allusers\""},{"type": "text","children": [],"string": ": Modules to remove are only searched in the \"allusers\" section."}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"user\""},{"type": "text","children": [],"string": ": Modules to remove are only searched in the \"user\" section."}],"string": []},"string": []}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "If SCI is write accessible, \"all\" is the default value. Otherwise, the default value is \"user\"."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": [],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["atomsInstall", "atomsRemove", "atomsGetInstalled"]},"atomsVersion": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "atomsVersion"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Show the ATOMS's version of Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "atomsVersion()"},"varlist": [],"seealso": []},"ScilabEval": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ScilabEval"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "tcl instruction : Evaluate a string with scilab interpreter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["ScilabEval instruction", "ScilabEval instruction \"seq\"", "ScilabEval instruction \"sync\"", "ScilabEval instruction \"sync\" \"seq\"", "ScilabEval \"flush\""]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "instruction"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "tcl string character contains a Scilab instruction to evaluate with the current Scilab interpreter."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["TCL_EvalFile", "TCL_EvalStr", "TCL_GetVar", "TCL_SetVar"]},"TCL_CreateSlave": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_CreateSlave"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a TCL slave interpreter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "TCL_CreateSlave(slaveName[, isSafe])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "slaveName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: Name of the TCL slave interpreter to create."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isSafe"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Boolean: "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " to create a safe slave interpreter, "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise. The default value is "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": ". A safe slave is not allowed to perform some operations, see the TCL documentation for more information."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["TCL_SetVar", "TCL_ExistVar", "TCL_DeleteInterp"]},"TCL_DeleteInterp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_DeleteInterp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "delete TCL interpreter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["TCL_DeleteInterp(interp)", "TCL_DeleteInterp()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string parameter. Name of the slave tcl interpreter to delete. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["TCL_SetVar", "TCL_ExistVar", "TCL_CreateSlave", "TCL_ExistInterp"]},"TCL_EvalFile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_EvalFile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Reads and evaluate a tcl/tk file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "TCL_EvalFile(filename [,interp])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the file to read and evaluate."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalStr", "TCL_GetVar", "TCL_SetVar", "TCL_ExistVar", "TCL_UnsetVar", "TCL_UpVar"]},"TCL_EvalStr": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_EvalStr"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Evaluate a string within the Tcl/Tk interpreter"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["TCL_EvalStr(str [,interp])", "res = TCL_EvalStr(str [,interp])"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "str"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string or matrix of strings, contains a Tcl/Tk script in each element."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave Tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main Tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "result of the evaluation, if it is successful. This is a character string matrix giving the evaluation result for each element of the input argument str"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalFile", "TCL_GetVar", "TCL_SetVar", "TCL_ExistVar", "TCL_UnsetVar", "TCL_UpVar"]},"TCL_ExistArray": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_ExistArray"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return %T if a tcl array exists"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "OK=TCL_ExistArray(arrayname [,interp])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arrayname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the tcl/tk array."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean. %T if arrayname exists."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalFile", "TCL_EvalStr", "TCL_GetVar", "TCL_SetVar", "TCL_UnsetVar", "TCL_UpVar", "TCL_CreateSlave"]},"TCL_ExistInterp": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_ExistInterp"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return %T if a tcl slave interperter exists"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "OK=TCL_ExistInterp(interp)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string parameter. Name of the slave tcl interpreter."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean. %T if TCL interpreter exists."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["TCL_CreateSlave", "TCL_DeleteInterp"]},"TCL_ExistVar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_ExistVar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return %T if a tcl variable exists"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "OK=TCL_ExistVar(varname [,interp])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the tcl/tk variable."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean. %T if varname exists."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalFile", "TCL_EvalStr", "TCL_GetVar", "TCL_SetVar", "TCL_UnsetVar", "TCL_UpVar", "TCL_CreateSlave"]},"TCL_GetVar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_GetVar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get a tcl/tk variable value"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "value=TCL_GetVar(Varname [,interp])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the tcl/tk variable."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "may be a character string or a strings matrix. Contains the value of the tcl/tk variable "},{"type": "literal","children": [],"string": "varname"},{"type": "text","children": [],"string": " in the interpreter "},{"type": "literal","children": [],"string": "interp"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalFile", "TCL_EvalStr", "TCL_SetVar", "TCL_ExistVar", "TCL_UnsetVar", "TCL_UpVar", "TCL_CreateSlave", "TCL_DeleteInterp"]},"TCL_GetVersion": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_GetVersion"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "get the version of the TCL/TK library at runtime."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["TCL_GetVersion()", "ret=TCL_GetVersion('numbers')"]},"varlist": [],"seealso": []},"TCL_SetVar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_SetVar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set a tcl/tk variable value"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "TCL_SetVar(varname, value [,interp])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the tcl/tk variable to set."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "may be a character string, a scalar, a real or string matrix (m x n). Contains the value to give to the tcl/tk variable."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalFile", "TCL_EvalStr", "TCL_GetVar", "TCL_ExistVar", "TCL_UnsetVar", "TCL_UpVar", "TCL_CreateSlave", "TCL_DeleteInterp"]},"TCL_UnsetVar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_UnsetVar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove a tcl variable"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "OK=TCL_UnsetVar(varname [,interp])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the tcl/tk variable to unset."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean. %T if varname was deleted."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalFile", "TCL_EvalStr", "TCL_GetVar", "TCL_SetVar", "TCL_ExistVar", "TCL_UpVar", "TCL_CreateSlave", "TCL_DeleteInterp"]},"TCL_UpVar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TCL_UpVar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Make a link from a tcl source variable to a tcl destination variable"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "OK=TCL_UpVar(varname1,varname2,[interp])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname1"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the tcl source variable."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname2"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. Contains the name of the tcl destination variable."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "interp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string parameter. Name of the slave tcl interpreter in which the operation has to be performed. If not provided, it defaults to the main tcl interpreter created by Scilab."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ok"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "boolean. %T if it is ok."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["ScilabEval", "TCL_EvalFile", "TCL_EvalStr", "TCL_GetVar", "TCL_SetVar", "TCL_ExistVar", "TCL_UnsetVar", "TCL_CreateSlave", "TCL_DeleteInterp"]},"winlist": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "winlist"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return the winId of current window created by sciGUI"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "winIds=winlist()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "winIds"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "matrix of integer greater than 0, window identificator."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"edit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "edit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "edição de funções"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["edit functionname", "edit(functionname, linenumber)", "edit functionname linenumber"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "functionname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "linenumber"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "positive integer (of type 1 or 10)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"edit_error": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "edit_error"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "opens in scilab editor the source of the last recorded error"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "answ = edit_error(clearerror)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "clearerror"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "boolean - if true the error condition is cleared, if false it is kept (as in "},{"type": "link","children": [],"string": "lasterror"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "answ"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string stating which source file is open (or why no file was open)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["lasterror", "errclear"]},"editor": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "editor"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Call the text editor as defined in the preferences"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "editor(...)"},"varlist": [],"seealso": "scinotes"},"scinotes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "scinotes"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scinotes: Embedded Scilab text editor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["scinotes()", "scinotes(file)", "scinotes([file1, file2])", "scinotes(file, line_number)", "scinotes(file, line_number, macro_name)", "scinotes([file1, file2], [line_number1, line_number2])", "scinotes(file, 'readonly')", "scinotes(file, ['indent','trailing','quote'])", "scinotes([file1, file2], 'readonly')", "scinotes([file1, file2], ['indent','trailing','quote'])"]},"varlist": [{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "file"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the file to be opened."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "[file1, file2]"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of string, files to be opened."},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "line_number"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer, the number of the line to be highlighted at the opening of the file."},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "macro_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string, the line number would be relative to the definition of the function macro_name"},"string": []},"string": []}],"string": []},"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "[line_number1, line_number2]"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a matrix of integer, each opened file will have its corresponding line highlighted."},"string": []},"string": []}],"string": []},"string": []}],"seealso": ["edit", "editvar", "object_editor", "ieditor", "console"]},"browsevar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "browsevar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scilab variable browser"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "browsevar()"},"varlist": [],"seealso": ["editvar", "who", "whos", "ged"]},"editvar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "editvar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Scilab variable editor"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "editvar(varname)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "varname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "name (single string) of the variable name to edit. The variable must exist in the current Scilab environment. It must refer to a scalar, vector or matrix of "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "text","children": [],"string": "booleans (dense or sparse)"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "encoded integers (int8, uint8, int16, uint16, int32, uint32)"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "real or complex numbers (dense or sparse)"},"string": []},{"type": "listitem","children": {"type": "text","children": [],"string": "strings"},"string": []}],"string": []}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["close", "browsevar", "whos", "edit", "ged", "tree_show"]},"filebrowser": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "filebrowser"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open the Scilab file browser"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "filebrowser()"},"varlist": [],"seealso": []},"newsfeed": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "News feed"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Displays news about Scilab"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"uiimport": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "uiimport"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Import data from csv/txt file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["uiimport()", "uiimport(filename)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string: name or path of file"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["table", "timeseries", "readtable", "readtimeseries", "detectImportOptions"]},"apropos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "apropos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "procura por palavras-chave na ajuda do Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["apropos(key)", "apropos(regexp)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string. Fornece a seqüência de caracteres a ser encontrada."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "regexp"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string. Fornece a expressão regular a ser encontrada (apenas com \"Scilab Browser\")"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["help", "man"]},"doc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "doc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "queries and displays help pages in the Scilab help browser"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["doc", "doc(key)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string: The requested help page or pattern."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["apropos", "head_comments", "help"]},"head_comments": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "head_comments"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "exibe comentários do cabeçalho da função Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "head_comments(fname)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "fname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, nome da função"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["help", "help_from_sci"]},"help": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "help"},"string": []},"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "queries and displays help pages in the Scilab help browser"},"string": []},{"type": "refpurpose","children": {"type": "emphasis","children": [],"string": "This function is obsolete. Please use doc instead."},"string": []}],"synopsis": {"type": "synopsis","children": [],"string": ["help", "help(key)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string: The requested help page or pattern."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["apropos", "head_comments", "man"]},"percenthelps": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "%helps"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "variável definindo o endereço dos diretórios de ajuda"},"string": []},"synopsis": [],"varlist": [],"seealso": ["apropos", "help"]},"add_help_chapter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "add_help_chapter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "adiciona uma entrada na lista de ajudas"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "add_help_chapter(title,path[,mode])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o título da ajuda"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string, o endereço do diretório contendo os arquivos de ajuda"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "booleano, %T se o diretório pertence à lista de módulos do Scilab, %F em caso contrário (toolboxes). O valor padrão é %F."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["help", "add_demo"]},"del_help_chapter": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "del_help_chapter"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Delete an entry in the help list"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "del_help_chapter(title[,mode])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A character string, help chapter title"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean, if TRUE, the chapter is considered as belongs to a internal modules, otherwise, the chapter is removed. It is an optional input argument and its default value is %F."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["help", "add_help_chapter"]},"help_from_sci": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "help_from_sci"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Geração de arquivos de ajuda e de arquivos de demonstração a partir da seção de comentários de cabeçalho de um arquivo-fonte .sci"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["help_from_sci() // gera um modelo de função vazio", "help_from_sci(funname,helpdir) // gera helpdir/funname.xml a partir de funname.sci", "help_from_sci(dirname,helpdir) // processa dirname/*.sci e cria helpdir/*.xml.", "help_from_sci(dirname,helpdir,helpdir) // como acima, mas também cria o arquivo de demonstração helpdir/*.dem.sce.", "[helptxt,demotxt]=help_from_sci(funname) // retorna funname.xml e funname.dem.sce como duas matrizes de texto."]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funname:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "o nome de um único arquivo .sci a ser processado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirname:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "nome do diretório onde todos os arquivos .sci serão processados"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "helpdir:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "endereço opcional onde o arquivo de ajuda .xml será criado"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "demodir:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "endereço opcional onde os arquivos de demonstração .dem.sce serão criados baseados nos códigos da seção Examples"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "helptxt:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "retorna o código da ajuda XML se helpdir for vazio, ou o endereço para o novo arquivo .xml"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "demotxt:"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "retorna o código de demonstração se demodir for vazio, ou o endereço para o novo arquivo .dem.sc"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["help", "help_skeleton", "xmltohtml"]},"help_skeleton": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "help_skeleton"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "constrói o esqueleto do arquivo de ajuda xml associado à função Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "txt = help_skeleton(funname [,path [,language]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "funname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : o nome da função"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string : o endereço onde se criará o arquivo, se for requerido. Se este argumento não for fornecido, o esqueleto é retornado como um string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string :com valor possível \"fr_FR\" ou \"en_US\" o padrão é \"en_US\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "txt"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "o código xml ou o endereço do arquivo xml completo"},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"how_to_link_toolbox_help": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Link toolbox help with Scilab one"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to make hyperlink in toolbox help pointing to Scilab's items"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"man": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Scilab documentation format"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "on line help XML file description format"},"string": []},"synopsis": [],"varlist": [],"seealso": ["apropos", "help", "help_skeleton", "help_from_sci", "xmltojar", "add_help_chapter"]},"manedit": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "manedit"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "editando item do manual"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "manedit(manitem)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "manitem"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string (geralmente, o nome de uma função)"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["help", "help_skeleton"]},"xmltohtml": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmltohtml"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte arquivos de ajuda xml do Scilab para formato HTML"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmltohtml(dirs [,titles [,dir_language [default_language]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de strings: um conjunto de endereços de diretórios para os quais os manuais html devem ser gerados ou "},{"type": "literal","children": [],"string": "[] "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "titles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: títulos associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas padrões associados aos endereços de diretórios ou []. Se um arquivo XML estiver faltando em dir_language, ele é copiado de default_language."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xmltojar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmltojar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte arquivos de ajuda xml do Scilab para formato javaHelp"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmltojar(dirs [,titles [,dir_language [default_language]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de strings: um conjunto de endereços de diretórios para os quais os manuais html devem ser gerados ou "},{"type": "literal","children": [],"string": "[] "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "titles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: títulos associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas padrões associados aos endereços de diretórios ou []. Se um arquivo XML estiver faltando em dir_language, ele é copiado de default_language."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xmltopdf": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmltopdf"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte arquivos de ajuda xml do Scilab para formato PDF"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmltopdf(dirs [,titles [,dir_language [default_language]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de strings: um conjunto de endereços de diretórios para os quais os manuais pdf devem ser gerados ou "},{"type": "literal","children": [],"string": "[] "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "titles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: títulos associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas padrões associados aos endereços de diretórios ou []. Se um arquivo XML estiver faltando em dir_language, ele é copiado de default_language."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"xmltops": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "xmltops"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "converte arquivos de ajuda xml do Scilab para formato Postscript"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "xmltops(dirs [,titles [,dir_language [default_language]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "vetor de strings: um conjunto de endereços de diretórios para os quais os manuais postscript devem ser gerados ou "},{"type": "literal","children": [],"string": "[] "}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "titles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: títulos associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas associados a endereços de diretórios ou []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "default_language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "vetor de strings: idiomas padrões associados aos endereços de diretórios ou []. Se um arquivo XML estiver faltando em dir_language, ele é copiado de default_language."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_make": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_make"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Builds fully or some given sections of a toolbox having a standard structure"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_make()", "tbx_make(tbx_path)", "tbx_make(tbx_path, sections)", "tbx_make(tbx_path, \"help\", languages)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tbx_path"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "a single string: absolute or relative path to the toolbox root directory."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Default path is the current working directory."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sections"},{"type": "listitem","children": [{"type": "text","children": [],"string": "vector of strings: Names of the toolbox sections to build, among "},{"type": "literal","children": [],"string": "[\"macros\", \"help\", \"src\", \"sci_gateway\", \"localization\"]"},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " "},{"type": "literal","children": [],"string": "\"*\""},{"type": "text","children": [],"string": " can be used to force building all available sections, without running the builder script when it exists (see the description section). "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "languages"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vector of strings like "},{"type": "literal","children": [],"string": "\"en_US\""},{"type": "text","children": [],"string": ", specifying the subset of the languages for which help pages must be built. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " This is useful during the module's development, in order to avoid rebuilding pages for ALL languages when this is not yet required, that can be very time consuming. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " The shortcuts "},{"type": "literal","children": [],"string": "\"en\", \"fr\", \"pt\", \"ja\", \"ru\""},{"type": "text","children": [],"string": " are automatically expanded respectively into "},{"type": "literal","children": [],"string": "\"en_US\", \"fr_FR\", \"pt_BR\", \"ja_JP\", \"ru_RU\""},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " If there is no help section or if its build is not requested, this option is ignored. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["man", "xmltojar", "tbx_builder_help", "genlib", "tbx_builder_macros", "tbx_build_localization", "tbx_builder_src", "tbx_builder_gateway", "tbx_build_blocks"]},"tbx_build_blocks": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_blocks"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compile Xcos blocks (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tbx_build_blocks(tbx_path, block_names [, macros_path])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tbx_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the toolbox root directory."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block_names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Block interface function list (in a string vector). All name should have a corresponding interface function macro (on the macros subdirectory)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "macros_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the blocks interface functions ; optional path which allow complex directory structure for interface functions."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_build_cleaner": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_cleaner"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate a cleaner.sce script (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_cleaner()", "tbx_build_cleaner(toolbox_path)", "tbx_build_cleaner(toolbox_name)                // obsolete", "tbx_build_cleaner(toolbox_name, toolbox_path)  // obsolete"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Root directory of toolbox sources ; the script will be generated here (default: current directory)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_name (obsolete)"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Toolbox short name = basename of the "},{"type": "literal","children": [],"string": ".start"},{"type": "text","children": [],"string": " file in the "},{"type": "literal","children": [],"string": "etc/"},{"type": "text","children": [],"string": " directory of the toolbox."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_build_loader": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_loader"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate loader and unloader scripts (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_loader()", "tbx_build_loader(toolbox_path)", "tbx_build_loader(toolbox_name)                 // obsolete", "tbx_build_loader(toolbox_name, toolbox_path)   // obsolete"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_path"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a single string. Root directory of toolbox sources ; the script will be generated here (default: current directory). The file "},{"type": "literal","children": [],"string": "toolbox_path/etc/*.start"},{"type": "text","children": [],"string": " must exist. The toolbox_name is retrieved from its basename."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_name (obsolete)"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a single string. Toolbox short name ; the library and help chapter name when generating the default loader."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_build_localization": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_localization"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Builds or updates localization .po and .mo files of a toolbox"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_localization()", "tbx_build_localization(tbx_path)", "tbx_build_localization(tbx_name)               // obsolete", "tbx_build_localization(tbx_name, tbx_path)     // obsolete"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tbx_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "path of the toolbox, use to locate files to compile."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tbx_name (deprecated)"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Name of the toolbox, use to name localization files and domain."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The name of the toolbox is now retrieved as the basename of the file "},{"type": "literal","children": [],"string": "tbx_path/etc/*.start"},{"type": "text","children": [],"string": ". This file must be available, even if it is empty."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["tbx_make", "tbx_generate_pofile", "addlocalizationdomain", "gettext"]},"tbx_build_src": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_src"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Build sources (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tbx_build_src(names, files, flag, [src_path [, libs [, ldflags [, cflags [, fflags [, cc [, libname [, loadername [, makename]]]]]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix giving the entry names which are to be linked."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving objects files needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "flag"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string flag (\"c\" or \"f\") for C or Fortran entry points."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "src_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the source files ; in a normal toolbox it should be the directory containing the builder_src_(lang).sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving extra libraries needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character string. It can be used to add specific linker options in the generated Makefile. Default value is ''"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character  string. It can be used to add specific C compiler options in the generated Makefile. Default value is ''"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character  string. It can be used to add specific Fortran compiler options in the generated Makefile. Default value is ''"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "optional character  string. It can be used to specify a C compiler. Default value is ''"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libname"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "optional character string. The name of the generated shared library (default value is '', and in this case the name is derived from "},{"type": "literal","children": [],"string": "names(1)"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "loadername"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "character string. The pathname of the loader file (default value is "},{"type": "literal","children": [],"string": "loader.sce"},{"type": "text","children": [],"string": ")."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "character string. The pathname of the Makefile file without extension."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is useless since Scilab 5.0. Default value to use: []."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A warning will be displayed in Scilab 5.3 if you use another value that the default."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": "ilib_for_link"},"tbx_builder_gateway": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_builder_gateway"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "text","children": [],"string": "Builds the user gateway code in "},{"type": "literal","children": [],"string": "sci_gateway/"},{"type": "text","children": [],"string": " subdirectory."}],"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tbx_builder_gateway(toolbox_path)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_path"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Root directory of toolbox gateway code; buider script will be searched in the "},{"type": "literal","children": [],"string": "sci_gateway/"},{"type": "text","children": [],"string": " subdirectory of this directory."}],"string": []},"string": []}],"string": []},"string": []},"seealso": []},"tbx_builder_help": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_builder_help"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Builds the multilingual help pages of a toolbox, with possible subsections"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_builder_help(toolbox_path)", "tbx_builder_help(toolbox_path, languages)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_path"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Root directory of toolbox sources ; builder_help.sce script will be searched in the help subdirectory of this directory. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "languages"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Vector of strings like "},{"type": "literal","children": [],"string": "\"en_US\""},{"type": "text","children": [],"string": ", specifying the subset of the languages for which help pages must be built. "},{"type": "para","children": [],"string": []},{"type": "text","children": [],"string": " The shortcuts "},{"type": "literal","children": [],"string": "\"en\", \"fr\", \"pt\", \"ja\", \"ru\""},{"type": "text","children": [],"string": " can be used. They are automatically expanded into "},{"type": "literal","children": [],"string": "\"en_US\", \"fr_FR\", \"pt_BR\", \"ja_JP\", \"ru_RU\""},{"type": "text","children": [],"string": ". "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["man", "xmltojar", "tbx_builder_help_lang", "tbx_build_help_loader", "tbx_build_help"]},"tbx_builder_macros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_builder_macros"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates the library(es) of a toolbox for its functions in Scilab language"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tbx_builder_macros(toolbox_path)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_path"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Root directory of the toolbox. build script will be searched in the "},{"type": "varname","children": [],"string": "toolbox_path"},{"type": "literal","children": [],"string": "/macros"},{"type": "text","children": [],"string": " subdirectory."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["genlib", "tbx_make"]},"tbx_builder_src": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_builder_src"},"string": []},"refpurpose": {"type": "refpurpose","children": [{"type": "text","children": [],"string": "Builds the user source code (non-gateway) in "},{"type": "literal","children": [],"string": "src/"},{"type": "text","children": [],"string": " subdirectory."}],"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tbx_builder_src(toolbox_path)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Root directory of toolbox sources; builder scripts will be searched in the src subdirectory of this directory."},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"tbx_build_gateway": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_gateway"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Build a gateway (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tbx_build_gateway(libname, names, files, [gateway_path [, libs [, ldflags [, cflags [, fflags [, cc [, makename [, ismex]]]]]]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libname"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the generic name of the library without path and extension."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "2 or 3 columns string matrix giving the table of pairs 'scilab-name', 'interface name', ['language']"},"string": []},{"type": "para","children": [{"type": "literal","children": [],"string": "language"},{"type": "text","children": [],"string": " can be : "},{"type": "itemizedlist","children": [{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"csci\""},{"type": "text","children": [],"string": ": C entry point for API Scilab (default value)"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"fsci\""},{"type": "text","children": [],"string": ": Fortran entry point for API Scilab"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"cmex\""},{"type": "text","children": [],"string": ": C mexlib entry point for MexLib"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"fmex\""},{"type": "text","children": [],"string": ": Fortran mexlib entry point for MexLib"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"cppsci\""},{"type": "text","children": [],"string": ": C++ entry point for C++ API Scilab"}],"string": []},"string": []},{"type": "listitem","children": {"type": "para","children": [{"type": "literal","children": [],"string": "\"cppsciopt\""},{"type": "text","children": [],"string": ": C++ entry point for C++ API Scilab with optional arguments"}],"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving objects files needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gateway_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the sources of the gateway ; in a normal toolbox it should be the directory containing the builder_gateway_(lang).sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "libs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "string matrix giving extra libraries needed for shared library creation"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ldflags,cflags,fflags"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character strings to provide options for the loader, the C compiler and the Fortran compiler."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cc"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "character string. The name of or path to the compiler."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "makename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "character string. The path of the Makefile file without extension."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "This parameter is useless since Scilab 5.0. Default value to use: []."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A warning will be displayed in Scilab 5.3 if you use another value that the default."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "ismex"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Internal variable to specify if we are working with mex or not."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "ilib_build"},"tbx_build_gateway_clean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_gateway_clean"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate a cleaner_gateway.sce script (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_gateway_loader(langs)", "tbx_build_gateway_loader(langs, gateway_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "langs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Languages of source files."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gateway_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the sources of the gateway ; in a normal toolbox it should be the directory containing the builder_gateway.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_build_gateway_loader": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_gateway_loader"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate a loader_gateway.sce script (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_gateway_loader(langs)", "tbx_build_gateway_loader(langs, gateway_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "langs"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Languages of source files."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gateway_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the sources of the gateway ; in a normal toolbox it should be the directory containing the builder_gateway.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_build_help": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_help"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate help files (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_help(title)", "tbx_build_help(title, help_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Title of the chapter."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "help_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Directory where the files will be generated ; in a normal toolbox it should be the directory containing the build_help.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tbx_builder_help_lang", "tbx_build_help_loader", "tbx_builder_help"]},"tbx_build_help_loader": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_help_loader"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate an addchapter.sce script (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_help_loader(title)", "tbx_build_help_loader(title, help_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "title"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Title of the chapter."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "help_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Directory where the script will be generated ; in a normal toolbox it should be the directory containing the build_help.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tbx_builder_help_lang", "tbx_builder_help", "tbx_build_help"]},"tbx_build_macros": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_macros"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compile macros (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_build_macros(toolbox_name)", "tbx_build_macros(toolbox_name, macros_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "toolbox_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Toolbox short name ; that is, the prefix of the .start file of the toolbox (which shall be in the etc subdirectory)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "macros_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Directory where the macros files can be found and where the compiled macros will be placed into ; in a normal toolbox it should be the directory containing the buildmacros.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_build_pal_loader": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_build_pal_loader"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Generate a loader_pal.sce script for loading Xcos palette module(toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "tbx_build_pal_loader(palette_name, block_names , module_path [, script_path])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "palette_name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the name of the palette."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "block_names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Block interface function list (in a string vector) ; all name should have a corresponding interface function macro (on the macros subdirectory)."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "module_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a character string, the path of the directory containing the module."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "script_path"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "an optional character string that can be used to specify the location of the created loader_pal.sce script file. If not given the script file will be created in the module_path+\"/macros\" directory."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "Generaly the loader_pal.sce script file is created in the directory which contains the block interface functions files. The script_path argument can be used to handle modules that define several palettes."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": []},"tbx_builder_gateway_lang": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_builder_gateway_lang"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Run builder_gateway_(language).sce script if it exists (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_builder_gateway_lang(lang)", "tbx_builder_gateway_lang(lang, gw_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lang"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Language of sources files ; the builder_gateway_(lang).sce script will be searched in the subdirectory lang (e.g. fortran) of the gw_path directory."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "gw_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the sources of the gateway ; in a normal toolbox it should be the directory containing the builder_gateway.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_builder_help_lang": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_builder_help_lang"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Run build_help.sce script if it exists (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_builder_help_lang(lang)", "tbx_builder_help_lang(lang, help_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lang"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Language of help files to use ; the build_help.sce script will be searched in the subdirectory lang (e.g. en_US) of the help_path directory"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "help_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to help directory ; in a normal toolbox it should be the directory containing the builder_help.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["tbx_builder_help", "tbx_build_help_loader", "tbx_build_help"]},"tbx_builder_src_lang": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_builder_src_lang"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Run builder_(language).sce script if it exists (toolbox compilation process)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["tbx_builder_src_lang(lang)", "tbx_builder_src_lang(lang, src_path)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lang"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Language of sources files ; the builder_(lang).sce script will be searched in the subdirectory lang (e.g. fortran) of the src_path directory."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "src_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to the sources ; in a normal toolbox it should be the directory containing the builder_src.sce script (which should be the script calling this function). Default is current directory."},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"tbx_generate_pofile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "tbx_generate_pofile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Extracts gettext msgid strings from the toolbox source files. Creates/updates .po files"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["pofile = tbx_generate_pofile()", "pofile = tbx_generate_pofile(tbx_path)", "pofile = tbx_generate_pofile(tbx_name)             // obsolete", "pofile = tbx_generate_pofile(tbx_name, tbx_path)   // obsolete"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tbx_path"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "path of the toolbox, use to locate files to compile."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "tbx_name (obsolete)"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "name of the toolbox, use to name localization files and domain."},"string": []},{"type": "warning","children": [{"type": "varname","children": [],"string": "tbx_name"},{"type": "text","children": [],"string": " is now retrieved as the basename of the file "},{"type": "literal","children": [],"string": "tbx_path/etc/*.start"},{"type": "text","children": [],"string": ". This file must exist, even if it is empty."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "pofile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "return the generated po file path."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["gettext", "addlocalizationdomain", "tbx_make", "tbx_build_localization"]},"addlocalizationdomain": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "addlocalizationdomain"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "add a new domain in localization mechanism."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "msg = addlocalizationdomain(domain, path)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "domain"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "a string: The name of the messages domain. That's the string used as first argument when calling "},{"type": "literal","children": [],"string": "gettext(domain, msgid)"},{"type": "text","children": [],"string": " in the code of the toolbox."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "Setting "},{"type": "varname","children": [],"string": "domain"},{"type": "text","children": [],"string": " to the toolbox name will be most often relevant. Indeed, when running "},{"type": "literal","children": [],"string": "tbx_make(…,\"localization\")"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "tbx_build_localization(…)"},{"type": "text","children": [],"string": ", the "},{"type": "varname","children": [],"string": "domain"},{"type": "text","children": [],"string": " used by default to build translation files is the toolbox name (that is the base name * of the ./etc/*.start file of the toolbox)."}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Absolute path to the toolbox subdirectory containing the languages subdirectories and translated .po and .mo files. It can start with "},{"type": "literal","children": [],"string": "SCI"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "WSCI"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "TMPDIR"},{"type": "text","children": [],"string": ", and "},{"type": "literal","children": [],"string": "SCIHOME"},{"type": "text","children": [],"string": ", that are automatically expanded."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When this directory has been created when running "},{"type": "literal","children": [],"string": "tbx_make(…, \"localization\")"},{"type": "text","children": [],"string": " or "},{"type": "literal","children": [],"string": "tbx_build_localization(…)"},{"type": "text","children": [],"string": ", this toolbox subdirectory is named "},{"type": "literal","children": [],"string": "locales"},{"type": "text","children": [],"string": " by default."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["gettext", "tbx_generate_pofile"]},"getdefaultlanguage": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getdefaultlanguage"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns the default language used by Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "getdefaultlanguage()"},"varlist": [],"seealso": ["setlanguage", "getlanguage"]},"getlanguage": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getlanguage"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns the current language used by Scilab."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "getlanguage()"},"varlist": [],"seealso": "setlanguage"},"gettext": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "gettext"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "indexes or/and translates some indexed english messages"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["gettext(\"The literal reference message\")", "gettext([\"item #1\" ; \"item#2\"])", "translated = gettext(\"The literal reference message\")", "translated = gettext([\"item #1\" ; \"item#2\"])", "translated = gettext(msgid)", ".. gettext(domain, ..)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"The literal reference message\""},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "Single case-sensitive literal text of an english message to be indexed or/and translated. A column of literal texts explicitly separated with semi-colons may also be specified. Messages can include some "},{"type": "link","children": [],"string": "C-like placeholders"},{"type": "text","children": [],"string": " starting with \"%\"."}],"string": []},{"type": "warning","children": {"type": "text","children": [],"string": "Only standard ASCII characters can be used. Any other extended ASCII or UTF-8 characters would make gettext() failing."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "msgid"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "single or array of case-sensitive messages identifiers (in english) to be translated, in a variable."},"string": []},{"type": "warning","children": {"type": "text","children": [],"string": "Only standard ASCII characters can be used."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "translated"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Input messages translated in the current language of the Scilab session. If no translated version is available for an input message, the input version in english is returned. The input and output arrays have the same sizes."},"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "domain"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "word of text: the name of a domain. When localizing an external module, "},{"type": "varname","children": [],"string": "domain"},{"type": "text","children": [],"string": " may be usually set to the technical name of the module."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "domain"},{"type": "text","children": [],"string": " can indifferently be a literal or a variable. It is case-sensitive."}],"string": []},{"type": "para","children": [{"type": "varname","children": [],"string": "domain"},{"type": "text","children": [],"string": " is required by "},{"type": "literal","children": [],"string": "tbx_generate_pofile()"},{"type": "text","children": [],"string": " to make the literal msgid string indexed (harvesting stage. See below)."}],"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "When "},{"type": "literal","children": [],"string": "gettext(domain, msgid)"},{"type": "text","children": [],"string": " is used to retrieve the translated version, "},{"type": "varname","children": [],"string": "domain"},{"type": "text","children": [],"string": " is used to get the path to the directory where translations are stored, as beforehand registered with "},{"type": "literal","children": [],"string": "addlocalizationdomain(domain, path)"},{"type": "text","children": [],"string": "."}],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["printf_conversion", "msprintf", "setlanguage", "addlocalizationdomain", "tbx_generate_pofile", "tbx_make", "tbx_build_localization"]},"setdefaultlanguage": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setdefaultlanguage"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sets the language of the session at startup and for some fixed Scilab menus"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "setdefaultlanguage(language)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string made of a two-letter, lower-case, ISO Language Code, optionally followed by an underscore and a two-letter, upper-case, ISO country code), such as: 'fr', 'en', 'en_US', 'ru_RU', 'zh_TW'..."},"string": []},"string": []}],"string": []},"string": []},"seealso": ["getlanguage", "setlanguage"]},"setlanguage": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "setlanguage"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "chooses the language used for standard messages and help pages for the current session"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "TF = setlanguage(language)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "language"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "single string among 'en', 'fr', 'ja', 'pt', 'ru', 'de', en_US', 'fr_FR', 'ja_JP', 'pt_BR', 'ru_RU', 'de_DE', 'zh_TW'..."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "TF"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "single boolean: "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " if the setting has been actually performed, "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["setdefaultlanguage", "getlanguage", "gettext"]},"api_scilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API Scilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "api_scilab is the Scilab 6 interface to access Scilab variables."},"string": []},"synopsis": [],"varlist": [],"seealso": ["api_common", "api_double", "api_string", "api_boolean", "api_integer", "api_poly", "api_handle", "api_pointer", "api_list", "api_struct", "api_cell"]},"api_types": {"refname": [{"type": "refname","children": {"type": "text","children": [],"string": "API types"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "scilabEnv"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "scilabVar"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "scilabStatus"},"string": []},{"type": "refname","children": {"type": "text","children": [],"string": "scilabOpt"},"string": []}],"refpurpose": [{"type": "refpurpose","children": {"type": "text","children": [],"string": "This a pointer of internal information provided by Scilab engine, you just have to forwarding it to API function."},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "It is the type of Scilab variable in API Scilab."},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "scilabStatus is used by API Scilab to provide a status of execution."},"string": []},{"type": "refpurpose","children": {"type": "text","children": [],"string": "It is a list of optional arguments given in the call."},"string": []}],"synopsis": [],"varlist": [],"seealso": []},"api_scilab_getting_started": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Getting started with API_Scilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to load a C, C++ or fortran code in the Scilab engine as a new function"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"api_double": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API double functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_common": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API common functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": ["api_double", "api_string", "api_string", "api_string", "api_string", "api_string", "api_string", "api_string", "api_string"]},"api_string": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API string functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_boolean": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API boolean functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_integer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API integer functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_list": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API list-type functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_poly": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API polynomial functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_pointer": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API pointer functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_cell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API cell functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_struct": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API struct functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_handle": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API handle functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": []},"api_optional": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "API optional functions"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": "api_scilab_getting_started"},"call_scilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "call_scilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "call_scilab is an interface which provides the ability to call Scilab engine from C/C++ code"},"string": []},"synopsis": [],"varlist": [],"seealso": ["api_scilab", "compile_and_run_call_scilab"]},"compile_and_run_call_scilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Compile and run with Call Scilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to compile a native application based on or using Scilab"},"string": []},"synopsis": [],"varlist": [],"seealso": ["call_scilab", "StartScilab", "SendScilabJob", "SendScilabJobs"]},"DisableInteractiveMode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "DisableInteractiveMode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Disables some features (plotting, gui creation, Tcl/Tk...) and leaves only the computing engine"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "void DisableInteractiveMode(void);"},"varlist": [],"seealso": ["call_scilab", "compile_and_run_call_scilab", "SendScilabJob", "TerminateScilab"]},"ExecScilabCommand": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ExecScilabCommand"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Execute a Scilab from a C/C++ code (call_scilab) and can get message and callstack on error."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "int ExecScilabCommand(char* cmd, char** msg, char** stack)"},"varlist": [],"seealso": ["call_scilab", "compile_and_run_call_scilab", "SendScilabJob"]},"fromc": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fromc"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if current Scilab is called from an external C program (by StartScilab)."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r=fromc()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["call_scilab", "fromjava", "istssession", "getscilabmode"]},"fromjava": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fromjava"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks if current Scilab is called from javasci"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "r = fromjava()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "r"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a boolean"},"string": []},"string": []}],"string": []},"string": []},"seealso": ["call_scilab", "fromc", "istssession", "getscilabmode"]},"GetLastJob": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "GetLastJob"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns the latest job sent to Scilab engine"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "BOOL GetLastJob(char *JOB,int nbcharsJOB);"},"varlist": [],"seealso": ["call_scilab", "compile_and_run_call_scilab", "SendScilabJob", "TerminateScilab"]},"ScilabHaveAGraph": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "ScilabHaveAGraph"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Check if any Scilab graphics have been opened."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "int ScilabHaveAGraph(void);"},"varlist": [],"seealso": ["call_scilab", "compile_and_run_call_scilab", "SendScilabJob", "TerminateScilab"]},"SendScilabJob": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SendScilabJob"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Send a Scilab task from a C/C++ code (call_scilab)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "int SendScilabJob(char *job);"},"varlist": [],"seealso": ["call_scilab", "compile_and_run_call_scilab", "ExecScilabCommand", "api_scilab"]},"SendScilabJobs": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SendScilabJobs"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Send Scilab tasks from a C/C++ code (call_scilab)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "int SendScilabJobs(char **jobs, int numberjobs);"},"varlist": [],"seealso": ["call_scilab", "SendScilabJob", "compile_and_run_call_scilab"]},"StartScilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "StartScilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Initializes and starts Scilab engine in Call Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "BOOL StartScilab(char *SCIpath, char *ScilabStartup, int Stacksize);"},"varlist": [],"seealso": ["call_scilab", "compile_and_run_call_scilab", "SendScilabJob", "TerminateScilab"]},"TerminateScilab": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "TerminateScilab"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Stops and terminates Scilab engine in Call Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "BOOL TerminateScilab(char *ScilabQuit);"},"varlist": [],"seealso": ["call_scilab", "compile_and_run_call_scilab", "StartScilab", "SendScilabJob"]},"javaclasspath": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "javaclasspath"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set and get dynamic Java class path"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["res=javaclasspath()", "javaclasspath(path)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"javalibrarypath": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "javalibrarypath"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set and get dynamic java.library.path"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["res=javalibrarypath()", "javalibrarypath(path)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string matrix"},"string": []},"string": []}],"string": []},"string": []},"seealso": "javaclasspath"},"jre_path": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jre_path"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "returns Java Runtime Environment used by Scilab"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "p=jre_path()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "p"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string path to the JRE"},"string": []},"string": []}],"string": []},"string": []},"seealso": "system_getproperty"},"system_getproperty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "system_getproperty"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "gets the system property for a given JVM key"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res=system_getproperty(key)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string value"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["system_setproperty", "getenv", "setenv", "root_properties"]},"system_setproperty": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "system_setproperty"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "set a system property for a given JVM key to a given value."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "prev = system_setproperty(key,value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prev"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string previous value or []"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["system_getproperty", "setenv", "getenv", "root_properties"]},"jims-getting-started": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Getting started - Beginning"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to use the Java Scilab binding?"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"jims-getting-started-2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Getting started - Second step"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to use the Java Scilab binding?"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"jallowClassReloading": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jallowClassReloading"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Allow the class reloading"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["jallowClassReloading(bool)", "isAllowed = jallowClassReloading()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bool"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean to allow or disallow"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isAllowed"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean to indicate if the class reloading is allowed or not"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jimport"},"jarray": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jarray"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Create a Java array"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jarray(className, n_1 [, n_2 [, ...]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "className"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the class name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "n_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An integer giving the array dimension"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"jautoTranspose": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jautoTranspose"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the way to convert matrices"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["method = jautoTranspose()", "jautoTranspose(method)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean giving the type of conversion"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"jautoUnwrap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jautoUnwrap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Unwrap automatically returned values"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["autoUnwrap = jautoUnwrap()", "jautoUnwrap(autoUnwrap)"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "autoUnwrap"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean"},"string": []},"string": []}],"string": []},"string": []},"seealso": "jinvoke"},"jcast": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jcast"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Cast a Java object into another one."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jcast(javaObject, class)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "javaObject"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "class"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the class name or a mlist typed _JClass got with jimport or jcompile"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jgetclassname"},"jcompile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jcompile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Compile Java code or file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["class = jcompile(className, code);", "class = jcompile(javaFiles);"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "className"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the class name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "code"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A row or a column of strings containing the Java code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "javaFiles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Path to Java files."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "class"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JClass"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jimport", "jallowClassReloading", "jdeff", "javasci", "compile_and_run_javasci_v2", "javaclasspath"]},"jcreatejar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jcreatejar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a Java ARchive (JAR) from a set of files / directories"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jcreatejar(jarFilePath, filePaths[, rootPath[, manifestFilePath]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jarFilePath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the destination file path of the JAR."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filePaths"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A row / column string matrix containing the paths of the input files/directories to include in the JAR."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "rootPath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An optional string setting the path from which the relative paths in the JAR of all the input files/directories will be computed."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "manifestFilePath"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "An optional string setting the file path of the manifest data to include in the JAR."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jcompile", "javaclasspath"]},"jdeff": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jdeff"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Map a static Java method onto a Scilab macro"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jdeff(className, javaMethodName, scilabMacroName)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "className"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the class name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "javaMethodName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the method name in the class (the method must be static)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "scilabMacroName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the macro name"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "scilab"},"jdisableTrace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jdisableTrace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Stop the trace process."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jdisableTrace()"},"varlist": [],"seealso": "jenableTrace"},"jenableTrace": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jenableTrace"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Allow to trace the internal functionality of JIMS to help the debugging."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jenableTrace(filename)"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the filename"},"string": []},"string": []}],"string": []},"string": []},"seealso": "jdisableTrace"},"jexists": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jexists"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Test if a Scilab Java Object is valid on the Java side"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "bool = jexists(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bool"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jremove"},"jgetclassname": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jgetclassname"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Return the class name of the given object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "name = jgetclassname(obj)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "name"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab string"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"jgetfield": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jgetfield"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get the field value of a Java object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jgetfield(object, fieldName [, unwrap])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass or a Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fieldName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the field name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "unwrap"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A single boolean"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jsetfield"},"jgetfields": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jgetfields"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get all the fields of a Java object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "fields = jgetfields(object)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass or a Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fields"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A column of strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jgetmethods"},"jgetinfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jgetinfo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Returns information about the Java virtual machine"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jinfo = jgetinfo()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "jinfo"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string matrix containing the information about the Java VM"},"string": []},"string": []}],"string": []},"string": []},"seealso": []},"jgetmethods": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jgetmethods"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get all the methods of a Java object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "methods = jgetmethods(object)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass or a Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "methods"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A column of strings"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jgetfields"},"jimport": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jimport"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Import a Java class"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["jimport(className)", "cl = jimport(className, isAClassReturned)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "className"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the class name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "isAClassReturned"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A boolean to indicate if a class object must be returned"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["javaclasspath", "jallowClassReloading", "jremove"]},"jinvoke": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jinvoke"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Invoke a method of a Java object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ret = jinvoke(object, methodName [, arg_1 [, arg_2...]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass or a Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "methodName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the method name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arg_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab variable as method argument"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jautoUnwrap", "jinvoke_db"]},"jinvoke_db": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jinvoke_db"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Invoke a method of a Java object in using Java direct buffers"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "ret = jinvoke_db(object, methodName [, varName_1 [, varName_2...]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass or a Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "methodName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the method name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varName_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving a Scilab variable name as argument"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jinvoke"},"jnewInstance": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jnewInstance"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a new instance of a Java class"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "obj = jnewInstance(class [, arg_1 [, arg_2... ]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "class"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JClass or a string containing the class name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "arg_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab data or a mlist typed _JObj"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["new", "jimport"]},"jnull": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jnull"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The Scilab version of the Java null object."},"string": []},"synopsis": [],"varlist": [],"seealso": []},"jremove": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jremove"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove a Java Object on the Java side"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["jremove()", "jremove(varName_1, varName_2, ...)", "jremove varName_1  varName_2 ...", "jremove(object_1 , object_2, ...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "varName_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the variable name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass."},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jexists"},"jsetfield": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jsetfield"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Set the field of a Java object"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "jsetfield(object, fieldName, value)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "object"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj or _JClass or a Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fieldName"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string giving the field name"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "value"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab variable or mlist typed _JObj as new field value"},"string": []},"string": []}],"string": []}],"string": []},"seealso": "jgetfield"},"junwrap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "junwrap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert a Java object into a Scilab native type"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[var_1, var_2, ...] = junwrap(obj_1 [, obj_2 [, ...]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scilab variable"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["junwraprem", "jwrap", "jautoUnwrap"]},"junwraprem": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "junwraprem"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert a Java object into a Scilab native type and remove it from the Java side"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[var_1, var_2, ...] = junwraprem(obj_1 [, obj_2 [, ...]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "obj_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JObj"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Scilab variable"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["junwrap", "jwrap"]},"jvoid": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jvoid"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "For no argument functions"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"jwrap": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jwrap"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Wrap a Scilab variable into a Java one if possible"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[jw_1, jw_2, ...] = jwrap(sc_1 [, sc_2 [, sc_3 [,... ]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sc_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jw_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Java wrapping of the corresponding Scilab variable"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jautoTranspose", "jwrapinfloat", "jwrapinchar", "junwrap"]},"jwrapinchar": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jwrapinchar"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Wrap Scilab uint16 matrix into Java char multiarray."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[jw_1, jw_2, ...] = jwrapinchar(sc_1 [, sc_2 [, sc_3 [,... ]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sc_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jw_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Java wrapping in a char of the corresponding Scilab variable"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jwrap", "jwrapinfloat", "junwrap"]},"jwrapinfloat": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "jwrapinfloat"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Wrap Scilab double matrix into Java float multiarray."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[jw_1, jw_2, ...] = jwrapinfloat(sc_1 [, sc_2 [, sc_3 [,... ]]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "sc_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab variable"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jw_i"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Java wrapping in a float of the corresponding Scilab variable"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jwrap", "jwrapinchar", "junwrap"]},"new": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "new"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a new instance of a Java class"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "class.new([arg1, [, arg2, ...]])"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "class"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A mlist typed _JClass"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "argi"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab data or a mlist typed _JObj"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["jnewInstance", "jimport"]},"compile_and_run_javasci_v2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Compile and run with javasci v2"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to compile a Java application using Javasci v2"},"string": []},"synopsis": [],"varlist": [],"seealso": ["remote", "javasci", "javasci_faq_v2"]},"javasci": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "javasci"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Call Scilab engine from a Java application"},"string": []},"synopsis": [],"varlist": [],"seealso": ["remote", "compile_and_run_javasci_v2", "javasci_faq_v2"]},"javasci_faq_v2": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "javasci FAQ"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "The frequently asked questions for Javasci v2"},"string": []},"synopsis": [],"varlist": [],"seealso": ["remote", "javasci", "compile_and_run_javasci_v2"]},"javasci_v1_limitations": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "javasci v1 limitations"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Why javasci v1 is now deprecated ?"},"string": []},"synopsis": [],"varlist": [],"seealso": ["remote", "compile_and_run_javasci_v2", "javasci_faq_v2"]},"javasci_step_by_step": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "javasci - Step by step"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "How to write an application based on javasci v2"},"string": []},"synopsis": [],"varlist": [],"seealso": []},"preferences": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "preferences"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open the Scilab Preferences window"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "preferences()"},"varlist": [],"seealso": ["xmlGetValues", "xmlSetValues", "ieee", "format", "lines", "mode", "funcprot", "setdefaultlanguage", "setlookandfeel", "printsetupbox", "recursionlimit", "odeoptions", "csvDefault", "xlfont", "startup", "atomsGetConfig"]},"prefs_SciNotes": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "SciNotes preferences"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "SciNotes general preferences"},"string": []},"synopsis": [],"varlist": [],"seealso": ["scinotes", "editor", "edit"]},"covMerge": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "covMerge"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Merges coverage results and exports to a file"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "covMerge(binaryFiles, binaryFile)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "binaryFiles"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a set of coverage binary files"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "binaryFile"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a binary file"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["covStart", "covStop", "covWrite"]},"covStart": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "covStart"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Instruments some macros to store runtime information on code coverage and execution time"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["covStart(macro)", "covStart([dirs names])", "covStart(lib)", "covStart(libnames)", "counters = covStart(...)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "macro"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "handle of a specific function. Example: "},{"type": "literal","children": [],"string": "covStart(members)"},{"type": "text","children": [],"string": ", not "},{"type": "literal","children": [],"string": "covStart(\"members\")"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dirs"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a column vector of strings. Directory paths to identify macros. All "},{"type": "literal","children": [],"string": ".sci"},{"type": "text","children": [],"string": " file stored in these directories and loaded within Scilab are instrumented."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "names"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a column vector of strings. Per directory name to display on the HTML output."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "lib"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "a library or a string which is a Scilab library name for instrumenting a Scilab-provided library. Can be the result of "},{"type": "literal","children": [],"string": "librarieslist()"},{"type": "text","children": [],"string": " to instrument all the currently loaded Scilab-provided libraries."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "counters"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Count of all the instrumentation points."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["covStop", "covWrite", "profileGetInfo", "profileEnable", "profileDisable"]},"covStop": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "covStop"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Removes all instrumentation data"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "covStop()"},"varlist": [],"seealso": ["covStart", "covWrite"]},"covWrite": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "covWrite"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Exports runtime performance results to HTML and binary files"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["covWrite(\"html\", dir)", "covWrite(\"binary\", binaryFile)", "covWrite(\"html\", binaryFile, dir)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"html\""},{"type": "listitem","children": [{"type": "text","children": [],"string": "exports the performance results as HTML files. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "\"binary\""},{"type": "listitem","children": [{"type": "text","children": [],"string": "stores the performance results as binary, for later use. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "dir"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Path of the output directory for HTML files. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "binaryFile"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Path and filename of the binary file. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["covStart", "covStop", "covMerge"]},"profile": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "profile"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "General information about instrumentation capabilities"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["profileEnable(function)", "profileDisable(function)", "prof = profileGetInfo()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "function"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "prof"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "The execution information of "},{"type": "literal","children": [],"string": "function"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["profileEnable", "profileDisable", "profileGetInfo"]},"profileDisable": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "profileDisable"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Remove instrumentation from a function, a library or remove all instrumentation"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["profileDisable()", "profileDisable(function)", "profileDisable(library)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "function"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "library"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab library."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["profile", "profileDisable", "profileGetInfo"]},"profileEnable": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "profileEnable"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Add instrumentation to a function, a library or all available functions"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["profileEnable(function)", "profileEnable(library)", "profileEnable()"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "function"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab function."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "library"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A Scilab library."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["profile", "profileDisable", "profileGetInfo"]},"profileGetInfo": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "profileGetInfo"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retrieve instrumentation information as a Scilab value"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "prof = profileGetInfo()"},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "prof"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A Scilab "},{"type": "literal","children": [],"string": "ProfilerStatistics"},{"type": "text","children": [],"string": " tlist with fields : "},{"type": "text","children": [],"string": " containing functions description, "},{"type": "text","children": [],"string": " containing functions runtime statistics and "},{"type": "text","children": [],"string": " containing line coverage per function."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["profile", "profileEnable", "profileDisable"]},"codechecking_criteria": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "Scilab code-checking criteria"},"string": []},"refpurpose": [],"synopsis": [],"varlist": [],"seealso": ["slint", "debug", "covStart", "test_run"]},"slint": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "slint"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Checks the Scilab code of given macros against a set of criteria"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["slint(files)", "slint(files, conf, print)", "slint(files, resFilename)", "slint(files, conf, resFilename)", "out = slint(files)", "out = slint(files, conf)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "files"},{"type": "listitem","children": [{"type": "text","children": [],"string": "matrix of strings: the "},{"type": "literal","children": [],"string": ".sci"},{"type": "text","children": [],"string": " files or the directories to analyze. "},{"type": "literal","children": [],"string": ".sce"},{"type": "text","children": [],"string": " or other types of input files are ignored."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "conf"},{"type": "listitem","children": [{"type": "text","children": [],"string": "a string: the name of the configuration file (by default it's "},{"type": "literal","children": [],"string": "SCIHOME/slint.xml"},{"type": "text","children": [],"string": ")."}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "resFilename"},{"type": "listitem","children": {"type": "text","children": [],"string": "a string: the path + name of the file of XML-formated results."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "print"},{"type": "listitem","children": {"type": "text","children": [],"string": "a boolean: if true the result is printed else the result is a struct."},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "out"},{"type": "listitem","children": {"type": "text","children": [],"string": "a struct (if print is false)."},"string": []}],"string": []}],"string": []},"seealso": ["codechecking_criteria", "debug", "covStart", "test_run", "edit"]},"fromJSON": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "fromJSON"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert JSON to scilab variable."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = fromJSON(jsonData)", "result = fromJSON(jsonFilename, \"file\")"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jsonData"},{"type": "listitem","children": [{"type": "text","children": [],"string": "A string containing JSON data. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "jsonFilename"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Path and name of the file containing input JSON data. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": [{"type": "text","children": [],"string": "If the string is a correct JSON, result contain the scilab variable. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["http_post", "http_put", "http_patch", "http_delete", "http_upload", "toJSON", "http_get"]},"http_delete": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "http_delete"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "HTTP DELETE request."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[result, status, headers] = http_delete(url)", "[result, status, headers] = http_delete(url, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the server address following by the optional port, the route of the request and query datas. syntax: \"address:port/route?queryfield=querydata\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name: value\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cookies"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name=value\""},{"type": "text","children": [],"string": ". This parameter is used to send custom cookies regardless of cookie preferences. Those cookies are sent in addition to stored cookies."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cert"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option determines whether Scilab verifies the authenticity of the peer's certificate. If "},{"type": "literal","children": [],"string": "none"},{"type": "text","children": [],"string": " is given, no verification is performed. "},{"type": "warning","children": {"type": "text","children": [],"string": "Disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it. Disabling verification makes the communication insecure. Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "follow"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is false. Set "},{"type": "literal","children": [],"string": "follow=%t"},{"type": "text","children": [],"string": " to follow eventual redirections."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Username and password can be specified for the websites which required authentication."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The syntax is "},{"type": "literal","children": [],"string": "auth=\"username:password\""}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option displays information in the Scilab console to diagnose potential network issues.  It is disabled by default, set "},{"type": "literal","children": [],"string": "verbose=%t"},{"type": "text","children": [],"string": " to display the in-progress log."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Set the maximum time in seconds that you allow the request to take. Millseconds can be set by using a floating point value.  ie: 0.5 will set a timeout of 500 ms. When the timeout is reached, the function returns an error."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Result is a string which contains the server answer or a Scilab variable if the answer is in JSON format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "HTTP response code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "struct: HTTP headers of the request result. "},{"type": "warning","children": [{"type": "text","children": [],"string": "When the optional argument "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": ", all headers are returned in a list that contains one struct per request made to follow redirections."}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["http_post", "http_put", "http_patch", "http_get", "http_upload", "toJSON", "fromJSON"]},"http_get": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "http_get"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "HTTP GET request."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[result, status, headers] = http_get(url)", "[result, status, headers] = http_get(url, <opt_args>)", "[result, status, headers] = http_get(url, filename)", "[result, status, headers] = http_get(url, filename, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the server address following by the optional port, the route of the request and query datas. syntax: \"address:port/route?queryfield=querydata\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If this optional argument is given, the result will be written in the file. Can be used to download a file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name: value\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cookies"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name=value\""},{"type": "text","children": [],"string": ". This parameter is used to send custom cookies regardless of cookie preferences. Those cookies are sent in addition to stored cookies."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cert"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option determines whether Scilab verifies the authenticity of the peer's certificate. If "},{"type": "literal","children": [],"string": "none"},{"type": "text","children": [],"string": " is given, no verification is performed. "},{"type": "warning","children": {"type": "text","children": [],"string": "Disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it. Disabling verification makes the communication insecure. Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "follow"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is false. Set "},{"type": "literal","children": [],"string": "follow=%t"},{"type": "text","children": [],"string": " to follow eventual redirections."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Username and password can be specified for the websites which required authentication."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The syntax is "},{"type": "literal","children": [],"string": "auth=\"username:password\""}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option displays information in the Scilab console to diagnose potential network issues.  It is disabled by default, set "},{"type": "literal","children": [],"string": "verbose=%t"},{"type": "text","children": [],"string": " to display the in-progress log."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Set the maximum time in seconds that you allow the request to take. Millseconds can be set by using a floating point value.  ie: 0.5 will set a timeout of 500 ms. When the timeout is reached, the function returns an error."},"string": []},"string": []}],"string": []}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If a filename is given, result contains the path of the file. If not, result is a string which contain the server answer or a Scilab variable if the answer is in JSON format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "HTTP response code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "struct: HTTP headers of the request result. "},{"type": "warning","children": [{"type": "text","children": [],"string": "When the optional argument "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": ", all headers are returned in a list that contains one struct per request made to follow redirections."}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["http_post", "http_put", "http_patch", "http_delete", "http_upload", "toJSON", "fromJSON"]},"http_patch": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "http_patch"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "HTTP PATCH request."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[result, status, headers] = http_patch(url)", "[result, status, headers] = http_patch(url, data)", "[result, status, headers] = http_patch(url, data, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the server address following by the optional port, the route of the request and query datas. syntax: \"address:port/route?queryfield=querydata\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This argument represent data sent by the request. Can be a scilab variable which will be converted into JSON format if possible or sent as a string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "this represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name: value\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cookies"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name=value\""},{"type": "text","children": [],"string": ". This parameter is used to send custom cookies regardless of cookie preferences. Those cookies are sent in addition to stored cookies."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cert"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option determines whether Scilab verifies the authenticity of the peer's certificate. If "},{"type": "literal","children": [],"string": "none"},{"type": "text","children": [],"string": " is given, no verification is performed. "},{"type": "warning","children": {"type": "text","children": [],"string": "Disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it. Disabling verification makes the communication insecure. Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "follow"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is false. Set "},{"type": "literal","children": [],"string": "follow=%t"},{"type": "text","children": [],"string": " to follow eventual redirections."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Username and password can be specified for the websites which required authentication."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The syntax is "},{"type": "literal","children": [],"string": "auth=\"username:password\""}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option displays information in the Scilab console to diagnose potential network issues.  It is disabled by default, set "},{"type": "literal","children": [],"string": "verbose=%t"},{"type": "text","children": [],"string": " to display the in-progress log."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Set the maximum time in seconds that you allow the request to take. Millseconds can be set by using a floating point value.  ie: 0.5 will set a timeout of 500 ms. When the timeout is reached, the function returns an error."},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This option determines the format of data sent. Only the JSON format is supported. Value can be \"json\" or \"JSON\"."},"string": []},"string": []}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Result is a string which contain the server answer or a Scilab variable if the answer is in JSON format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "HTTP response code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "struct: HTTP headers of the request result. "},{"type": "warning","children": [{"type": "text","children": [],"string": "When the optional argument "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": ", all headers are returned in a list that contains one struct per request made to follow redirections."}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["http_get", "http_put", "http_post", "http_delete", "http_upload", "toJSON", "fromJSON"]},"http_post": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "http_post"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "HTTP POST request."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[result, status, headers] = http_post(url)", "[result, status, headers] = http_post(url, data)", "[result, status, headers] = http_post(url, data, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the server address following by the optional port, the route of the request and query datas. syntax: \"address:port/route?queryfield=querydata\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This argument represent data sent by the request. Can be a scilab variable which will be converted into JSON format if possible or sent as a string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name: value\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cookies"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name=value\""},{"type": "text","children": [],"string": ". This parameter is used to send custom cookies regardless of cookie preferences. Those cookies are sent in addition to stored cookies."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cert"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option determines whether Scilab verifies the authenticity of the peer's certificate. If "},{"type": "literal","children": [],"string": "none"},{"type": "text","children": [],"string": " is given, no verification is performed. "},{"type": "warning","children": {"type": "text","children": [],"string": "Disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it. Disabling verification makes the communication insecure. Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "follow"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is false. Set "},{"type": "literal","children": [],"string": "follow=%t"},{"type": "text","children": [],"string": " to follow eventual redirections."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Username and password can be specified for the websites which required authentication."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The syntax is "},{"type": "literal","children": [],"string": "auth=\"username:password\""}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option displays information in the Scilab console to diagnose potential network issues.  It is disabled by default, set "},{"type": "literal","children": [],"string": "verbose=%t"},{"type": "text","children": [],"string": " to display the in-progress log."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Set the maximum time in seconds that you allow the request to take. Millseconds can be set by using a floating point value.  ie: 0.5 will set a timeout of 500 ms. When the timeout is reached, the function returns an error."},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This option determines the format of data sent. Only the JSON format is supported. Value can be \"json\" or \"JSON\"."},"string": []},"string": []}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Result is a string which contain the server answer or a Scilab variable if the answer is in JSON format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "HTTP response code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "struct: HTTP headers of the request result. "},{"type": "warning","children": [{"type": "text","children": [],"string": "When the optional argument "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": ", all headers are returned in a list that contains one struct per request made to follow redirections."}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["http_get", "http_put", "http_patch", "http_delete", "http_upload", "toJSON", "fromJSON"]},"http_put": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "http_put"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "HTTP PUT request."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[result, status, headers] = http_put(url)", "[result, status, headers] = http_put(url, data)", "[result, status, headers] = http_put(url, data, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the server address following by the optional port, the route of the request and query datas. syntax: \"address:port/route?queryfield=querydata\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This argument represent data sent by the request. Can be a scilab variable which will be converted into JSON format if possible or sent as a string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name: value\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cookies"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name=value\""},{"type": "text","children": [],"string": ". This parameter is used to send custom cookies regardless of cookie preferences. Those cookies are sent in addition to stored cookies."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cert"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option determines whether Scilab verifies the authenticity of the peer's certificate. If "},{"type": "literal","children": [],"string": "none"},{"type": "text","children": [],"string": " is given, no verification is performed. "},{"type": "warning","children": {"type": "text","children": [],"string": "Disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it. Disabling verification makes the communication insecure. Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "follow"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is false. Set "},{"type": "literal","children": [],"string": "follow=%t"},{"type": "text","children": [],"string": " to follow eventual redirections."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Username and password can be specified for the websites which required authentication."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The syntax is "},{"type": "literal","children": [],"string": "auth=\"username:password\""}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option displays information in the Scilab console to diagnose potential network issues.  It is disabled by default, set "},{"type": "literal","children": [],"string": "verbose=%t"},{"type": "text","children": [],"string": " to display the in-progress log."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Set the maximum time in seconds that you allow the request to take. Millseconds can be set by using a floating point value.  ie: 0.5 will set a timeout of 500 ms. When the timeout is reached, the function returns an error."},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "format"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This option determines the format of data sent. Only the JSON format is supported. Value can be \"json\" or \"JSON\"."},"string": []},"string": []}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Result is a string which contain the server answer or a Scilab variable if the answer is in JSON format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "HTTP response code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "struct: HTTP headers of the request result. "},{"type": "warning","children": [{"type": "text","children": [],"string": "When the optional argument "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": ", all headers are returned in a list that contains one struct per request made to follow redirections."}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["http_get", "http_post", "http_patch", "http_delete", "http_upload", "toJSON", "fromJSON"]},"http_upload": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "http_upload"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "HTTP POST or PUT request to upload file(s) on server."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["[result, status, headers] = http_upload(url, filename, variablename)", "[result, status, headers] = http_upload(url, filename, variablename, data)", "[result, status, headers] = http_upload(url, filename, variablename, data, <opt_args>)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "url"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "A string containing the server address following by the optional port, the route of the request and query datas. syntax: \"address:port/route?queryfield=querydata\""},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "A string or a matrix of string which contains local filename(s) to upload on server. The file on the server will have the same name as the local one."},"string": []},{"type": "para","children": {"type": "text","children": [],"string": "A structure or a structure array with fields \"local\" and \"remote\". The field \"local\" contains the local filename to upload on server. The field \"remote\" contains a string used to set the filename on the server. When \"remote\" is an empty string, the local filename is used on the server."},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "variablename"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "A string which contains the file variable name expected by the server. This value must be given by the documentation of the API you are using. When a scalar string is given, the same variable name is used for all uploaded files. A matrix of string of the same size than "},{"type": "literal","children": [],"string": "filename"},{"type": "text","children": [],"string": " argument can be given to set a specific variable name by file to upload."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "data"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "This argument represent data sent by the request. Can be a scilab variable which will be converted into JSON format if possible or sent as a string."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "<opt_args>"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "This represents a sequence of statements "},{"type": "literal","children": [],"string": "key1=value1, key2=value2, ..."},{"type": "text","children": [],"string": " where "},{"type": "literal","children": [],"string": "key1"},{"type": "text","children": [],"string": ", "},{"type": "literal","children": [],"string": "key2"},{"type": "text","children": [],"string": ", ... can be one of the following:"}],"string": []},{"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name: value\""},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cookies"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Strings defined as "},{"type": "literal","children": [],"string": "\"name=value\""},{"type": "text","children": [],"string": ". This parameter is used to send custom cookies regardless of cookie preferences. Those cookies are sent in addition to stored cookies."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "cert"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option determines whether Scilab verifies the authenticity of the peer's certificate. If "},{"type": "literal","children": [],"string": "none"},{"type": "text","children": [],"string": " is given, no verification is performed. "},{"type": "warning","children": {"type": "text","children": [],"string": "Disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it. Disabling verification makes the communication insecure. Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point."},"string": []}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "follow"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "By default, "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is false. Set "},{"type": "literal","children": [],"string": "follow=%t"},{"type": "text","children": [],"string": " to follow eventual redirections."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "auth"},{"type": "listitem","children": [{"type": "para","children": {"type": "text","children": [],"string": "Username and password can be specified for the websites which required authentication."},"string": []},{"type": "para","children": [{"type": "text","children": [],"string": "The syntax is "},{"type": "literal","children": [],"string": "auth=\"username:password\""}],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "verbose"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "This option displays information in the Scilab console to diagnose potential network issues.  It is disabled by default, set "},{"type": "literal","children": [],"string": "verbose=%t"},{"type": "text","children": [],"string": " to display the in-progress log."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "timeout"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Set the maximum time in seconds that you allow the request to take. Millseconds can be set by using a floating point value.  ie: 0.5 will set a timeout of 500 ms. When the timeout is reached, the function returns an error."},"string": []},"string": []}],"string": []}],"string": []},{"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "method"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "By default, this function send request a POST request. Using this argument it is possible to use a PUT request, by passing method=\"PUT\"."},"string": []},"string": []}],"string": []},"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Result is a string which contain the server answer or a Scilab variable if the answer is in JSON format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "HTTP response code."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "headers"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "struct: HTTP headers of the request result. "},{"type": "warning","children": [{"type": "text","children": [],"string": "When the optional argument "},{"type": "literal","children": [],"string": "follow"},{"type": "text","children": [],"string": " is set to "},{"type": "literal","children": [],"string": "%t"},{"type": "text","children": [],"string": ", all headers are returned in a list that contains one struct per request made to follow redirections."}],"string": []}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["http_get", "http_put", "http_patch", "http_delete", "http_upload", "toJSON", "fromJSON"]},"toJSON": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "toJSON"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Convert scilab variable to JSON."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["result = toJSON(var)", "result = toJSON(var, indent)", "toJSON(var, filename)", "toJSON(var, filename, indent)", "toJSON(var, indent, filename)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "var"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "The Scilab variable to convert in JSON format."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "filename"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If a file name is given, the conversion is written in this file."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "indent"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "If this argument is given, the result is indented. The value is the number of spaces."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "result"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Result is a string which contain the data converted to JSON. If a filename is given, no result is returned."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["http_post", "http_put", "http_patch", "http_delete", "http_upload", "fromJSON", "http_get"]},"url_decode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "url_decode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Decode encoded URL strings using CURL."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "decoded = url_decode(encodedStrings)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "encodedStrings"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Any single string or regular array of strings. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "decoded"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of strings. Its sizes match "},{"type": "varname","children": [],"string": "encodedStrings"},{"type": "text","children": [],"string": " ones. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["url_encode", "http_get", "url_split", "hex2dec", "ascii"]},"url_encode": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "url_encode"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Encode URL strings using CURL."},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "encoded = url_encode(Strings)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "Strings"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Any single string or regular array of strings that needed to be encoded before using "},{"type": "link","children": [],"string": "http_"},{"type": "text","children": [],"string": " functions. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "encoded"},{"type": "listitem","children": [{"type": "text","children": [],"string": "Array of strings. Its sizes match "},{"type": "varname","children": [],"string": "Strings"},{"type": "text","children": [],"string": " ones. "},{"type": "para","children": [],"string": []}],"string": []}],"string": []}],"string": []},"seealso": ["url_decode", "http_get", "url_split", "ascii", "dec2hex"]},"url_split": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "url_split"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Split an URL (HTTP, HTTPS, FTP...) "},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "[proto, server, path, query, username, port, fragment] = url_split(URL);"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "URL"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "String: An URL. Supported and tested: HTTP, HTTPS, FTP (IPv4 and IPv6)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "proto"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String: the protocol (ex: "},{"type": "emphasis","children": [],"string": "http, ftp, etc"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "server"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String: the server (ex: "},{"type": "emphasis","children": [],"string": "www.scilab.org"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "path"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String: the path (ex: "},{"type": "emphasis","children": [],"string": "/products/scilab"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "query"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String: query (ex: "},{"type": "emphasis","children": [],"string": "?SearchText=plot3d"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "username"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "String: username (ex: "},{"type": "emphasis","children": [],"string": "username:pass"},{"type": "text","children": [],"string": ")"}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "port"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "int: port (ex: "},{"type": "emphasis","children": [],"string": "80"},{"type": "text","children": [],"string": ")"}],"string": []},{"type": "para","children": [],"string": []}],"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "fragment"},{"type": "listitem","children": [{"type": "para","children": [{"type": "text","children": [],"string": "String: fragment (ex: "},{"type": "emphasis","children": [],"string": "#chapter1"},{"type": "text","children": [],"string": ")"}],"string": []},{"type": "para","children": {"type": "text","children": [],"string": "The fragment is also called anchor and it is used to create a bookmark inside an HTML document."},"string": []}],"string": []}],"string": []}],"string": []},"seealso": "http_get"},"consolebox": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "consolebox"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "shows or hides the MS Windows terminal running the Scilab session"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["consolebox on", "consolebox off", "status = consolebox(\"toggle\")", "status = consolebox()"]},"varlist": {"type": "variablelist","children": {"type": "varlistentry","children": [{"type": "term","children": [],"string": "status"},{"type": "listitem","children": {"type": "para","children": [{"type": "varname","children": [],"string": "\"on\" | \"off\""},{"type": "text","children": [],"string": " : visibility of the OS window after the call to "},{"type": "function","children": [],"string": "consolebox"},{"type": "text","children": [],"string": "."}],"string": []},"string": []}],"string": []},"string": []},"seealso": ["host", "console", "tbx_builder_help"]},"createGUID": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "createGUID"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Creates a GUID (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = createGUID(number_of_GUID)"},"varlist": [],"seealso": []},"dos": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "dos"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "executes some DOS instructions (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["bOK = dos(commands)", "[output, bOK] = dos(commands)", "[output, bOK, exitcode] = dos(commands)", ".. = dos(commands, '-echo')"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "commands"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Single text containing instructions sent to the MS Windows cmd.exe command interpreter."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "'-echo'"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Forces the display of results (Windows standard output and error message) in the Scilab console."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bOK"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single boolean: "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " if "},{"type": "varname","children": [],"string": "commands"},{"type": "text","children": [],"string": " has been executed without cmd.exe error, "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "output"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Column of text: standard output and standard errors yielded by the MS Windows interpreter."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "exitcode"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Integer exit code returned by cmd.exe after completion."},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["setenv", "host", "unix_g", "powershell"]},"findfileassociation": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "findfileassociation"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Searches for and retrieves a file association-related string from the registry (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "findfileassociation('A file name extension, such as .txt')"},"varlist": [],"seealso": "winopen"},"getsystemmetrics": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "getsystemmetrics"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Retrieves the specified system metric or system configuration setting (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "res = getsystemmetrics(key)"},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "res"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a value (integer)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "key"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a string (see below)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": ["root_properties", "system_getproperty", "getlookandfeel", "printsetupbox", "preferences", "usecanvas"]},"istssession": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "istssession"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determines if scilab is launched from a ms terminal service session (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "istssession()"},"varlist": [],"seealso": ["fromc", "fromjava", "getscilabmode"]},"mcisendstring": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "mcisendstring"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "sends a command string to an MCI device (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["mcisendstring(mcistring)", "bOK=mcisendstring(mcistring)", "[bOK,CodeError]=mcisendstring(mcistring)", "[bOK,CodeError,StringError]=mcisendstring(mcistring)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "mcistring"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "a command string to send to an MCI device"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bOK"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns %T or %F"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "CodeError"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns error code (0 --> if bOK == %T)"},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "StringError"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "returns MCI interpreter message ('OK' --> if bOK == %T)"},"string": []},"string": []}],"string": []}],"string": []},"seealso": []},"powershell": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "powershell"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "executes a command with the Windows powershell interpreter (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["output = powershell(command)", "[output,bOK] = powershell(command)"]},"varlist": {"type": "variablelist","children": [{"type": "varlistentry","children": [{"type": "term","children": [],"string": "command"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Single text containing instructions sent to the MS Windows powershell.exe command interpreter."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "output"},{"type": "listitem","children": {"type": "para","children": {"type": "text","children": [],"string": "Column of text: output (and error message) yielded and normally displayed by Powershell on its screen."},"string": []},"string": []}],"string": []},{"type": "varlistentry","children": [{"type": "term","children": [],"string": "bOK"},{"type": "listitem","children": {"type": "para","children": [{"type": "text","children": [],"string": "Single boolean: "},{"type": "literal","children": [],"string": "%T"},{"type": "text","children": [],"string": " if "},{"type": "varname","children": [],"string": "command"},{"type": "text","children": [],"string": " has been executed without error, "},{"type": "literal","children": [],"string": "%F"},{"type": "text","children": [],"string": " otherwise."}],"string": []},"string": []}],"string": []}],"string": []},"seealso": ["host", "dos", "unix_g"]},"win64": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "win64"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Determine whether Windows x64 version of Scilab (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "win64()"},"varlist": [],"seealso": "getos"},"winopen": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "winopen"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Open file in appropriate application (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": "winopen('filename')"},"varlist": [],"seealso": "host"},"winqueryreg": {"refname": {"type": "refname","children": {"type": "text","children": [],"string": "winqueryreg"},"string": []},"refpurpose": {"type": "refpurpose","children": {"type": "text","children": [],"string": "Get item from Microsoft Windows registry (Windows only)"},"string": []},"synopsis": {"type": "synopsis","children": [],"string": ["value = winqueryreg('name', 'rootkey','subkey')", "value = winqueryreg('key', 'rootkey','subkey')", "value = winqueryreg('rootkey', 'subkey','valname')", "value = winqueryreg('rootkey','subkey')"]},"varlist": [],"seealso": []}}